name: HumanEval_54_same_chars
language: rkt
prompt: "#lang racket\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
  \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\"\
  )\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
  \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
  )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f\n(define\
  \ (same_chars s0 s1)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate same_chars))\n\
  \    (check-equal? (candidate \"eabcdzzzz\" \"dddzzzzzzzddeddabc\") #t)\n    (check-equal?\
  \ (candidate \"abcd\" \"dddddddabc\") #t)\n    (check-equal? (candidate \"dddddddabc\"\
  \ \"abcd\") #t)\n    (check-equal? (candidate \"eabcd\" \"dddddddabc\") #f)\n  \
  \  (check-equal? (candidate \"abcd\" \"dddddddabcf\") #f)\n    (check-equal? (candidate\
  \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\") #f)\n    (check-equal? (candidate \"aabb\"\
  \ \"aaccc\") #f)\n))\n\n(test-humaneval)"
completions: ["  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? (substring s0 0 s1-len)\n                (substring\
    \ s1 0 s1-len))))))\n\n;; Check if two words have the same characters, ignoring\
    \ case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"\
    dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n        (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n        (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n        (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n        (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n        (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n        (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n        (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n        (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n        (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n        (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       \
    \ (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n\
    \        (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len\
    \ 13))\n        (string-ref s1 (modulo s", "  (let ((s0-len (string-length s0))\n\
    \        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref s1\
    \ 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 s1-len)\
    \ (string-ref s1 s1-len))\n    (= (string-ref s0-len s1) (string-ref s1-len s1))\n\
    \    (= (string-ref s0-len s1-len) (string-ref s1-len s1-len))))\n\n;; Check if\
    \ two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len\
    \ 1)\n        (not (equal? s0 (string-prefix s1 0 s0-len))))\n      ((< s1-len\
    \ 1)\n        (not (equal? s1 (string-prefix s0 0 s1-len))))\n      (else\n  \
    \      (not (equal? s0 s1))))))\n\n;; Check if two words have the same characters,\
    \ ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0_len (length s0))\n         (s1_len (length s1)))\n\
    \    (cond\n      ((= s0_len s1_len)\n        (equal? s0 s1))\n      (else\n \
    \       (not (equal? s0_len s1_len))))))\n\n;; Check if two words have the same\
    \ characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n        (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n        (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n        (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n        (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n        (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n        (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n        (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n        (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n        (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n        (string-ref s1 (modulo s1-len 10)))\n    (=\
    \ (string-ref s0 (modulo s0-len 11))\n        (string-ref s1 (modulo s1-len 11)))\n\
    \    (= (string-ref s0 (modulo s0-len 12))\n        (string-ref s1 (modulo s1-len\
    \ 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n        (string-ref s1 (modulo\
    \ s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n\
    \    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n      (else\n\
    \        (not (string=? (substring s0 0 s1-len)\n                (substring s1\
    \ 0 s1-len))))))\n\n;; Check if two words have the same characters, ignoring case.\n\
    ;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len\
    \ 1)\n        (not (equal? s0 (substring s0 0 s1-len))))\n      ((< s1-len 1)\n\
    \        (not (equal? s1 (substring s1 0 s0-len))))\n      (else\n        (not\
    \ (equal? s0 (substring s0 0 s1-len)))))\n    ))\n\n;; Check if two words have\
    \ the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string-equal? s0 s1))\n\
    \      (else\n        (not (string-equal? (substring s0 0 s1-len)\n          \
    \      (substring s1 0 s1-len)))))))\n\n;; Check if two words have the same characters,\
    \ ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (= s1-len 0))\n      ((= s0-len\
    \ 1)\n        (= s1-len 1)\n        (= (string-ref s0 0) (string-ref s1 0)))\n\
    \      ((< s0-len 1)\n        (< s1-len 1)\n        (= (string-ref s0 0) (string-ref\
    \ s1 0))\n        (= (string-ref s0 1) (string-ref s1 1))\n        (= (string-ref\
    \ s0 2) (string-ref s1 2))\n        (= (string-ref s0 3) (string-ref s1 3))\n\
    \        (= (string-ref s0 4) (string-ref s1 4))\n        (= (string-ref s0 5)\
    \ (string-ref s1 5))\n        (= (string-ref s0 6) (string-ref s1 6))\n      \
    \  (= (string-ref s0 7) (string-ref s1 7))\n        (= (string-ref s0 8) (string-ref\
    \ s1 8))\n        (= (string-ref s0 9) (string-ref s1 9))\n        (= (string-ref\
    \ s0 10) (string-ref s1 10))\n        (= (string-ref s0 11) (string-ref s1 11))\n\
    \        (= (string-ref s0 12) (string-ref s1 12))\n        (= (string-ref s0\
    \ 13) (string-ref s1 13))\n        (= (string-ref s0 14) (string-ref s1 14))\n\
    \        (= (string-ref s0 15) (string-ref s1 15))))\n      (else\n        (not\
    \ (and (string-ci=? s0-len 1)\n                 (string-ci=? s1-len 1)\n     \
    \            (string-ci=? (string-ref s0 0) (string-ref s1 0))\n             \
    \    (string-ci=? (string-ref s0 1) (string-", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? (substring s0 0 s1-len)\n                (substring\
    \ s1 0 s1-len))))))\n\n;; Check if two words have the same characters.\n;; >>>\
    \ (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string-ref s0 0 s1-len))\n\
    \      (else\n        (not (string-ref s0 0 s1-len))))))\n\n;; Check if two words\
    \ have the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string=? s0 s1))\n      (else\n        (not (string=? (substring s0\
    \ 0 s1-len)\n                (substring s1 0 s1-len))))))\n\n;; Check if two words\
    \ have the same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f",
  "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n   \
    \ (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string-ref s0 0 s1-len))\n      (else\n        (not (string-ref s0 0\
    \ s1-len)))))\n)\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"\
    dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>>\
    \ (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"\
    dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (= s1-len 0))\n      ((= s0-len\
    \ 1)\n        (= s1-len 1))\n      ((= s0-len 2)\n        (= s1-len 2))\n    \
    \  ((= s0-len 3)\n        (= s1-len 3))\n      ((= s0-len 4)\n        (= s1-len\
    \ 4))\n      ((= s0-len 5)\n        (= s1-len 5))\n      ((= s0-len 6)\n     \
    \   (= s1-len 6))\n      ((= s0-len 7)\n        (= s1-len 7))\n      ((= s0-len\
    \ 8)\n        (= s1-len 8))\n      ((= s0-len 9)\n        (= s1-len 9))\n    \
    \  ((= s0-len 10)\n        (= s1-len 10))\n      ((= s0-len 11)\n        (= s1-len\
    \ 11))\n      ((= s0-len 12)\n        (= s1-len 12))\n      ((= s0-len 13)\n \
    \       (= s1-len 13))\n      ((= s0-len 14)\n        (= s1-len 14))\n      ((=\
    \ s0-len 15)\n        (= s1-len 15))\n      ((= s0-len 16)\n        (= s1-len\
    \ 16))\n      ((= s0-len 17)\n        (= s1-len 17))\n      ((= s0-len 18)\n \
    \       (= s1-len 18))\n      ((= s0-len 19)\n        (= s1-len 19))\n      ((=\
    \ s0-len 20)\n        (= s1-len 20))\n      ((= s0-len 21)\n        (= s1-len\
    \ 21))\n      ((= s0-len 22)\n        (= s1-len 22))\n      ((= s0-len 23)\n \
    \       (= s1-len 23", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0-len s0-len) (string-ref s1-len s1-len))))\n\n;; Check if two words have the\
    \ same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0_len (length s0))\n\
    \         (s1_len (length s1)))\n    (cond\n      ((= s0_len s1_len)\n       \
    \ (equal? s0 s1))\n      (else\n        (not (equal? s0_len s1_len))))))\n\n;;\
    \ Check if two words have the same characters, ignoring case.\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\"\
    \ \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  ((< s0-len s1-len)\n        (string-ci=? s0 s1))\n      (else\n        #f)))\n\
    )\n\n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0_len (length s0))\n        (s1_len (length s1)))\n    (cond\n     \
    \ ((= s0_len s1_len)\n        (equal? s0 s1))\n      ((< s0_len s1_len)\n    \
    \    (not (equal? (substring s0 0 s0_len)\n                (substring s1 0 s1_len))))\n\
    \      (else\n        (not (equal? (substring s0 0 s0_len)\n                (substring\
    \ s1 0 s1_len)))))))\n\n;; Check if two words have the same characters, ignoring\
    \ case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"\
    dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n        (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n        (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n        (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n        (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n        (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n        (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n        (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n        (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n        (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n        (string-ref s1 (modulo s1-len 10)))\n    (=\
    \ (string-ref s0 (modulo s0-len 11))\n        (string-ref s1 (modulo s1-len 11)))\n\
    \    (= (string-ref s0 (modulo s0-len 12))\n        (string-ref s1 (modulo s1-len\
    \ 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n        (string-ref s1 (modulo\
    \ s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n\
    \    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0_len (length s0))\n         (s1_len (length s1)))\n\
    \    (cond\n      ((= s0_len 0)\n        #t)\n      ((= s1_len 0)\n        #t)\n\
    \      ((= s0_len 1)\n        (equal? s0 #\\space))\n      ((= s1_len 1)\n   \
    \     (equal? s1 #\\space))\n      ((< s0_len)\n        (let ((s0_chars (string-split\
    \ s0 #\" \"))\n               (s1_chars (string-split s1 #\" \")))\n         \
    \ (and\n            (= (length s0_chars) (length s1_chars))\n            (let\
    \ ((s0_chars_len (length s0_chars))\n                   (s1_chars_len (length\
    \ s1_chars)))\n              (let ((i (0))\n                     (same_chars_len\
    \ (0)))\n                (while (< i s0_chars_len)\n                  (if (same_chars_len\n\
    \                        (= (string-ref s0_chars i)\n                        \
    \     (string-ref s1_chars i)))\n                    (setf same_chars_len (1 +\
    \ same_chars_len))\n                    (setf i (1 + i)))\n                  (setf\
    \ i s0_chars_len)))\n            (= same_chars_len s0_len))))))))\n\n;; Check\
    \ if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"\
    dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;;\
    \ #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"\
    eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n\
    ;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let\
    \ ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n    (= (string-ref\
    \ s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref\
    \ s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref\
    \ s1 (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (= s1-len 0))\n      ((= s0-len\
    \ 1)\n        (= s1-len 1))\n      ((= s0-len 2)\n        (= s1-len 2))\n    \
    \  ((= s0-len 3)\n        (= s1-len 3))\n      ((= s0-len 4)\n        (= s1-len\
    \ 4))\n      ((= s0-len 5)\n        (= s1-len 5))\n      ((= s0-len 6)\n     \
    \   (= s1-len 6))\n      ((= s0-len 7)\n        (= s1-len 7))\n      ((= s0-len\
    \ 8)\n        (= s1-len 8))\n      ((= s0-len 9)\n        (= s1-len 9))\n    \
    \  ((= s0-len 10)\n        (= s1-len 10))\n      ((= s0-len 11)\n        (= s1-len\
    \ 11))\n      ((= s0-len 12)\n        (= s1-len 12))\n      ((= s0-len 13)\n \
    \       (= s1-len 13))\n      ((= s0-len 14)\n        (= s1-len 14))\n      ((=\
    \ s0-len 15)\n        (= s1-len 15))\n      ((= s0-len 16)\n        (= s1-len\
    \ 16))\n      ((= s0-len 17)\n        (= s1-len 17))\n      ((= s0-len 18)\n \
    \       (= s1-len 18))\n      ((= s0-len 19)\n        (= s1-len 19))\n      ((=\
    \ s0-len 20)\n        (= s1-len 20))\n      ((= s0-len 21)\n        (= s1-len\
    \ 21))\n      ((= s0-len 22)\n        (= s1-len 22))\n      ((= s0-len 23)\n \
    \       (= s1-len 23", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 s0-len)\
    \ (string-ref s1 s1-len))\n    (= (string-ref s0-len s0-len) (string-ref s1-len\
    \ s1-len))))\n\n;; Check if two words have the same characters, ignoring case.\n\
    ;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0_len (length s0))\n         (s1_len (length s1)))\n   \
    \ (cond\n      ((= s0_len s1_len)\n        (equal? s0 s1))\n      (else\n    \
    \    (not (equal? s0_len s1_len))))))\n\n;; Check if two words have the same characters.\n\
    ;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? (substring s0 0 s1-len)\n                (substring\
    \ s1 0 s1-len))))))\n\n;; Check if two words have the same characters.\n;; >>>\
    \ (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s1-len 0))\n      ((<\
    \ s0-len 1)\n        (not (equal? (string-ref s0 0) (string-ref s1 0)))\n    \
    \    (not (equal? (string-ref s0 1) (string-ref s1 1)))\n        (not (equal?\
    \ (string-ref s0 2) (string-ref s1 2)))\n        (not (equal? (string-ref s0 3)\
    \ (string-ref s1 3)))\n        (not (equal? (string-ref s0 4) (string-ref s1 4)))\n\
    \        (not (equal? (string-ref s0 5) (string-ref s1 5)))\n        (not (equal?\
    \ (string-ref s0 6) (string-ref s1 6)))\n        (not (equal? (string-ref s0 7)\
    \ (string-ref s1 7)))\n        (not (equal? (string-ref s0 8) (string-ref s1 8)))\n\
    \        (not (equal? (string-ref s0 9) (string-ref s1 9)))\n        (not (equal?\
    \ (string-ref s0 10) (string-ref s1 10)))\n        (not (equal? (string-ref s0\
    \ 11) (string-ref s1 11)))\n        (not (equal? (string-ref s0 12) (string-ref\
    \ s1 12)))\n        (not (equal? (string-ref s0 13) (string-ref s1 13)))\n   \
    \     (not (equal? (string-ref s0 14) (string-ref s1 14)))\n        (not (equal?\
    \ (string-ref s0 15) (string-ref s1 15))))\n      (< s1-len 1)\n      (not (equal?\
    \ (string-ref s0 0) (string-ref s1 1)))))\n  #t))\n\n;; Check if two words have\
    \ the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? (substring s0 0 s1-len)\n                (substring\
    \ s1 0 s1-len))))))\n\n;; Check if two words have the same characters, ignoring\
    \ case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"\
    dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n        (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n        (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n        (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n        (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n        (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n        (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n        (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n        (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n        (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n        (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       \
    \ (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n\
    \        (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len\
    \ 13))\n        (string-ref s1 (modulo s", "  (let ((s0-len (string-length s0))\n\
    \        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n \
    \       (string=? s0 s1))\n      (else\n        (not (string=? (substring s0 0\
    \ s1-len)\n                (substring s1 0 s1-len))))))\n\n;; Check if two words\
    \ have the same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f",
  "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n   \
    \ (cond\n      ((= s0-len s1-len)\n        (string-equal? s0 s1))\n      (else\n\
    \        (not (string-equal? s0 (substring s0 0 s1-len)))))))\n\n;; Check if two\
    \ words have the same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f",
  "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n   \
    \ (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n      ((< s0-len\
    \ s1-len)\n        (string<? s0 s1))\n      ((> s0-len s1-len)\n        (string>?\
    \ s0 s1))\n      (else\n        #f)))\n)\n\n;; Check if two words have the same\
    \ characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars \"abcd\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddzzzzzzzddeddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddzzzzzzzddeddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddzzzzzzzddeddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0_len (length s0))\n\t(s1_len (length s1)))\n    (cond\n\
    \      ((= s0_len s1_len)\n       (let ((s0_chars (string-split s0 \"\"))\n\t\
    \     (s1_chars (string-split s1 \"\")))\n\t (and\n\t  (for-each (lambda (s0_char\
    \ s1_char)\n\t\t      (and\n\t\t       (= (string-ref s0_char s0_chars)\n\t\t\t\
    \ (string-ref s1_char s1_chars))\n\t\t       (= (string-ref s0_char s0_chars)\n\
    \t\t\t (string-ref s1_char s1_chars))))\n\t    (string-join \"\")\n\t   \"\")))))))\n\
    \n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string-ref s0 0 s1-len)\n        (string-ref s1 0 s0-len))\n      (else\n\
    \        #f)))\n)\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"\
    dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>>\
    \ (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"\
    dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len\
    \ 1)\n        (not (equal? s0 (substring s0 0 s1-len))))\n      ((< s1-len 1)\n\
    \        (not (equal? s1 (substring s1 0 s0-len))))\n      (else\n        (not\
    \ (equal? s0 (substring s0 0 s1-len)))))\n    ))\n\n;; Check if two words have\
    \ the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string-ref s0 0 s1-len))\n      (else\n        (not (string-ref s0 0\
    \ s1-len)))))\n)\n\n;; Check if two words have the same characters, ignoring case.\n\
    ;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len 0)\n\
    \        (= s1-len 0))\n      ((= s0-len 1)\n        (= s1-len 1))\n      ((=\
    \ s0-len 2)\n        (= s1-len 2))\n      ((= s0-len 3)\n        (= s1-len 3))\n\
    \      ((= s0-len 4)\n        (= s1-len 4))\n      ((= s0-len 5)\n        (= s1-len\
    \ 5))\n      ((= s0-len 6)\n        (= s1-len 6))\n      ((= s0-len 7)\n     \
    \   (= s1-len 7))\n      ((= s0-len 8)\n        (= s1-len 8))\n      ((= s0-len\
    \ 9)\n        (= s1-len 9))\n      ((= s0-len 10)\n        (= s1-len 10))\n  \
    \    ((= s0-len 11)\n        (= s1-len 11))\n      ((= s0-len 12)\n        (=\
    \ s1-len 12))\n      ((= s0-len 13)\n        (= s1-len 13))\n      ((= s0-len\
    \ 14)\n        (= s1-len 14))\n      ((= s0-len 15)\n        (= s1-len 15))\n\
    \      ((= s0-len 16)\n        (= s1-len 16))\n      ((= s0-len 17)\n        (=\
    \ s1-len 17))\n      ((= s0-len 18)\n        (= s1-len 18))\n      ((= s0-len\
    \ 19)\n        (= s1-len 19))\n      ((= s0-len 20)\n        (= s1-len 20))\n\
    \      ((= s0-len 21)\n        (= s1-len 21))\n      ((= s0-len 22)\n        (=\
    \ s1-len 22))\n      ((= s0-len 23)\n        (= s1-len 23", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0-len s1) (string-ref s1-len s1))\n    (= (string-ref s0-len s1-len) (string-ref\
    \ s1-len s1-len))))\n\n;; Check if two words have the same characters.\n;; >>>\
    \ (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0_len (string-length s0))\n\t(s1_len (string-length s1)))\n\
    \    (cond\n     ((= s0_len s1_len)\n      (string=? s0 s1))\n     ((< s0_len\
    \ s1_len)\n      (string<? s0 s1))\n     ((< s0_len s1_len)\n      (string<? s1\
    \ s0))\n     (else\n      #f))))\n\n;; Check if two words have the same characters,\
    \ ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0-len s1) (string-ref s1-len s1))\n    (= (string-ref s0-len s1-len) (string-ref\
    \ s1-len s1-len))))\n\n;; Check if two words have the same characters, ignoring\
    \ case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"\
    dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n        (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n        (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n        (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n        (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n        (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n        (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n        (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n        (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n        (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n        (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       \
    \ (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n\
    \        (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len\
    \ 13))\n        (string-ref s1 (modulo s", "  (let ((s0-len (string-length s0))\n\
    \        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len 0)\n      \
    \  (equal? s0 s1))\n      ((< s0-len 1)\n        (not (equal? (string-ref s0 0)\
    \ (string-ref s1 0)))\n        (not (equal? (string-ref s0 (sub1 s0-len))\n  \
    \             (string-ref s1 (sub1 s1-len))))))\n      (else\n        (not (equal?\
    \ (string-ref s0 0) (string-ref s1 0)))))\n))\n\n;; Check if two words have the\
    \ same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0_len (string-length\
    \ s0))\n         (s1_len (string-length s1)))\n    (cond\n      ((= s0_len 0)\n\
    \        (equal? s1 s0))\n      ((= s1_len 0)\n        (equal? s0 s1))\n     \
    \ ((< s0_len)\n        (let ((s0_chars (string->list s0)))\n          (let ((s1_chars\
    \ (string->list s1)))\n            (and (map (lambda (c0)\n                  \
    \     (and (member c0 s0_chars)\n                           (member c0 s1_chars)))\n\
    \                  (list 'equal))))))\n      (else\n        (let ((s0_chars (string->list\
    \ s0)))\n          (let ((s1_chars (string->list s1)))\n            (and (map\
    \ (lambda (c0)\n                       (and (member c0 s0_chars)\n           \
    \                (member c0 s1_chars)))\n                  (list 'equal)))))))))\n\
    \n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len 0)\n\
    \        (equal? s0 s1))\n      ((< s0-len 1)\n        (not (equal? s0 (substring\
    \ s0 0 s1-len))))\n      ((< s1-len 1)\n        (not (equal? s1 (substring s1\
    \ 0 s0-len))))\n      (else\n        (not (equal? s0 (substring s0 0 s1-len)))))\n\
    \    ))\n)\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"\
    dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>>\
    \ (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"\
    dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len\
    \ 1)\n        (not (equal? s0-1 s1-1))\n        (not (equal? s0-2 s1-2))\n   \
    \     (not (equal? s0-3 s1-3))\n        (not (equal? s0-4 s1-4))\n        (not\
    \ (equal? s0-5 s1-5))\n        (not (equal? s0-6 s1-6))\n        (not (equal?\
    \ s0-7 s1-7))\n        (not (equal? s0-8 s1-8))\n        (not (equal? s0-9 s1-9))\n\
    \        (not (equal? s0-10 s1-10))\n        (not (equal? s0-11 s1-11))\n    \
    \    (not (equal? s0-12 s1-12))\n        (not (equal? s0-13 s1-13))\n        (not\
    \ (equal? s0-14 s1-14))\n        (not (equal? s0-15 s1-15))\n        (not (equal?\
    \ s0-16 s1-16))\n        (not (equal? s0-17 s1-17))\n        (not (equal? s0-18\
    \ s1-18))\n        (not (equal? s0-19 s1-19))\n        (not (equal? s0-20 s1-20))\n\
    \        (not (equal? s0-21 s1-21))\n        (not (equal? s0-22 s1-22))\n    \
    \    (not (equal? s0-23 s1-23))\n        (not (equal? s0-24 s1-24))\n        (not\
    \ (equal? s0-25 s1-25))\n        (not (equal? s0-26 s1-26))\n        (not (equal?\
    \ s0-27 s1-27))\n        (not (equal? s0-28 s1-28))\n", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len 0)\n\
    \        (equal? s0 s1))\n      ((< s0-len 1)\n        (not (equal? s0 (substring\
    \ s0 0 s1-len))))\n      ((< s1-len 1)\n        (not (equal? s1 (substring s1\
    \ 0 s0-len))))\n      ((= s0-len s1-len)\n        (equal? (substring s0 0 s0-len)\
    \ (substring s1 0 s1-len)))\n      (else\n        #f)))\n)\n\n;; Check if two\
    \ words have the same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f",
  "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n   \
    \ (cond\n      ((= s0-len s1-len)\n        (string-equal? s0 s1))\n      (else\n\
    \        (not (string-ci=? s0-len s1-len))))))\n\n;; Check if two words have the\
    \ same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0_len (length s0))\n\
    \t(s1_len (length s1)))\n    (cond\n      ((= s0_len s1_len)\n       (equal? s0\
    \ s1))\n      (else\n       (not (equal? s0_len s1_len))))))\n\n;; Check if two\
    \ words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0_len (string-length\
    \ s0))\n         (s1_len (string-length s1)))\n    (cond\n      ((= s0_len 0)\n\
    \        (equal? s1 s0))\n      ((= s1_len 0)\n        (equal? s0 s1))\n     \
    \ ((< s0_len)\n        (let ((s0_chars (string->list s0)))\n          (let ((s1_chars\
    \ (string->list s1)))\n            (and\n              (equal? (car s0_chars)\
    \ (car s1_chars))\n              (equal? (cdr s0_chars) (cdr s1_chars))))))\n\
    \      (else\n        (not (equal? (string->list s0) (string->list s1)))))))\n\
    \n;; Check if two words have the same characters, ignoring case.\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\"\
    \ \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n\t(s1-len (string-length s1)))\n\
    \    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0-len s0-len) (string-ref s1-len s1-len))))\n\n;; Check if two words have the\
    \ same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string=? s0 s1))\n      ((< s0-len s1-len)\n        (string<? s0 s1))\n\
    \      ((< s0-len s1-len)\n        (string<? s1 s0))\n      (else\n        #f))))\n\
    \n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n      (else\n \
    \       (not (string=? (substring s0 0 s1-len)\n                (substring s1\
    \ 0 s1-len))))))\n\n;; Check if two words have the same characters, ignoring case.\n\
    ;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n\
    \    (cond\n      ((= s0-len 0)\n        (= s1-len 0))\n      ((= s0-len 1)\n\
    \        (= s1-len 1))\n      ((= s0-len 2)\n        (= s1-len 2))\n      ((=\
    \ s0-len 3)\n        (= s1-len 3))\n      ((= s0-len 4)\n        (= s1-len 4))\n\
    \      ((= s0-len 5)\n        (= s1-len 5))\n      ((= s0-len 6)\n        (= s1-len\
    \ 6))\n      ((= s0-len 7)\n        (= s1-len 7))\n      ((= s0-len 8)\n     \
    \   (= s1-len 8))\n      ((= s0-len 9)\n        (= s1-len 9))\n      ((= s0-len\
    \ 10)\n        (= s1-len 10))\n      ((= s0-len 11)\n        (= s1-len 11))\n\
    \      ((= s0-len 12)\n        (= s1-len 12))\n      ((= s0-len 13)\n        (=\
    \ s1-len 13))\n      ((= s0-len 14)\n        (= s1-len 14))\n      ((= s0-len\
    \ 15)\n        (= s1-len 15))\n      ((= s0-len 16)\n        (= s1-len 16))\n\
    \      ((= s0-len 17)\n        (= s1-len 17))\n      ((= s0-len 18)\n        (=\
    \ s1-len 18))\n      ((= s0-len 19)\n        (= s1-len 19))\n      ((= s0-len\
    \ 20)\n        (= s1-len 20))\n      ((= s0-len 21)\n        (= s1-len 21))\n\
    \      ((= s0-len 22)\n        (= s1-len 22))\n      ((= s0-len 23)\n        (=\
    \ s1-len 23", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? (substring s0 0 s1-len)\n                (substring\
    \ s1 0 s1-len))))))\n\n;; Check if two words have the same characters.\n;; >>>\
    \ (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? (substring s0 0 s1-len)\n                (substring\
    \ s1 0 s1-len))))))\n\n;; Check if two words have the same characters, ignoring\
    \ case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"\
    dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string-ref s0 0 s1-len))\n      (else\n        (not (string-ref s0 0\
    \ s1-len)))))\n)\n\n;; Check if two words have the same characters, ignoring case.\n\
    ;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (if (eq? s0-len s1-len)\n      (string-set! s0-len (string-set! s0-len\
    \ 0) #\\0)\n      (string-set! s1-len (string-set! s1-len 0) #\\0)\n      (and\
    \ (eq? (string-set! s0-len 0) #\\0)\n           (eq? (string-set! s1-len 0) #\\\
    0)\n           (eqv? (string-set! s0-len 1) (string-set! s1-len 1)))))\n)\n\n\
    ;; Check if two words have the same characters, ignoring case.\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\"\
    \ \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 s0-len)\
    \ (string-ref s1 s1-len))\n    (= (string-ref s0-len s0-len) (string-ref s1-len\
    \ s1-len))\n    (= (string-ref s0 s0-len s0-len) (string-ref s1 s1-len s1-len))\n\
    \    (= (string-ref s0-len s0-len s0-len) (string-ref s1-len s1-len s1-len))))\n\
    \n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n        (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n        (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n        (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n        (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n        (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n        (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n        (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n        (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n        (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n        (string-ref s1 (modulo s1-len 10)))\n    (=\
    \ (string-ref s0 (modulo s0-len 11))\n        (string-ref s1 (modulo s1-len 11)))\n\
    \    (= (string-ref s0 (modulo s0-len 12))\n        (string-ref s1 (modulo s1-len\
    \ 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n        (string-ref s1 (modulo\
    \ s", "  (let ((s0-len (string-length s0))\n\t(s1-len (string-length s1)))\n \
    \   (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0-len s0-len) (string-ref s1-len s1-len))\n\
    \    (= (string-ref s0 s0-len s0-len) (string-ref s1 s1-len s1-len))\n    (= (string-ref\
    \ s0-len s0-len s0-len) (string-ref s1-len s1-len s1-len))\n    #t))\n\n;; Check\
    \ if two words have the same characters, ignoring case.\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\"\
    \ \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0_len (length s0))\n         (s1_len (length s1)))\n   \
    \ (cond\n      ((= s0_len 0)\n        #t)\n      ((= s1_len 0)\n        #t)\n\
    \      ((= (string-ci-cmp s0 s1) 0)\n        #t)\n      (else\n        #f)))\n\
    )\n\n;; Check if two words have the same characters, ignoring case.\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\"\
    \ \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0_len (length s0))\n         (s1_len (length s1)))\n   \
    \ (cond\n      ((= s0_len 0)\n        (equal? s1_len 0))\n      ((= s0_len 1)\n\
    \        (equal? s1_len 1))\n      ((= s0_len 2)\n        (equal? s1_len 2))\n\
    \      ((= s0_len 3)\n        (equal? s1_len 3))\n      ((= s0_len 4)\n      \
    \  (equal? s1_len 4))\n      ((= s0_len 5)\n        (equal? s1_len 5))\n     \
    \ ((= s0_len 6)\n        (equal? s1_len 6))\n      ((= s0_len 7)\n        (equal?\
    \ s1_len 7))\n      ((= s0_len 8)\n        (equal? s1_len 8))\n      ((= s0_len\
    \ 9)\n        (equal? s1_len 9))\n      ((= s0_len 10)\n        (equal? s1_len\
    \ 10))\n      ((= s0_len 11)\n        (equal? s1_len 11))\n      ((= s0_len 12)\n\
    \        (equal? s1_len 12))\n      ((= s0_len 13)\n        (equal? s1_len 13))\n\
    \      ((= s0_len 14)\n        (equal? s1_len 14))\n      ((= s0_len 15)\n   \
    \     (equal? s1_len 15))\n      ((= s0_len 16)\n        (equal? s1_len 16))\n\
    \      ((= s0_len 17)\n        (equal? s1_len 17))\n      ((= s0_len 18)\n   \
    \     (equal? s1_len 18))\n      ((= s0_len 19)\n        (equal? s1_len 19))\n\
    \      ((= s0_len 20)\n        (equal? s1_len 20))\n      ((= s0_len 21)\n   \
    \     (equal? s1_len 21))\n      ((= s0_len 22)\n        (equal? s1_len 22))",
  "  (let ((s0_len (string-length s0))\n        (s1_len (string-length s1)))\n   \
    \ (cond\n      ((= s0_len 0)\n        (equal? s1 s0))\n      ((= s1_len 0)\n \
    \       (equal? s0 s1))\n      ((< s0_len)\n        (cond\n          ((= s0_len\
    \ 1)\n            (equal? s1 s0))\n          ((< s1_len)\n            (not (equal?\
    \ s0 s1)))))))))\n\n;; Check if two words have the same characters, ignoring case.\n\
    ;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0_len (length s0))\n        (s1_len (length s1)))\n    (cond\n\
    \      ((= s0_len s1_len)\n        (equal? s0 s1))\n      (else\n        (not\
    \ (equal? (substring s0 0 s0_len)\n                (substring s1 0 s1_len)))))))\n\
    \n;; Check if two words have the same characters, ignoring case.\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\"\
    \ \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? (substring s0 0 s0-len)\n                (substring\
    \ s1 0 s1-len))))))\n\n;; Check if two words have the same characters.\n;; >>>\
    \ (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string-equal? s0 s1))\n      (else\n        (not (string-equal? s0 (substring\
    \ s0 0 (string-length s0) -1)))))))\n\n;; Check if two words have the same characters.\n\
    ;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string=? s0 s1))\n      ((< s0-len s1-len)\n        (string<? s0 s1))\n\
    \      ((< s0-len s1-len)\n        (string<? s1 s0))\n      (else\n        #f)))\n\
    )\n\n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars \"dddzzzzzzzddeddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddzzzzzzzddeddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddzzzzzzzddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string=? s0 s1))\n      (else\n        (not (string=? s0 s1))))))\n\n\
    ;; Check if two words have the same characters, ignoring case.\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\"\
    \ \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string-ref s0 0 s1-len))\n\
    \      ((< s0-len s1-len)\n        (not (string-ref s0 0 s1-len)))\n      ((<\
    \ s0-len s1-len)\n        (not (string-ref s1 0 s1-len)))\n      (else\n     \
    \   #f)))\n)\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"\
    dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>>\
    \ (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"\
    dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? s0 s1))))))\n\n;; Check if two words have the\
    \ same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string=? s0 s1))\n      (else\n        (not (string=? (substring s0\
    \ 0 s1-len)\n                (substring s1 0 s1-len))))))\n\n;; Check if two words\
    \ have the same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f",
  "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n   \
    \ (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string=? s0 s1))\n      (else\n        (not (string=? s0 s1))))))\n\n\
    ;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n      (else\n \
    \       (not (string=? s0 s1))))))\n\n;; Check if two words have the same characters.\n\
    ;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  ((< s0-len s1-len)\n        (string<? s0 s1))\n      ((< s0-len s1-len)\n \
    \       (string<? s1 s0))\n      (else\n        #f)))\n\n;; Check if two words\
    \ have the same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f",
  "  (let ((s0_len (length s0))\n        (s1_len (length s1)))\n    (cond\n      ((=\
    \ s0_len s1_len)\n        (equal? s0 s1))\n      (else\n        (not (equal? (substring\
    \ s0 0 s0_len)\n                (substring s1 0 s1_len)))))))\n\n;; Check if two\
    \ words have the same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f",
  "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n   \
    \ (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))))\n\n;; Check\
    \ if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"\
    dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;;\
    \ #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"\
    eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n\
    ;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let\
    \ ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n    (= (string-ref\
    \ s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref\
    \ s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref\
    \ s1 (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string-equal? s0 s1))\n\
    \      (else\n        (not (string-equal? (substring s0 0 s1-len)\n          \
    \      (substring s1 0 s1-len)))))))\n\n;; Check if two words have the same characters,\
    \ ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len\
    \ 1)\n        (not (equal? s0 (string-ref s1 (modulo s0-len 1))))))\n      ((<\
    \ s1-len 1)\n        (not (equal? s1 (string-ref s0 (modulo s1-len 1))))))\n \
    \     (else\n        (not (equal? s0 (string-ref s1 (modulo s0-len 1))))))))\n\
    \n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n      (else\n \
    \       (not (string=? (substring s0 0 s1-len)\n                (substring s1\
    \ 0 s1-len))))))\n\n;; Check if two words have the same characters, ignoring case.\n\
    ;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1", "  (let ((s0_len (length s0))\n\t(s1_len (length s1)))\n    (cond\n   \
    \   ((= s0_len s1_len)\n\t(let ((s0_chars (string->list s0))\n\t      (s1_chars\
    \ (string->list s1)))\n\t    (mapcar (lambda (c0 c1) (eq? c0 c1)) s0_chars s1_chars))))\n\
    \    (else\n      (false)))\n\n;; Check if two words have the same characters.\n\
    ;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"dddzzzzzzzddeddabc\"\
    \ \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddzzzzzzzddeddabc\")\n;; #f\n\
    ;; >>> (same_chars \"abcd\" \"dddzzzzzzzddeddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n\
    \    (cond\n      ((= s0-len 0)\n        (= s1-len 0))\n      ((= s0-len 1)\n\
    \        (= s1-len 1)\n        (= (string-ref s0 0) (string-ref s1 0)))\n    \
    \  ((= s0-len 2)\n        (= s1-len 2)\n        (= (string-ref s0 0) (string-ref\
    \ s1 0))\n        (= (string-ref s0 1) (string-ref s1 1)))\n      ((= s0-len 3)\n\
    \        (= s1-len 3)\n        (= (string-ref s0 0) (string-ref s1 0))\n     \
    \   (= (string-ref s0 1) (string-ref s1 1))\n        (= (string-ref s0 2) (string-ref\
    \ s1 2)))\n      ((= s0-len 4)\n        (= s1-len 4)\n        (= (string-ref s0\
    \ 0) (string-ref s1 0))\n        (= (string-ref s0 1) (string-ref s1 1))\n   \
    \     (= (string-ref s0 2) (string-ref s1 2))\n        (= (string-ref s0 3) (string-ref\
    \ s1 3)))\n      ((= s0-len 5)\n        (= s1-len 5)\n        (= (string-ref s0\
    \ 0) (string-ref s1 0))\n        (= (string-ref s0 1) (string-ref s1 1))\n   \
    \     (= (string-ref s0 2) (string-ref s1 2))\n        (= (string-ref s0 3) (string-ref\
    \ s1 3))\n        (= (string-ref s0 4) (string-ref s1 4)))\n      ((= s0-len 6)\n\
    \        (= s1-len 6)\n        (= (string-ref s0 0) (string-ref s1 0))\n     \
    \   (= (string-ref s0 1) (string-ref s1 1", "  (let ((s0-len (string-length s0))\n\
    \        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref s1\
    \ 0))\n    (= (string-ref s0 (modulo s0-len 1))\n        (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n        (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n        (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n        (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n        (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n        (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n        (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n        (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n        (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n        (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       \
    \ (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n\
    \        (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len\
    \ 13))\n        (string-ref s1 (modulo s", "  (let ((s0-len (string-length s0))\n\
    \        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref s1\
    \ 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  ((< s0-len s1-len)\n        (string-ci=? s0 s1))\n      (else\n        #f)))\n\
    \n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0_len (length s0))\n         (s1_len (length s1)))\n    (cond\n    \
    \  ((= s0_len s1_len)\n        (equal? s0 s1))\n      (else\n        (not (equal?\
    \ s0_len s1_len))))))\n\n;; Check if two words have the same characters.\n;; >>>\
    \ (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  ((< s0-len s1-len)\n        (string-ci=? s0 s1))\n      (else\n        #f)))\n\
    \n;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s0-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s0-len) (string-ref\
    \ s1", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n\
    \    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len 1)\n\
    \        (not (equal? s0 (substring s0 0 s1-len))))\n      ((< s1-len 1)\n   \
    \     (not (equal? s1 (substring s1 0 s0-len))))\n      (else\n        (not (equal?\
    \ s0 (substring s0 0 s1-len)))))\n    ))\n\n;; Check if two words have the same\
    \ characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string-equal? s0 s1))\n\
    \      (else\n        (not (string-equal? (substring s0 0 s0-len)\n          \
    \      (substring s1 0 s1-len))))))\n\n;; Check if two words have the same characters,\
    \ ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string=? s0 s1))\n      ((< s0-len s1-len)\n        (string-ci=? s0\
    \ s1))\n      (else\n        #f)))\n)\n\n;; Check if two words have the same characters,\
    \ ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0_len (string-length\
    \ s0))\n\t(s1_len (string-length s1)))\n    (= (string-ref s0 0) (string-ref s1\
    \ 0))\n    (= (string-ref s0 (modulo s0_len 1))\n       (string-ref s1 (modulo\
    \ s1_len 1)))\n    (= (string-ref s0 (modulo s0_len 2))\n       (string-ref s1\
    \ (modulo s1_len 2)))\n    (= (string-ref s0 (modulo s0_len 3))\n       (string-ref\
    \ s1 (modulo s1_len 3)))\n    (= (string-ref s0 (modulo s0_len 4))\n       (string-ref\
    \ s1 (modulo s1_len 4)))\n    (= (string-ref s0 (modulo s0_len 5))\n       (string-ref\
    \ s1 (modulo s1_len 5)))\n    (= (string-ref s0 (modulo s0_len 6))\n       (string-ref\
    \ s1 (modulo s1_len 6)))\n    (= (string-ref s0 (modulo s0_len 7))\n       (string-ref\
    \ s1 (modulo s1_len 7)))\n    (= (string-ref s0 (modulo s0_len 8))\n       (string-ref\
    \ s1 (modulo s1_len 8)))\n    (= (string-ref s0 (modulo s0_len 9))\n       (string-ref\
    \ s1 (modulo s1_len 9)))\n    (= (string-ref s0 (modulo s0_len 10))\n       (string-ref\
    \ s1 (modulo s1_len 10)))\n    (= (string-ref s0 (modulo s0_len 11))\n       (string-ref\
    \ s1 (modulo s1_len 11)))\n    (= (string-ref s0 (modulo s0_len 12))\n       (string-ref\
    \ s1 (modulo s1_len 12)))\n    (= (string-ref s0 (modulo s0_len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len\
    \ 1)\n        (not (equal? (string-ref s0 0) (string-ref s1 0)))\n        (not\
    \ (equal? (string-ref s0 1) (string-ref s1 1)))\n        (not (equal? (string-ref\
    \ s0 2) (string-ref s1 2)))\n        (not (equal? (string-ref s0 3) (string-ref\
    \ s1 3)))\n        (not (equal? (string-ref s0 4) (string-ref s1 4)))\n      \
    \  (not (equal? (string-ref s0 5) (string-ref s1 5)))\n        (not (equal? (string-ref\
    \ s0 6) (string-ref s1 6)))\n        (not (equal? (string-ref s0 7) (string-ref\
    \ s1 7)))\n        (not (equal? (string-ref s0 8) (string-ref s1 8)))\n      \
    \  (not (equal? (string-ref s0 9) (string-ref s1 9)))\n        (not (equal? (string-ref\
    \ s0 10) (string-ref s1 10)))\n        (not (equal? (string-ref s0 11) (string-ref\
    \ s1 11)))\n        (not (equal? (string-ref s0 12) (string-ref s1 12)))\n   \
    \     (not (equal? (string-ref s0 13) (string-ref s1 13)))\n        (not (equal?\
    \ (string-ref s0 14) (string-ref s1 14)))\n        (not (equal? (string-ref s0\
    \ 15) (string-ref s1 15))))\n      (else\n        (not (equal? (string-ref s0\
    \ 0) (string-ref s1 0)))))\n))\n\n;; Check if two words have the same characters.\n\
    ;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n\
    \    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0_len (string-length\
    \ s0))\n         (s1_len (string-length s1)))\n    (cond\n      ((= s0_len 0)\n\
    \        (= s1_len 0))\n      ((= s0_len 1)\n        (= s1_len 1)\n        (=\
    \ (string-ref s0 0) (string-ref s1 0)))\n      ((= s0_len 2)\n        (= s1_len\
    \ 2)\n        (= (string-ref s0 0) (string-ref s1 0))\n        (= (string-ref\
    \ s0 1) (string-ref s1 1)))\n      ((= s0_len 3)\n        (= s1_len 3)\n     \
    \   (= (string-ref s0 0) (string-ref s1 0))\n        (= (string-ref s0 1) (string-ref\
    \ s1 1))\n        (= (string-ref s0 2) (string-ref s1 2)))\n      ((= s0_len 4)\n\
    \        (= s1_len 4)\n        (= (string-ref s0 0) (string-ref s1 0))\n     \
    \   (= (string-ref s0 1) (string-ref s1 1))\n        (= (string-ref s0 2) (string-ref\
    \ s1 2))\n        (= (string-ref s0 3) (string-ref s1 3)))\n      (else\n    \
    \    #f)))\n  ))\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"\
    dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>>\
    \ (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"\
    dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f\n", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref\
    \ s0 s1-len) (string-ref s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1", "  (let ((s0_len (length s0))\n         (s1_len (length s1)))\n    (cond\n\
    \      ((= s0_len s1_len)\n        (equal? s0 s1))\n      (else\n        (not\
    \ (equal? s0_len s1_len)))))\n)\n\n;; Check if two words have the same characters,\
    \ ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len 0)\n\
    \        (= s1-len 0))\n      ((= s0-len 1)\n        (= s1-len 1)\n        (=\
    \ (string-ref s0 0) (string-ref s1 0)))\n      ((= s0-len 2)\n        (= s1-len\
    \ 2)\n        (= (string-ref s0 0) (string-ref s1 0))\n        (= (string-ref\
    \ s0 1) (string-ref s1 1)))\n      ((= s0-len 3)\n        (= s1-len 3)\n     \
    \   (= (string-ref s0 0) (string-ref s1 0))\n        (= (string-ref s0 1) (string-ref\
    \ s1 1))\n        (= (string-ref s0 2) (string-ref s1 2)))\n      ((= s0-len 4)\n\
    \        (= s1-len 4)\n        (= (string-ref s0 0) (string-ref s1 0))\n     \
    \   (= (string-ref s0 1) (string-ref s1 1))\n        (= (string-ref s0 2) (string-ref\
    \ s1 2))\n        (= (string-ref s0 3) (string-ref s1 3)))\n      (else\n    \
    \    #f)))\n)\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"\
    dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>>\
    \ (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"\
    dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len\
    \ 1)\n        (not (equal? s0 (substring s0 0 s1-len))))\n      ((< s1-len 1)\n\
    \        (not (equal? s1 (substring s1 0 s0-len))))\n      (else\n        (not\
    \ (equal? s0 (substring s0 0 s1-len)))))\n    ))\n\n;; Check if two words have\
    \ the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0_len (length s0))\n         (s1_len (length s1)))\n\
    \    (cond\n      ((= s0_len s1_len)\n        (equal? s0 s1))\n      (else\n \
    \       (not (equal? s0_len s1_len))))))\n\n;; Check if two words have the same\
    \ characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\"\
    \ \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>>\
    \ (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length s0))\n     \
    \   (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n\
    \    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo s1-len\
    \ 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1 (modulo\
    \ s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref s1\
    \ (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? (substring s0 0 s1-len)\n                (substring\
    \ s1 0 s1-len))))))\n\n;; Check if two words have the same characters, ignoring\
    \ case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"\
    dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? (substring s0 0 s1-len)\n                (substring\
    \ s1 0 s1-len))))))\n\n;; Check if two words have the same characters, ignoring\
    \ case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"\
    dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string=? s0 s1))\n      ((< s0-len s1-len)\n        (string-ci=? s0\
    \ s1))\n      (else\n        #f)))\n)\n\n;; Check if two words have the same characters.\n\
    ;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len\
    \ 1)\n        (not (equal? (string-ref s0 0) (string-ref s1 0))))\n      ((< s1-len\
    \ 1)\n        (not (equal? (string-ref s1 0) (string-ref s0 0))))\n      ((< s0-len\
    \ 1)\n        (not (equal? (string-ref s0 0) (string-ref s1 1))))\n      ((< s1-len\
    \ 1)\n        (not (equal? (string-ref s1 0) (string-ref s0 1))))\n      ((< s0-len\
    \ 2)\n        (not (equal? (string-ref s0 0) (string-ref s1 2))))\n      ((< s1-len\
    \ 2)\n        (not (equal? (string-ref s1 0) (string-ref s0 2))))\n      ((< s0-len\
    \ 2)\n        (not (equal? (string-ref s0 0) (string-ref s1 1))))\n      ((< s1-len\
    \ 2)\n        (not (equal? (string-ref s1 0) (string-ref s0 1))))\n      (else\n\
    \        #f)))\n)\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"\
    dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>>\
    \ (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"\
    dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0_len (length\
    \ s0))\n         (s1_len (length s1)))\n    (cond\n      ((= s0_len s1_len)\n\
    \        (equal? s0 s1))\n      (else\n        (not (equal? (substring s0 0 s0_len)\n\
    \                (substring s1 0 s1_len)))))))\n\n;; Check if two words have the\
    \ same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  ((< s0-len s1-len)\n        (string-ci=? s0 s1))\n      (else\n        #f)))\n\
    \n;; Check if two words have the same characters, ignoring case.\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\"\
    \ \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (= s1-len 0))\n      ((= s0-len\
    \ 1)\n        (= s1-len 1))\n      ((= s0-len 2)\n        (= s1-len 2))\n    \
    \  ((= s0-len 3)\n        (= s1-len 3))\n      ((= s0-len 4)\n        (= s1-len\
    \ 4))\n      ((= s0-len 5)\n        (= s1-len 5))\n      ((= s0-len 6)\n     \
    \   (= s1-len 6))\n      ((= s0-len 7)\n        (= s1-len 7))\n      ((= s0-len\
    \ 8)\n        (= s1-len 8))\n      ((= s0-len 9)\n        (= s1-len 9))\n    \
    \  ((= s0-len 10)\n        (= s1-len 10))\n      ((= s0-len 11)\n        (= s1-len\
    \ 11))\n      ((= s0-len 12)\n        (= s1-len 12))\n      ((= s0-len 13)\n \
    \       (= s1-len 13))\n      ((= s0-len 14)\n        (= s1-len 14))\n      ((=\
    \ s0-len 15)\n        (= s1-len 15))\n      ((= s0-len 16)\n        (= s1-len\
    \ 16))\n      ((= s0-len 17)\n        (= s1-len 17))\n      ((= s0-len 18)\n \
    \       (= s1-len 18))\n      ((= s0-len 19)\n        (= s1-len 19))\n      ((=\
    \ s0-len 20)\n        (= s1-len 20))\n      ((= s0-len 21)\n        (= s1-len\
    \ 21))\n      ((= s0-len 22)\n        (= s1-len 22))\n      ((= s0-len 23)\n \
    \       (= s1-len 23", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len\
    \ 1)\n        (not (equal? s0 (substring s0 0 s1-len))))\n      ((< s1-len 1)\n\
    \        (not (equal? s1 (substring s1 0 s0-len))))\n      (else\n        (not\
    \ (equal? s0 (substring s0 0 s1-len)))))\n    ))\n\n;; Check if two words have\
    \ the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0_len (length s0))\n\
    \        (s1_len (length s1)))\n    (cond\n      ((= s0_len s1_len)\n        (equal?\
    \ s0 s1))\n      (else\n        (not (equal? (substring s0 0 s0_len)\n       \
    \         (substring s1 0 s1_len)))))))\n\n;; Check if two words have the same\
    \ characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0_len (length s0))\n\
    \t(s1_len (length s1)))\n    (cond\n      ((= s0_len s1_len)\n       (let ((s0_chars\
    \ (string-split s0 \"\") (string-join s0_chars \"\")))\n\t (string-join s0_chars\
    \ s1)))\n      (else\n       #f)))\n\n;; Check if two words have the same characters,\
    \ ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string=? s0 s1))\n      (else\n        (not (string=? s0 s1))))))\n\n\
    ;; Check if two words have the same characters, ignoring case.\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\"\
    \ \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? (substring s0 0 s1-len)\n                (substring\
    \ s1 0 s1-len))))))\n\n;; Check if two words have the same characters, ignoring\
    \ case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"\
    dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string-ref s0 0 s1-len))\n\
    \      ((< s0-len s1-len)\n        (string-ref s0 0 s1-len))\n      ((> s0-len\
    \ s1-len)\n        (string-ref s1 0 s0-len))\n      (else\n        #f)))\n)\n\n\
    ;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string-ref s0 0 s1-len)\n        (string-ref s1 0 s0-len))\n      (else\n\
    \        #f)))\n)\n\n;; Check if two words have the same characters.\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"\
    dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>>\
    \ (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"\
    dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n    \
    \  (else\n        (not (string=? s0 s1))))))\n\n;; Check if two words have the\
    \ same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s1-len 0))\n      ((<\
    \ s0-len 1)\n        (not (equal? s0-len 1)))\n      ((< s1-len 1)\n        (not\
    \ (equal? s1-len 1)))\n      ((= s0-len 1)\n        (equal? s1-len 1))\n     \
    \ ((= s1-len 1)\n        (equal? s0-len 1))\n      (else\n        #f)))\n)\n\n\
    ;; Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n        (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n        (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n        (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n        (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n        (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n        (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n        (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n        (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n        (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n        (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       \
    \ (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n\
    \        (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len\
    \ 13))\n        (string-ref s1 (modulo s", "  (let ((s0-len (string-length s0))\n\
    \        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n \
    \       (string-ref s0 0 s1-len)\n        (string-ref s1 0 s0-len))\n      (else\n\
    \        #f)))\n)\n\n;; Check if two words have the same characters, ignoring\
    \ case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"\
    dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string-ref s0 0 s1-len))\n\
    \      ((< s0-len s1-len)\n        (string-ref s0 0 s1-len))\n      ((> s0-len\
    \ s1-len)\n        (string-ref s1 0 s0-len))\n      (else\n        #f)))\n\n;;\
    \ Check if two words have the same characters.\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", " \
    \ (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n  \
    \  (cond\n      ((= s0-len s1-len)\n        (string=? s0 s1))\n      (else\n \
    \       (not (string=? (substring s0 0 s1-len)\n                (substring s1\
    \ 0 s1-len))))))\n\n;; Check if two words have the same characters, ignoring case.\n\
    ;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len s1-len)\n        (string-ref s0 0 s1-len))\n\
    \      (else\n        (not (string-ref s0 0 s1-len))))))\n\n;; Check if two words\
    \ have the same characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\"\
    )\n;; #t\n;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len 0)\n\
    \        (= s1-len 0))\n      ((< s0-len s1-len)\n        (not (string=? s0 s1)))\n\
    \      (else\n        (string-ci=? s0 s1)))\n  ))\n\n;; Check if two words have\
    \ the same characters, ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"\
    dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n\
    ;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\"\
    )\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f",
  "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n   \
    \ (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo s0-len\
    \ 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0 (modulo\
    \ s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref s0\
    \ (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len s1-len)\n\
    \        (string=? s0 s1))\n      ((< s0-len s1-len)\n        (string-ci=? s0\
    \ s1))\n      (else\n        #f)))\n)\n\n;; Check if two words have the same characters,\
    \ ignoring case.\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n\
    ;; #t\n;; >>> (same_chars_ci \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"dddddddabc\" \"abcd\")\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\"\
    )\n;; #f\n;; >>> (same_chars_ci \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len 0)\n\
    \        (= s1-len 0))\n      ((= s0-len 1)\n        (= s1-len 1)\n        (=\
    \ (string-ref s0 0) (string-ref s1 0)))\n      ((< s0-len 1)\n        (< s1-len\
    \ 1)\n        (= (string-ref s0 0) (string-ref s1 0))\n        (= (string-ref\
    \ s0 1) (string-ref s1 1))\n        (= (string-ref s0 2) (string-ref s1 2))\n\
    \        (= (string-ref s0 3) (string-ref s1 3))\n        (= (string-ref s0 4)\
    \ (string-ref s1 4))\n        (= (string-ref s0 5) (string-ref s1 5))\n      \
    \  (= (string-ref s0 6) (string-ref s1 6))\n        (= (string-ref s0 7) (string-ref\
    \ s1 7))\n        (= (string-ref s0 8) (string-ref s1 8))\n        (= (string-ref\
    \ s0 9) (string-ref s1 9))\n        (= (string-ref s0 10) (string-ref s1 10))\n\
    \        (= (string-ref s0 11) (string-ref s1 11))\n        (= (string-ref s0\
    \ 12) (string-ref s1 12))\n        (= (string-ref s0 13) (string-ref s1 13))\n\
    \        (= (string-ref s0 14) (string-ref s1 14))\n        (= (string-ref s0\
    \ 15) (string-ref s1 15))))\n      (else\n        (not (and (string-ref s0 0)\
    \ (string-ref s1 0)))))\n))\n\n;; Check if two words have the same characters.\n\
    ;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars",
  "  (let ((s0-len (string-length s0))\n        (s1-len (string-length s1)))\n   \
    \ (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 s1-len) (string-ref\
    \ s1 s1-len))\n    (= (string-ref s0 s1-len) (string-ref s1 s1-len))))\n\n;; Check\
    \ if two words have the same characters, ignoring case.\n;; >>> (same_chars_ci\
    \ \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\"\
    \ \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len 0)\n\
    \        (= s1-len 0))\n      ((= s0-len 1)\n        (= s1-len 1))\n      ((=\
    \ s0-len 2)\n        (= s1-len 2))\n      ((= s0-len 3)\n        (= s1-len 3))\n\
    \      ((= s0-len 4)\n        (= s1-len 4))\n      ((= s0-len 5)\n        (= s1-len\
    \ 5))\n      ((= s0-len 6)\n        (= s1-len 6))\n      ((= s0-len 7)\n     \
    \   (= s1-len 7))\n      ((= s0-len 8)\n        (= s1-len 8))\n      ((= s0-len\
    \ 9)\n        (= s1-len 9))\n      ((= s0-len 10)\n        (= s1-len 10))\n  \
    \    ((= s0-len 11)\n        (= s1-len 11))\n      ((= s0-len 12)\n        (=\
    \ s1-len 12))\n      ((= s0-len 13)\n        (= s1-len 13))\n      ((= s0-len\
    \ 14)\n        (= s1-len 14))\n      ((= s0-len 15)\n        (= s1-len 15))\n\
    \      ((= s0-len 16)\n        (= s1-len 16))\n      ((= s0-len 17)\n        (=\
    \ s1-len 17))\n      ((= s0-len 18)\n        (= s1-len 18))\n      ((= s0-len\
    \ 19)\n        (= s1-len 19))\n      ((= s0-len 20)\n        (= s1-len 20))\n\
    \      ((= s0-len 21)\n        (= s1-len 21))\n      ((= s0-len 22)\n        (=\
    \ s1-len 22))\n      ((= s0-len 23)\n        (= s1-len 23", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (cond\n      ((= s0-len 0)\n\
    \        (equal? s0 s1))\n      ((< s0-len 1)\n        (not (equal? s0 (substring\
    \ s0 0 s1-len))))\n      ((< s1-len 1)\n        (not (equal? s1 (substring s1\
    \ 0 s0-len))))\n      (else\n        (not (equal? s0 (substring s0 0 s1-len)))))\n\
    \    ))\n\n;; Check if two words have the same characters, ignoring case.\n;;\
    \ >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\"\
    )\n;; #t\n;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 (modulo\
    \ s0-len 1))\n       (string-ref s1 (modulo s1-len 1)))\n    (= (string-ref s0\
    \ (modulo s0-len 2))\n       (string-ref s1 (modulo s1-len 2)))\n    (= (string-ref\
    \ s0 (modulo s0-len 3))\n       (string-ref s1 (modulo s1-len 3)))\n    (= (string-ref\
    \ s0 (modulo s0-len 4))\n       (string-ref s1 (modulo s1-len 4)))\n    (= (string-ref\
    \ s0 (modulo s0-len 5))\n       (string-ref s1 (modulo s1-len 5)))\n    (= (string-ref\
    \ s0 (modulo s0-len 6))\n       (string-ref s1 (modulo s1-len 6)))\n    (= (string-ref\
    \ s0 (modulo s0-len 7))\n       (string-ref s1 (modulo s1-len 7)))\n    (= (string-ref\
    \ s0 (modulo s0-len 8))\n       (string-ref s1 (modulo s1-len 8)))\n    (= (string-ref\
    \ s0 (modulo s0-len 9))\n       (string-ref s1 (modulo s1-len 9)))\n    (= (string-ref\
    \ s0 (modulo s0-len 10))\n       (string-ref s1 (modulo s1-len 10)))\n    (= (string-ref\
    \ s0 (modulo s0-len 11))\n       (string-ref s1 (modulo s1-len 11)))\n    (= (string-ref\
    \ s0 (modulo s0-len 12))\n       (string-ref s1 (modulo s1-len 12)))\n    (= (string-ref\
    \ s0 (modulo s0-len 13))\n       (string-ref s1 (modulo s", "  (let ((s0-len (string-length\
    \ s0))\n        (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref\
    \ s1 0))\n    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo\
    \ s1-len 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1\
    \ (modulo s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref\
    \ s1 (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (cond\n      ((= s0-len 0)\n        (equal? s0 s1))\n      ((< s0-len\
    \ 1)\n        (not (equal? s0-1 s1-1))))))\n\n;; Check if two words have the same\
    \ characters.\n;; >>> (same_chars \"eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n\
    ;; >>> (same_chars \"abcd\" \"dddddddabc\")\n;; #t\n;; >>> (same_chars \"dddddddabc\"\
    \ \"abcd\")\n;; #t\n;; >>> (same_chars \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>>\
    \ (same_chars \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars \"eabcdzzzz\"\
    \ \"dddzzzzzzzddddabc\")\n;; #f", "  (let ((s0-len (string-length s0))\n     \
    \   (s1-len (string-length s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n\
    \    (= (string-ref s0 (modulo s0-len 1))\n       (string-ref s1 (modulo s1-len\
    \ 1)))\n    (= (string-ref s0 (modulo s0-len 2))\n       (string-ref s1 (modulo\
    \ s1-len 2)))\n    (= (string-ref s0 (modulo s0-len 3))\n       (string-ref s1\
    \ (modulo s1-len 3)))\n    (= (string-ref s0 (modulo s0-len 4))\n       (string-ref\
    \ s1 (modulo s1-len 4)))\n    (= (string-ref s0 (modulo s0-len 5))\n       (string-ref\
    \ s1 (modulo s1-len 5)))\n    (= (string-ref s0 (modulo s0-len 6))\n       (string-ref\
    \ s1 (modulo s1-len 6)))\n    (= (string-ref s0 (modulo s0-len 7))\n       (string-ref\
    \ s1 (modulo s1-len 7)))\n    (= (string-ref s0 (modulo s0-len 8))\n       (string-ref\
    \ s1 (modulo s1-len 8)))\n    (= (string-ref s0 (modulo s0-len 9))\n       (string-ref\
    \ s1 (modulo s1-len 9)))\n    (= (string-ref s0 (modulo s0-len 10))\n       (string-ref\
    \ s1 (modulo s1-len 10)))\n    (= (string-ref s0 (modulo s0-len 11))\n       (string-ref\
    \ s1 (modulo s1-len 11)))\n    (= (string-ref s0 (modulo s0-len 12))\n       (string-ref\
    \ s1 (modulo s1-len 12)))\n    (= (string-ref s0 (modulo s0-len 13))\n       (string-ref\
    \ s1 (modulo s", "  (let ((s0-len (string-length s0))\n        (s1-len (string-length\
    \ s1)))\n    (= (string-ref s0 0) (string-ref s1 0))\n    (= (string-ref s0 s1-len)\
    \ (string-ref s1 s1-len))\n    (= (string-ref s0-len s1) (string-ref s1-len s1))\n\
    \    (= (string-ref s0-len s1-len) (string-ref s1-len s1-len))))\n\n;; Check if\
    \ two words have the same characters, ignoring case.\n;; >>> (same_chars_ci \"\
    eabcdzzzz\" \"dddzzzzzzzddeddabc\")\n;; #t\n;; >>> (same_chars_ci \"abcd\" \"\
    dddddddabc\")\n;; #t\n;; >>> (same_chars_ci \"dddddddabc\" \"abcd\")\n;; #t\n\
    ;; >>> (same_chars_ci \"eabcd\" \"dddddddabc\")\n;; #f\n;; >>> (same_chars_ci\
    \ \"abcd\" \"dddddddabce\")\n;; #f\n;; >>> (same_chars_ci \"eabcdzzzz\" \"dddzzzzzzzddddabc\"\
    )\n;; #f"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
