{
  "name": "HumanEval_20_find_closest_elements",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)\n(define (find_closest_elements numbers)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_closest_elements))\n    (check-equal? (candidate (list 1.0 2.0 3.9 4.0 5.0 2.2)) (list 3.9 4.0))\n    (check-equal? (candidate (list 1.0 2.0 5.9 4.0 5.0)) (list 5.0 5.9))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0 2.2)) (list 2.0 2.2))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0 2.0)) (list 2.0 2.0))\n    (check-equal? (candidate (list 1.1 2.2 3.1 4.1 5.1)) (list 2.2 3.1))\n))\n\n(test-humaneval)",
  "completions": [
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (let* ([min_index (car (find-min-index numbers))])\n        (let* ([max_index (cdr (find-min-index numbers))])\n          (if (eq min_index max_index)\n            (list min_number max_number)\n            (list (car (nth min_index numbers)) (car (nth max_index numbers)))\n          )\n        )\n      )\n    )\n  )\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n        (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-index (index-of min-number numbers))\n            (max-index (index-of max-number numbers)))\n        (if (min-index = max-index)\n          (list min-number max-number)\n          (let ((min-value (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-val max-val))])\n        (let* ([max-index (car (find-max-index min-val max-val))])\n          (list min-val min-index max-val max-index))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (let* ([min_index (index numbers)])\n        (let* ([max_index (index numbers)])\n          (if (eq? min_number max_number)\n              (list min_number max_number)\n              (let* ([min_diff (diff min_number max_number)])\n                (if (eq? min_diff 0)\n                    (list min_number max_number)\n                    (let* ([max_diff (diff max_number min_number)])\n                      (if (eq? max_diff 0)\n                          (list min_number max_number)\n                          (list min_number max_number)\n                          (list min_number max_number)))\n                  )\n                )\n              )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let* ([min (car numbers)])\n    (let* ([max (cdr numbers)])\n      (if (null? max)\n        (car numbers)\n        (if (null? min)\n          (car numbers)\n          (if (< max min)\n            (car numbers)\n            (if (< min max)\n              (car numbers)\n              (if (< max min)\n                (car numbers)\n                (car numbers))))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (car max-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-index (car (index-of min-number numbers)))\n                  (max-index (car (index-of max-number numbers)))\n                  (min-value (car (nth min-index numbers)))\n                  (max-value (car (nth max-index numbers))))\n              (if (eq? min-value max-value)\n                (list min-number max-number)\n                (list min-value max-value))))))))))\n",
    "  (let ((min (car numbers))\n        (max (car numbers)))\n    (if (null? (cdr numbers))\n      (list min max)\n      (let ((min (car (cdr numbers)))\n             (max (car (cdr numbers))))\n        (if (eq? min max)\n          (list min max)\n          (if (eq? min max)\n            (list min max)\n            (if (eq? min max)\n              (list min max)\n              (if (eq? min max)\n                (list min max)\n                (if (eq? min max)\n                  (list min max)\n                  (if (eq? min max)\n                    (list min max)\n                    (if (eq? min max)\n                      (list min max)\n                      (if (eq? min max)\n                        (list min max)\n                        (if (eq? min max)\n                          (list min max)\n                          (if (eq? min max)\n                            (list min max)\n                            (if (eq? min max)\n                              (list min max)\n                              (if (eq? min max)\n                                (list min max)\n                                (if (eq? min max)\n                                  (list min max)\n                                  (if (eq? min max)\n                                    (list min max)\n                                    (if (eq? min max)\n                                      (list min max)\n                                      (if (eq? min max)\n                                        (list min max)\n                                        (if (eq? min max)\n                                          (list min max)\n                                          (if (eq? min max)\n                                            (list min max)\n                                            (if (eq? min max)\n                                              (list min max)\n                                              (if (eq? min max)\n                                                (list min max)\n                                                (if (eq? min max)\n                                                  (list min max)\n                                                  (if (eq? min max)\n                                                    (list min max)\n                                                    (if (eq? min max)\n                                                      (list min max",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (if (null? max-val)\n        (list min-val max-val)\n        (let* ([min-val (car min-val)])\n          (let* ([max-val (cdr min-val)])\n            (if (null? max-val)\n              (list min-val max-val)\n              (let* ([min-val (car min-val)])\n                (let* ([max-val (cdr min-val)])\n                  (if (null? max-val)\n                    (list min-val max-val)\n                    (let* ([min-val (car min-val)])\n                      (let* ([max-val (cdr min-val)])\n                        (if (null? max-val)\n                          (list min-val max-val)\n                          (list min-val max-val)\n                          (list min-val max-val))))))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n          [max-diff (max (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))])\n    (if (eq min-diff max-diff)\n      (list (car numbers) (car numbers))\n      (list (car numbers) (car numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n\t(max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-index (index-of min-number numbers))\n\t    (max-index (index-of max-number numbers)))\n\t(if (min-index > max-index)\n\t  (list max-number min-number)\n\t  (list min-number max-number))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x) - (car numbers)))))\n           max-diff (max (map (lambda (x) (abs (x) - (car numbers)))))]\n          [min-index (car (find min-diff))]\n          [max-index (car (find max-diff))])\n    (if (null? numbers)\n      (list min-index max-index)\n      (if (null? min-diff)\n        (list max-index min-index)\n        (if (null? max-diff)\n          (list min-index max-index)\n          (list min-index min-index))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (let ((min-index (index-of min-number numbers)))\n        (let ((max-index (index-of max-number numbers)))\n          (if (eq min-index max-index)\n            (list min-number max-number)\n            (list (car (nth min-index numbers)) (car (nth max-index numbers))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n        (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (if (null? (cdr numbers))\n        (list min-number max-number)\n        (if (< (car numbers) min-number)\n          (list min-number max-number)\n          (if (< max-number (car numbers))\n            (list min-number max-number)\n            (if (< (car numbers) max-number)\n              (list min-number max-number)\n              (if (< min-number (car numbers))\n                (list min-number max-number)\n                (if (< max-number (car numbers))\n                  (list min-number max-number)\n                  (list min-number max-number))))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (let ((min-number (car min-number)))\n                            (let ((max-number (cdr max-number)))\n                              (if (null? max-number)\n                                (list min-number max-number)\n                                (let ((min-number (car min-number)))\n                                  (let ((max-number (cdr max-number)))\n                                    (if (null? max-number)\n                                      (list min-number max-number)\n                                      (let ((min-number (car min-number)))\n                                        (let ((max-number (cdr max-number)))\n                                          (if (null? max-number)\n                                            (list min-number max-number)\n                                            (let ((min-number (car min-number)))\n                                              (let ((max-number (cdr max-number)))\n                                                (if (null? max-number)\n                                                  (list min-number max-number)\n                                                  (let ((min-number (car min-number)))\n                                                    (let ((max-number (cdr max-number)))\n                                                      (if (null? max-number)\n                                                        (list min-number max-number)\n                                                      ",
    "  (let ((smallest (car numbers)))\n    (let ((largest (car numbers)))\n      (let ((smallest-index (index numbers smallest)))\n        (let ((largest-index (index numbers largest)))\n          (if (eq? largest-index smallest-index)\n            (list smallest largest)\n            (let ((smallest-value (cdr smallest-index))\n                  (largest-value (cdr largest-index)))\n              (if (eq? largest-value smallest-value)\n                (list smallest largest)\n                (let ((smallest-value (car smallest-index))\n                      (largest-value (car largest-index)))\n                  (if (eq? largest-value smallest-value)\n                    (list smallest largest)\n                    (list smallest-value largest-value))))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-number (car numbers)])\n    (let* ([max-number (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-number max-number))])\n        (let* ([max-index (car (find-max-index min-number max-number))])\n          (list (car (nth min-index numbers)) (car (nth max-index numbers))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-index (index numbers smallest)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest-index (index numbers largest)])\n          (cond\n            [(< (abs (car numbers) (car numbers))) (return (list smallest largest))]\n            [(< (abs (car numbers) (car numbers))) (return (list largest smallest))]\n            [(< (abs (car numbers) (car numbers))) (return (list smallest largest))]\n            [(< (abs (car numbers) (car numbers))) (return (list largest smallest))]\n            [else (return (list smallest largest))]\n          )\n        )\n      )\n    )\n  )\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([largest (cdr numbers)])\n      (if (null? largest)\n        (list smallest)\n        (if (null? smallest)\n          (list largest)\n          (let* ([smallest_diff (abs (smallest - largest))])\n            (if (null? smallest_diff)\n              (list smallest)\n              (list smallest)\n              (list (list smallest_diff smallest))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (let ((min-index (car (find-min-index numbers))))\n        (let ((max-index (cdr (find-min-index numbers))))\n          (if (eq min-number max-number)\n            (list min-number max-number)\n            (list (car (nth min-index numbers)) (car (nth max-index numbers))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (car max-number)))\n          (if (eq? min-value max-value)\n            (list min-value max-value)\n            (let ((min-index (car (find-min-index min-value max-value)))\n                  (max-index (car (find-max-index min-value max-value))))\n              (list (cdr min-number) (cdr max-number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_num (car numbers)])\n    (let* ([max_num (cdr numbers)])\n      (if (null? max_num)\n        (car min_num)\n        (if (null? min_num)\n          (car max_num)\n          (if (< min_num max_num)\n            (car min_num)\n            (if (< min_num max_num)\n              (car max_num)\n              (car min_num))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (let ((min-index (car (find-min-index numbers))))\n        (let ((max-index (cdr (find-min-index numbers))))\n          (if (eq min-number max-number)\n            (list min-number max-number)\n            (list (car (nth min-index numbers)) (car (nth max-index numbers))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (car (cdr numbers))))\n      (let ((min-value (car min-number))\n             (max-value (car max-number)))\n        (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-index (car (indexes min-number)))\n                   (max-index (car (indexes max-number))))\n              (if (eq? min-index max-index)\n                  (list min-number max-number)\n                  (let ((min-value (car (values min-number)))\n                         (max-value (car (values max-number))))\n                    (if (eq? min-value max-value)\n                        (list min-number max-number)\n                        (list (car (values min-number))\n                                 (car (values max-number))))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n        (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-index (index-of min-number numbers))\n            (max-index (index-of max-number numbers)))\n        (list (nth min-index min-number) (nth max-index max-number))))))\n",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest_index (index numbers smallest)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest_index (index numbers largest)])\n          (if (eq? (car numbers) (car largest))\n            (list (car numbers) (car largest))\n            (list (car largest) (car numbers)))))\n      (if (eq? (car numbers) (car smallest))\n        (list (car numbers) (car smallest))\n        (list (car smallest) (car numbers))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (list min_number max_number)\n        (let* ([min_diff (abs (min_number - max_number))])\n          (if (min_diff < 0.01)\n            (list min_number max_number)\n            (let* ([max_diff (abs (max_number - min_number))])\n              (if (max_diff < 0.01)\n                (list min_number max_number)\n                (list min_number min_number))))))))))\n",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n          [max-diff (max (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))])\n    (if (eq min-diff max-diff)\n      (list min-diff max-diff)\n      (list (car numbers) (car numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (car (cdr numbers))))\n      (if (eq? min-number max-number)\n        (list min-number max-number)\n        (let ((min-index (index-of min-number numbers)))\n          (let ((max-index (index-of max-number numbers)))\n            (if (eq? min-index max-index)\n              (list min-number max-number)\n              (list (cdr (nth min-index numbers)) (cdr (nth max-index numbers))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (let ((min-index (car (find-min-index numbers))))\n        (let ((max-index (cdr (find-min-index numbers))))\n          (if (eq min-number max-number)\n              (list min-number max-number)\n              (list (car (nth min-index numbers)) (car (nth max-index numbers))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min (car numbers)])\n    (let* ([max (car numbers)])\n      (let* ([min_index (car numbers)])\n        (let* ([max_index (car numbers)])\n          (if (eq min max)\n              (list min max)\n              (let* ([min_value (car min)])\n                (let* ([max_value (car max)])\n                  (if (eq min_value max_value)\n                      (list min_value max_value)\n                      (let* ([min_index_value (car min_index)])\n                        (let* ([max_index_value (car max_index)])\n                          (if (eq min_index_value max_index_value)\n                              (list min_index_value max_index_value)\n                              (let* ([min_value_index (car min_value)])\n                                (let* ([max_value_index (car max_value)])\n                                  (if (eq min_value_index max_value_index)\n                                      (list min_value_index max_value_index)\n                                      (let* ([min_index_value_index (car min_index_value)])\n                                        (let* ([max_index_value_index (car max_index_value)])\n                                          (if (eq min_index_value_index max_index_value_index)\n                                              (list min_index_value_index max_index_value_index)\n                                              (let* ([min_value_index_value (car min_value_index)])\n                                                (let* ([max_value_index_value (car max_value_index)])\n                                                  (if (eq min_value_index_value max_value_index_value)\n                                                      (list min_value_index_value max_value_index_value)\n                                                      (let* ([min_index_value_index_value (car min_index_value_index)])\n                                                        (let* ([max_index_value_index_value (car max",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x) - (car numbers)))))\n          max-diff (max (map (lambda (x) (abs (x) - (car numbers)))))]\n           [min-num (car min-diff)\n            max-num (car max-diff)])\n    (if (eq? min-num max-num)\n      (list min-num max-num)\n      (list (car numbers) (car numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-val (car numbers)))\n    (let ((min-index (car numbers)))\n      (let ((max-val (cdr numbers)))\n        (let ((max-index (cdr numbers)))\n          (if (eq? min-val max-val)\n            (list min-val max-val)\n            (if (eq? min-val (car max-val))\n              (list min-val (car max-val))\n              (if (eq? max-val (car min-val))\n                (list (car min-val) (car max-val))\n                (if (eq? max-val (cdr min-val))\n                  (list (car min-val) (car max-val))\n                  (if (eq? min-val (cdr max-val))\n                    (list (car min-val) (car max-val))\n                    (list (car min-val) (car max-val)))))\n            (list (car min-val) (car max-val)))))))\n  (car numbers)))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-index (index numbers smallest)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest-index (index numbers largest)])\n          (if (eq? smallest largest)\n            (list smallest largest)\n            (if (>= smallest-index largest-index)\n              (list smallest largest)\n              (if (<= smallest-index largest-index)\n                (list smallest largest)\n                (if (<= smallest-index largest-index)\n                  (list smallest largest)\n                  (if (<= smallest-index largest-index)\n                    (list smallest largest)\n                    (if (<= smallest-index largest-index)\n                      (list smallest largest)\n                      (if (<= smallest-index largest-index)\n                        (list smallest largest)\n                        (if (<= smallest-index largest-index)\n                          (list smallest largest)\n                          (if (<= smallest-index largest-index)\n                            (list smallest largest)\n                            (if (<= smallest-index largest-index)\n                              (list smallest largest)\n                              (if (<= smallest-index largest-index)\n                                (list smallest largest)\n                                (if (<= smallest-index largest-index)\n                                  (list smallest largest)\n                                  (if (<= smallest-index largest-index)\n                                    (list smallest largest)\n                                    (if (<= smallest-index largest-index)\n                                      (list smallest largest)\n                                      (if (<= smallest-index largest-index)\n                                        (list smallest largest)\n                                        (if (<= smallest-index largest-index)\n                                          (list smallest largest)\n                                          (if (<= smallest-index largest-index)\n                                            (list smallest largest)\n                                            (if (<= smallest-index largest-index)\n                                              (list smallest largest)\n                                              (if (<= smallest-index largest-index)\n                                                (list smallest largest)\n                                                (if (<= smallest-index largest-index)\n                                                  (list smallest largest)\n                                                  (if (<= smallest-index largest-",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (let ((min-index (car numbers)))\n        (let ((max-index (cdr numbers)))\n          (if (eq? min-number max-number)\n            (list min-number max-number)\n            (list (car numbers) (car numbers))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (cdr min-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-value (car min-value))\n                  (max-value (cdr min-value)))\n              (if (eq? min-value max-value)\n                (list min-number max-number)\n                (let ((min-value (car min-value))\n                      (max-value (cdr min-value)))\n                  (if (eq? min-value max-value)\n                    (list min-number max-number)\n                    (let ((min-value (car min-value))\n                          (max-value (cdr min-value)))\n                      (if (eq? min-value max-value)\n                        (list min-number max-number)\n                        (let ((min-value (car min-value))\n                              (max-value (cdr min-value)))\n                          (if (eq? min-value max-value)\n                            (list min-number max-number)\n                            (let ((min-value (car min-value))\n                                  (max-value (cdr min-value)))\n                              (if (eq? min-value max-value)\n                                (list min-number max-number))))))))))))))))))))\n",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (list min_number max_number)\n        (let* ([min_diff (abs (min_number - max_number))])\n          (if (min_diff < 0.01)\n            (list min_number max_number)\n            (let* ([max_diff (abs (max_number - min_number))])\n              (if (max_diff < 0.01)\n                (list min_number max_number)\n                (list min_number max_number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number)))\n          (let ((max-value (cdr min-number)))\n            (if (null? max-value)\n              (list min-value max-value)\n              (let ((min-value (car min-value)))\n                (let ((max-value (cdr min-value)))\n                  (if (null? max-value)\n                    (list min-value max-value)\n                    (let ((min-value (car min-value)))\n                      (let ((max-value (cdr min-value)))\n                        (if (null? max-value)\n                          (list min-value max-value)\n                          (let ((min-value (car min-value)))\n                            (let ((max-value (cdr min-value)))\n                              (if (null? max-value)\n                                (list min-value max-value)\n                                (list min-value max-value))))))))))))))))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (car max-number)))\n          (if (eq? min-value max-value)\n            (list min-value max-value)\n            (let ((min-index (car (index-of min-number max-number)))\n                  (max-index (car (index-of max-number min-number)))\n                  (min-value (car (nth min-index max-number)))\n                  (max-value (car (nth max-index min-number)))\n                  (min-value (min-value max-value))\n                  (max-value (max-value min-value)))\n              (list min-value max-value))))))))\n",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-val max-val))])\n        (let* ([max-index (car (find-max-index min-val max-val))])\n          (list min-val max-val min-index max-index))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-number (car numbers)])\n    (let* ([max-number (cdr numbers)])\n      (let* ([min-value (car min-number)])\n        (let* ([max-value (cdr max-number)])\n          (if (eq? min-value max-value)\n              (list min-value max-value)\n              (let* ([min-index (car (find-min-index min-number max-number))])\n                (let* ([max-index (car (find-max-index min-number max-number))])\n                  (list (car (nth min-index max-number)) (car (nth max-index max-number))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (list min_number max_number)\n        (let* ([min_diff (abs (min_number - max_number))])\n          (if (min_diff < 0.00001)\n            (list min_number max_number)\n            (let* ([max_diff (abs (max_number - min_number))])\n              (if (max_diff < 0.00001)\n                (list min_number max_number)\n                (list min_number max_number)\n                (list min_number max_number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (car (cdr numbers))))\n      (let ((min-index (car (cdr (cdr (cdr numbers)))))\n            (max-index (car (cdr (cdr (cdr (cdr (cdr numbers))))))))\n        (let ((min-value (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (let* ([min_index (index numbers)])\n        (let* ([max_index (index numbers)])\n          (if (eq? min_number max_number)\n            (list min_number max_number)\n            (let* ([min_diff (difference min_number max_number)]\n                    [max_diff (difference max_number min_number)])\n              (if (eq? min_diff max_diff)\n                (list min_number max_number)\n                (let* ([min_diff_index (index numbers)])\n                  (let* ([max_diff_index (index numbers)])\n                    (if (eq? min_diff_index max_diff_index)\n                      (list min_diff_index max_diff_index)\n                      (let* ([min_diff_diff (difference min_diff_index max_diff_index)]\n                             [max_diff_diff (difference max_diff_index min_diff_index)])\n                        (if (eq? min_diff_diff max_diff_diff)\n                          (list min_diff_index max_diff_index)\n                          (list min_diff_index max_diff_index))))))))))))))))))\n",
    "  (let* ([min (car numbers)])\n    (let* ([max (car numbers)])\n      (let* ([min_max (min max)])\n        (if (eq? min_max min)\n            (car numbers)\n            (cdr numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (if (null? (cdr numbers))\n        (list min-number max-number)\n        (if (< min-number max-number)\n          (list min-number max-number)\n          (if (< min-number (car (cdr numbers)))\n            (list min-number max-number)\n            (if (< min-number (car (cdr (cdr numbers))))\n              (list min-number max-number)\n              (if (< min-number (car (cdr (cdr (cdr numbers))))))))))))))\n",
    "  (let* ([min (car numbers) max (car numbers)])\n    (if (eq? min max)\n      (list min max)\n      (let* ([min_index (index numbers min) max_index (index numbers max)])\n        (if (<= min_index max_index)\n          (list min max)\n          (let* ([min_value (car numbers min_index) max_value (car numbers max_index)])\n            (if (<= min_value max_value)\n              (list min max)\n              (list min_value max_value))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-number (car numbers)))\n        (let ((max-number (cdr numbers)))\n          (if (null? numbers)\n            (list min-number max-number)\n            (let ((min-number (car numbers)))\n              (let ((max-number (cdr numbers)))\n                (if (null? numbers)\n                  (list min-number max-number)\n                  (list min-number max-number)\n                  (list min-number max-number)))\n                (list min-number max-number)))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x) - (car numbers)))))\n          max-diff (max (map (lambda (x) (abs (x) - (car numbers)))))\n          min-index (index (car numbers) min-diff)\n          max-index (index (car numbers) max-diff)])\n    (if (min-index)\n      (list (car numbers) (car numbers) (car numbers))\n      (if (max-index)\n        (list (car numbers) (car numbers) (car numbers))\n        (list (car numbers) (car numbers) (car numbers))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (let* ([min_index (car (find-min-index min_number max_number))]\n             [max_index (car (find-max-index min_number max_number))])\n        (list min_number max_number (car (nth min_index 2)) (car (nth max_index 2))))))\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-number (car numbers))\n             (max-number (cdr numbers)))\n        (if (null? numbers)\n          (list min-number max-number)\n          (let ((min-number (car numbers))\n                 (max-number (cdr numbers)))\n            (if (null? numbers)\n              (list min-number max-number)\n              (list min-number max-number)\n              (list min-number max-number)))\n          (list min-number max-number)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-distance (lambda (x y) (abs (x - y)))]\n         [min-index (lambda (x y) (if (eq x y) 0 (if (eq x y) 1 (if (eq x y) 2))))]\n         [min-index-2 (lambda (x y) (if (eq x y) 0 (if (eq x y) 1 (if (eq x y) 2))))])\n    (let* ([closest-pair (lambda (x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y) (if (eq x y) (list x y",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-index (car numbers)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest-index (cdr numbers)])\n          (if (eq? (car numbers) smallest)\n            (list smallest smallest-index)\n            (if (eq? (car numbers) largest)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list largest smallest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (car max-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-index (car (indexes min-number)))\n                  (max-index (car (indexes max-number))))\n              (if (eq? min-value (car (nth min-index)))\n                (list min-number (car (nth max-index)))\n                (let ((min-value (car (nth min-index)))\n                      (max-value (car (nth max-index))))\n                  (if (eq? min-value max-value)\n                    (list (car (nth min-index)) (car (nth max-index)))\n                    (let ((min-index (car (nth min-index)))\n                          (max-index (car (nth max-index))))\n                      (if (eq? min-value (car (nth min-index)))\n                        (list (car (nth min-index)) (car (nth max-index)))\n                        (let ((min-value (car (nth min-index)))\n                              (max-value (car (nth max-index))))\n                          (if (eq? min-value max-value)\n                            (list (car (nth min-index)) (car (nth max-index)))\n                            (let ((min-index (car (nth min-index)))\n                                  (max-index (car (nth max-index))))\n                              (if (eq? min-value (car (nth min-index)))\n                                (list (car (nth min-index)) (car (nth max-index)))\n                                (let ((min-value (car (nth min-index)))\n                                      (max-value (car (nth max-index))))\n                                  (if (eq? min-value max-value)\n                                    (list (car (nth min-",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (cdr min-number)))\n          (if (eq? min-value max-value)\n            (list min-value max-value)\n            (let ((min-index (car (index-of min-number max-number))))\n              (let ((max-index (car (index-of max-number min-number))))\n                (list (car (nth min-index max-index))\n                      (car (nth max-index min-index))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-val max-val))])\n        (let* ([max-index (car (find-max-index min-val max-val))])\n          (list min-val max-val min-index max-index))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-index (index-of min-number numbers))\n             (max-index (index-of max-number numbers)))\n        (list (cdr (nth min-index 2))\n                  (cdr (nth max-index 2)))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (car max-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-index (index-of min-number numbers))\n                  (max-index (index-of max-number numbers)))\n              (list (cdr min-number) (cdr max-number))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (list min-number max-number)\n                          (list min-number max-number))))))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (cdr min-number)))\n          (if (null? max-value)\n            (list min-value max-value)\n            (let ((min-value (car min-value))\n                  (max-value (cdr min-value)))\n              (if (null? max-value)\n                (list min-value max-value)\n                (let ((min-value (car min-value))\n                      (max-value (cdr min-value)))\n                  (if (null? max-value)\n                    (list min-value max-value)\n                    (list min-value max-value))))))))))))\n",
    "  (let* ([min-distance (make-yail-list 0)])\n    (for-each (lambda (number)\n      (let* ([distance (yail-lesser-than? number numbers)])\n        (if (yail-list-empty? numbers)\n          (return (yail-make-list number))\n          (set-car! min-distance distance)\n          (set-cdr! min-distance number)))\n      numbers)\n    min-distance))\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min (car numbers))\n        (max (car numbers)))\n    (if (null? (cdr numbers))\n      (list min max)\n      (let ((min (car (cdr numbers)))\n             (max (car (cdr numbers))))\n        (if (eq? min max)\n          (list min max)\n          (if (< min max)\n            (list min max)\n            (if (< min min)\n              (list min max)\n              (if (< max max)\n                (list min max)\n                (if (< max min)\n                  (list min max)\n                  (list min min))))))))))\n",
    "  (let ((min (car numbers))\n        (max (car numbers)))\n    (let ((min_index (car numbers))\n          (max_index (car numbers)))\n      (if (eq min max)\n          (list min max)\n        (let ((min_value (car numbers))\n              (max_value (car numbers)))\n          (let ((min_index (car numbers))\n                (max_index (car numbers)))\n            (if (eq min_value max_value)\n                (list min_value max_value)\n              (let ((min_value (car numbers))\n                    (max_value (car numbers)))\n                (let ((min_index (car numbers))\n                      (max_index (car numbers)))\n                  (if (eq min_value max_value)\n                      (list min_value max_value)\n                    (let ((min_value (car numbers))\n                          (max_value (car numbers)))\n                      (let ((min_index (car numbers))\n                            (max_index (car numbers)))\n                        (if (eq min_value max_value)\n                            (list min_value max_value)\n                          (let ((min_value (car numbers))\n                                (max_value (car numbers)))\n                            (let ((min_index (car numbers))\n                                  (max_index (car numbers)))\n                              (if (eq min_value max_value)\n                                  (list min_value max_value)\n                                (list min_value max_value))))))))))))))))))))))\n",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-val max-val))])\n        (let* ([max-index (car (find-max-index min-val max-val))])\n          (list min-val min-index max-val max-index))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n        (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (if (null? (cdr numbers))\n        (list min-number max-number)\n        (if (< (car numbers) min-number)\n          (list min-number (car numbers))\n          (if (< (car numbers) max-number)\n            (list (car numbers) max-number)\n            (if (< (cdr numbers) min-number)\n              (list min-number (car numbers))\n              (if (< (cdr numbers) max-number)\n                (list min-number (car numbers))\n                (list (car numbers) (cdr numbers))))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (cdr min-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-index (car (find-min-index min-value max-value)))\n                  (max-index (cdr (find-min-index min-value max-value))))\n              (list (car (cdr min-index)) (car (cdr max-index))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (let ((min-index (index numbers min-number)))\n        (let ((max-index (index numbers max-number)))\n          (if (eq min-index max-index)\n            (list min-number max-number)\n            (let ((min-value (car (cdr (cdr (cdr numbers)))))\n                  (max-value (car (cdr (cdr (cdr (cdr numbers)))))))\n              (if (eq min-value max-value)\n                (list min-number max-number)\n                (let ((min-index (index numbers min-value)))\n                  (let ((max-index (index numbers max-value)))\n                    (if (eq min-index max-index)\n                      (list min-value max-value)\n                      (let ((min-value (car (cdr (cdr (cdr (cdr numbers)))))))\n                        (let ((max-value (car (cdr (cdr (cdr (cdr (cdr numbers))))))))\n                          (if (eq min-value max-value)\n                            (list min-value max-value)\n                            (list min-value max-value))))))))))))))))))\n",
    "  (let* ([smallest (car numbers)])\n    (let* ([largest (cdr numbers)])\n      (if (null? largest)\n        (list smallest)\n        (let* ([smallest_diff (abs (smallest - largest))])\n          (if (zero? smallest_diff)\n            (list smallest)\n            (let* ([smallest_index (index? smallest)])\n              (let* ([largest_index (index? largest)])\n                (if (zero? (abs (smallest_index - largest_index)))\n                  (list smallest)\n                  (list largest))))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (list min-number max-number))))))))))))))))\n",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (let* ([min_diff (abs (min_number - max_number))])\n        (if (min_diff < 0.0)\n            (let* ([min_diff_2 (abs (min_number - min_number))])\n              (if (min_diff_2 < 0.0)\n                  (let* ([min_diff_3 (abs (min_number - max_number))])\n                    (if (min_diff_3 < 0.0)\n                        (let* ([min_diff_4 (abs (max_number - min_number))])\n                          (if (min_diff_4 < 0.0)\n                              (let* ([min_diff_5 (abs (max_number - max_number))])\n                                (if (min_diff_5 < 0.0)\n                                    (let* ([min_diff_6 (abs (min_number - min_number))])\n                                      (if (min_diff_6 < 0.0)\n                                          (let* ([min_diff_7 (abs (min_number - max_number))])\n                                            (if (min_diff_7 < 0.0)\n                                                (let* ([min_diff_8 (abs (max_number - min_number))])\n                                                  (if (min_diff_8 < 0.0)\n                                                      (let* ([min_diff_9 (abs (max_number - max_number))])\n                                                        (if (min_diff_9 < 0.0)\n                                                            (min_diff)\n                                                            (min_diff_2)\n                                                            (min_diff_3)\n                                                            (min_diff_4)\n                                                            (min_diff_5)\n                                                            (min_diff_6)\n                                  ",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (car max-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-index (index-of min-value numbers))\n                  (max-index (index-of max-value numbers)))\n              (list (cdr min-number) (cdr max-number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-number (car numbers)))\n        (let ((max-number (cdr numbers)))\n          (if (null? numbers)\n            (list min-number max-number)\n            (let ((min-number (car numbers)))\n              (let ((max-number (cdr numbers)))\n                (if (null? numbers)\n                  (list min-number max-number)\n                  (list min-number max-number)\n                  (list min-number max-number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (let ((min-number (car min-number)))\n                            (let ((max-number (cdr max-number)))\n                              (if (null? max-number)\n                                (list min-number max-number)\n                                (let ((min-number (car min-number)))\n                                  (let ((max-number (cdr max-number)))\n                                    (if (null? max-number)\n                                      (list min-number max-number)\n                                      (let ((min-number (car min-number)))\n                                        (let ((max-number (cdr max-number)))\n                                          (if (null? max-number)\n                                            (list min-number max-number)\n                                            (let ((min-number (car min-number)))\n                                              (let ((max-number (cdr max-number)))\n                                                (if (null? max-number)\n                                                  (list min-number max-number)\n                                                  (let ((min-number (car min-number)))\n                                                    (let ((max-number (cdr max-number)))\n                                                      (if (null? max-number)\n                                                        (list min-number max-number)\n                                                      ",
    "  (let* ([min (car numbers)])\n    (let* ([max (car numbers)])\n      (let* ([min_index (car numbers)])\n        (let* ([max_index (car numbers)])\n          (if (eq? min max)\n            (list min max)\n            (let* ([min_value (car min)]\n                    [max_value (car max)])\n              (if (eq? min_value max_value)\n                (list min_value max_value)\n                (let* ([min_index (car min_value)]\n                        [max_index (car max_value)])\n                  (if (eq? min_index max_index)\n                    (list min_index max_index)\n                    (let* ([min_value (car min_index)]\n                            [max_value (car max_index)])\n                      (if (eq? min_value max_value)\n                        (list min_value max_value)\n                        (list min_value max_value))))))))))))))))\n",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n          [max-diff (max (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))])\n    (if (eq min-diff max-diff)\n      (list (car numbers) (car numbers))\n      (list (car numbers) (car numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-number (car numbers)])\n    (let* ([max-number (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-number max-number))])\n        (let* ([max-index (car (find-max-index min-number max-number))])\n          (list (car (nth min-index numbers)) (car (nth max-index numbers))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (let ((min-number (car min-number)))\n                            (let ((max-number (cdr max-number)))\n                              (if (null? max-number)\n                                (list min-number max-number)\n                                (let ((min-number (car min-number)))\n                                  (let ((max-number (cdr max-number)))\n                                    (if (null? max-number)\n                                      (list min-number max-number)\n                                      (let ((min-number (car min-number)))\n                                        (let ((max-number (cdr max-number)))\n                                          (if (null? max-number)\n                                            (list min-number max-number)\n                                            (let ((min-number (car min-number)))\n                                              (let ((max-number (cdr max-number)))\n                                                (if (null? max-number)\n                                                  (list min-number max-number)\n                                                  (let ((min-number (car min-number)))\n                                                    (let ((max-number (cdr max-number)))\n                                                      (if (null? max-number)\n                                                        (list min-number max-number)\n                                                      ",
    "  (let* ([min (car numbers)])\n    (let* ([max (car numbers)])\n      (let* ([min_index (car numbers)])\n        (let* ([max_index (car numbers)])\n          (if (eq? min max)\n              (list min max)\n              (list (cdr min_index) (cdr max_index))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (list min-number max-number)))))))))))))))\n",
    "  (let ((min-value (car numbers))\n        (max-value (cdr numbers)))\n    (if (null? numbers)\n      (list min-value max-value)\n      (let ((min-value (car numbers)))\n        (let ((max-value (cdr numbers)))\n          (if (null? numbers)\n            (list min-value max-value)\n            (let ((min-value (car numbers)))\n              (let ((max-value (cdr numbers)))\n                (if (null? numbers)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-",
    "  (let* ([min (car numbers)])\n    (let* ([max (car numbers)])\n      (let* ([min_index (car numbers)])\n        (let* ([max_index (car numbers)])\n          (if (eq? min max)\n            (list min max)\n            (let* ([min_value (car min)]\n                   [max_value (car max)])\n              (let* ([min_index (car min_index)]\n                     [max_index (car max_index)])\n                (if (eq? min_value max_value)\n                  (list min_value max_value)\n                  (let* ([min_value (car min_value)]\n                         [max_value (car max_value)])\n                    (if (eq? min_value max_value)\n                      (list min_value max_value)\n                      (let* ([min_value (car min_value)]\n                             [max_value (car max_value)])\n                        (if (eq? min_value max_value)\n                          (list min_value max_value)\n                          (let* ([min_value (car min_value)]\n                                 [max_value (car max_value)])\n                            (if (eq? min_value max_value)\n                              (list min_value max_value)\n                              (let* ([min_value (car min_value)]\n                                     [max_value (car max_value)])\n                                (if (eq? min_value max_value)\n                                  (list min_value max_value)\n                                  (let* ([min_value (car min_value)]\n                                         [max_value (car max_value)])\n                                    (if (eq? min_value max_value)\n                                      (list min_value max_value)\n                                      (let* ([min_value (car min_value)]\n                                             [max_value (car max_value)])\n                                        (if (eq? min_value max_value)\n                                          (list min_value max_value)\n                                          (let* ([min_value (car min_value)]\n                                                 [max",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (car (cdr numbers))))\n      (let ((min-index (car (find-min-index numbers))))\n        (let ((max-index (car (find-max-index numbers))))\n          (if (eq min-number max-number)\n            (list min-number max-number)\n            (list (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (car max-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-index (index-of min-number numbers))\n                  (max-index (index-of max-number numbers)))\n              (if (eq? min-index max-index)\n                (list min-number max-number)\n                (let ((min-value (car (cdr min-number)))\n                      (max-value (car (cdr max-number))))\n                  (if (eq? min-value max-value)\n                    (list min-number max-number)\n                    (let ((min-index (index-of min-number numbers))\n                          (max-index (index-of max-number numbers)))\n                      (if (eq? min-index max-index)\n                        (list min-number max-number)\n                        (let ((min-value (car (cdr (cdr min-number))))\n                              (max-value (car (cdr (cdr max-number))))\n                              (min-index (index-of min-value numbers))\n                              (max-index (index-of max-value numbers)))\n                          (if (eq? min-index max-index)\n                            (list min-number max-number)\n                            (let ((min-value (car (cdr (cdr (cdr min-number))))))\n                              (let ((max-value (car (cdr (cdr (cdr max-number))))))\n                                (list min-value max-value))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (cdr min-number)))\n          (if (null? max-value)\n            (list min-value max-value)\n            (let ((min-value (car min-value))\n                  (max-value (cdr min-value)))\n              (if (null? max-value)\n                (list min-value max-value)\n                (let ((min-value (car min-value))\n                      (max-value (cdr min-value)))\n                  (if (null? max-value)\n                    (list min-value max-value)\n                    (let ((min-value (car min-value))\n                          (max-value (cdr min-value)))\n                      (if (null? max-value)\n                        (list min-value max-value)\n                        (list min-value max-value))))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min (car numbers)])\n    (let* ([max (car numbers)])\n      (let* ([min_index (car numbers)])\n        (let* ([max_index (car numbers)])\n          (if (eq? min max)\n              (list min max)\n              (list (cdr min_index) (cdr max_index))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (let* ([min_diff (abs (min_number - max_number))])\n        (if (eq min_diff 0)\n            (list min_number max_number)\n            (let* ([min_index (car (find-min-index numbers min_number max_number))]\n                    [max_index (car (find-max-index numbers min_number max_number))])\n              (list (car (nth min_index 1)) (car (nth max_index 1))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min (car numbers))\n        (max (car numbers)))\n    (if (null? (cdr numbers))\n      (list min max)\n      (let ((min (car (cdr numbers)))\n             (max (car (cdr numbers))))\n        (if (eq? min max)\n          (list min max)\n          (if (< min max)\n            (list min max)\n            (if (< min min)\n              (list min max)\n              (list min min))))))))\n",
    "  (let ((min-number (car numbers))\n        (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-number (car numbers))\n             (max-number (cdr numbers)))\n        (if (null? numbers)\n          (list min-number max-number)\n          (let ((min-number (car numbers))\n                 (max-number (cdr numbers)))\n            (if (null? numbers)\n              (list min-number max-number)\n              (let ((min-number (car numbers))\n                     (max-number (cdr numbers)))\n                (if (null? numbers)\n                  (list min-number max-number)\n                  (list min-number max-number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (if (null? max-val)\n        (list min-val max-val)\n        (let* ([min-index (index-of min-val numbers)])\n          (let* ([max-index (index-of max-val numbers)])\n            (if (min-index > max-index)\n              (list max-val min-val)\n              (list min-val max-val))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n          [max-diff (max (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))])\n    (if (eq min-diff max-diff)\n      (list (car numbers) (car numbers))\n      (list (car numbers) (car numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n          [min-num (car min-diff)]\n          [max-num (car (cdr min-diff))])\n    (if (eq min-num max-num)\n      (list min-num max-num)\n      (list min-num (car numbers) max-num (cdr numbers))))\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (car max-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-index (car (index-of min-number numbers)))\n                  (max-index (car (index-of max-number numbers)))\n                  (min-value (car (nth min-index numbers)))\n                  (max-value (car (nth max-index numbers)))\n                  (difference (sub1 min-value max-value) (sub1 min-value min-value)))\n              (list min-value max-value difference)))))\n))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-val max-val))])\n        (let* ([max-index (car (find-max-index min-val max-val))])\n          (list (car (nth min-index max-val)) (car (nth max-index min-val)))\n        )\n      )\n    )\n  )\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-distance (lambda (a b) (+ (abs a) (abs b)))\n           (min-index (lambda (a b) (if (< a b) a b)))\n           (min-value (lambda (a b) (if (< a b) a b)))\n           (min-index-value (lambda (a b) (if (< a b) a b)))\n           (min-value-index (lambda (a b) (if (< a b) a b)))\n           (min-value-index-value (lambda (a b) (if (< a b) a b)))\n           (min-value-value (lambda (a b) (if (< a b) a b)))\n           (min-value-value-index (lambda (a b) (if (< a b) a b)))\n           (min-value-value-index-value (lambda (a b) (if (< a b) a b)))\n           (min-value-value-value (lambda (a b) (if (< a b) a b)))\n           (min-value-value-value-index (lambda (a b) (if (< a b) a b)))\n           (min-value-value-value-index-value (lambda (a b) (if (< a b) a b)))\n           (min-value-value-value-value (lambda (a b) (if (< a b) a b)))\n           (min-value-value-value-value-index (lambda (a b) (if (< a b) a b)))\n           (min-value-value-value-value-index-value (lambda (a b) (if (< a b) a b)))\n           (min-value-value-value-value-value (lambda (a b) (if (< a b) a b)))\n           (min-value-value-value-value-value-index (lambda (a b) (if (< a b) a b)))\n           (min-value-value-value-value-value-index-value (lambda (a b) (if (< a b) a b)))\n           (min-value-value-value-value-value-value (lambda (a b) (if (< a b) a b)))\n           (min-value-value-",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (if (null? max-val)\n        (list min-val max-val)\n        (let* ([min-index (index-of min-val numbers)])\n          (let* ([max-index (index-of max-val numbers)])\n            (if (eq? min-index max-index)\n              (list min-val max-val)\n              (list (nth min-index numbers) (nth max-index numbers))))))))\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (let ((min-number (car min-number)))\n                            (let ((max-number (cdr max-number)))\n                              (if (null? max-number)\n                                (list min-number max-number)\n                                (let ((min-number (car min-number)))\n                                  (let ((max-number (cdr max-number)))\n                                    (if (null? max-number)\n                                      (list min-number max-number)\n                                      (let ((min-number (car min-number)))\n                                        (let ((max-number (cdr max-number)))\n                                          (if (null? max-number)\n                                            (list min-number max-number)\n                                            (let ((min-number (car min-number)))\n                                              (let ((max-number (cdr max-number)))\n                                                (if (null? max-number)\n                                                  (list min-number max-number)\n                                                  (let ((min-number (car min-number)))\n                                                    (let ((max-number (cdr max-number)))\n                                                      (if (null? max-number)\n                                                        (list min-number max-number)\n                                                      ",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (let ((min-number (car min-number)))\n                            (let ((max-number (cdr max-number)))\n                              (if (null? max-number)\n                                (list min-number max-number)\n                                (list min-number max-number))))))))))))))))))))))\n",
    "  (let* ([smallest_number (car numbers)])\n    (let* ([smallest_index (index of smallest_number in numbers)])\n      (let* ([largest_number (car (cdr numbers))])\n        (let* ([largest_index (index of largest_number in numbers)])\n          (if (eq? smallest_number largest_number)\n            (list smallest_number largest_number)\n            (if (eq? smallest_number (car (cdr (cdr numbers))))\n              (list (car (cdr (cdr numbers))) (car (cdr (cdr (cdr numbers)))))))))\n    (if (eq? numbers (cdr numbers))\n      (list smallest_number largest_number)\n      (if (eq? numbers (cdr (cdr numbers)))\n        (list (car (cdr (cdr numbers))) (car (cdr (cdr (cdr numbers)))))))))\n  (if (empty? numbers)\n    (list 0.0 0.0)\n    (if (empty? (cdr numbers))\n      (list (car (cdr numbers)) (car (cdr (cdr numbers))))))\n  (if (empty? (cdr (cdr numbers)))\n    (list (car (cdr numbers)) (car (cdr (cdr numbers))))))\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min (car numbers)])\n    (let* ([max (car numbers)])\n      (let* ([min_index (car numbers)])\n        (let* ([max_index (car numbers)])\n          (if (eq? min max)\n              (list min max)\n              (let* ([min_value (car min)]\n                     [max_value (car max)])\n                (if (eq? min_value max_value)\n                    (list min max)\n                    (list (car min) (car max))))))))\n))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-val max-val))])\n        (let* ([max-index (car (find-max-index min-val max-val))])\n          (list min-val min-index max-val max-index))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (car max-number)))\n          (if (eq? min-value max-value)\n            (list min-value max-value)\n            (let ((min-index (index min-number))\n                  (max-index (index max-number)))\n              (if (eq? (car numbers) (car (cdr numbers)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max-number)))\n                (list (car (cdr min-number)) (car (cdr max",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest_index (index numbers smallest)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest_index (index numbers largest)])\n          (if (eq? smallest largest)\n            (list smallest largest)\n            (if (<= (abs (sub1 smallest_index)) (abs (sub1 largest_index)))\n              (list smallest largest)\n              (if (<= (abs (sub1 largest_index)) (abs (sub1 smallest_index)))\n                (list smallest largest)\n                (if (<= (abs (sub1 smallest_index)) (abs (sub1 largest_index)))\n                  (list smallest largest)\n                  (if (<= (abs (sub1 largest_index)) (abs (sub1 smallest_index)))\n                    (list smallest largest)\n                    (if (<= (abs (sub1 smallest_index)) (abs (sub1 largest_index)))\n                      (list smallest largest)\n                      (if (<= (abs (sub1 largest_index)) (abs (sub1 smallest_index)))\n                        (list smallest largest)\n                        (if (<= (abs (sub1 smallest_index)) (abs (sub1 largest_index)))\n                          (list smallest largest)\n                          (if (<= (abs (sub1 largest_index)) (abs (sub1 smallest_index)))\n                            (list smallest largest)\n                            (if (<= (abs (sub1 smallest_index)) (abs (sub1 largest_index)))\n                              (list smallest largest)\n                              (if (<= (abs (sub1 largest_index)) (abs (sub1 smallest_index)))\n                                (list smallest largest)\n                                (if (<= (abs (sub1 smallest_index)) (abs (sub1 largest_index)))\n                                  (list smallest largest)\n                                  (if (<= (abs (sub1 largest_index)) (abs (sub1 smallest_index)))\n                                    (list smallest largest)\n                                    (if (<= (abs (sub1 smallest_index)) (abs (sub1 largest_index)))\n                                      (list smallest largest)\n                                      (if (<= (abs (sub1 largest_index)) (abs (sub1 smallest_",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-val max-val))])\n        (let* ([max-index (car (find-max-index min-val max-val))])\n          (list min-val min-index max-val max-index))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (car min_number)\n        (let* ([min_diff (abs (min_number - max_number))])\n          (if (min_diff < 1.0)\n            (car min_number)\n            (let* ([max_diff (abs (max_number - min_number))])\n              (if (max_diff < 1.0)\n                (car max_number)\n                (let* ([diff (abs (min_number - max_number))])\n                  (if (diff < 1.0)\n                    (car min_number)\n                    (car max_number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (list min-number max-number)))))))))))))))\n",
    "  (let* ([smallest (car numbers)])\n    (let* ([largest (cdr numbers)])\n      (if (null? largest)\n        (cons smallest numbers)\n        (cons (car numbers) (cdr numbers)))))\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-number (car numbers)])\n    (let* ([max-number (cdr numbers)])\n      (let* ([min-value (car min-number)])\n        (let* ([max-value (cdr min-number)])\n          (if (eq? max-value min-value)\n            (list min-value max-value)\n            (let* ([min-index (car (find-min-index min-value max-value))])\n              (let* ([max-index (cdr (find-min-index min-value max-value))])\n                (list (car (nth min-index numbers)) (car (nth max-index numbers))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest_index (index numbers smallest)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest_index (index numbers largest)])\n          (if (eq? (car numbers) (car largest))\n            (list (car numbers) (car largest))\n            (list (car largest) (car numbers)))))\n      (if (eq? (car numbers) (car smallest))\n        (list (car numbers) (car smallest))\n        (list (car smallest) (car numbers))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((smallest (car numbers))\n        (largest (car numbers)))\n    (if (null? numbers)\n      (list smallest largest)\n      (let ((smallest (car numbers)))\n        (let ((largest (car numbers)))\n          (if (eq? smallest largest)\n            (list smallest largest)\n            (if (<= largest smallest)\n              (list smallest largest)\n              (if (<= smallest largest)\n                (list smallest largest)\n                (if (<= smallest largest)\n                  (list smallest largest)\n                  (list smallest largest))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (let ((min-index (car numbers)))\n        (let ((max-index (cdr numbers)))\n          (if (eq? min-number max-number)\n            (list min-number max-number)\n            (let ((min-diff (abs (- min-number max-number))))\n              (let ((max-diff (abs (- max-number min-number))))\n                (if (eq? min-diff max-diff)\n                  (list min-number max-number)\n                  (let ((min-diff-index (car numbers)))\n                    (let ((max-diff-index (cdr numbers)))\n                      (if (eq? min-diff-index max-diff-index)\n                        (list min-diff-index max-diff-index)\n                        (let ((min-diff-diff (abs (- (car min-diff-index) (car max-diff-index)))))\n                          (let ((max-diff-diff (abs (- (car max-diff-index) (car min-diff-index)))))\n                            (if (eq? min-diff-diff max-diff-diff)\n                              (list min-diff-index max-diff-index)\n                              (let ((min-diff-diff-index (car numbers)))\n                                (let ((max-diff-diff-index (cdr numbers)))\n                                  (if (eq? min-diff-diff-index max-diff-diff-index)\n                                    (list min-diff-diff-index max-diff-diff-index)\n                                    (list min-diff-index max-diff-index))))))))))))))))))))\n  (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n  (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n  (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0 2.2))\n  (find_closest_elements (list 1.0 2.0 3.0 4.",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (car (cdr numbers))))\n      (if (eq? min-number max-number)\n          (list min-number max-number)\n          (let ((min-index (index-of min-number numbers)))\n            (let ((max-index (index-of max-number numbers)))\n              (if (eq? min-index max-index)\n                  (list min-number max-number)\n                  (list (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-index (car numbers)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest-index (cdr numbers)])\n          (if (eq? smallest largest)\n            (list smallest largest)\n            (if (eq? smallest-index largest-index)\n              (list smallest largest)\n              (if (<= smallest-index largest-index)\n                (list smallest largest)\n                (if (<= smallest-index largest-index)\n                  (list smallest largest)\n                  (list smallest largest))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-distance (min (map (lambda (x) (abs (x) - (car numbers)))) numbers)])\n    (if (null? numbers)\n      (list min-distance)\n      (let* ([min-index (car min-distance)])\n        (if (null? (cdr min-distance))\n          (list (car numbers) (car numbers))\n          (let* ([min-value (car (cdr min-distance))])\n            (if (null? (cdr (cdr min-distance)))\n              (list min-value (car numbers))\n              (let* ([max-value (car (cdr (cdr min-distance)))])\n                (list min-value max-value)))))\n    )\n  )\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([largest (cdr numbers)])\n      (if (null? largest)\n        (list smallest)\n        (if (null? smallest)\n          (list largest)\n          (let* ([smallest_diff (diff smallest)])\n            (let* ([largest_diff (diff largest)])\n              (if (eq? smallest_diff largest_diff)\n                (list smallest)\n                (list largest))))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (let ((min-value (car min-number))\n            (max-value (cdr max-number)))\n        (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-index (car (indexes min-number)))\n                  (max-index (cdr (indexes min-number))))\n              (if (eq? min-index max-index)\n                  (list min-number max-number)\n                  (let ((min-value (car (values min-number)))\n                         (max-value (cdr (values min-number))))\n                    (if (eq? min-value max-value)\n                        (list min-number max-number)\n                        (let ((min-index (car (indexes min-number)))\n                               (max-index (cdr (indexes min-number))))\n                          (if (eq? min-index max-index)\n                              (list min-number max-number)\n                              (let ((min-value (car (values min-number)))\n                                     (max-value (cdr (values min-number))))\n                                (if (eq? min-value max-value)\n                                    (list min-number max-number)\n                                    (let ((min-index (car (indexes min-number)))\n                                          (max-index (cdr (indexes min-number))))\n                                      (if (eq? min-index max-index)\n                                          (list min-number max-number)\n                                          (let ((min-value (car (values min-number)))\n                                                (max-value (cdr (values min-number))))\n                                            (if (eq? min-value max-value)\n                                                (list min-number max-number)\n                                                (let ((min-index (car (indexes min-number)))\n                                                      (max-index (cdr (indexes min-number))))\n                                                  (if (eq? min-index max-index)\n                                                      (list min",
    "  (let ((min-number (car numbers))\n        (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-number (car numbers)))\n        (let ((max-number (cdr numbers)))\n          (if (null? numbers)\n            (list min-number max-number)\n            (let ((min-number (car numbers)))\n              (let ((max-number (cdr numbers)))\n                (if (null? numbers)\n                  (list min-number max-number)\n                  (list min-number max-number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min (car numbers))\n         (max (car numbers)))\n    (if (null? (cdr numbers))\n      (list min max)\n      (let ((min (car (cdr numbers)))\n             (max (car (cdr numbers))))\n        (if (eq? min max)\n          (list min max)\n          (if (< min max)\n            (list min max)\n            (if (< min max)\n              (list min max)\n              (list min max))))))))\n",
    "  (let ((min (car numbers))\n        (max (car numbers)))\n    (if (null? (cdr numbers))\n      (list min max)\n      (let ((min (car (cdr numbers)))\n             (max (car (cdr numbers))))\n        (if (eq? min max)\n          (list min max)\n          (if (eq? min (car (cdr (cdr numbers))))\n            (list min max)\n            (if (eq? max (car (cdr (cdr numbers))))\n              (list min max)\n              (list min max))))))))\n",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-distance (abs (cdr numbers) (cdr numbers))])\n      (let* ([closest (car numbers)])\n        (if (eq? (car numbers) smallest)\n          (list closest closest)\n          (if (> (abs (cdr numbers)) smallest-distance)\n            (list smallest smallest)\n            (let* ([closest-distance (abs (cdr numbers) (cdr numbers))])\n              (if (> closest-distance smallest-distance)\n                (list closest closest)\n                (list smallest smallest))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-index (index numbers smallest)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest-index (index numbers largest)])\n          (if (eq? (car numbers) smallest)\n            (list smallest smallest-index)\n            (if (eq? (car numbers) largest)\n              (list largest largest-index)\n              (list (car numbers) (car numbers) (cdr numbers))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-index (index-of min-number numbers))\n             (max-index (index-of max-number numbers)))\n        (if (min-index > max-index)\n          (list max-number min-number)\n          (list min-number max-number)\n        )\n      )\n    )\n  )\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (let* ([min_index (index numbers)])\n        (let* ([max_index (index numbers)])\n          (if (eq? min_number max_number)\n              (list min_number max_number)\n              (let* ([min_diff (difference min_number max_number)])\n                (if (<= min_diff 0)\n                    (list min_number max_number)\n                    (let* ([max_diff (difference max_number min_number)])\n                      (if (<= max_diff 0)\n                          (list min_number max_number)\n                          (list (add min_number min_diff) (add max_number max_diff)))))))))))))))\n",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (if (null? max-val)\n        (list min-val max-val)\n        (let* ([min-index (index-of min-val numbers)])\n          (let* ([max-index (index-of max-val numbers)])\n            (if (eq? min-index max-index)\n              (list min-val max-val)\n              (list (cdr (nth min-index numbers)) (cdr (nth max-index numbers))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-number (car numbers)])\n    (let* ([max-number (cdr numbers)])\n      (let* ([min-index (index numbers min-number)])\n        (let* ([max-index (index numbers max-number)])\n          (if (eq? min-index max-index)\n              (list min-number max-number)\n              (let* ([min-value (car (cdr (cdr (cdr numbers))))])\n                (let* ([max-value (car (cdr (cdr (cdr (cdr numbers))))])\n                       (if (eq? min-value max-value)\n                             (list min-number max-number)\n                             (let* ([min-diff (abs (- min-value) - abs (- max-value))])\n                               (let* ([max-diff (abs (- min-value) - abs (- max-value))])\n                                 (if (eq? min-diff max-diff)\n                                     (list min-number max-number)\n                                     (list min-value max-value))))))))))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (let ((min-index (car (find-min-index numbers))))\n        (let ((max-index (cdr (find-min-index numbers))))\n          (if (eq min-number max-number)\n            (list min-number max-number)\n            (list (car (nth min-index numbers)) (car (nth max-index numbers))))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (car (cdr numbers))))\n      (if (eq? max-number min-number)\n        (list min-number max-number)\n        (let ((min-index (index-of min-number numbers)))\n          (let ((max-index (index-of max-number numbers)))\n            (if (eq? max-index min-index)\n              (list min-number max-number)\n              (list (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n         [max-diff (max (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))])\n    (if (eq min-diff max-diff)\n      (list (car numbers) (car numbers))\n      (list (car numbers) (car numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([largest (cdr numbers)])\n      (if (null? largest)\n        (list smallest)\n        (if (null? smallest)\n          (list largest)\n          (let* ([smallest_diff (diff smallest)])\n            (let* ([largest_diff (diff largest)])\n              (if (null? smallest_diff)\n                (list largest)\n                (if (null? largest_diff)\n                  (list smallest)\n                  (list (list smallest_diff largest_diff)))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (let ((min-index (index numbers min-number)))\n        (let ((max-index (index numbers max-number)))\n          (if (eq min-index max-index)\n            (list min-number max-number)\n            (let ((min-value (car (cdr (cdr (cdr numbers)))))\n                  (max-value (car (cdr (cdr (cdr (cdr numbers)))))))\n              (if (eq min-value max-value)\n                (list min-number max-number)\n                (let ((min-diff (abs (min-number) - min-value)))\n                  (let ((max-diff (abs (max-number) - max-value)))\n                    (if (eq min-diff max-diff)\n                      (list min-number max-number)\n                      (let ((min-diff-index (index numbers min-number)))\n                        (let ((max-diff-index (index numbers max-number)))\n                          (if (eq min-diff-index max-diff-index)\n                            (list min-number max-number)\n                            (let ((min-diff-value (car (cdr (cdr (cdr (cdr numbers)))))\n                                   (max-diff-value (car (cdr (cdr (cdr (cdr (cdr numbers))))))))\n                              (if (eq min-diff-value max-diff-value)\n                                 (list min-number max-number)\n                                 (let ((min-diff-diff (abs (min-number) - min-diff-value)))\n                                   (let ((max-diff-diff (abs (max-number) - max-diff-value)))\n                                    (if (eq min-diff-diff max-diff-diff)\n                                      (list min-number max-number)\n                                      (let ((min-diff-diff-index (index numbers min-number)))\n                                        (let ((max-diff-diff-index (index numbers max-number)))\n                                          (if (eq min-diff-diff-index max-diff-diff-index)\n                               ",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (list min_number max_number)\n        (let* ([min_diff (abs (min_number - max_number))])\n          (if (min_diff < 1.0)\n            (list min_number max_number)\n            (let* ([max_diff (abs (max_number - min_number))])\n              (if (max_diff < 1.0)\n                (list min_number max_number)\n                (let* ([diff (abs (min_number - max_number))])\n                  (if (diff < 1.0)\n                    (list min_number max_number)\n                    (list min_number max_number))))))))))\n",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-index (index-of min-number numbers))\n             (max-index (index-of max-number numbers)))\n        (if (< min-index max-index)\n          (list min-number max-number)\n          (list (cdr (list min-number min-number))\n                       (car (list max-number max-number))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (if (null? (cdr numbers))\n        (list min-number max-number)\n        (if (< min-number max-number)\n          (list min-number max-number)\n          (if (< min-number (car (cdr numbers)))\n            (list min-number max-number)\n            (if (< min-number (car (cdr (cdr numbers))))\n              (list min-number max-number)\n              (if (< min-number (car (cdr (cdr (cdr numbers))))))))))))))\n",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-distance (abs (cdr numbers) (cdr numbers)))\n          (let* ([closest (car numbers)])\n            (if (eq? smallest-distance 0)\n                (car closest)\n                (let* ([closest-distance (abs (cdr closest) (cdr closest)))\n                  (if (eq? closest-distance 0)\n                      (car closest)\n                      (let* ([closest-distance (abs (cdr closest) (cdr closest)))\n                        (if (eq? closest-distance 0)\n                            (car closest)\n                            (let* ([closest-distance (abs (cdr closest) (cdr closest)))\n                              (if (eq? closest-distance 0)\n                                  (car closest)\n                                  (let* ([closest-distance (abs (cdr closest) (cdr closest)))\n                                      (if (eq? closest-distance 0)\n                                          (car closest)\n                                          (let* ([closest-distance (abs (cdr closest) (cdr closest)))\n                                              (if (eq? closest-distance 0)\n                                                  (car closest)\n                                                  (let* ([closest-distance (abs (cdr closest) (cdr closest)))\n                                                      (if (eq? closest-distance 0)\n                                                          (car closest)\n                                                          (let* ([closest-distance (abs (cdr closest) (cdr closest)))\n                                                              (if (eq? closest-distance 0)\n                                                                  (car closest)\n                                                                  (let* ([closest-distance (abs (cdr closest) (cdr closest)))\n                                                                      (if (eq? closest-distance 0)\n                                                                          (car closest)\n                                                                          (let* ([closest-distance (abs (cdr closest) (cdr closest)))\n                                                                              (if (eq? closest-distance 0)\n                                                                                  (car closest)\n                                                                                 ",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-number (car numbers)))\n        (let ((max-number (cdr numbers)))\n          (if (null? numbers)\n            (list min-number max-number)\n            (let ((min-number (car numbers)))\n              (let ((max-number (cdr numbers)))\n                (if (null? numbers)\n                  (list min-number max-number)\n                  (list min-number max-number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n          [min-num (car min-diff)]\n          [max-num (car (cdr min-diff))])\n    (if (null? (cdr numbers))\n      (list min-num max-num)\n      (list (car numbers) (car min-diff) (car (cdr min-diff)))))\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-index (index numbers smallest)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest-index (index numbers largest)])\n          (if (eq? smallest largest)\n              (list smallest largest)\n              (if (>= smallest-index largest-index)\n                  (list smallest largest)\n                  (if (<= smallest-index largest-index)\n                      (list smallest largest)\n                      (list smallest (append (list smallest) (list largest))))))))))))\n",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-value (car min-number))\n             (max-value (cdr min-number)))\n        (if (null? numbers)\n          (list min-value max-value)\n          (let ((min-value (car min-value))\n                 (max-value (cdr min-value)))\n            (if (null? numbers)\n              (list min-value max-value)\n              (let ((min-value (car min-value))\n                     (max-value (cdr min-value)))\n                (if (null? numbers)\n                  (list min-value max-value)\n                  (let ((min-value (car min-value))\n                         (max-value (cdr min-value)))\n                    (if (null? numbers)\n                      (list min-value max-value)\n                      (let ((min-value (car min-value))\n                             (max-value (cdr min-value)))\n                        (if (null? numbers)\n                          (list min-value max-value)\n                          (let ((min-value (car min-value))\n                                 (max-value (cdr min-value)))\n                            (if (null? numbers)\n                              (list min-value max-value)\n                              (let ((min-value (car min-value))\n                                     (max-value (cdr min-value)))\n                                (if (null? numbers)\n                                  (list min-value max-value)\n                                  (let ((min-value (car min-value))\n                                         (max-value (cdr min-value)))\n                                     (if (null? numbers)\n                                       (list min-value max-value)\n                                       (let ((min-value (car min-value))\n                                              (max-value (cdr min-value)))\n                                         (if (null? numbers)\n                                           (list min-value max-value)\n                                           (let ((min-value (car min-value))\n                                                ",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (cdr min-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-value (car min-value))\n                  (max-value (cdr min-value)))\n              (if (eq? min-value max-value)\n                (list min-number max-number)\n                (let ((min-value (car min-value))\n                      (max-value (cdr min-value)))\n                  (if (eq? min-value max-value)\n                    (list min-number max-number)\n                    (let ((min-value (car min-value))\n                          (max-value (cdr min-value)))\n                      (if (eq? min-value max-value)\n                        (list min-number max-number)\n                        (let ((min-value (car min-value))\n                              (max-value (cdr min-value)))\n                          (if (eq? min-value max-value)\n                            (list min-number max-number)\n                            (let ((min-value (car min-value))\n                                  (max-value (cdr min-value)))\n                              (if (eq? min-value max-value)\n                                (list min-number max-number
    "  (let ((min-number (car numbers)))\n    (let ((max-number (car (cdr numbers))))\n      (let ((min-value (car (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (let ((min-number (car min-number)))\n                            (let ((max-number (cdr max-number)))\n                              (if (null? max-number)\n                                (list min-number max-number)\n                                (list min-number max-number))))))))))))))))))))))\n",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-number (car numbers)))\n        (let ((max-number (cdr numbers)))\n          (if (null? numbers)\n            (list min-number max-number)\n            (let ((min-number (car numbers)))\n              (let ((max-number (cdr numbers)))\n                (if (null? numbers)\n                  (list min-number max-number)\n                  (list min-number max-number)\n                  (list min-number max-number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (cdr min-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let ((min-index (car (find-min-index min-number max-number)))\n                  (max-index (cdr (find-min-index min-number max-number))))\n              (list (cdr min-number) (car max-number)\n                   (car (cdr min-index)) (car (cdr max-index))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (list min_number max_number)\n        (let* ([min_diff (abs (min_number - max_number))])\n          (if (min_diff < 0.01)\n            (list min_number max_number)\n            (let* ([max_diff (abs (max_number - min_number))])\n              (if (max_diff < 0.01)\n                (list min_number max_number)\n                (list min_number max_number))))))))))\n",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (list min_number max_number)\n        (let* ([min_diff (abs (min_number - max_number))])\n          (if (min_diff < 0.01)\n            (list min_number max_number)\n            (let* ([max_diff (abs (max_number - min_number))])\n              (if (max_diff < 0.01)\n                (list min_number max_number)\n                (list min_number max_number))))))))))\n",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-index (car numbers)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest-index (cdr numbers)])\n          (if (eq? (car numbers) (car largest))\n            (list (car numbers) (car largest))\n            (list (car largest) (car numbers))\n          )\n        )\n      )\n    )\n  )\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n         [max-diff (max (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))])\n    (if (eq min-diff max-diff)\n      (list (car numbers) (car numbers))\n      (list (car numbers) (cdr numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-number (car numbers)])\n    (let* ([max-number (cdr numbers)])\n      (if (null? max-number)\n        (list min-number max-number)\n        (let* ([min-index (index-of min-number numbers)])\n          (let* ([max-index (index-of max-number numbers)])\n            (if (eq? min-index max-index)\n              (list min-number max-number)\n              (let* ([min-value (car numbers)])\n                (let* ([max-value (cdr numbers)])\n                  (if (eq? min-value max-value)\n                    (list min-value max-value)\n                    (let* ([min-index (index-of min-value numbers)])\n                      (let* ([max-index (index-of max-value numbers)])\n                        (if (eq? min-index max-index)\n                          (list min-value max-value)\n                          (list min-value min-value))))))))))))))))\n",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x) - (car numbers)))))\n          max-diff (max (map (lambda (x) (abs (x) - (car numbers)))))]\n          [min-num (car (first numbers))]\n          [max-num (car (last numbers))])\n    (if (null? numbers)\n      (list min-num max-num)\n      (if (null? numbers)\n        (list min-num max-num)\n        (if (null? numbers)\n          (list min-num max-num)\n          (if (null? numbers)\n            (list min-num max-num)\n            (if (null? numbers)\n              (list min-num max-num)\n              (if (null? numbers)\n                (list min-num max-num)\n                (if (null? numbers)\n                  (list min-num max-num)\n                  (if (null? numbers)\n                    (list min-num max-num)\n                    (if (null? numbers)\n                      (list min-num max-num)\n                      (if (null? numbers)\n                        (list min-num max-num)\n                        (if (null? numbers)\n                          (list min-num max-num)\n                          (if (null? numbers)\n                            (list min-num max-num)\n                            (if (null? numbers)\n                              (list min-num max-num)\n                              (if (null? numbers)\n                                (list min-num max-num)\n                                (if (null? numbers)\n                                  (list min-num max-num)\n                                  (if (null? numbers)\n                                    (list min-num max-num)\n                                    (if (null? numbers)\n                                      (list min-num max-num)\n                                      (if (null? numbers)\n                                        (list min-num max-num)\n                                        (if (null? numbers)\n                                          (list min-num max-num)\n                                          (if (null? numbers)\n                                            (list min-num max-num)\n                                            (",
    "  (let ((min (car numbers))\n        (max (car numbers)))\n    (if (null? (cdr numbers))\n      (list min max)\n      (let ((min (car (cdr numbers)))\n             (max (car (cdr numbers))))\n        (if (eq? min max)\n          (list min max)\n          (if (< min max)\n            (list min max)\n            (if (< min min)\n              (list min min)\n              (if (< max max)\n                (list max max)\n                (if (< max min)\n                  (list max min))))))))))\n",
    "  (let* ([smallest (car numbers)])\n    (let* ([largest (cdr numbers)])\n      (if (null? largest)\n        (car numbers)\n        (if (null? smallest)\n          largest\n          (if (< (car numbers) (car smallest))\n            (car numbers)\n            (if (< (car largest) (car smallest))\n              (car numbers)\n              (car largest))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min (car numbers)])\n    (let* ([max (car numbers)])\n      (let* ([min_max (min max)])\n        (if (eq? min_max min)\n            (car numbers)\n            (cdr numbers)))\n    )\n  )\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-distance (lambda (a b) (abs (a - b)))]\n         [min-index (lambda (a b) (if (< (min-distance a b) (min-distance b a)) a b))]\n         [min-index-2 (lambda (a b c) (if (< (min-distance a b) (min-distance b c)) (min-distance a c) (min-distance b c)))])\n    (if (null? numbers)\n      (error \"No numbers supplied!\")\n      (let* ([(min-number (car numbers)) (max-number (cdr numbers))]\n             [min-index-2-result (min-index-2 min-number max-number)])\n        (if (null? min-index-2-result)\n          (error \"No two numbers are close enough!\")\n          (let* ([min-index-2-result-2 (car min-index-2-result)])\n            (list min-index-2-result-2 min-index-2-result-2)))))))\n",
    "  (let* ([smallest (car numbers)])\n    (let* ([largest (cdr numbers)])\n      (if (null? largest)\n        (car numbers)\n        (if (null? smallest)\n          largest\n          (if (< (car numbers) (car smallest))\n            (car numbers)\n            (if (< (car numbers) (car largest))\n              (car numbers)\n              (car smallest))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (if (< min-number max-number)\n        (list min-number max-number)\n        (if (< min-number (car (cdr (cdr numbers))))\n          (list min-number (car (cdr (cdr numbers))))\n          (if (< min-number (car (cdr (cdr (cdr numbers))))))\n            (list (car (cdr (cdr (cdr numbers)))) (car (cdr (cdr (cdr numbers))))))))))\n",
    "  (let* ([min-number (car numbers)])\n    (let* ([max-number (cdr numbers)])\n      (let* ([min-value (car min-number)])\n        (let* ([max-value (cdr max-number)])\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (let* ([min-index (index min-number)])\n              (let* ([max-index (index max-number)])\n                (if (<= min-index max-index)\n                  (list min-number max-number)\n                  (let* ([min-value (car (cdr min-number))])\n                    (let* ([max-value (cdr (cdr max-number))])\n                      (if (eq? min-value max-value)\n                        (list min-number max-number)\n                        (let* ([min-index (index min-number)])\n                          (let* ([max-index (index max-number)])\n                            (if (<= min-index max-index)\n                              (list min-number max-number)\n                              (let* ([min-value (car (cdr (cdr min-number)))])\n                                (let* ([max-value (cdr (cdr (cdr max-number)))])\n                                  (if (eq? min-value max-value)\n                                      (list min-number max-number)\n                                      (let* ([min-index (index min-number)])\n                                        (let* ([max-index (index max-number)])\n                                          (if (<= min-index max-index)\n                                            (list min-number max-number)\n                                            (error \"No closest elements found\"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-value (car min-number))\n             (max-value (car max-number)))\n        (if (null? numbers)\n          (list min-value max-value)\n          (let ((min-index (car numbers))\n                 (max-index (cdr numbers)))\n            (if (null? numbers)\n              (list min-index max-index)\n              (let ((min-value (car min-index))\n                     (max-value (car max-index)))\n                (if (null? numbers)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min-value max-value)\n                  (list min",
    "  (let* ([min (car numbers) max (car numbers)])\n    (if (null? numbers)\n      (list min max)\n      (let* ([min_val (car min) max_val (car max)])\n        (if (eq? min_val max_val)\n            (list min max)\n            (let* ([min_val (car min_val) max_val (car max_val)])\n              (if (eq? min_val max_val)\n                  (list min max)\n                  (list min_val max_val))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-index (index numbers smallest)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest-index (index numbers largest)])\n          (if (eq? (car numbers) smallest)\n            (list smallest smallest-index)\n            (if (eq? (car numbers) largest)\n              (list largest largest-index)\n              (list (car numbers) (cdr numbers))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-number (car numbers)))\n        (let ((max-number (cdr numbers)))\n          (if (null? numbers)\n            (list min-number max-number)\n            (list (car min-number) (car max-number))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-index (index-of min-number numbers))\n             (max-index (index-of max-number numbers)))\n        (if (min-index > max-index)\n          (list max-number min-number)\n          (list min-number max-number)\n          (list min-number (car (cdr (cdr numbers))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-number (car numbers)])\n    (let* ([max-number (cdr numbers)])\n      (if (null? max-number)\n        (list min-number max-number)\n        (let* ([min-index (index-of min-number numbers)])\n          (let* ([max-index (index-of max-number numbers)])\n            (if (eq? min-index max-index)\n              (list min-number max-number)\n              (list (nth min-index numbers) (nth max-index numbers))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_num (car numbers)])\n    (let* ([max_num (cdr numbers)])\n      (if (null? max_num)\n        (list min_num max_num)\n        (let* ([min_diff (abs (min_num - max_num))])\n          (if (min_diff < 0.01)\n            (list min_num max_num)\n            (let* ([max_diff (abs (max_num - min_num))])\n              (if (max_diff < 0.01)\n                (list min_num max_num)\n                (list min_num (min_num + max_num) (min_num - max_num)))))\n      )))))\n",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-number (car numbers)))\n        (let ((max-number (cdr numbers)))\n          (if (null? numbers)\n            (list min-number max-number)\n            (let ((min-number (car numbers)))\n              (let ((max-number (cdr numbers)))\n                (if (null? numbers)\n                  (list min-number max-number)\n                  (list min-number max-number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min (car numbers))\n        (max (car numbers)))\n    (if (null? (cdr numbers))\n      (list min max)\n      (let ((min (car (cdr numbers)))\n             (max (car (cdr numbers))))\n        (if (eq? min max)\n          (list min max)\n          (let ((min (car (cdr (cdr numbers))))\n                 (max (car (cdr (cdr numbers))))\n                 (diff (abs min) (abs max)))\n            (if (eq? min max)\n              (list min max)\n              (list (+ min diff) (+ max diff))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (let* ([min_index (car (find-min-index numbers))])\n        (let* ([max_index (cdr (find-min-index numbers))])\n          (if (eq min_index max_index)\n            (list min_number max_number)\n            (list (car (nth min_index numbers)) (car (nth max_index numbers)))\n          )\n        )\n      )\n    )\n  )\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (list min_number max_number)\n        (let* ([min_diff (abs (min_number - max_number))])\n          (if (> min_diff 0.0)\n            (list min_number max_number)\n            (list (add min_number min_diff) (sub max_number min_diff)))))\n    ))\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n         [min-num (car min-diff)]\n         [max-num (car (cdr min-diff))])\n    (if (eq min-num max-num)\n      (list min-num max-num)\n      (list max-num min-num)))\n)\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (let* ([min-index (car numbers)])\n        (let* ([max-index (cdr numbers)])\n          (if (null? max-index)\n            (list min-val max-val)\n            (let* ([min-value (car min-index)])\n              (let* ([max-value (cdr min-index)])\n                (if (null? max-value)\n                  (list min-value max-value)\n                  (let* ([min-value-index (car min-value)])\n                    (let* ([max-value-index (cdr min-value)])\n                      (if (null? max-value-index)\n                        (list min-value-index max-value-index)\n                        (let* ([min-value-value (car min-value-index)])\n                          (let* ([max-value-value (cdr min-value-index)])\n                            (if (null? max-value-value)\n                              (list min-value-value max-value-value)\n                              (let* ([min-value-value-index (car min-value-value)])\n                                (let* ([max-value-value-index (cdr min-value-value)])\n                                  (if (null? max-value-value-index)\n                                    (list min-value-value-index max-value-value-index)\n                                    (let* ([min-value-value-value (car min-value-value-index)])\n                                      (let* ([max-value-value-value (cdr min-value-value-index)])\n                                        (if (null? max-value-value-value)\n                                          (list min-value-value-value max-value-value-value)\n                                          (list min-value-value min-value-value-value max-value-value max-value-value-value))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
    "  (let* ([min (car numbers) max (car numbers)])\n    (if (null? (cdr numbers))\n      (list min max)\n      (let* ([min_index (car numbers) max_index (car numbers)])\n        (if (null? (cdr numbers))\n          (list min_index max_index)\n          (let* ([min_value (car (cdr numbers)) max_value (car (cdr numbers))])\n            (if (null? (cdr (cdr numbers)))\n              (list min_value max_value)\n              (let* ([min_index_value (car (cdr (cdr numbers))) max_index_value (car (cdr (cdr numbers)))])\n                (if (null? (cdr (cdr (cdr numbers))))\n                  (list min_index_value max_index_value)\n                  (let* ([min_index_value_value (car (cdr (cdr (cdr (cdr numbers)))) max_index_value_value (car (cdr (cdr (cdr (cdr numbers))))])\n                    (if (null? (cdr (cdr (cdr (cdr (cdr numbers))))))\n                      (list min_index_value_value max_index_value_value)\n                      (let* ([min_index_value_value_value (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr numbers)))))))) max_index_value_value_value (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr numbers))))))))])\n                        (if (null? (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-index (index numbers smallest)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest-index (index numbers largest)])\n          (if (eq? (car numbers) (car largest))\n            (list (car numbers) (car largest))\n            (list (car largest) (car numbers)))))\n    (if (eq? (car numbers) (car smallest))\n      (list (car numbers) (car smallest))\n      (list (car smallest) (car numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (car min_number)\n        (let ([min_diff (abs (cdr min_number) - abs (cdr max_number))])\n          (if (min_diff < 0)\n            (car min_number)\n            (let ([max_diff (abs (cdr min_number) - abs (cdr max_number))])\n              (if (max_diff < 0)\n                (car max_number)\n                (let ([min_diff (abs (cdr min_number) - abs (cdr max_number))])\n                  (if (min_diff < 0)\n                    (car min_number)\n                    (car max_number))))))))))\n",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (car min_number)\n        (let* ([min_number (car min_number)])\n          (let* ([max_number (cdr min_number)])\n            (if (null? max_number)\n              (car max_number)\n              (let* ([max_number (car max_number)])\n                (if (null? max_number)\n                  (car min_number)\n                  (let* ([min_number (car min_number)])\n                    (if (null? min_number)\n                      (car max_number)\n                      (let* ([min_number (car min_number)])\n                        (if (null? min_number)\n                          (car max_number)\n                          (car min_number))))))))))))))))\n",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n          [max-diff (max (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))])\n    (if (eq min-diff max-diff)\n      (list min-diff max-diff)\n      (list (car numbers) (car numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (cdr min-number)))\n          (if (null? max-value)\n            (list min-value max-value)\n            (let ((min-value (car min-value))\n                  (max-value (cdr min-value)))\n              (if (null? max-value)\n                (list min-value max-value)\n                (let ((min-value (car min-value))\n                      (max-value (cdr min-value)))\n                  (if (null? max-value)\n                    (list min-value max-value)\n                    (list min-value max-value))))))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-value (car min-number))\n              (max-value (car max-number)))\n          (if (eq? min-value max-value)\n            (list min-number max-number)\n            (if (< min-value max-value)\n              (list min-number max-number)\n              (if (< min-value max-value)\n                (list min-number max-number)\n                (if (< min-value max-value)\n                  (list min-number max-number)\n                  (list min-number max-number))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([largest (car numbers)])\n      (let* ([smallest_index (index numbers smallest)])\n        (let* ([largest_index (index numbers largest)])\n          (if (eq? largest_index smallest_index)\n            (list smallest largest)\n            (let* ([smallest_diff (diff smallest_index largest_index)])\n              (if (<= smallest_diff 0)\n                (list smallest largest)\n                (let* ([largest_diff (diff largest_index smallest_index)])\n                  (if (<= largest_diff 0)\n                    (list smallest largest)\n                    (let* ([smallest_diff_diff (diff smallest_diff)])\n                      (if (<= smallest_diff_diff 0)\n                        (list smallest largest)\n                        (let* ([largest_diff_diff (diff largest_diff)])\n                          (if (<= largest_diff_diff 0)\n                            (list smallest largest)\n                            (list smallest_index largest_index))))))))))))))))))\n",
    "  (let ((min-number (car numbers))\n        (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-index (index-of min-number numbers))\n            (max-index (index-of max-number numbers)))\n        (if (min-index > max-index)\n          (list max-number min-number)\n          (list min-number max-number))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-val (car numbers)))\n    (let ((max-val (cdr numbers)))\n      (if (null? max-val)\n        (list min-val max-val)\n        (let ((min-val (car min-val)))\n          (let ((max-val (cdr min-val)))\n            (if (null? max-val)\n              (list min-val max-val)\n              (let ((min-val (car min-val)))\n                (let ((max-val (cdr min-val)))\n                  (if (null? max-val)\n                    (list min-val max-val)\n                    (let ((min-val (car min-val)))\n                      (let ((max-val (cdr min-val)))\n                        (if (null? max-val)\n                          (list min-val max-val)\n                          (list min-val max-val))))))))))))))\n",
    "  (let* ([min-diff (min (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))]\n          [max-diff (max (map (lambda (x) (abs (x - (car numbers))))) (cdr numbers))])\n    (if (eq min-diff max-diff)\n      (list min-diff max-diff)\n      (list (car numbers) (car numbers)))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (if (null? (cdr numbers))\n        (list min-number min-number)\n        (if (< min-number max-number)\n          (list min-number max-number)\n          (if (< min-number (car (cdr numbers)))\n            (list min-number (car (cdr numbers)))\n            (if (< min-number (car (cdr (cdr numbers))))\n              (list min-number (car (cdr (cdr numbers))))\n              (if (< min-number (car (cdr (cdr (cdr numbers))))))))))))))\n",
    "  (let ((min-number (car numbers))\n         (max-number (cdr numbers)))\n    (if (null? numbers)\n      (list min-number max-number)\n      (let ((min-index (index-of min-number numbers))\n             (max-index (index-of max-number numbers)))\n        (if (min-index > max-index)\n          (list max-number min-number)\n          (list min-number max-number)\n          (list (cdr (cdr numbers)) (car numbers)))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((numbers_copy numbers))\n    (if (null? numbers_copy)\n      (error \"Not enough numbers supplied to find closest elements\")\n      (let ((min_number (car numbers_copy))\n            (max_number (car (cdr numbers_copy))))\n        (if (null? (cdr numbers_copy))\n          (error \"Not enough numbers supplied to find closest elements\")\n          (let ((min_number (car (cdr (cdr numbers_copy))))\n                (max_number (car (cdr (cdr (cdr numbers_copy))))))\n            (if (null? (cdr (cdr (cdr (cdr numbers_copy))))))\n              (error \"Not enough numbers supplied to find closest elements\")\n            (let ((min_number (car (cdr (cdr (cdr (cdr (cdr numbers_copy))))))))\n              (let ((max_number (car (cdr (cdr (cdr (cdr (cdr (cdr numbers_copy))))))))\n                    (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_number (min_",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (if (null? max-val)\n        (list min-val max-val)\n        (let* ([min-index (car (find-min-index min-val max-val))])\n          (let* ([max-index (car (find-max-index min-val max-val))])\n            (list (car min-val) (car max-val) (car min-index) (car max-index))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-number (car numbers)])\n    (let* ([max-number (cdr numbers)])\n      (if (null? max-number)\n        (car min-number)\n        (if (null? min-number)\n          (car max-number)\n          (if (< min-number max-number)\n            (car min-number)\n            (if (< min-number max-number)\n              (car max-number)\n              (car min-number))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (list min_number max_number)\n        (let* ([min_diff (abs (min_number - max_number))])\n          (if (< min_diff 0.0)\n            (list min_number max_number)\n            (let* ([max_diff (abs (max_number - min_number))])\n              (if (< max_diff 0.0)\n                (list min_number max_number)\n                (list min_number max_number)))\n          )\n        )\n      )\n    )\n  )\n)\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr min-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car max-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (list min-number min-number))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min (car numbers)])\n    (let* ([max (car numbers)])\n      (let* ([min_index (car numbers)])\n        (let* ([max_index (car numbers)])\n          (if (eq? min max)\n              (car numbers)\n            (if (eq? min_index max_index)\n                (car numbers)\n              (if (< min_index max_index)\n                  (car numbers)\n                (if (< min max)\n                    (car numbers)\n                  (car numbers))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let ((smallest (car numbers))\n        (largest (car numbers)))\n    (if (null? numbers)\n      (list smallest largest)\n      (let ((smallest (car numbers)))\n        (let ((largest (car numbers)))\n          (if (eq? largest smallest)\n            (list smallest largest)\n            (if (eq? largest smallest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (list smallest largest)\n              (",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n                    (list min-number max-number)\n",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-val max-val))])\n        (let* ([max-index (car (find-max-index min-val max-val))])\n          (list (car (nth min-index max-val)) (car (nth max-index min-val)))))\n    )))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (if (null? max_number)\n        (car min_number)\n        (let* ([min_diff (abs (cdr min_number) (cdr max_number))])\n          (if (null? min_diff)\n            (car min_number)\n            (let* ([max_diff (abs (cdr min_number) (cdr min_number))])\n              (if (null? max_diff)\n                (car max_number)\n                (let* ([diff (abs (cdr max_number) (cdr min_number))])\n                  (if (null? diff)\n                    (car min_number)\n                    (let* ([min_diff (abs (cdr min_number) (cdr max_number))])\n                      (if (null? min_diff)\n                        (car max_number)\n                        (let* ([max_diff (abs (cdr max_number) (cdr min_number))])\n                          (if (null? max_diff)\n                            (car min_number)\n                            (let* ([diff (abs (cdr min_number) (cdr max_number))])\n                              (if (null? diff)\n                                (car max_number)\n                                (else\n                                  (car (cdr diff)))))\n                          (else\n                            (car (cdr max_diff)))))\n                      (else\n                        (car (cdr min_diff)))))\n                  (else\n                    (car (cdr diff)))))\n              (else\n                (car (cdr max_diff)))))\n          (else\n            (car (cdr diff)))))\n    (else\n      (car min_number)))\n)\n",
    "  (let ((min-value (car numbers))\n         (max-value (cdr numbers)))\n    (if (null? numbers)\n      (list min-value max-value)\n      (let ((min-value (car numbers)))\n        (let ((max-value (cdr numbers)))\n          (if (null? numbers)\n            (list min-value max-value)\n            (list (min-value max-value) (min-value min-value))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([smallest-index (car numbers)])\n      (let* ([largest (cdr numbers)])\n        (let* ([largest-index (cdr numbers)])\n          (if (eq? (car numbers) smallest)\n            (list smallest smallest-index)\n            (if (eq? (car numbers) largest)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list largest smallest-index)\n              (list largest smallest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index)\n              (list smallest smallest-index)\n              (list largest largest-index)\n              (list smallest largest-index",
    "  (let* ([min_number (car numbers)])\n    (let* ([max_number (cdr numbers)])\n      (let* ([min_index (index numbers)])\n        (let* ([max_index (index numbers)])\n          (if (eq? min_number max_number)\n              (list min_number max_number)\n              (let* ([min_diff (difference min_number max_number)])\n                (if (<= min_diff 0)\n                    (list min_number max_number)\n                    (let* ([max_diff (difference max_number min_number)])\n                      (if (<= max_diff 0)\n                          (list min_number max_number)\n                          (let* ([closest_pair (list (add min_number min_diff) (add max_number max_diff))]\n                                 [closest_pair_index (index closest_pair)])\n                            (list closest_pair_index closest_pair)))))\n          )))))))))\n",
    "  (let ((min-number (car numbers)))\n    (let ((max-number (cdr numbers)))\n      (if (null? max-number)\n        (list min-number max-number)\n        (let ((min-number (car min-number)))\n          (let ((max-number (cdr max-number)))\n            (if (null? max-number)\n              (list min-number max-number)\n              (let ((min-number (car min-number)))\n                (let ((max-number (cdr max-number)))\n                  (if (null? max-number)\n                    (list min-number max-number)\n                    (let ((min-number (car min-number)))\n                      (let ((max-number (cdr max-number)))\n                        (if (null? max-number)\n                          (list min-number max-number)\n                          (list min-number max-number)\n                          (list min-number max-number))))))))))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-number (car numbers)])\n    (let* ([max-number (cdr numbers)])\n      (let* ([min-index (car (find-min-index min-number max-number))])\n        (let* ([max-index (car (find-max-index min-number max-number))])\n          (list (car (nth min-index numbers)) (car (nth max-index numbers))))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([smallest (car numbers)])\n    (let* ([largest (car numbers)])\n      (let* ([smallest_index (car numbers)])\n        (let* ([largest_index (car numbers)])\n          (if (eq? largest_index smallest_index)\n            (list smallest largest)\n            (let* ([smallest_value (car numbers)])\n              (let* ([largest_value (car numbers)])\n                (if (eq? largest_value smallest_value)\n                  (list smallest_value largest_value)\n                  (let* ([smallest_value_index (car numbers)])\n                    (let* ([largest_value_index (car numbers)])\n                      (if (eq? largest_value_index smallest_value_index)\n                        (list smallest_value_index largest_value_index)\n                        (let* ([smallest_value_value (car numbers)])\n                          (let* ([largest_value_value (car numbers)])\n                            (if (eq? largest_value_value smallest_value_value)\n                              (list smallest_value_value largest_value_value)\n                              (let* ([smallest_value_value_index (car numbers)])\n                                (let* ([largest_value_value_index (car numbers)])\n                                  (if (eq? largest_value_value_index smallest_value_value_index)\n                                    (list smallest_value_value_index largest_value_value_index)\n                                    (let* ([smallest_value_value_value (car numbers)])\n                                      (let* ([largest_value_value_value (car numbers)])\n                                        (if (eq? largest_value_value_value smallest_value_value_value)\n                                          (list smallest_value_value_value largest_value_value_value)\n                                          (let* ([smallest_value_value_value_index (car numbers)])\n                                            (let* ([largest_value_value_value_index (car numbers)])\n                                              (if (eq? largest_value_value_value_index smallest_value_value_value_index)\n                                                (",
    "  (let* ([min-val (car numbers)])\n    (let* ([max-val (cdr numbers)])\n      (if (null? max-val)\n        (car min-val)\n        (if (null? min-val)\n          (car max-val)\n          (if (< (car min-val) (car max-val))\n            (car min-val)\n            (car max-val))))))\n\n;; From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n;; other and return them in order (smaller number, larger number).\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.2))\n;; (list 2.0 2.2)\n;; >>> (find_closest_elements (list 1.0 2.0 3.0 4.0 5.0 2.0))\n;; (list 2.0 2.0)",
    "  (let* ([min-distance (lambda (x y) (abs (x - y)))]\n         [min-index (lambda (x y) (if (< x y) x y))])\n    (let* ([min-index-1 (lambda (x y) (min-index x y))]\n           [min-index-2 (lambda (x y) (min-index y x))]\n           [min-distance-1 (lambda (x y) (min-distance x y))]\n           [min-distance-2 (lambda (x y) (min-distance y x))]\n           [min-index-1-2 (lambda (x y) (min-index-1 x y))]\n           [min-index-2-1 (lambda (x y) (min-index-2 y x))]\n           [min-distance-1-2 (lambda (x y) (min-distance-1 x y))]\n           [min-distance-2-1 (lambda (x y) (min-distance-2 y x))]\n           [min-index-1-2-1 (lambda (x y) (min-index-1-2 x y))]\n           [min-index-2-1-2 (lambda (x y) (min-index-2-1 y x))]\n           [min-distance-1-2-1 (lambda (x y) (min-distance-1-2 x y))]\n           [min-distance-2-1-2 (lambda (x y) (min-distance-2-1 y x))]\n           [min-index-1-2-1-2 (lambda (x y) (min-index-1-2-1 x y))]\n           [min-index-2-1-2-1 (lambda (x y) (min-index-2-1-2 y x))]\n           [min-distance-1-2-1-2 (lambda (x y) (min-distance-1-2-1 x y))]\n           [min-distance-2-1-2-1 (lambda (x y) (min-distance-2-1-2 y x))]\n           [min-index-1-2-1-2-1 (",
    "  (let ((min-number (car numbers))\n        (max-number (cdr numbers)))\n    (let ((min-index (index-of min-number numbers))\n          (max-index (index-of max-number numbers)))\n      (if (eq min-index max-index)\n        (list min-number max-number)\n        (let ((min-value (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr ("
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}