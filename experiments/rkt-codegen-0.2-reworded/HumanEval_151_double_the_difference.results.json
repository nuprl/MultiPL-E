{
  "name": "HumanEval_151_double_the_difference",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292517,
      "stdout": "",
      "stderr": "/tmp/tmpzg3on7vv.rkt:18:38: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2))) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2))) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptc6b5_q6.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptc6b5_q6.rkt:42:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptc6b5_q6.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptc6b5_q6.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptc6b5_q6.rkt:45:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptc6b5_q6.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n        lst)))\n  )\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcf_bld1q.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcf_bld1q.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcf_bld1q.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcf_bld1q.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcf_bld1q.rkt:44:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum-of-squares (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)) (car lst))\n          (cdr lst)))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)) (cdr lst))\n          (cdr lst)))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292517,
      "stdout": "",
      "stderr": "/tmp/tmpn3jptdsr.rkt:23:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (car lst)) (cdr lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(-2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:41:4\n\n*: contract violation\n  expected: number?\n  given: '(3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:42:4\n\n*: contract violation\n  expected: number?\n  given: '(-7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x)) lst))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:39:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (negative? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneescr0o.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneescr0o.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneescr0o.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneescr0o.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpneescr0o.rkt:46:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* lst (car lst)) (* (car lst) (car lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:36:4\n\n*: contract violation\n  expected: number?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:41:4\n\n*: contract violation\n  expected: numbe",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '(50.0 32.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:40:4\n\n+: contract violation\n  expected: number?\n  given: '(0.020000000000000004 0.08000000000000002 0.18)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '(128.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(0.08000000000000002 18.0 50.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(2.0 18.0 50.0 98.0 162.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292517,
      "stdout": "",
      "stderr": "/tmp/tmpzg3on7vv.rkt:18:38: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292517,
      "stdout": "",
      "stderr": "/tmp/tmpzg3on7vv.rkt:18:38: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x)) lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:28:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      )))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:46:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.0 -125.0 -27.0 -1.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (let ((sum (make-vector 0 (length lst))))\n      (for-each (lambda (x)\n                  (if (odd? x)\n                    (setf sum (+ (* x x) sum)))))\n      sum)))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum-of-squares (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "/tmp/tmp06v4n1bu.rkt:19:18: if: missing an \"else\" expression\n  in: (if (odd? x) (setf sum (+ (* x x) sum)))\n  location...:\n   /tmp/tmp06v4n1bu.rkt:19:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopy3vzqv.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopy3vzqv.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopy3vzqv.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopy3vzqv.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopy3vzqv.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpopy3vzqv.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n       (* (* 2 (car lst)) (cdr lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk98674zj.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk98674zj.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk98674zj.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk98674zj.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(-2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk98674zj.rkt:41:4\n\n*: contract violation\n  expected: number?\n  given: '(3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk98674zj.rkt:42:4\n\n*: contract violation\n  expected: number?\n  given: '(-7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcirl8jlj.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcirl8jlj.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcirl8jlj.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcirl8jlj.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcirl8jlj.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcirl8jlj.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x))\n          lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x))\n          lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 0\n;; >>> (double_the_difference (list -1 -2 0))\n;; 10\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp544_amrp.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp544_amrp.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp544_amrp.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp544_amrp.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp544_amrp.rkt:47:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp544_amrp.rkt:48:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.0 -125.0 -27.0 -1.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      )))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:46:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:28:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:29:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:30:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:31:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:32:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:33:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* lst (car lst)) (* (car lst) (car lst))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplidu5s34.rkt:36:4\n\n*: contract violation\n  expected: number?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplidu5s34.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplidu5s34.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplidu5s34.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplidu5s34.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplidu5s34.rkt:41:4\n\n*: contract violation\n  expected: numbe",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmps6wlus2_.rkt:18:38: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      )))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2ih1am3.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2ih1am3.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2ih1am3.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2ih1am3.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg2ih1am3.rkt:45:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292517,
      "stdout": "",
      "stderr": "/tmp/tmpzg3on7vv.rkt:18:38: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2))\n                 (filter (lambda (y) (not (modulo y 2))\n                          (cons y lst))))\n         lst)))\n    0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmpd3apwe6p.rkt:23:7: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '(50.0 32.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:40:4\n\n+: contract violation\n  expected: number?\n  given: '(0.020000000000000004 0.08000000000000002 0.18)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '(128.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(0.08000000000000002 18.0 50.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:44:4\n\n+: contrac",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmpculue6nj.rkt:18:38: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (even? y))\n                          (list y))))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw5aa0m3j.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw5aa0m3j.rkt:42:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw5aa0m3j.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw5aa0m3j.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw5aa0m3j.rkt:45:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2))\n                 (filter (lambda (y) (not (modulo y 2))\n                          (list y))))\n          lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_hysb39v.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_hysb39v.rkt:31:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_hysb39v.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_hysb39v.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_hysb39v.rkt:34:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n------------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp086e5t5f.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp086e5t5f.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp086e5t5f.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp086e5t5f.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp086e5t5f.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp086e5t5f.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* lst (car lst)) (* (* (car lst) (cdr lst))))\n      (* (* (car lst) (cdr lst)) (* (* (car lst) (car lst)))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgku3sn4x.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgku3sn4x.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgku3sn4x.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgku3sn4x.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgku3sn4x.rkt:41:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgku3sn4x.rkt:42:4\n\n*: contract violation\n  expected: numbe",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      )))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:46:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rg52i9w.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rg52i9w.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rg52i9w.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rg52i9w.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rg52i9w.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rg52i9w.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (n) (* (* n n) (* 2 n))) lst)\n      (filter (lambda (n) (not (integer? n)) (not (negative? n))) lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4rmv2x4.rkt:27:4\n\n+: contract violation\n  expected: number?\n  given: '(250.0 128.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4rmv2x4.rkt:28:4\n\n+: contract violation\n  expected: number?\n  given: '(0.0020000000000000005 0.016000000000000004 0.054)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4rmv2x4.rkt:29:4\n\n+: contract violation\n  expected: number?\n  given: '(-2000.0 -16000.0 -54000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4rmv2x4.rkt:30:4\n\n+: contract violation\n  expected: number?\n  given: '(-2.0 -16.0 1024.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4rmv2x4.rkt:31:4\n\n+: contract violation\n  expected: number?\n  given: '(0.016000000000000004 54.0 250.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocat",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))\n      0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmpnpqwe7xm.rkt:23:9: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x)) lst))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:39:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzj3_m4sb.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum-of-squares (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkee2sp6m.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (even? y))\n                          (list (number? y) y))))\n          lst)))\n      0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmpsqly_1nc.rkt:23:9: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (let ((sum 0))\n      (for-each\n        (lambda (x)\n          (if (odd? x)\n            (set! sum (+ (* x x) sum)))))\n      sum)))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp5d6l25ao.rkt:20:10: if: missing an \"else\" expression\n  in: (if (odd? x) (set! sum (+ (* x x) sum)))\n  location...:\n   /tmp/tmp5d6l25ao.rkt:20:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (car lst)) (cdr lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppa8ps23m.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppa8ps23m.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppa8ps23m.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppa8ps23m.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(-2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppa8ps23m.rkt:41:4\n\n*: contract violation\n  expected: number?\n  given: '(3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppa8ps23m.rkt:42:4\n\n*: contract violation\n  expected: number?\n  given: '(-7.0 -5.0",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          (list lst)))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          (list (- lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg4jwdcz.rkt:31:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg4jwdcz.rkt:32:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg4jwdcz.rkt:33:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg4jwdcz.rkt:34:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg4jwdcz.rkt:35:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg4jwdcz.rkt:36:4\n\nmodulo: c",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n    0\n    (+ (* (* lst (first lst)) (* (first lst)))\n      (* (* (rest lst) (* (first lst))) (* (first lst)))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmpzsl1q4c9.rkt:18:59: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          (list lst)))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          (list (- lst)))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:42:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:44:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:45:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:46:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:47:4\n\nmodulo: c",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x))\n                 (filter (lambda (y) (not (integer? y))\n                          (integer? (abs y))))\n                 lst)))\n      (map (lambda (x) (* (* x x) x))\n         (filter (lambda (x) (integer? x))\n              lst)))\n    0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmp0bvgks58.rkt:26:7: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x))))\n        lst)))\n  )\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmpllpa_uhr.rkt:22:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.0 -125.0 -27.0 -1.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* lst 2) 2)\n      (double_the_difference (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmp5kgxp4o9.rkt:18:42: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))\n                       lst)))\n        lst)))\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmp_9u2l5i4.rkt:25:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 0\n;; >>> (double_the_difference (list -1 -2 0))\n;; 81\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz9ve0yvy.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz9ve0yvy.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz9ve0yvy.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz9ve0yvy.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz9ve0yvy.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz9ve0yvy.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.0 -125.0 -27.0 -1.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2))) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2))) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:42:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:45:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvd0iaety.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvd0iaety.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvd0iaety.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvd0iaety.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvd0iaety.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvd0iaety.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpf3xcfdtt.rkt:17:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:31:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:34:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:31:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:34:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* lst (first lst)) (* (first lst)))\n      (* (* (rest lst) (* (first lst))) (* (first lst)))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpdjqgjlsl.rkt:18:59: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpf3xcfdtt.rkt:17:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.0 -125.0 -27.0 -1.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.0 -125.0 -27.0 -1.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n       (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpvtgapnlf.rkt:18:39: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* lst (car lst)) (* (* (car lst) (cdr lst))))\n      (* (* (car lst) (cdr lst)) (* (* (car lst) (car lst)))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp168n_oyc.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp168n_oyc.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp168n_oyc.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp168n_oyc.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp168n_oyc.rkt:41:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp168n_oyc.rkt:42:4\n\n*: contract violation\n  expected: numbe",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (car lst)) (cdr lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(-2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:41:4\n\n*: contract violation\n  expected: number?\n  given: '(3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:42:4\n\n*: contract violation\n  expected: number?\n  given: '(-7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj2_6uz23.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj2_6uz23.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj2_6uz23.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj2_6uz23.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj2_6uz23.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj2_6uz23.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp4b_wajz5.rkt:22:18: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x))\n          lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x))\n          lst))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg38_obo5.rkt:32:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg38_obo5.rkt:33:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg38_obo5.rkt:34:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg38_obo5.rkt:35:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg38_obo5.rkt:36:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg38_obo5.rkt:37:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (even? y))\n                          (>= y 0))))\n          lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz36bv2zr.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz36bv2zr.rkt:31:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz36bv2zr.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz36bv2zr.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz36bv2zr.rkt:34:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x))\n          (lst)))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x))\n          (lst))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9xnv51.rkt:42:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9xnv51.rkt:43:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9xnv51.rkt:44:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9xnv51.rkt:45:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z9xnv51.rkt:46:4\n\napplication: not a procedure;\n expected a pro",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:28:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:29:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:30:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:31:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:32:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:33:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n       (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpvtgapnlf.rkt:18:39: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp9fxc2k7.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp9fxc2k7.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp9fxc2k7.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp9fxc2k7.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp9fxc2k7.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp9fxc2k7.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.0 -125.0 -27.0 -1.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n    0\n    (+ (* (* 2 (first lst)) (first lst))\n      (* (* 2 (second lst)) (second lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uqckjvl.rkt:37:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uqckjvl.rkt:38:4\nactual:     0.10000000000000002\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uqckjvl.rkt:39:4\nactual:     1000.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uqckjvl.rkt:40:4\nactual:     10.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uqckjvl.rkt:41:4\nactual:     18.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7uqckjvl.rkt:42:4\nactual:     260.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x))))\n        lst)))\n  )\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmppxwma4b3.rkt:22:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* lst (car lst)) (* (car lst) (car lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:36:4\n\n*: contract violation\n  expected: number?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptwh9a7dm.rkt:41:4\n\n*: contract violation\n  expected: numbe",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      )))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5n2pw_d5.rkt:46:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (+ (car lst) (cdr lst))) (car lst)))\n  )\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:38:4\n\n+: contract violation\n  expected: number?\n  given: '(4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '(0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:40:4\n\n+: contract violation\n  expected: number?\n  given: '(-20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '(-2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '(3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)) (car lst))\n          (cdr lst)))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)) (cdr lst))\n          (cdr lst)))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292517,
      "stdout": "",
      "stderr": "/tmp/tmpn3jptdsr.rkt:23:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdewai9t9.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdewai9t9.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdewai9t9.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdewai9t9.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdewai9t9.rkt:44:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x))))\n        lst)))\n  )\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmppe5h3bnr.rkt:22:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2)))\n          (lst)))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (modulo x 2)))\n          (lst))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xbcxowo.rkt:42:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xbcxowo.rkt:43:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xbcxowo.rkt:44:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xbcxowo.rkt:45:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9xbcxowo.rkt:46:4\n\napplication: not a procedure;\n expected a pro",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n        lst)))\n  )\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2w3_pv08.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2w3_pv08.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2w3_pv08.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2w3_pv08.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2w3_pv08.rkt:44:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '(50.0 32.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:40:4\n\n+: contract violation\n  expected: number?\n  given: '(0.020000000000000004 0.08000000000000002 0.18)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '(128.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(0.08000000000000002 18.0 50.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(2.0 18.0 50.0 98.0 162.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 0\n;; >>> (double_the_difference (list -1 -2 0))\n;; 10\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8x486h95.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8x486h95.rkt:42:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8x486h95.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8x486h95.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8x486h95.rkt:45:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '(50.0 32.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:40:4\n\n+: contract violation\n  expected: number?\n  given: '(0.020000000000000004 0.08000000000000002 0.18)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '(128.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(0.08000000000000002 18.0 50.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:44:4\n\n+: contrac",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (negative? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsb24qsa_.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsb24qsa_.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsb24qsa_.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsb24qsa_.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsb24qsa_.rkt:46:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292517,
      "stdout": "",
      "stderr": "/tmp/tmpzg3on7vv.rkt:18:38: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x))))\n        lst)))\n  )\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp_n_jlwji.rkt:22:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum-of-squares (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph6hjletc.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x)) lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:28:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (n) (* (* n n) (* 2 n))) lst)\n      (filter (lambda (n) (not (even? n)))))\n  )\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcw9lwp2x.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcw9lwp2x.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcw9lwp2x.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcw9lwp2x.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcw9lwp2x.rkt:44:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n       (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpvtgapnlf.rkt:18:39: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (n) (* (* n n) (* 2 n))) lst)\n      (filter (lambda (n) (not (integer? n)) (not (negative? n)))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5djmuop.rkt:38:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5djmuop.rkt:39:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5djmuop.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5djmuop.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo5djmuop.rkt:42:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0gg9pzi.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0gg9pzi.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0gg9pzi.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0gg9pzi.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0gg9pzi.rkt:33:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)) (car lst))\n          (cdr lst)))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)) (cdr lst))\n          (cdr lst)))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpy9y6xn0i.rkt:23:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpf3xcfdtt.rkt:17:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:28:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:29:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:30:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:31:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:32:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7817ui1.rkt:33:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* lst) (* lst))\n      (if (null? lst)\n        0\n        (+ (* (* lst) (* lst))\n          (if (null? lst)\n            0\n            (+ (* (* lst) (* lst))\n              (if (null? lst)\n                0\n                (+ (* (* lst) (* lst))\n                  (if (null? lst)\n                    0\n                    (+ (* (* lst) (* lst))\n                      (if (null? lst)\n                        0\n                        (+ (* (* lst) (* lst))\n                          (if (null? lst)\n                            0\n                            (+ (* (* lst) (* lst))\n                              (if (null? lst)\n                                0\n                                (+ (* (* lst) (* lst))\n                                  (if (null? lst)\n                                    0\n                                    (+ (* (* lst) (* lst))\n                                      (if (null? lst)\n                                        0\n                                        (+ (* (* lst) (* lst))\n                                          (if (null? lst)\n                                            0\n                                            (+ (* (* lst) (* lst))\n                                              (if (null? lst)\n                                                0\n                                                (+ (* (* lst) (* lst))\n                                                  (if (null? lst)\n                                                    0\n                                                    (+ (* (* lst) (* lst))\n                                                      (if (null? lst)\n                                                        0\n                                                        (+ (* (* lst) (* lst))\n                                                         (if (null? lst)\n                                                           0\n                                                           (+ (* (* lst) (* lst))\n                                                            (if (null? lst)\n                                                              0\n                                                              (+ (* (* lst) (* l\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp7rhbcz57.rkt:62:76: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 63\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n        lst)))\n  )\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzrdzq20j.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzrdzq20j.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzrdzq20j.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzrdzq20j.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzrdzq20j.rkt:44:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))\n      0)))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpjueoq878.rkt:23:9: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '(50.0 32.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:40:4\n\n+: contract violation\n  expected: number?\n  given: '(0.020000000000000004 0.08000000000000002 0.18)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '(128.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(0.08000000000000002 18.0 50.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44vm3xx3.rkt:44:4\n\n+: contrac",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpf3xcfdtt.rkt:17:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)) (car lst))\n          (cdr lst)))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)) (cdr lst))\n          (cdr lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmp48q6_iis.rkt:23:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n        lst)))\n  )\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja3qmi4v.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja3qmi4v.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja3qmi4v.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja3qmi4v.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja3qmi4v.rkt:44:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_povi2k.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))\n      0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmpnpqwe7xm.rkt:23:9: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x))))\n        lst)))\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpc21cuhit.rkt:22:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpf3xcfdtt.rkt:17:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn6yuby7y.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00gh_25z.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00gh_25z.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00gh_25z.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00gh_25z.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00gh_25z.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp00gh_25z.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n       (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpvtgapnlf.rkt:18:39: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n        lst)))\n  )\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbvnzywp8.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbvnzywp8.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbvnzywp8.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbvnzywp8.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbvnzywp8.rkt:44:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n        lst)))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa5_uclfz.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa5_uclfz.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa5_uclfz.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa5_uclfz.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa5_uclfz.rkt:44:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2))) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2))) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:42:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:45:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqkisttlo.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdvlbzfaq.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)) (odd? x)))\n        lst)))\n  )\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2w3_pv08.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2w3_pv08.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2w3_pv08.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2w3_pv08.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2w3_pv08.rkt:44:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaqzkab8.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaqzkab8.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaqzkab8.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaqzkab8.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaqzkab8.rkt:33:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))\n      0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "/tmp/tmpnpqwe7xm.rkt:23:9: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (empty? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo58apc8j.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo58apc8j.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo58apc8j.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo58apc8j.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo58apc8j.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo58apc8j.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292517,
      "stdout": "",
      "stderr": "/tmp/tmpzg3on7vv.rkt:18:38: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))\n      0)))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "/tmp/tmpbr4e48tm.rkt:23:9: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (car lst)) (cdr lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0yq_kf.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0yq_kf.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0yq_kf.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0yq_kf.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(-2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0yq_kf.rkt:41:4\n\n*: contract violation\n  expected: number?\n  given: '(3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdt0yq_kf.rkt:42:4\n\n*: contract violation\n  expected: number?\n  given: '(-7.0 -5.0",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (let ((sum (make-vector 0 (length lst))))\n      (for-each\n        (lambda (n)\n          (if (odd? n)\n            (setf sum (vector-set! sum n (* n n)))\n            (setf sum 0)))\n        lst)))\n  sum)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum-of-squares (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "/tmp/tmpbr4r_n9q.rkt:21:13: setf: unbound identifier\n  in: setf\n  location...:\n   /tmp/tmpbr4r_n9q.rkt:21:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (n) (* (* n n) (* 2 n))) lst)\n      (filter (lambda (n) (not (integer? n)) (not (negative? n))) lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4rmv2x4.rkt:27:4\n\n+: contract violation\n  expected: number?\n  given: '(250.0 128.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4rmv2x4.rkt:28:4\n\n+: contract violation\n  expected: number?\n  given: '(0.0020000000000000005 0.016000000000000004 0.054)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4rmv2x4.rkt:29:4\n\n+: contract violation\n  expected: number?\n  given: '(-2000.0 -16000.0 -54000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4rmv2x4.rkt:30:4\n\n+: contract violation\n  expected: number?\n  given: '(-2.0 -16.0 1024.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4rmv2x4.rkt:31:4\n\n+: contract violation\n  expected: number?\n  given: '(0.016000000000000004 54.0 250.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocat",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum_of_squares (list 1 3 2 0))\n;; 10\n;; >>> (sum_of_squares (list -1 -2 0))\n;; 0\n;; >>> (sum_of_squares (list 9 -2))\n;; 81\n;; >>> (sum_of_squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzc8xktv.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.0 -125.0 -27.0 -1.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:42:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:45:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:46:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:40:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z4zanya.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)) (car lst))\n          (cdr lst)))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)) (cdr lst))\n          (cdr lst)))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "/tmp/tmpb4tmyate.rkt:23:24: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmp4b_wajz5.rkt:22:18: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaqzkab8.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaqzkab8.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaqzkab8.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaqzkab8.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaqzkab8.rkt:33:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* lst (car lst)) (* (* (car lst) (car lst)))))\n  )\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpft2fjzry.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpft2fjzry.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpft2fjzry.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpft2fjzry.rkt:41:4\n\n*: contract violation\n  expected: number?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpft2fjzry.rkt:42:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpft2fjzry.rkt:43:4\n\n*: contract violation\n  expected: numbe",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (+ (car lst) (cdr lst))) (car lst)))\n  )\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:38:4\n\n+: contract violation\n  expected: number?\n  given: '(4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '(0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:40:4\n\n+: contract violation\n  expected: number?\n  given: '(-20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '(-2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '(3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum-of-squares (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35vbaxcx.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35vbaxcx.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35vbaxcx.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35vbaxcx.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35vbaxcx.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp35vbaxcx.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7z_b_tv.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '(50.0 32.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7z_b_tv.rkt:40:4\n\n+: contract violation\n  expected: number?\n  given: '(0.020000000000000004 0.08000000000000002 0.18)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7z_b_tv.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7z_b_tv.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '(128.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7z_b_tv.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(0.08000000000000002 18.0 50.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7z_b_tv.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(2.0 18.0 50.0 98.0 162.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x)) lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:28:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (double_the_difference (cdr lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292520,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:38:4\nactual:     82.0\nexpected:   25\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:39:4\nactual:     0.28\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:40:4\nactual:     2800.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:41:4\nactual:     138.0\nexpected:   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:42:4\nactual:     68.08\nexpected:   34\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkj0y55s0.rkt:43:4\nactual:     660.0\nexpected:   165\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (integer? x)) (not (negative? x)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '(50.0 32.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:40:4\n\n+: contract violation\n  expected: number?\n  given: '(0.020000000000000004 0.08000000000000002 0.18)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '(128.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(0.08000000000000002 18.0 50.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpletvk7ud.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(2.0 18.0 50.0 98.0 162.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpf3xcfdtt.rkt:17:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (car lst)) (cdr lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:37:4\n\n*: contract violation\n  expected: number?\n  given: '(4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:38:4\n\n*: contract violation\n  expected: number?\n  given: '(0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:39:4\n\n*: contract violation\n  expected: number?\n  given: '(-20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:40:4\n\n*: contract violation\n  expected: number?\n  given: '(-2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:41:4\n\n*: contract violation\n  expected: number?\n  given: '(3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbni12fo9.rkt:42:4\n\n*: contract violation\n  expected: number?\n  given: '(-7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292517,
      "stdout": "",
      "stderr": "/tmp/tmpzg3on7vv.rkt:18:38: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6jld8gvn.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          lst)))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:40:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwd3wq3_l.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x))\n                 (filter (lambda (y) (not (integer? y))\n                          (integer? (abs y))))\n                 lst)))\n      (map (lambda (x) (* (* x x) x))\n         (filter (lambda (x) (not (integer? x))\n                  (filter (lambda (y) (not (integer? y))\n                           (integer? (abs y))))\n                  (filter (lambda (z) (not (integer? z))\n                           (integer? z))))\n           lst)))\n      0)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "/tmp/tmpsp70j4on.rkt:30:9: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnbzhk197.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.0 -125.0 -27.0 -1.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* lst (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n      (* (* (rest lst) (first lst)) (* (first lst)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "/tmp/tmpxx117gph.rkt:17:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 43\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (car lst)) (car lst))\n      (* (* 2 (cdr lst)) (cdr lst))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292517,
      "stdout": "",
      "stderr": "/tmp/tmpzg3on7vv.rkt:18:38: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x)) lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:28:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbn88s5cr.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "/tmp/tmpf3xcfdtt.rkt:17:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:31:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprq0izrki.rkt:34:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* x x)) lst))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:28:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt0x9eor9.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9qli3az.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9qli3az.rkt:42:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9qli3az.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9qli3az.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9qli3az.rkt:45:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoxpi7amj.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoxpi7amj.rkt:42:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoxpi7amj.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoxpi7amj.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoxpi7amj.rkt:45:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292521,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:29:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:31:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5hynfdym.rkt:34:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (modulo x 2))\n                 (filter (lambda (y) (not (modulo y 2))\n                          (< y 0))))\n          lst)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1xa4179.rkt:30:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1xa4179.rkt:31:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1xa4179.rkt:32:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1xa4179.rkt:33:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1xa4179.rkt:34:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 0.2\n------------------",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (let ((sum (make-list 0)))\n      (for-each (lambda (x)\n                  (if (odd? x)\n                    (setf sum (+ (* x x) sum)))))\n      sum)))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292525,
      "stdout": "",
      "stderr": "/tmp/tmpyhjlz1z2.rkt:19:18: if: missing an \"else\" expression\n  in: (if (odd? x) (setf sum (+ (* x x) sum)))\n  location...:\n   /tmp/tmpyhjlz1z2.rkt:19:18\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x)) (negative? x)) lst))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (integer? x)) lst))))\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-1000.0 -8000.0 -27000.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:44:4\n\n+: contract violation\n  expected: number?\n  given: '(-1.0 -8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:45:4\n\n+: contract violation\n  expected: number?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzc_md205.rkt:46:4\n\n+: contract violation\n  expected: number?\n  given: '(-729.0 -343.",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+ (* (* 2 (+ (car lst) (cdr lst))) (car lst)))\n  )\n)\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292523,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:38:4\n\n+: contract violation\n  expected: number?\n  given: '(4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:39:4\n\n+: contract violation\n  expected: number?\n  given: '(0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:40:4\n\n+: contract violation\n  expected: number?\n  given: '(-20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:41:4\n\n+: contract violation\n  expected: number?\n  given: '(-2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:42:4\n\n+: contract violation\n  expected: number?\n  given: '(3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkldxnoh.rkt:43:4\n\n+: contract violation\n  expected: number?\n  given: '(-7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) 2))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (even? y))\n                          (list (number? y) (number? x)))\n                       lst)))\n        lst)))\n  )\n)\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "/tmp/tmpn8lp1_9r.rkt:25:0: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x))\n                 (filter (lambda (y) (not (negative? y))\n                          (integer? y))))\n          lst)))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292524,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:42:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:45:4\n\neven?: contract violation\n  expected: integer?\n  given: 0.2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp83hze2ac.rkt:46:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      )))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list. Ignore numbers that are negative or not integers.\n;; >>> (sum-of-squares (list 1 3 2 0))\n;; 10\n;; >>> (sum-of-squares (list -1 -2 0))\n;; 0\n;; >>> (sum-of-squares (list 9 -2))\n;; 81\n;; >>> (sum-of-squares (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc71mph87.rkt:41:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc71mph87.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc71mph87.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc71mph87.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc71mph87.rkt:45:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (even? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (negative? x)))))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (integer? x))))))))\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292525,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynkd6_c6.rkt:42:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynkd6_c6.rkt:43:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynkd6_c6.rkt:44:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynkd6_c6.rkt:45:4\n\nfilter: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynkd6_c6.rkt:46:4\n\nfilter: arity mismatch;\n ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Given a list of numbers, return the sum of squares of the numbers\n;; in the list that are odd. Ignore numbers that are negative or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(define (double_the_difference lst)\n  (if (null? lst)\n    0\n    (+\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          (list lst)))\n      (map (lambda (x) (* (* x x) x))\n        (filter (lambda (x) (not (modulo x 2)))\n          (list (- lst)))))))\n\n;; Given a list of numbers, return the sum of the squares of the numbers\n;; in the list that are even. Ignore numbers that are negative or not integers.\n;; >>> (double_the_sum (list 1 3 2 0))\n;; 10\n;; >>> (double_the_sum (list -1 -2 0))\n;; 0\n;; >>> (double_the_sum (list 9 -2))\n;; 81\n;; >>> (double_the_sum (list 0))\n;; 0\n;; If the input list is empty, return 0.\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5.0 4.0)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10.0 -20.0 -30.0)) 0)\n    (check-equal? (candidate (list -1.0 -2.0 8.0)) 0)\n    (check-equal? (candidate (list 0.2 3.0 5.0)) 34)\n    (check-equal? (candidate (list -9.0 -7.0 -5.0 -3.0 -1.0 1.0 3.0 5.0 7.0 9.0)) 165)\n))\n\n(test-humaneval)",
      "timestamp": 1664292522,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:42:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(5.0 4.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:43:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(0.1 0.2 0.3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:44:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(-10.0 -20.0 -30.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:45:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(-1.0 -2.0 8.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:46:4\n\nmodulo: contract violation\n  expected: integer?\n  given: '(0.2 3.0 5.0)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkt6r3jy8.rkt:47:4\n\nmodulo: c",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}