name: HumanEval_99_closest_integer
language: rkt
prompt: "#lang racket\n\n;; Create a function that takes a value (string) representing\
  \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
  ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
  \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
  \ away from zero means that if the given number is equidistant\n;; from two integers,\
  \ the one you should return is the one that is the\n;; farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\n(define (closest_integer value)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate closest_integer))\n\
  \    (check-equal? (candidate \"10\") 10)\n    (check-equal? (candidate \"14.5\"\
  ) 15)\n    (check-equal? (candidate \"-15.5\") -16)\n    (check-equal? (candidate\
  \ \"15.3\") 15)\n    (check-equal? (candidate \"0\") 0)\n))\n\n(test-humaneval)"
completions: ["  (let ((n (string->number value)))\n    (if (zero? n)\n      (string->number\
    \ \"0\")\n      (if (negative? n)\n        (string->number (- n 1))\n        (string->number\
    \ (- n 2)))))\n)\n\n;; Test it out", "  (let ((result (+ (string->number value)\
    \ 0.5)))\n    (if (< result 0)\n      (if (< result (string->number \"-\" result))\n\
    \        (string->number \"-\" result))\n      (string->number result)))))\n",
  "  (let ((int (string->number value)))\n    (if (zero? int)\n      (string->number\
    \ (string->number/1 value))\n      (if (zero? (- int 1))\n        (string->number\
    \ (- int 1))\n        (if (zero? (+ int 1))\n          (string->number (+ int\
    \ 1))\n          (string->number/1 value))))))\n\n;; Test it out", "  (let ((result\
    \ (+ (string->number value) 0.5)))\n    (if (< result 0)\n      (if (> result\
    \ 0)\n        (+ result 1)\n        (+ result -1))\n      result)))\n\n;; Test\
    \ it out", "  (let* ([number (string->number value)])\n    (if (zero? number)\n\
    \      number\n      (let* ([integer (string->number (string->number/string \"\
    0\"))])\n        (if (zero? integer)\n          integer\n          (if (zero?\
    \ (abs number - integer))\n            (abs number)\n            (abs integer)))))))\n",
  "  (let ((value-int (string->number value)))\n    (if (zero? value-int)\n      value-int\n\
    \      (if (zero? (- value-int))\n        (+ value-int 1)\n        (+ value-int\
    \ (- 1)))))\n)\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.", "  (let ((int-value (string->number value)))\n \
    \   (if (zero? int-value)\n      (string->number (string-append \"0\" (string-append/dup\
    \ \"9\" (- int-value 1))))\n      (string->number (string-append/dup \"9\" (-\
    \ int-value 1)))))\n)\n\n;; Test it", "  (let ((value-int (string->number value)))\n\
    \    (if (zero? value-int)\n      (string->number (string->number (string->number\
    \ value-int - 1)))\n      (string->number (string->number (string->number value-int\
    \ + 1))))))\n\n;; Test it out", "  (let ((number (string->number value)))\n  \
    \  (if (zero? number)\n      number\n      (let ((integer (floor number)))\n \
    \       (if (zero? integer)\n          integer\n          (let ((fraction (number-integer\
    \ number)))\n            (if (zero? fraction)\n              integer\n       \
    \       (let ((difference (abs number-integer)))\n                (if (zero? difference)\n\
    \                  integer\n                  (let ((difference2 (abs number-integer)))\n\
    \                    (if (zero? difference2)\n                      integer\n\
    \                      (let ((difference3 (abs number-integer)))\n           \
    \             (if (zero? difference3)\n                          integer\n   \
    \                       (let ((difference4 (abs number-integer)))\n          \
    \                  (if (zero? difference4)\n                              integer\n\
    \                              (let ((difference5 (abs number-integer)))\n   \
    \                             (if (zero? difference5)\n                      \
    \            integer\n                                  (let ((difference6 (abs\
    \ number-integer)))\n                                    (if (zero? difference6)\n\
    \                                      integer\n                             \
    \         (let ((difference7 (abs number-integer)))\n                        \
    \                (if (zero? difference7)\n                                   \
    \       integer\n                                          (let ((difference8\
    \ (abs number-integer)))\n                                            (if (zero?\
    \ difference8)\n                                              integer\n      \
    \                                        (let ((difference9 (abs number-integer)))\n\
    \                                                (if (zero? difference9)\n   \
    \                                               integer\n                    \
    \                              (let ((difference10 (abs number-integer)))\n  \
    \                                                  (if (zero? difference10)\n\
    \                                                      integer\n             \
    \                                         (let ((difference11 (abs number-integer)))\n\
    \                                                        (if (zero? difference11)\n\
    \                                                          integer\n         \
    \                                                 (let ((difference12 (abs number-integer)))\n\
    \                                                            (if (zero? difference12)\n\
    \                                                              integer\n     \
    \                                                         (let ((difference13\
    \ (abs number-integer)))\n                                                   \
    \             (if (zero? difference13)\n                                     \
    \                          ", "  (let ((value-str (string value)))\n    (if (string?\
    \ value-str)\n      (let ((value-int (string->number value-str)))\n        (if\
    \ (zero? value-int)\n          (string->number \"0\")\n          (string->number\
    \ (+ value-int (/ (- value-int) 1)))\n          )\n        )\n      (string->number\
    \ \"0\")\n      )\n    )\n  )\n\n;; Test it out", "  (let ((value-str (string\
    \ value)))\n    (if (string? value-str)\n      (let ((value-int (string->number\
    \ value-str)))\n        (if (zero? value-int)\n          (string->number \"0\"\
    )\n          (string->number (+ value-int (/ (- value-int) 1 2)))\n          )\n\
    \        )\n      (string->number \"0\")\n      )\n    )\n  )\n\n;; Test it out",
  "  (let ((val (string->number value)))\n    (if (< (abs val) 0.5)\n      (if (zero?\
    \ val)\n        (if (zero? (abs val - 1))\n          (+ val 1))\n        (+ val\
    \ (- 1)))\n      (if (zero? val)\n        (if (zero? (abs val + 1))\n        \
    \  (+ val - 1))\n        (+ val 1)))\n    (string->number val)))\n\n;; Test it\
    \ out", "  (let ((result (+ (string->number value) 0.5)))\n    (if (< result 0)\n\
    \      (if (< result (- result))\n        (+ result 1))\n      (if (> result 0)\n\
    \        (- result 1)))))\n\n;; >>> (closest_integer \"10.5\")\n;; 11\n;; >>>\
    \ (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n\
    ;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\")\n\
    ;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer \"10.9\"\
    )\n;; 10\n;; >>> (closest_integer \"10.8\")\n;; 10\n;; >>> (closest_integer \"\
    10.7\")\n;; 10\n;; >>> (closest_integer \"10.6\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.9\")\n;; 10\n;; >>> (closest_integer \"10.8\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.7\")\n;; 10\n;; >>> (closest_integer \"10.6\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.9\")", "  (let ((n (string->number value)))\n    (if (zero? n)\n      (string->number\
    \ \"0\")\n      (if (negative? n)\n        (string->number (- n 1))\n        (string->number\
    \ (+ n 1))))))\n\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.0\")\n;; 10\n;; >>> (closest_integer \"9.9\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.8\")\n;; 9\n;; >>> (closest_integer \"9.7\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.6\")\n;; 9\n;; >>> (closest_integer \"9.5\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.4\")\n;; 9\n;; >>> (closest_integer \"9.3\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.2\")\n;; 9\n;; >>> (closest_integer \"9.1\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.0\")\n;; 9\n;; >>> (closest_integer \"8.9\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.8\")\n;; 8\n;; >>> (closest_integer \"8.7\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.6\")\n;; 8\n;; >>> (closest_integer \"8.5\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.4\")\n;; 8\n;; >>> (closest_integer \"8.3\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.2\")\n;; 8\n;; >>> (closest_integer \"8.1\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.0\")\n;; 8\n;; >>> (closest_integer \"", "  (let ((n (string->number value)))\n\
    \    (if (negative? n)\n      (negate (string->number (+ n 1)))\n      (string->number\
    \ (+ n 0))))))\n\n;; Test it out", "  (let ((result (+ (string->number value)\
    \ 0.5)))\n    (if (< result 0)\n      (- result)\n      (if (> result 0)\n   \
    \     (+ result 1)\n        result))))\n\n;; Test it out", "  (let ((number (string->number\
    \ value)))\n    (if (zero? number)\n      number\n      (let ((integer (integer->string\
    \ (- number))))\n        (if (zero? integer)\n          integer\n          (if\
    \ (zero? (string->number integer))\n            (string->number integer)\n   \
    \         (string->number (string->number integer) 1))))))))\n", "  (let ((result\
    \ (string->number value)))\n    (if (zero? result)\n      result\n    (let ((difference\
    \ (abs result)))\n      (if (zero? difference)\n        (string->number result)\n\
    \      (if (zero? difference)\n        (string->number result)\n      (if (> difference\
    \ (abs (- difference) (abs result)))\n        (string->number result)\n      (if\
    \ (< difference (abs (- difference) (abs result)))\n        (string->number result)\n\
    \      (if (zero? difference)\n        (string->number result)\n      (if (zero?\
    \ difference)\n        (string->number result)\n      ))))))))))\n", "  (let ((result\
    \ (+ (string-to-number value) 0.5)))\n    (if (zero? result)\n      (if (zero?\
    \ value)\n        0\n        (if (> value 0)\n          (if (< result value)\n\
    \            result\n            (if (< value 0)\n              (- result)\n \
    \             result))))\n      result)))\n", "  (let ((value-as-float (string->number\
    \ value)))\n    (if (zero? value-as-float)\n      (string->number 0)\n      (let\
    \ ((value-as-int (floor value-as-float)))\n        (if (zero? value-as-int)\n\
    \          (string->number value-as-int)\n          (let ((value-as-float (abs\
    \ value-as-int)))\n            (if (zero? value-as-float)\n              (string->number\
    \ value-as-int)\n              (let ((value-as-int (ceiling value-as-float)))\n\
    \                (if (zero? value-as-int)\n                  (string->number value-as-int)\n\
    \                  (let ((value-as-float (abs value-as-int)))\n              \
    \      (if (zero? value-as-float)\n                      (string->number value-as-int)\n\
    \                      (let ((value-as-int (abs value-as-float)))\n          \
    \              (if (zero? value-as-int)\n                          (string->number\
    \ value-as-int)\n                          (let ((value-as-float (abs value-as-int)))\n\
    \                            (if (zero? value-as-float)\n                    \
    \          (string->number value-as-int)\n                              (let ((value-as-int\
    \ (abs value-as-float)))\n                                (if (zero? value-as-int)\n\
    \                                  (string->number value-as-int)\n           \
    \                       (let ((value-as-float (abs value-as-int)))\n         \
    \                           (if (zero? value-as-float)\n                     \
    \                 (string->number value-as-int)\n                            \
    \          (let ((value-as-int (abs value-as-float)))\n                      \
    \                  (if (zero? value-as-int)\n                                \
    \          (string->number value-as-int)\n                                   \
    \       (let ((value-as-float (abs value-as-int)))\n                         \
    \                   (if (zero? value-as-float)\n                             \
    \                 (string->number value-as-int)\n                            \
    \                  (let ((value-as-int (abs value-", "  (let ((n (string->number\
    \ value)))\n    (if (zero? n)\n      (string->number \"0\")\n      (if (negative?\
    \ n)\n        (string->number (- n 1))\n        (string->number (if (negative?\
    \ n) -1 else 1)\n          (string->number (if (negative? n) -1 else 1)\n    \
    \        (string->number (if (negative? n) -1 else 1)\n              (string->number\
    \ (if (negative? n) -1 else 1)\n                (string->number (if (negative?\
    \ n) -1 else 1)\n                  (string->number (if (negative? n) -1 else 1)\n\
    \                    (string->number (if (negative? n) -1 else 1)\n          \
    \            (string->number (if (negative? n) -1 else 1)\n                  \
    \      (string->number (if (negative? n) -1 else 1)\n                        \
    \  (string->number (if (negative? n) -1 else 1)\n                            (string->number\
    \ (if (negative? n) -1 else 1)\n                              (string->number\
    \ (if (negative? n) -1 else 1)\n                                (string->number\
    \ (if (negative? n) -1 else 1)\n                                  (string->number\
    \ (if (negative? n) -1 else 1)\n                                    (string->number\
    \ (if (negative? n) -1 else 1)\n                                      (string->number\
    \ (if (negative? n) -1 else 1)\n                                       (string->number\
    \ (if (negative? n) -1 else 1)\n                                        (string->number\
    \ (if (negative? n) -1 else 1)\n                                          (string->number\
    \ (if (negative? n) -1 else 1)\n                                           (string->number\
    \ (if (negative? n) -1 else 1)\n                                            (string->number\
    \ (if (negative? n) -1 else 1)\n                                             \
    \ (string->number (if (negative? n) -1 else 1)\n                             \
    \                  (string->number (if (negative? n) -1 else 1)\n            \
    \                                    (string->number (if (negative? n) -1 else\
    \ 1)\n", "  (let ((int-val (string->number value)))\n    (if (negative? int-val)\n\
    \      (negate (string->number (substring value (string->length value) -1)))\n\
    \      (string->number (substring value 0 (string->length value) -1))))\n)\n\n\
    ;; Test it out", "  (let ((n (string->number value)))\n    (if (negative? n)\n\
    \      (- n)\n      (if (zero? n)\n        (if (negative? value)\n          (negate\
    \ n)\n          n)\n        (if (zero? value)\n          (negate n)\n        \
    \  n)\n        (if (zero? value)\n          (if (negative? value)\n          \
    \  (negate n)\n            n)\n          (if (negative? value)\n            n)\n\
    \          (negate n)\n          ))))\n)\n", "  (let ((value-str (string->number\
    \ value)))\n    (let ((value-int (string->number value)))\n      (if (zero? value-int)\n\
    \        (if (zero? value-str)\n          (string->number \"0\")\n          (string->number\
    \ (+ value-str 1)))\n        (string->number (+ value-int 1)))))\n)\n\n;; Test\
    \ it out", "  (let ((value-int (string->number value)))\n    (if (zero? value-int)\n\
    \      (string->number (string-append \"0\" (string-length value)))\n      (string->number\
    \ (string-append (string-append/dup \"0\" (string-length value-int)) value-int)))\n\
    \  )\n)\n\n;; Test it out", "  (let ((result (+ (string-to-number value) 0.5)))\n\
    \    (if (< result 0)\n      (if (< result (* -1 result))\n        (+ result 1))\n\
    \      (+ result (- 1 result)))))\n\n;; >>> (closest_integer \"10.5\")\n;; 11\n\
    ;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n\
    ;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\"\
    )\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer \"\
    10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n", "  (let ((n (string->number value)))\n    (if (negative? n)\n\
    \      (- n)\n      (if (zero? n)\n        (if (negative? -n)\n          (abs\
    \ n)\n          (abs -n))\n        (if (> n 0)\n          (+ n 1)\n          (+\
    \ -n 1)))))\n)\n", "  (let ((result (string->number value)))\n    (if (zero? result)\n\
    \      (string->number 0)\n      (if (zero? (- result))\n        (string->number\
    \ 0)\n        (if (zero? (+ result))\n          (string->number + result)\n  \
    \        (string->number (- result)))))))\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (negative? n)\n      (- (abs n))\n      (if (zero? n)\n  \
    \      0\n        (if (zero? (abs (- n)))\n          (abs n)\n          (abs (-\
    \ n)))))))\n\n;; Test it out", "  (let ((n (string->number value)))\n    (if (negative?\
    \ n)\n      (negate (string->number (- n 1)))\n      (string->number (if (zero?\
    \ n)\n                          (string->number (+ n 1))\n                   \
    \       (string->number (- n 1)))))))\n\n;; >>> (closest_integer \"10.3\")\n;;\
    \ 10\n;; >>> (closest_integer \"10.5\")\n;; 11\n;; >>> (closest_integer \"10.7\"\
    )\n;; 11\n;; >>> (closest_integer \"10.9\")\n;; 11\n;; >>> (closest_integer \"\
    10.11\")\n;; 11\n;; >>> (closest_integer \"10.13\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.15\")\n;; 11\n;; >>> (closest_integer \"10.17\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.19\")\n;; 11\n;; >>> (closest_integer \"10.21\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.23\")\n;; 11\n;; >>> (closest_integer \"10.25\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.27\")\n;; 11\n;; >>> (closest_integer \"10.29\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.31\")\n;; 11\n;; >>> (closest_integer \"10.33\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.35\")\n;; 11\n;; >>> (closest_integer \"10.37\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.39\")\n;; 11\n;; >>> (closest_integer \"10.41\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.43\")\n;; 11\n;; >>> (closest_integer \"10.45\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.47\")\n;; 11\n;; >>> (closest_integer \"10.49\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.51\")\n;; 11\n;; >>> (closest_integer \"10.53\")\n;; 11\n;;", "  (let ((n\
    \ (string->number value)))\n    (if (zero? n)\n      (string->number \"0\")\n\
    \      (let ((i (floor n)))\n        (if (zero? (abs i))\n          (string->number\
    \ (if (negative? i)\n                             (string->number (- i 1))\n \
    \                            (string->number i)))\n          (string->number (if\
    \ (negative? n)\n                            (string->number (- i 1))\n      \
    \                      (string->number i)))\n          ))))))\n\n;; Test it out",
  "  (let ((n (string->number value)))\n    (if (zero? n)\n      (string->number \"\
    0\")\n      (let ((i (string->number \"0\")))\n        (if (zero? i)\n       \
    \   (string->number \"0\")\n          (if (zero? (abs (- n i)))\n            \
    \  (string->number (+ i n))\n              (string->number (- i n))))))))\n\n\
    ;; Test it out", "  (let ((result (+ (string->number value) 0.5)))\n    (if (<\
    \ result 0)\n      (if (< result (- result))\n        (- result)\n        result)\n\
    \      result)))\n\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.7\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.9\")\n;; 11\n;; >>> (closest_integer \"10.11\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.13\")\n;; 11\n;; >>> (closest_integer \"10.15\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.17\")\n;; 11\n;; >>> (closest_integer \"10.19\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.21\")\n;; 11\n;; >>> (closest_integer \"10.23\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.25\")\n;; 11\n;; >>> (closest_integer \"10.27\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.29\")\n;; 11\n;; >>> (closest_integer \"10.31\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.33\")\n;; 11\n;; >>> (closest_integer \"10.35\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.37\")\n;; 11\n;; >>> (closest_integer \"10.39\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.41\")\n;; 11\n;; >>> (closest_integer \"10.43\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.45\")\n;; 11\n;; >>> (closest_integer \"10.47\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.49\")\n;; 11\n;; >>> (closest_integer \"10.51\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.53\")\n;; 11\n;; >>> (closest_integer \"10.55\")\n;; 11\n;; >>> (clos",
  "  (let ((n (string->number value)))\n    (if (< n 0)\n      (if (< (abs n) (abs\
    \ (string->number \"1\")))\n        (string->number \"0\")\n        (string->number\
    \ (- n 1))))\n    (string->number (if (< n 0) (+ n (/ n (abs n))) (* n (/ n (abs\
    \ n)))))))\n\n;; Test it out", "  (let ((result (+ (string->number value) 0.5)))\n\
    \    (if (< result 0)\n      (if (< result (* (- result) 0.5))\n        (- result)\n\
    \        (* result 0.5))\n      (if (> result (* 0.5))\n        (* result 0.5)\n\
    \        (+ result 0.5))))\n)\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (< n 0)\n      (if (< n -1)\n        (string->number (- n\
    \ 1))\n        (string->number (- n 2)))\n      (string->number (if (< n 1)\n\
    \                         (string->number (- n 1))\n                         (string->number\
    \ (- n 2)))))))\n\n;; Test it out", "  (let ((number (string->number value)))\n\
    \    (if (zero? number)\n      (number)\n      (let ((integer (floor number)))\n\
    \        (if (zero? integer)\n          (integer)\n          (let ((fraction (number-integer\
    \ number)))\n            (if (zero? fraction)\n              (integer)\n     \
    \         (let ((nearest-integer (integer+fraction)))\n                (if (zero?\
    \ (abs fraction))\n                  (nearest-integer)\n                  (let\
    \ ((difference (abs fraction)))\n                    (if (zero? difference)\n\
    \                      (nearest-integer)\n                      (let ((nearest-fraction\
    \ (integer-fraction)))\n                        (if (zero? nearest-fraction)\n\
    \                          (nearest-integer)\n                          (let ((difference\
    \ (abs nearest-fraction)))\n                            (if (zero? difference)\n\
    \                              (nearest-integer)\n                           \
    \   (nearest-fraction))))))))))))))))))))))\n\n;; Test it out", "  (let ((int\
    \ (string->number value)))\n    (if (< (abs int) 1)\n      (if (> int 0)\n   \
    \     (+ int 1)\n        (- int 1))\n      int)))\n\n;; >>> (closest_integer \"\
    10.3\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.7\")\n;; 11\n;; >>> (closest_integer \"10.9\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.11\")\n;; 11\n;; >>> (closest_integer \"10.13\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.15\")\n;; 11\n;; >>> (closest_integer \"10.17\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.19\")\n;; 11\n;; >>> (closest_integer \"10.21\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.23\")\n;; 11\n;; >>> (closest_integer \"10.25\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.27\")\n;; 11\n;; >>> (closest_integer \"10.29\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.31\")\n;; 11\n;; >>> (closest_integer \"10.33\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.35\")\n;; 11\n;; >>> (closest_integer \"10.37\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.39\")\n;; 11\n;; >>> (closest_integer \"10.41\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.43\")\n;; 11\n;; >>> (closest_integer \"10.45\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.47\")\n;; 11\n;; >>> (closest_integer \"10.49\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.51\")\n;; 11\n;; >>> (closest_integer \"10.53\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.55\")\n;; 11\n;; >>> (cl", "  (let ((n (string->number value)))\n    (if\
    \ (zero? n)\n      (string->number \"0\")\n      (let ((i (string->number \"0\"\
    )))\n        (let ((d (abs (- n i))))\n          (if (zero? d)\n            (string->number\
    \ (+ i 1))\n            (string->number (+ i (- d 2)))\n          )\n        )\n\
    \      )\n    )\n  )\n)\n", "  (let ((result (string->number value)))\n    (if\
    \ (zero? result)\n      (string->number \"0\")\n      (if (negative? result)\n\
    \        (string->number (- result 1))\n        (string->number (+ result 1))))))\n\
    \n;; Test it out", "  (let ((n (string->number value)))\n    (if (zero? n)\n \
    \     (string->number \"0\")\n      (if (zero? (abs n))\n        (string->number\
    \ \"0\")\n        (if (> n 0)\n          (string->number (+ n (abs (- n))))\n\
    \          (string->number (- n)))))))\n\n;; >>> (closest_integer \"10.5\")\n\
    ;; 10\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\"\
    )\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer \"\
    10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>> (closest_integer\
    \ \"8.9\")\n;; 8\n;; >>> (closest_integer \"8.8\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.7\")\n;; 8\n;; >>> (closest_integer \"8.6\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.5\")\n;; 8\n;; >>> (closest_integer \"8.4\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.3\")\n;; 8\n;; >>> (closest_integer \"8.2\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.1\")\n;; 8\n;; >>> (clos", "  (let ((result (string->number value)))\n \
    \   (if (zero? result)\n      (string->number \"0\")\n      (if (zero? (abs result))\n\
    \        (string->number \"0\")\n        (if (zero? (abs (- result)))\n      \
    \    (string->number \"0\")\n          (if (zero? (abs (+ result)))\n        \
    \    (string->number \"0\")\n            (if (zero? (abs (- result)))\n      \
    \        (string->number \"0\")\n              (if (zero? (abs (+ result)))\n\
    \                (string->number \"0\")\n                (if (zero? (abs (- result)))\n\
    \                  (string->number \"0\")\n                  (if (zero? (abs (+\
    \ result)))\n                    (string->number \"0\")\n                    (if\
    \ (zero? (abs (- result)))\n                      (string->number \"0\")\n   \
    \                   (if (zero? (abs (+ result)))\n                        (string->number\
    \ \"0\")\n                        (if (zero? (abs (- result)))\n             \
    \             (string->number \"0\")\n                          (if (zero? (abs\
    \ (+ result)))\n                            (string->number \"0\")\n         \
    \                   (if (zero? (abs (- result)))\n                           \
    \   (string->number \"0\")\n                              (if (zero? (abs (+ result)))\n\
    \                                (string->number \"0\")\n                    \
    \            (if (zero? (abs (- result)))\n                                  (string->number\
    \ \"0\")\n                                  (if (zero? (abs (+ result)))\n   \
    \                                 (string->number \"0\")\n                   \
    \                 (if (zero? (abs (- result)))\n                             \
    \         (string->number \"0\")\n                                      (if (zero?\
    \ (abs (+ result)))\n                                        (string->number \"\
    0\")\n                                        (if (zero? (abs (- result)))\n \
    \                                         (string->number \"0\")\n           \
    \                               (if (zero? (abs (+ result)))\n               \
    \                             (string->number \"0\")\n                       \
    \                     (if (zero? (abs (- result)))\n                         \
    \                     (string->number \"0\")\n                               \
    \               (if (zero? (abs (+ result)))\n                               \
    \                 (string->number \"0\")\n                                ", " \
    \ (let ((n (string->number value)))\n    (if (zero? n)\n      (string->number\
    \ \"0\")\n      (let ((i (floor n)))\n        (if (zero? (abs n - i))\n      \
    \    (string->number (i))\n          (string->number (i + 1)))))\n    ))\n\n;;\
    \ Test it out", "  (let ((result (+ (string->number value) 0.5)))\n    (if (<\
    \ result 0)\n      (if (> result 0)\n        (+ result 1)\n        (+ result -1))\n\
    \      result)))\n\n;; Test it out", "  (let ((value-str (string->number value)))\n\
    \    (if (zero? value-str)\n      (string->number (string->number (string->number\
    \ \"0\")))\n      (string->number (string->number (string->number \"0\"))))\n\
    \    (let ((value-int (string->number value-str)))\n      (if (zero? value-int)\n\
    \        (string->number (string->number (string->number \"0\")))\n        (string->number\
    \ (string->number (string->number \"0\"))))\n      (if (zero? value-int)\n   \
    \     (string->number (string->number (string->number \"0\")))\n        (string->number\
    \ (string->number (string->number \"0\"))))\n      (if (zero? value-int)\n   \
    \     (string->number (string->number (string->number \"0\")))\n        (string->number\
    \ (string->number (string->number \"0\"))))\n      (if (zero? value-int)\n   \
    \     (string->number (string->number (string->number \"0\")))\n        (string->number\
    \ (string->number (string->number \"0\"))))\n      (if (zero? value-int)\n   \
    \     (string->number (string->number (string->number \"0\")))\n        (string->number\
    \ (string->number (string->number \"0\"))))\n      (if (zero? value-int)\n   \
    \     (string->number (string->number (string->number \"0\")))\n        (string->number\
    \ (string->number (string->number \"0\"))))\n      (if (zero? value-int)\n   \
    \     (string->number (string->number (string->number \"0\")))\n        (string->number\
    \ (string->number (string->number \"0\"))))\n      (if (zero? value-int)\n   \
    \     (string->number (string->number (string->number \"0\")))\n        (string->number\
    \ (string->number (string->number \"0\"))))\n      (if (zero? value-int)\n   \
    \     (string->number (string->number (string->number \"0\")))\n        (string->number\
    \ (string->number (string->number \"0\"))))\n      (if (zero? value-int)\n   \
    \     ", "  (let ((value-int (string->integer value)))\n    (if (zero? value-int)\n\
    \      (string->integer value)\n      (if (zero? (- value-int 1))\n        (string->integer\
    \ (- value-int 1))\n        (string->integer value))))\n)\n\n;; Test it out",
  "  (let ((number (string->number value)))\n    (if (zero? number)\n      (number)\n\
    \      (if (zero? (abs number))\n        (number)\n        (if (zero? (abs number\
    \ - 1))\n          (number - 1)\n          (if (zero? (abs number + 1))\n    \
    \        (number + 1)\n            (number)))))))\n", "  (let ((int-val (string->number\
    \ value)))\n    (if (zero? int-val)\n      (string->number (string-append \"0\"\
    \ (string-append/dup (abs int-val) \"9\")))\n      (string->number (string-append\
    \ (string-append/dup (abs int-val) \"9\") \"0\"))))\n\n;; Test it out", "  (let\
    \ ((result (+ (string->number value) 0.5)))\n    (if (< result 0)\n      (if (<\
    \ result (string->number \"-\" result))\n        result)\n      result)))\n\n\
    ;; Test it out", "  (let ((n (string->number value)))\n    (if (zero? n)\n   \
    \   (string->number \"0\")\n      (let ((i (floor n)))\n        (if (zero? i)\n\
    \          (string->number (inexact->exact i))\n          (string->number (inexact->exact\
    \ (+ i 1)))\n          )\n        )\n      )\n    )\n  )\n\n;; Test it out", " \
    \ (let ((n (string->number value)))\n    (if (zero? n)\n      (string->number\
    \ \"0\")\n      (if (zero? (abs n))\n        (string->number \"0\")\n        (if\
    \ (< (abs n) (abs (- n)))\n          (string->number (- n))\n          (string->number\
    \ n))))))\n\n;; Test it out", "  (let ((int-val (string->number value)))\n   \
    \ (if (zero? int-val)\n      (string->number (string-append \"0\" (substring (number->string\
    \ int-val) 1))))\n    (string->number (string-append (number->string int-val)\
    \ \"0\"))))\n\n;; Test it out", "  (let ((int (string->number value)))\n    (if\
    \ (zero? int)\n      (string->number (string->number (string->number int) + 1))\n\
    \      (string->number (string->number (string->number int) - 1))))\n)\n\n;; Test\
    \ it out", "  (let ((value-int (string->number value)))\n    (if (zero? value-int)\n\
    \      (string->number (string->number value-int - 1))\n      (string->number\
    \ (string->number value-int + 1)))))\n", "  (let ((n (string->number value)))\n\
    \    (if (zero? n)\n      (string->number \"0\")\n      (if (zero? (abs n))\n\
    \        (string->number \"0\")\n        (if (< n 0)\n          (string->number\
    \ (- n 1))\n          (string->number (* n 1)))))))\n\n;; Test it out", "  (let\
    \ ((n (string->number value)))\n    (if (zero? n)\n      (string->number \"0\"\
    )\n      (if (zero? (abs n))\n        (string->number \"0\")\n        (let ((x\
    \ (floor n)))\n          (if (zero? (abs (sub1 x)))\n            (string->number\
    \ (sub1 x))\n            (string->number (add1 x))))))))\n\n;; Test it out", " \
    \ (let ((val (string->number value)))\n    (if (< val 0)\n      (if (< val -1)\n\
    \        (+ val -1)\n        (- val -2))\n      (+ val 1))\n    ))\n\n;; Test\
    \ it out", "  (let* ([number (string->number value)])\n    (if (zero? number)\n\
    \      number\n      (let ([integer (floor number)])\n        (if (zero? integer)\n\
    \          integer\n          (let ([fraction (number - integer)])\n         \
    \   (if (zero? fraction)\n              integer\n              (let ([next_integer\
    \ (integer + 1)])\n                (if (zero? next_integer)\n                \
    \  next_integer\n                  (let ([next_fraction (number - next_integer)])\n\
    \                    (if (zero? next_fraction)\n                      next_integer\n\
    \                      (let ([next_next_integer (next_integer + 1)])\n       \
    \                 (if (zero? next_next_integer)\n                          next_integer\n\
    \                          (let ([next_next_fraction (number - next_next_integer)])\n\
    \                            (if (zero? next_next_fraction)\n                \
    \              next_integer\n                              (let ([next_next_next_integer\
    \ (next_next_integer + 1)])\n                                (if (zero? next_next_next_integer)\n\
    \                                  next_integer\n                            \
    \      (let ([next_next_next_fraction (number - next_next_next_integer)])\n  \
    \                                  (if (zero? next_next_next_fraction)\n     \
    \                                 next_integer\n                             \
    \         (let ([next_next_next_next_integer (next_next_next_integer + 1)])\n\
    \                                        (if (zero? next_next_next_next_integer)\n\
    \                                          next_integer\n                    \
    \                      (let ([next_next_next_next_fraction (number - next_next_next_next_integer)])\n\
    \                                            (if (zero? next_next_next_next_fraction)\n\
    \                                              next_integer\n                \
    \                              (let ([next_next_next_next_next_integer (next_next_next_next_integer\
    \ + 1)])\n                                                (if (zero? next_next_next_next_next_integer)\n\
    \                                                  next_integer\n            \
    \                                      (let ([next_next_next_next_next_fraction\
    \ (", "  (let ((value-int (string->number value)))\n    (if (zero? value-int)\n\
    \      value-int\n      (if (zero? (- value-int))\n        (+ value-int 1)\n \
    \       (+ value-int (- 1)))))\n)\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (zero? n)\n      (string->number \"0\")\n      (if (negative?\
    \ n)\n        (string->number (- n 1))\n        (string->number (- n 2)))))\n\
    )\n\n;; Test it out", "  (let ((number (string->number value)))\n    (if (negative?\
    \ number)\n      (negate (string->number (+ number 1)))\n      (string->number\
    \ number))))\n\n;; Test it out", "  (let ((int (string->number value)))\n    (if\
    \ (zero? int)\n      (string->number (string-append \"0\" (string-append/dup (string->number\
    \ (- int 1)) \"0\")))\n      (string->number (string-append (string->number int)\
    \ \"0\"))))\n\n;; Test it out", "  (let ((n (string->number value)))\n    (if\
    \ (negative? n)\n      (negate (string->number (+ n 1)))\n      (string->number\
    \ (+ n 0))))))\n\n;; >>> (closest_integer \"10.5\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.0\")\n;; 10\n;; >>> (closest_integer \"9.9\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.8\")\n;; 9\n;; >>> (closest_integer \"9.7\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.6\")\n;; 9\n;; >>> (closest_integer \"9.5\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.4\")\n;; 9\n;; >>> (closest_integer \"9.3\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.2\")\n;; 9\n;; >>> (closest_integer \"9.1\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.0\")\n;; 9\n;; >>> (closest_integer \"8.9\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.8\")\n;; 8\n;; >>> (closest_integer \"8.7\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.6\")\n;; 8\n;; >>> (closest_integer \"8.5\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.4\")\n;; 8\n;; >>> (closest_integer \"8.3\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.2\")\n;; 8\n;; >>> (closest_integer \"8.1\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.0\")\n;; 8\n;; >>> (closest_integer \"7.9\")\n;; 7\n;; >>> (closest_", " \
    \ (let ((result (+ (string-to-number value) 0.5)))\n    (if (< result 0)\n   \
    \   (if (< result (* -1 result))\n        (+ result 1)\n        (* -1 result))\n\
    \      result)))\n\n;; >>> (closest_integer \"10.5\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.0\")\n;; 10\n;; >>> (closest_integer \"9.9\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.8\")\n;; 9\n;; >>> (closest_integer \"9.7\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.6\")\n;; 9\n;; >>> (closest_integer \"9.5\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.4\")\n;; 9\n;; >>> (closest_integer \"9.3\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.2\")\n;; 9\n;; >>> (closest_integer \"9.1\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.0\")\n;; 9\n;; >>> (closest_integer \"8.9\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.8\")\n;; 8\n;; >>> (closest_integer \"8.7\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.6\")\n;; 8\n;; >>> (closest_integer \"8.5\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.4\")\n;; 8\n;; >>> (closest_integer \"8.3\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.2\")\n;; 8\n;; >>> (closest_integer \"8.1\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.0\")\n;; 8\n;; >>> (closest_integer \"7.9\")", "  (let ((n (string->number\
    \ value)))\n    (if (zero? n)\n      (string->number \"0\")\n      (let ((x (floor\
    \ n)))\n        (if (zero? x)\n          (string->number (string-append \"0\"\
    \ (sub1 x)))\n          (string->number (string-append (sub1 x) (sub1 n)))\n \
    \       )\n      )\n    )\n  )\n)\n\n;; Test it out", "  (let ((value-as-float\
    \ (string->number value)))\n    (if (zero? value-as-float)\n      (string->number\
    \ 0)\n      (let ((value-as-int (floor value-as-float)))\n        (if (zero? value-as-int)\n\
    \          (string->number value-as-int)\n          (let ((value-as-float (abs\
    \ value-as-int)))\n            (if (zero? value-as-float)\n              (string->number\
    \ value-as-int)\n              (let ((value-as-int (floor value-as-float)))\n\
    \                (if (zero? value-as-int)\n                  (string->number value-as-int)\n\
    \                  (let ((value-as-float (abs value-as-int)))\n              \
    \      (if (zero? value-as-float)\n                      (string->number value-as-int)\n\
    \                      (let ((value-as-int (ceiling value-as-float)))\n      \
    \                  (if (zero? value-as-int)\n                          (string->number\
    \ value-as-int)\n                          (let ((value-as-float (abs value-as-int)))\n\
    \                            (if (zero? value-as-float)\n                    \
    \          (string->number value-as-int)\n                              (let ((value-as-int\
    \ (ceiling value-as-float)))\n                                (if (zero? value-as-int)\n\
    \                                  (string->number value-as-int)\n           \
    \                       (let ((value-as-float (abs value-as-int)))\n         \
    \                           (if (zero? value-as-float)\n                     \
    \                 (string->number value-as-int)\n                            \
    \          (let ((value-as-int (round value-as-float)))\n                    \
    \                    (if (zero? value-as-int)\n                              \
    \            (string->number value-as-int)\n                                 \
    \         (let ((value-as-float (abs value-as-int)))\n                       \
    \                     (if (zero? value-as-float)\n                           \
    \                   (string->number value-as-int)\n                          \
    \                    (let ((value-as-int (round value", "  (let ((result (+ (string-to-number\
    \ value) 0)))\n    (if (< result 0)\n      (- result)\n      (if (> result 0)\n\
    \        (+ result 1)\n        result))))\n", "  (let ((n (string->number value)))\n\
    \    (if (zero? n)\n      (string->number \"0\")\n      (let ((i (floor n)))\n\
    \        (if (zero? (abs n - i))\n          (string->number (i))\n          (string->number\
    \ (i + 1)))))\n    ))\n\n;; Test it out", "  (let ((value-as-float (string->number\
    \ value)))\n    (if (zero? value-as-float)\n      (string->number (string-append\
    \ \"0\" (string-append/dup \"0\" (- (abs value-as-float) 1))))\n      (string->number\
    \ (string-append (string-append/dup \"0\" (- value-as-float)) \".\"))))\n\n;;\
    \ Test it", "  (let ((result (+ (string->number value) 0.5)))\n    (if (< result\
    \ 0)\n      (if (< result -1)\n        (- result)\n        (+ result 1))\n   \
    \   (if (> result 1)\n        (+ result -1)\n        (- result)))))\n\n;; Test\
    \ it out", "  (let ((n (string->number value)))\n    (if (zero? n)\n      (string->number\
    \ \"0\")\n      (if (zero? (abs n))\n        (string->number \"0\")\n        (if\
    \ (zero? (abs (- n)))\n          (string->number \"0\")\n          (if (zero?\
    \ (abs (- (- n))))\n            (string->number \"0\")\n            (if (zero?\
    \ (abs (n - 1))))\n              (string->number \"1\")\n              (if (zero?\
    \ (abs (n - 2))))\n                (string->number \"2\")\n                (if\
    \ (zero? (abs (n - 3))))\n                  (string->number \"3\")\n         \
    \         (if (zero? (abs (n - 4))))\n                    (string->number \"4\"\
    )\n                    (if (zero? (abs (n - 5))))\n                      (string->number\
    \ \"5\")\n                      (if (zero? (abs (n - 6))))\n                 \
    \       (string->number \"6\")\n                        (if (zero? (abs (n - 7))))\n\
    \                          (string->number \"7\")\n                          (if\
    \ (zero? (abs (n - 8))))\n                            (string->number \"8\")\n\
    \                            (if (zero? (abs (n - 9))))\n                    \
    \          (string->number \"9\")\n                              (if (zero? (abs\
    \ (n - 10))))\n                                (string->number \"10\")\n     \
    \                           (if (zero? (abs (n - 11))))\n                    \
    \              (string->number \"11\")\n                                  (if\
    \ (zero? (abs (n - 12))))\n                                    (string->number\
    \ \"12\")\n                                    (if (zero? (abs (n - 13))))\n \
    \                                     (string->number \"13\")\n              \
    \                        (if (zero? (abs (n - 14))))\n                       \
    \                 (string->number \"14\")\n                                  \
    \      (if (zero? (abs (n - 15))))\n                                         \
    \ (string->number \"15\")\n                                          (if (zero?\
    \ (abs (n - 16))))\n                                            (string->number\
    \ \"16\")\n                                            (if (zero? (abs (n - 17))))\n\
    \                                              (string", "  (let ((n (string->number\
    \ value)))\n    (if (< n 0)\n      (if (< (abs n) (abs (string->number \"1\")))\n\
    \        (string->number \"0\")\n        (string->number (- n 1)))\n      (string->number\
    \ (round n)))))\n\n;; Test it out", "  (let ((n (string->number value)))\n   \
    \ (if (< (abs n) 1)\n      (if (zero? n)\n        (string->number \"0\")\n   \
    \     (string->number (+ n 1)))))\n)\n\n;; Create a function that takes a value\
    \ (string) representing a number\n;; and returns the closest integer to it. If\
    \ the number is equidistant\n;; from two integers, round it away from zero.\n\
    ;; Examples\n;; >>> (closest_integer \"10\")\n;; 10\n;; >>> (closest_integer \"\
    15.3\")\n;; 15\n;; Note:\n;; Rounding away from zero means that if the given number\
    \ is equidistant\n;; from two integers, the one you should return is the one that\
    \ is the\n;; farthest from zero. For example closest_integer(\"14.5\") should\n\
    ;; return 15 and closest_integer(\"-14.5\") should return -15.", "  (let ((number\
    \ (string->number value)))\n    (if (negative? number)\n      (negate (string->number\
    \ (substring value 0 (string-length value) -1)))\n      (string->number (substring\
    \ value 0 (string-length value) -1))))\n)\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (negative? n)\n      (negate (string->number (substring n\
    \ (- (length n) 1))))\n      (string->number (substring n 0))))\n)\n\n;; Test\
    \ it out", "  (let ((n (string->number value)))\n    (if (zero? n)\n      (string->number\
    \ \"0\")\n      (let ((d (abs n)))\n        (if (zero? d)\n          (string->number\
    \ \"0\")\n          (if (zero? (mod d 2))\n            (string->number (string->number\
    \ (string->number (string->number \"0\") + d) + \"0\"))\n            (string->number\
    \ (string->number (string->number \"0\") + d) + \"0\")))))\n))\n", "  (let ((value-int\
    \ (string->number value)))\n    (if (zero? value-int)\n      (string->number (string->number\
    \ (string->number value-int) + 1))\n      (string->number (string->number value-int))))\n\
    )\n\n;; Test it out", "  (let ((n (string->number value)))\n    (if (< n 0)\n\
    \      (string->number (- n 1))\n      (if (> n 0)\n        (string->number (+\
    \ n 1))\n        (string->number 0))))\n)\n\n;; Test it out", "  (let ((int (floor\
    \ value)))\n    (if (< value (sub1 int))\n      (sub1 int)\n      (if (> value\
    \ (add1 int))\n        (add1 int)\n        (sub1 int))))\n  (closest_integer value))\n\
    \n;; Test it out", "  (let ((value-str (string value)))\n    (if (string? value-str)\n\
    \      (string-append \"0\" value-str)\n      (string-append \"-\" value-str)))\n\
    \  (string-to-number value))\n\n;; Create a function that takes a value (string)\
    \ representing a number\n;; and returns the closest integer to it. If the number\
    \ is equidistant\n;; from two integers, round it away from zero.\n;; Examples\n\
    ;; >>> (closest_integer \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;;\
    \ 15\n;; Note:\n;; Rounding away from zero means that if the given number is equidistant\n\
    ;; from two integers, the one you should return is the one that is the\n;; farthest\
    \ from zero. For example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.", "  (let ((val (string->number value)))\n    (if\
    \ (zero? val)\n      (string->number 0)\n      (let ((a (floor val)))\n      \
    \  (let ((b (ceiling val)))\n          (if (zero? (abs (val - a)))\n         \
    \   (string->number a)\n            (if (zero? (abs (val - b)))\n            \
    \  (string->number b)\n              (string->number (round val))))))))))\n\n\
    ;; Test it out", "  (let ((result (+ (string-to-number value) 0)))\n    (if (<\
    \ result 0)\n      (- result)\n      (if (> result 0)\n        (+ result 1)\n\
    \        result))))\n\n;; Test it out", "  (let ((value-str (string value)))\n\
    \    (if (string? value-str)\n      (let ((value-int (string->number value-str)))\n\
    \        (if (zero? value-int)\n          (string->number \"0\")\n          (string->number\
    \ (string->number/1 value-int) value-int)))\n      (string->number value-str)))\n\
    )\n\n;; Test it out", "  (let ((n (string->number value)))\n    (if (zero? n)\n\
    \      (string->number \"0\")\n      (if (negative? n)\n        (string->number\
    \ (- n 1))\n        (string->number (- n 2)))))\n)\n\n;; Test it out", "  (let\
    \ ((n (string->number value)))\n    (if (negative? n)\n      (negate (string->number\
    \ (+ n 1)))\n      (string->number (+ n 0))))))\n\n;; >>> (closest_integer \"\
    10.5\")\n;; 11\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.9\")\n;; 10\n;; >>> (closest_integer \"10.8\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.7\")\n;; 10\n;; >>> (closest_integer \"10.6\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>> (closest_integer\
    \ \"8.9\")\n;; 8\n;; >>> (closest_", "  (let ((n (string->number value)))\n  \
    \  (if (< n 0)\n      (if (< n (string->number \"0\")))\n        (string->number\
    \ \"0\"))\n    (if (> n (string->number \"9\" * 9))\n      (string->number \"\
    9\"))\n    (string->number\n      (string-append\n        (string-append\n   \
    \       (string->number (string-append \"0\" n))\n          (string->number (string-append\
    \ \"1\" n))\n          (string->number (string-append \"2\" n))\n          (string->number\
    \ (string-append \"3\" n))\n          (string->number (string-append \"4\" n))\n\
    \          (string->number (string-append \"5\" n))\n          (string->number\
    \ (string-append \"6\" n))\n          (string->number (string-append \"7\" n))\n\
    \          (string->number (string-append \"8\" n))\n          (string->number\
    \ (string-append \"9\" n)))))))\n\n;; >>> (closest_integer \"10.5\")\n;; 11\n\
    ;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n\
    ;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\"\
    )\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer \"\
    9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>>", "  (let ((n\
    \ (string->number value)))\n    (if (negative? n)\n      (negate (string->number\
    \ (+ n 1)))\n      (string->number (+ n 0))))))\n\n;; Test it out", "  (let ((n\
    \ (string->number value)))\n    (if (< n 0)\n      (if (< n (string->number \"\
    0\")))\n        (string->number \"0\")\n      (let ((i (- n 1)))\n        (if\
    \ (< (abs i) (abs (- n 1)))\n          (string->number (if (< i 0) \"+\" \"-\"\
    ))\n          (string->number i)))))\n)\n", "  (let ((result (+ (string->number\
    \ value) 0.5)))\n    (if (< result 0)\n      (if (> result 0)\n        (+ result\
    \ 1)\n        (+ result -1))\n      result)))\n", "  (let ((value-str (string->number\
    \ value)))\n    (if (negative? value-str)\n      (negate (string->number (string->number\
    \ (string->string (- value-str) \"1\"))))\n      (string->number (string->number\
    \ (string->string (+ value-str \"1\")))))))\n\n;; >>> (closest_integer \"10.1\"\
    )\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 11\n;; >>> (closest_integer \"\
    10.9\")\n;; 11\n;; >>> (closest_integer \"10.99\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.999\")\n;; 11\n;; >>> (closest_integer \"10.9999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10.999999\")\n;; 11\n;; >>>\
    \ (closest_integer \"10.9999999\")\n;; 11\n;; >>> (closest_integer \"10.99999999\"\
    )\n;; 11\n;; >>> (closest_integer \"10.999999999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.9999999999\")\n;; 11\n;; >>> (closest_integer \"10.99999999999\")\n;; 11\n\
    ;; >>> (closest_integer \"10.999999999999\")\n;; 11\n;; >>> (closest_integer \"\
    10.9999999999999\")\n;; 11\n;; >>> (closest_integer \"10.99999999999999\")\n;;\
    \ 11\n;; >>> (closest_integer \"10.999999999999999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.9999999999999999\")\n;; 11\n;; >>> (closest_integer \"10.99999999999999999\"\
    )\n;; 11\n;; >>> (closest_integer \"10.999999999999999999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.9999999999999999999\")\n;; 11\n;; >>> (closest_integer \"10.99999999999999999999\"\
    )\n;; 11\n;; >>> (closest_integer \"10.999999999999999999999\")\n;; 11\n;;", " \
    \ (let ((int (string->number value)))\n    (if (zero? int)\n      (string->number\
    \ (string->number/1 value))\n      (if (zero? (- int 1))\n        (string->number\
    \ (string->number/1 value))\n        (string->number (string->number/1 (- int\
    \ 1)))))\n    ))\n\n;; Test it out", "  (let ((n (string->number value)))\n  \
    \  (if (negative? n)\n      (negate (string->number (+ n 1)))\n      (string->number\
    \ (+ n 0))))))\n\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 11\n;; >>> (closest_integer \"10.7\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.9\")\n;; 11\n;; >>> (closest_integer \"10.11\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.13\")\n;; 11\n;; >>> (closest_integer \"10.15\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.17\")\n;; 11\n;; >>> (closest_integer \"10.19\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.21\")\n;; 11\n;; >>> (closest_integer \"10.23\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.25\")\n;; 11\n;; >>> (closest_integer \"10.27\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.29\")\n;; 11\n;; >>> (closest_integer \"10.31\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.33\")\n;; 11\n;; >>> (closest_integer \"10.35\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.37\")\n;; 11\n;; >>> (closest_integer \"10.39\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.41\")\n;; 11\n;; >>> (closest_integer \"10.43\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.45\")\n;; 11\n;; >>> (closest_integer \"10.47\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.49\")\n;; 11\n;; >>> (closest_integer \"10.51\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.53\")\n;; 11\n;; >>> (closest_integer \"10.55\")\n;; 11\n;; >>> (closest_",
  "  (let ((n (string->number value)))\n    (if (< n 0)\n      (if (< (abs n) (abs\
    \ (string->number \"1\")))\n        (string->number \"0\"))\n      (string->number\
    \ (if (< n 0)\n                        (if (< (abs n) (abs (string->number \"\
    1\")))\n                          (string->number \"-1\"))\n                 \
    \         (string->number \"1\")))))\n)\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (zero? n)\n      (string->number \"0\")\n      (let ((i (floor\
    \ n)))\n        (if (zero? i)\n          (string->number (sub1 n))\n         \
    \ (string->number (add1 n)))))\n  ))\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (negative? n)\n      (negate (string->number (- n 1)))\n \
    \     (string->number (if (zero? n)\n                          (negate (string->number\
    \ (- n 1)))\n                          (string->number (if (zero? n)\n       \
    \                                       (string->number (- n 2))\n           \
    \                                   (string->number (- n 1))))))))))\n", "  (let\
    \ ((n (string->number value)))\n    (if (zero? n)\n      (string->number \"0\"\
    )\n      (if (zero? (abs n))\n        (string->number \"0\")\n        (let ((x\
    \ (floor n)))\n          (if (zero? (abs (sub1 x)))\n            (string->number\
    \ (sub1 x))\n            (string->number (sub1 (add1 x))))))))))\n\n;; Test it\
    \ out", "  (let ((result (+ (string-to-number value) 0.5)))\n    (if (< result\
    \ 0)\n      (if (< result (string-to-number (- result 1)))\n        (- result\
    \ 1)\n        result)\n      (if (> result (string-to-number (+ result 1)))\n\
    \        (+ result 1)\n        result))\n    result))\n\n;; Test it out", "  (let\
    \ ((int-val (string->number value)))\n    (if (zero? int-val)\n      (string->number\
    \ (string-append \"0\" (string-append/dup (abs int-val) \"9\")))\n      (string->number\
    \ (string-append (abs int-val) \"9\")))))\n\n;; Test it out", "  (let ((value-int\
    \ (string->number value)))\n    (if (zero? value-int)\n      (string->number (string->number\
    \ (string->number value-int - 1)))\n      (string->number (string->number (string->number\
    \ value-int + 1))))))\n", "  (let ((n (string->number value)))\n    (if (zero?\
    \ n)\n      (string->number \"0\")\n      (if (zero? (abs n))\n        (string->number\
    \ \"0\")\n        (if (< n 0)\n          (string->number (- n 1))\n          (string->number\
    \ (* n 1)))))))\n", "  (let ((result (+ (string->number value) 0.5)))\n    (if\
    \ (< result 0)\n      (if (> result 0)\n        (+ result 1)\n        (+ result\
    \ -1))\n      result)))\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.", "  (let* ([num (string->number value)])\n    (if\
    \ (zero? num)\n      (if (zero? (abs num))\n        (abs num)\n        (if (zero?\
    \ (abs (- num 1)))\n          (abs (- num 1))\n          (abs num))))\n    (if\
    \ (zero? num)\n      (if (zero? (abs num))\n        (abs num)\n        (if (zero?\
    \ (abs (- num 1)))\n          (abs (- num 1))\n          (abs num)))))))\n", " \
    \ (let ((val (string->number value)))\n    (if (zero? val)\n      val\n    (let\
    \ ((diff (abs (- val))))\n      (if (zero? diff)\n        (if (zero? val)\n  \
    \        val\n        (if (zero? (- val))\n          val\n          (if (zero?\
    \ diff)\n            diff\n            (if (zero? (- diff))\n              diff\n\
    \              (- val))))))))))\n\n;; >>> (closest_integer \"10.3\")\n;; 10\n\
    ;; >>> (closest_integer \"10.5\")\n;; 11\n;; >>> (closest_integer \"10.7\")\n\
    ;; 11\n;; >>> (closest_integer \"10.9\")\n;; 11\n;; >>> (closest_integer \"10.11\"\
    )\n;; 11\n;; >>> (closest_integer \"10.13\")\n;; 11\n;; >>> (closest_integer \"\
    10.15\")\n;; 11\n;; >>> (closest_integer \"10.17\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.19\")\n;; 11\n;; >>> (closest_integer \"10.21\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.23\")\n;; 11\n;; >>> (closest_integer \"10.25\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.27\")\n;; 11\n;; >>> (closest_integer \"10.29\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.31\")\n;; 11\n;; >>> (closest_integer \"10.33\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.35\")\n;; 11\n;; >>> (closest_integer \"10.37\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.39\")\n;; 11\n;; >>> (closest_integer \"10.41\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.43\")\n;; 11\n;; >>> (closest_integer \"10.45\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.47\")\n;; 11\n;; >>> (closest_integer \"10.49\")\n;; 11\n;; >>>", "  (let\
    \ ((value-int (string->number value)))\n    (if (zero? value-int)\n      (string->number\
    \ (string->number value-int - 1))\n      (string->number (string->number value-int\
    \ + 1)))))\n\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 11\n;; >>> (closest_integer \"10.9\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99\")\n;; 11\n;; >>> (closest_integer \"10.99999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999.1\")\n;; 11\n;; >>> (closest_integer \"10.99999.9\")\n;; 11\n;; >>>\
    \ (closest_integer \"10.99999.99\")\n;; 11\n;; >>> (closest_integer \"10.99999.999\"\
    )\n;; 11\n;; >>> (closest_integer \"10.99999.9999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999.99999.1\")\n\
    ;; 11\n;; >>> (closest_integer \"10.99999.99999.9\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999.99999.99\")\n;; 11\n;; >>> (closest_integer \"10.99999.99999.999\"\
    )\n;; 11\n;; >>> (closest_integer \"10.99999.99999.9999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999.99999.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999.99999.99999.1\"\
    )\n;; 11\n;; >>> (closest_integer \"10.99999.99999.99999.9\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999.99999.99999.99\")\n;; 11\n;; >>> (closest_integer \"10.99999.99999.99999.999\"\
    )\n;; 11\n;; >>> (", "  (let ((result (+ (string->number value) 0.5)))\n    (if\
    \ (< result 0)\n      (if (< result (string->number \"-\" result))\n        result)\n\
    \      (if (> result (string->number \"-\" result))\n        (- result)))))\n\n\
    ;; Test it out", "  (let ((value-int (string->integer value)))\n    (if (zero?\
    \ value-int)\n      (string->integer (string->number (string->string value) -1))\n\
    \      (string->integer (string->number (string->string value) +1))))\n)\n\n;;\
    \ Test it out", "  (let ((val (string->number value)))\n    (if (zero? val)\n\
    \      (string->number \"0\")\n      (let ((delta (abs (- val) (string->number\
    \ \"1\"))))\n        (if (zero? delta)\n          (string->number \"0\")\n   \
    \       (if (zero? (abs (- val) (string->number \"1\")))\n            (string->number\
    \ (+ val (string->number \"1\")))\n            (string->number (- val (string->number\
    \ \"1\"))))))))))\n\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 11\n;; >>> (closest_integer \"10.7\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.9\")\n;; 11\n;; >>> (closest_integer \"10.11\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.13\")\n;; 11\n;; >>> (closest_integer \"10.15\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.17\")\n;; 11\n;; >>> (closest_integer \"10.19\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.21\")\n;; 11\n;; >>> (closest_integer \"10.23\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.25\")\n;; 11\n;; >>> (closest_integer \"10.27\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.29\")\n;; 11\n;; >>> (closest_integer \"10.31\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.33\")\n;; 11\n;; >>> (closest_integer \"10.35\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.37\")\n;; 11\n;; >>> (closest_integer \"10.39\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.41\")\n;; 11\n;; >>> (closest_integer \"10.43\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.45\")\n;; 11\n;; >>> (closest_integer \"10.47\")\n;;", "  (let ((n (string->number\
    \ value)))\n    (if (zero? n)\n      (string->number \"0\")\n      (if (negative?\
    \ n)\n        (string->number (- n 1))\n        (string->number (if (even? n)\
    \ (+ n 1) (- n 1)))))))\n", "  (let ((n (string->number value)))\n    (if (zero?\
    \ n)\n      (string->number \"0\")\n      (let ((i (floor n)))\n        (if (zero?\
    \ i)\n          (string->number (- i 1))\n          (string->number (i)))))\n\
    \  )\n)\n", "  (let ((value-str (string value)))\n    (if (string? value-str)\n\
    \      (let ((value-int (string->number value-str)))\n        (if (zero? value-int)\n\
    \          (string->number \"0\")\n          (string->number (string-append (string->number\
    \ value-int) \"0\")))))\n      (string->number value-str)))\n\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.9\")\n;; 11\n;; >>> (closest_integer \"10.99\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10.99999\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.99999\")\n;; 11\n;; >>> (closest_integer \"10", "  (let ((result (+ (string-to-number\
    \ value) 0.5)))\n    (if (< result 0)\n      (if (< result (- result) 0)\n   \
    \     (+ result 1)\n        (- result 1))\n      (+ result 0)))\n)\n\n;; Test\
    \ it out", "  (let ((val (string->number value)))\n    (if (zero? val)\n     \
    \ (string->number 0)\n      (let ((i (floor val)))\n        (if (zero? i)\n  \
    \        (string->number (- i 1))\n          (string->number (i)))))\n  )\n)\n",
  "  (let ((n (string->number value)))\n    (if (negative? n)\n      (negate (string->number\
    \ (+ n 1)))\n      (string->number (+ n 0))))))\n\n;; >>> (closest_integer \"\
    10.5\")\n;; 11\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>> (closest_integer\
    \ \"8.9\")\n;; 8\n;; >>> (closest_integer \"8.8\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.7\")\n;; 8\n;; >>> (closest_integer \"8.6\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.5\")\n;; 8\n;; >>> (closest_integer \"8.4\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.3\")\n;; 8\n;; >>> (closest_integer \"8.2\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.1\")\n;; 8\n;; >>> (closest_integer \"8.0\")\n;; 8\n;; >>> (closest_integer\
    \ \"7.9\")\n;; 7\n;; >>> (closest_", "  (let ((n (string->number value)))\n  \
    \  (if (zero? n)\n      (string->number \"0\")\n      (let ((i (string->number\
    \ \"0\")))\n        (if (zero? i)\n          (string->number \"0\")\n        \
    \  (let ((d (abs (- n i))))\n            (if (zero? d)\n              (string->number\
    \ \"0\")\n              (let ((r (floor n)))\n                (if (zero? r)\n\
    \                  (string->number \"0\")\n                  (let ((d2 (abs (-\
    \ n r))))\n                    (if (zero? d2)\n                      (string->number\
    \ \"0\")\n                      (let ((r2 (ceiling n)))\n                    \
    \    (if (zero? r2)\n                          (string->number \"0\")\n      \
    \                    (let ((d3 (abs (- n r2))))\n                            (if\
    \ (zero? d3)\n                              (string->number \"0\")\n         \
    \                     (let ((r3 (round n)))\n                                (if\
    \ (zero? r3)\n                                  (string->number \"0\")\n     \
    \                             (let ((d4 (abs (- n r3))))\n                   \
    \                 (if (zero? d4)\n                                      (string->number\
    \ \"0\")\n                                      (let ((r4 (truncate n)))\n   \
    \                                     (if (zero? r4)\n                       \
    \                   (string->number \"0\")\n                                 \
    \         (let ((d5 (abs (- n r4))))\n                                       \
    \     (if (zero? d5)\n                                              (string->number\
    \ \"0\")\n                                              (let ((r5 (truncate/away\
    \ n)))\n                                                (if (zero? r5)\n     \
    \                                             (string->number \"0\")\n       \
    \                                           (let ((d6 (abs (- n r5))))\n     \
    \                                              (if (zero? d6)\n              \
    \                                        (string->number \"0\")\n            \
    \                                          (let ((r6 (truncate/toward n)))\n \
    \                                                       (if (zero? r6)\n     \
    \                                                     (string->number", "  (let\
    \ ((val (string->number value)))\n    (if (zero? val)\n      (string->number 0)\n\
    \      (if (zero? (+ val 0.5))\n        (string->number (+ val 1))\n        (string->number\
    \ (- val 1)))))\n)\n\n;; Test it out", "  (let ((value-int (string->number value)))\n\
    \    (if (zero? value-int)\n      (string->number (string-append \"0\" (string-append/dup\
    \ value-int -1))))\n    (if (zero? value-int)\n      (string->number (string-append\
    \ \"0\" (string-append/dup value-int 1))))\n    (string->number (string-append\
    \ (string-append/dup value-int -1)\n                                   (string-append/dup\
    \ value-int 1))))\n)\n\n;; Test it out", "  (let ((n (string->number value)))\n\
    \    (if (negative? n)\n      (- n)\n      (if (zero? n)\n        (zero)\n   \
    \     (if (zero? (abs n))\n          (zero)\n          (if (> n 0)\n         \
    \   (+ n 1)\n            (- n 1))))))\n)\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (zero? n)\n      (string->number \"0\")\n      (if (negative?\
    \ n)\n        (string->number (- n 1))\n        (string->number (+ n 1)))))\n\
    )\n\n;; Test it out", "  (let ((value-int (string->integer value)))\n    (if (zero?\
    \ value-int)\n      (string->integer value)\n      (if (zero? value-int)\n   \
    \     (string->integer value)\n        (if (> value-int 0)\n          (string->integer\
    \ (+ value-int 1))\n          (string->integer (- value-int 1)))))))\n\n;; Test\
    \ it out", "  (let ((value-str (string value)))\n    (if (string? value-str)\n\
    \      (string-append (string-append \"0\" (string-length value-str)) value-str)\n\
    \      (string-append \"0\" (string-length value-str)))))\n\n;; Test it out",
  "  (let ((result (+ (string->number value) 0.5)))\n    (if (< result 0)\n      (if\
    \ (< result (- result)) result)\n      (if (> result 0)\n        (- result)))))\n",
  "  (let ((number (string->number value)))\n    (if (negative? number)\n      (negate\
    \ (string->number (substring value 0 (string->length value) - 1)))\n      (string->number\
    \ (substring value 0 (string->length value) - 1))))\n)\n\n;; Test it out", " \
    \ (let ((n (string->number value)))\n    (if (< n 0)\n      (if (< n -1)\n   \
    \     (string->number (- n 1))\n        (string->number (- n 2)))\n      (string->number\
    \ (if (< n 1)\n                        (string->number (- n 1))\n            \
    \            (string->number (- n 2)))))))\n\n;; >>> (closest_integer \"10.5\"\
    )\n;; 11\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer \"\
    10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>> (closest_integer\
    \ \"8.9\")\n;; 8\n;; >>> (closest_integer \"8.8\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.7\")\n;; 8\n;; >>> (closest_integer \"8.6\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.5\")\n;; 8\n;; >>> (closest_integer \"8.4\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.3\")\n;; 8\n;; >>> (closest_integer \"8.2\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.1\")\n;; 8\n;; >>> (cl", "  (let ((result (string->number value)))\n   \
    \ (if (negative? result)\n      (string->number (- result))\n      result)))\n\
    \n;; Test it out", "  (let ((result (+ (string-to-number value) 0)))\n    (if\
    \ (< result 0)\n      (if (< result (- result))\n        (+ result 1))\n     \
    \ (if (> result 0)\n        (- result 1))))\n\n;; >>> (closest_integer \"10.5\"\
    )\n;; 11\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer \"\
    10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.9\")\n;; 10\n;; >>> (closest_integer \"10.8\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.7\")\n;; 10\n;; >>> (closest_integer \"10.6\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.9\")\n;; 10\n;; >>> (closest_integer \"10.8\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.7\")\n;; 10\n;; >>> (closest_integer \"10.6\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.9\")\n", "  (let ((n (string->number value)))\n    (if (< n 0)\n      (string->number\
    \ (- n 1))\n      (if (< (abs n) (abs (string->number (string->number (- n 1))))))\n\
    \        (string->number (- n 1))\n      (string->number (string->number (- n\
    \ 1))))))\n\n;; Test it out", "  (let ((n (string->number value)))\n    (if (negative?\
    \ n)\n      (- (abs n))\n      (if (zero? n)\n        0\n        (if (zero? (abs\
    \ (- n)))\n          (abs n)\n          (abs (- n))))))))\n", "  (let ((value-int\
    \ (string->number value)))\n    (if (zero? value-int)\n      (string->number (string->number\
    \ value-int - 1))\n      (string->number (string->number value-int + 1)))))\n\n\
    ;; Test it out", "  (let ((result (+ (string->number value) 0.5)))\n    (if (<\
    \ result 0)\n      (if (< result -1)\n        (- result)\n        (+ result 1))\n\
    \      (if (> result 1)\n        (+ result -1)\n        (- result)))))\n\n;; Test\
    \ it out", "  (let ((int-val (string->number value)))\n    (if (negative? int-val)\n\
    \      (negate (string->number (substring value (string->length value) 1)))\n\
    \      (string->number (substring value 0 (string->length value) -1))))\n)\n\n\
    ;; Test it out", "  (let ((value-int (string->number value)))\n    (if (zero?\
    \ value-int)\n      (string->number (string->number value-int - 1))\n      (string->number\
    \ (string->number value-int + 1)))))\n\n;; Test it out", "  (let ((number (string->number\
    \ value)))\n    (if (zero? number)\n      number\n      (let ((integer (integer->string\
    \ (- number)))\n            (difference (abs number) (abs integer)))\n       \
    \ (if (zero? difference)\n          (string->number integer)\n          (string->number\
    \ (string->number integer) (string->number difference)))))))\n", "  (let ((n (string->number\
    \ value)))\n    (if (zero? n)\n      (string->number \"0\")\n      (if (negative?\
    \ n)\n        (string->number (- n 1))\n        (string->number (+ n 1))))))\n\
    \n;; Test it out", "  (let ((result (string->number value)))\n    (if (zero? result)\n\
    \      (string->number (string-append \"0\" (string-length value))))\n    (if\
    \ (zero? (abs result))\n      (string->number (string-append \"0\" (string-length\
    \ value))))\n    (if (zero? (abs result) - 1)\n      (string->number (string-append\
    \ \"0\" (string-length value))))\n    (if (zero? (abs result) + 1)\n      (string->number\
    \ (string-append \"0\" (string-length value))))\n    (string->number result)))\n\
    \n;; Test it out", "  (let ((value-int (string->number value)))\n    (if (zero?\
    \ value-int)\n      (string->number (string->number value-int - 1))\n      (string->number\
    \ (string->number value-int + 1)))))\n\n;; >>> (closest_integer \"10.5\")\n;;\
    \ 11\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\"\
    )\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer \"\
    10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>> (closest_integer\
    \ \"8.9\")\n;; 8\n;; >>> (closest_integer \"8.8\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.7\")\n;; 8\n;; >>> (closest_integer \"8.6\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.5\")\n;; 8\n;; >>> (closest_integer \"8.4\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.3\")\n;; 8\n;; >>> (closest_integer \"8.2\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.1\")\n;; 8\n;; >>> (closest_integer \"8.0\")\n;; 8\n;; >>> (closest_integer\
    \ \"7.", "  (let ((int (floor value)))\n    (let ((frac (mod value int)))\n  \
    \    (if (zero? frac)\n        (if (zero? value)\n          int\n          (if\
    \ (> value int)\n            (neg int)\n            int))\n        (if (zero?\
    \ value)\n          (neg int)\n          (if (< value int)\n            (neg int)\n\
    \            int))\n        (if (zero? value)\n          (neg int)\n         \
    \ int)))))\n\n;; Test it out", "  (let ((n (string->number value)))\n    (if (<\
    \ n 0)\n      (if (< n -1)\n        (string->number (- n 1))\n        (string->number\
    \ (- n 2)))\n      (string->number (if (< n 1)\n                        (string->number\
    \ (- n 1))\n                        (string->number (- n 2)))))))\n\n;; Test it\
    \ out", "  (let ((value-int (string->integer value)))\n    (if (zero? value-int)\n\
    \      (string->integer value)\n      (if (zero? value-int)\n        (string->integer\
    \ value)\n        (if (> value-int 0)\n          (string->integer (+ value-int\
    \ 1))\n          (string->integer (- value-int 1))))))))\n", "  (let ((result\
    \ (+ (string-to-number value) 0.5)))\n    (if (< result 0)\n      (if (< result\
    \ (* -1 result))\n        (+ result 1))\n      (+ result (* -1 result))))\n  )\n\
    \n;; Test it out", "  (let ((result (+ (string-to-number value) 0)))\n    (if\
    \ (< result 0)\n      (if (< result (string-to-number (- result 1)))\n       \
    \ (- result 1)\n        result)\n      (if (> result 0)\n        (if (> result\
    \ (string-to-number (+ result 1)))\n          (+ result 1)\n          result)\n\
    \        0))\n    result))\n", "  (let ((n (string->number value)))\n    (if (zero?\
    \ n)\n      (string->number \"0\")\n      (if (zero? (abs n))\n        (string->number\
    \ \"0\")\n        (if (< n 0)\n          (string->number (- n 1))\n          (string->number\
    \ (* n 1)))))))\n\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.0\")\n;; 10\n;; >>> (closest_integer \"10.9\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.8\")\n;; 10\n;; >>> (closest_integer \"10.7\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.6\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.0\")\n;; 10\n;; >>> (closest_integer \"9.9\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.8\")\n;; 9\n;; >>> (closest_integer \"9.7\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.6\")\n;; 9\n;; >>> (closest_integer \"9.5\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.4\")\n;; 9\n;; >>> (closest_integer \"9.3\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.2\")\n;; 9\n;; >>> (closest_integer \"9.1\")\n;; 9\n;; >>> (closest_", " \
    \ (let ((result (+ (string->number value) 0.5)))\n    (if (zero? result)\n   \
    \   (string->number (- result))\n      result)))\n\n;; Create a function that\
    \ takes a value (string) representing a number\n;; and returns the closest integer\
    \ to it. If the number is equidistant\n;; from two integers, round it away from\
    \ zero.\n;; Examples\n;; >>> (closest_integer \"10\")\n;; 10\n;; >>> (closest_integer\
    \ \"15.3\")\n;; 15\n;; Note:\n;; Rounding away from zero means that if the given\
    \ number is equidistant\n;; from two integers, the one you should return is the\
    \ one that is the\n;; farthest from zero. For example closest_integer(\"14.5\"\
    ) should\n;; return 15 and closest_integer(\"-14.5\") should return -15.", " \
    \ (let ((val (string->number value)))\n    (if (zero? val)\n      (string->number\
    \ 0)\n      (let ((int (floor val)))\n        (let ((frac (mod val int)))\n  \
    \        (if (zero? frac)\n            (string->number int)\n            (string->number\
    \ (int + 1) (frac - 1))))))))\n\n;; Test it out", "  (let ((result (string->number\
    \ value)))\n    (if (zero? result)\n      (string->number (string->number/string\
    \ \"0\")))\n    (if (zero? (abs result))\n      (string->number (string->number/string\
    \ \"0\")))\n    (if (zero? (abs result - 1))\n      (string->number (string->number/string\
    \ \"0\")))\n    (if (zero? (abs result + 1))\n      (string->number (string->number/string\
    \ \"0\")))\n    (string->number (string->number/string (abs result))))\n)\n\n\
    ;; Test it out", "  (let ((value-int (string->number value)))\n    (if (zero?\
    \ value-int)\n      (string->number (string-append \"0\" (string-append/dup \"\
    9\" (- value-int 1))))\n      (string->number (string-append/dup \"9\" (- value-int\
    \ 1)))))\n)\n\n;; Create a function that takes a value (string) representing a\
    \ number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.", "  (let ((n (string->number value)))\n    (if (negative?\
    \ n)\n      (negate (string->number (- n 1)))\n      (string->number (if (zero?\
    \ n)\n                          (string->number (+ n 1))\n                   \
    \       (string->number (- n 1)))))))\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (zero? n)\n      (string->number 0)\n      (let ((i (floor\
    \ n)))\n        (if (zero? i)\n          (string->number i)\n          (let ((d\
    \ (abs n - i)))\n            (if (zero? d)\n              (string->number i)\n\
    \              (string->number (i + (if (> d) 1 (- d))))))))))))\n", "  (let ((n\
    \ (string->number value)))\n    (if (zero? n)\n      (string->number \"0\")\n\
    \      (let ((i (floor n)))\n        (if (zero? (abs n - i))\n          (string->number\
    \ (i))\n          (string->number (i + 1)))))\n    ))\n\n;; Test it out", "  (let\
    \ ((result (+ (string-to-number value) 0.5)))\n    (if (< result 0)\n      (if\
    \ (> result 0)\n        (+ result 1)\n        (+ result -1))\n      result)))\n",
  "  (let ((n (string->number value)))\n    (if (zero? n)\n      n\n      (let ((i\
    \ (floor n)))\n        (if (zero? (abs n - i))\n          i\n          (if (zero?\
    \ (abs i - n))\n            i\n            (if (zero? (abs n - i) (abs i - n))\n\
    \              (if (negative? i)\n                (neg i)\n                i)\n\
    \              (if (negative? n)\n                (neg n)\n                n))))))))))\n",
  "  (let ((value-as-string value))\n    (string->number (string->number/string value-as-string))))\n\
    \n;; >>> (closest_integer \"10.5\")\n;; 11\n;; >>> (closest_integer \"10.4\")\n\
    ;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\"\
    )\n;; 10\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer \"\
    10.0\")\n;; 10\n;; >>> (closest_integer \"10.9\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.8\")\n;; 10\n;; >>> (closest_integer \"10.7\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.6\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.0\")\n;; 10\n;; >>> (closest_integer \"10.9\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.8\")\n;; 10\n;; >>> (closest_integer \"10.7\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.6\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.0\")\n;; 10\n;; >>> (closest_integer \"10.9\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.8\")\n;; 10\n;; >>> (clos", "  (let ((n (string->number value)))\n    (if\
    \ (zero? n)\n      (string->number \"0\")\n      (if (zero? (abs n))\n       \
    \ (string->number \"0\")\n        (if (< (abs n) (abs (- n)))\n          (string->number\
    \ (- n))\n          (string->number n))))))\n\n;; >>> (closest_integer \"10.5\"\
    )\n;; 10\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer \"\
    10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>> (closest_integer\
    \ \"8.9\")\n;; 8\n;; >>> (closest_integer \"8.8\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.7\")\n;; 8\n;; >>> (closest_integer \"8.6\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.5\")\n;; 8\n;; >>> (closest_integer \"8.4\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.3\")\n;; 8\n;; >>> (closest_integer \"8.2\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.1\")\n;; 8\n;; >>> (cl", "  (let ((int value))\n    (if (< (abs value) 1)\n\
    \      (if (> value 0)\n        (+ value 1)\n        (- value 1))\n      (+ value\
    \ 0))\n    (+ value 0)))\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.", "  (let ((value-as-string value))\n    (string->number\
    \ (string->number/string value-as-string))))\n\n;; >>> (closest_integer \"10.5\"\
    )\n;; 11\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer \"\
    10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>> (closest_integer\
    \ \"8.9\")\n;; 8\n;; >>> (closest_integer \"8.8\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.7\")\n;; 8\n;; >>> (closest_integer \"8.6\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.5\")\n;; 8\n;; >>> (closest_integer \"8.4\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.3\")\n;; 8\n;; >>> (closest_integer \"8.2\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.1\")\n;; 8\n;; >>> (closest_integer \"8.0\")\n;; 8\n;; >>> (closest_integer\
    \ \"7.9\")\n;; 7\n;; >>> (closest_integer \"7.8\")\n;; 7\n;; >>> (clos", "  (let\
    \ ((n (string->number value)))\n    (if (negative? n)\n      (- n)\n      (if\
    \ (zero? n)\n        (zero)\n        (if (zero? (abs n))\n          (zero)\n \
    \         (if (zero? (abs (- n))))\n            (- n)\n            (if (zero?\
    \ (abs (- (- n))))\n              (zero)\n              (if (zero? (abs (- (-\
    \ (- n))))))\n                (- n)\n                (if (zero? (abs (- (- (-\
    \ (- n)))))))))))))))\n", "  (let* ([string (string->number value)])\n    (if\
    \ (zero? string)\n      string\n      (let ([integer (string->number (closest-integer\
    \ string))])\n        (if (zero? integer)\n          integer\n          (if (zero?\
    \ (abs string - integer))\n            (abs string - integer)\n            (abs\
    \ integer - string)))))))\n\n;; Test it out", "  (let ((int-val (string->number\
    \ value)))\n    (if (negative? int-val)\n      (negate (string->number (+ int-val\
    \ 1)))\n      (string->number (+ int-val -1))))))\n", "  (let ((value-int (string->number\
    \ value)))\n    (if (< value-int 0)\n      (if (< value-int (abs value-int))\n\
    \        (+ value-int 1)\n        (+ value-int (- 1)))\n      (+ value-int (-\
    \ 1))))\n)\n\n;; Test it out", "  (let ((n (string->number value)))\n    (if (zero?\
    \ n)\n      (string->number \"0\")\n      (let ((i (floor n)))\n        (if (zero?\
    \ (abs n - i))\n          (string->number (i))\n          (string->number (i +\
    \ 1)))))\n    ))\n\n;; Test it out", "  (let ((n (string->number value)))\n  \
    \  (if (zero? n)\n      (string->number \"0\")\n      (if (negative? n)\n    \
    \    (string->number (- n 1))\n        (string->number (- n 2)))))\n)\n\n;; Test\
    \ it out", "  (let ((number (string->number value)))\n    (if (zero? number)\n\
    \      (string->number \"0\")\n      (let ((integer (floor number)))\n       \
    \ (if (zero? integer)\n          (string->number integer)\n          (let ((fraction\
    \ (modulo number integer)))\n            (if (zero? fraction)\n              (string->number\
    \ integer)\n              (string->number (integer + 1))))))))\n)\n\n;; Test it\
    \ out", "  (let ((result (+ (string-to-number value) 0.5)))\n    (if (zero? result)\n\
    \      (if (zero? (+ result result))\n        (+ result result)\n        result)\n\
    \      result)))\n\n;; >>> (closest_integer \"10.5\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"9.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.4\")\n;; 9\n;; >>> (closest_integer \"9.3\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.2\")\n;; 9\n;; >>> (closest_integer \"9.1\")\n;; 9\n;; >>> (closest_integer\
    \ \"9\")\n;; 9\n;; >>> (closest_integer \"8.5\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.4\")\n;; 8\n;; >>> (closest_integer \"8.3\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.2\")\n;; 8\n;; >>> (closest_integer \"8.1\")\n;; 8\n;; >>> (closest_integer\
    \ \"8\")\n;; 8\n;; >>> (closest_integer \"7.5\")\n;; 7\n;; >>> (closest_integer\
    \ \"7.4\")\n;; 7\n;; >>> (closest_integer \"7.3\")\n;; 7\n;; >>> (closest_integer\
    \ \"7.2\")\n;; 7\n;; >>> (closest_integer \"7.1\")\n;; 7\n;; >>> (closest_integer\
    \ \"7\")\n;; 7\n;; >>> (closest_integer \"6.5\")\n;; 6\n;; >>> (closest_integer\
    \ \"6.4\")\n;; 6\n;; >>> (closest_integer \"6.3\")\n;; 6\n;; >>> (closest", " \
    \ (let ((n (string->number value)))\n    (if (negative? n)\n      (- (abs n))\n\
    \      (if (zero? n)\n        0\n        (if (> n 0)\n          (+ n 1)\n    \
    \      (- n 1))))))\n\n;; Create a function that takes a value (string) representing\
    \ a number\n;; and returns the closest integer to it. If the number is equidistant\n\
    ;; from two integers, round it away from zero.\n;; Examples\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"15.3\")\n;; 15\n;; Note:\n;; Rounding\
    \ away from zero means that if the given number is equidistant\n;; from two integers,\
    \ the one you should return is the one that is the\n;; farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n;; return 15 and closest_integer(\"\
    -14.5\") should return -15.", "  (let ((value-int (string->number value)))\n \
    \   (if (zero? value-int)\n      (if (negative? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)\n\
    \        value-int)\n      (if (zero? value-int)\n        (negate value-int)",
  "  (let ((n (string->number value)))\n    (if (zero? n)\n      (string->number \"\
    0\")\n      (if (negative? n)\n        (string->number (- n 1))\n        (string->number\
    \ (+ n 1))))))\n\n;; Test it out", "  (let ((n (string->number value)))\n    (if\
    \ (< n 0)\n      (if (< n -1)\n        (+ n 1)\n        (- n 1))\n      (+ n 0))\n\
    \    (string->number (number->string n))))\n\n;; >>> (closest_integer \"10.5\"\
    )\n;; 10\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer \"\
    10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>> (closest_integer\
    \ \"8.9\")\n;; 8\n;; >>> (closest_integer \"8.8\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.7\")\n;; 8\n;; >>> (closest_integer \"8.6\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.5\")\n;; 8\n;; >>> (closest_integer \"8.4\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.3\")\n;; 8\n;; >>> (closest_integer \"8.2\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.1\")\n;; 8\n;; >>> (closest_integer \"8.0\")\n;; 8\n;; >>> (closest_integer",
  "  (let ((number (string->number value)))\n    (if (zero? number)\n      number\n\
    \      (let ((integer (string->number (substring value 0 (string->length value)\
    \ - 1))))\n        (if (zero? integer)\n          integer\n          (if (zero?\
    \ (abs number - integer))\n            (if (negative? integer)\n             \
    \ (negative? number)\n              (positive? number))\n            (if (negative?\
    \ number)\n              (negative? integer)\n              (positive? integer))\n\
    \            (abs integer)))))))\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (zero? n)\n      (string->number \"0\")\n      (let ((i (floor\
    \ n)))\n        (if (zero? (abs n - i))\n          (string->number (i))\n    \
    \      (string->number (i + 1)))))\n    ))\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (negative? n)\n      (- (abs n))\n      (if (zero? n)\n  \
    \      0\n        (if (> n 0)\n          (+ n 1)\n          (- n 1))))))\n\n;;\
    \ >>> (closest_integer \"10.5\")\n;; 11\n;; >>> (closest_integer \"14.5\")\n;;\
    \ 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\"\
    )\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer \"\
    14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer\
    \ \"14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer\
    \ \"14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer\
    \ \"14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer\
    \ \"14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer\
    \ \"14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer\
    \ \"14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer\
    \ \"14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer\
    \ \"14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer\
    \ \"14.5\")\n;; 15\n;; >>> (closest_integer \"14.5\")\n;; 15\n;; >>> (closest_integer\
    \ \"14.5\")\n;; 15\n;; >>> (closest_", "  (let ((value-int (string->integer value)))\n\
    \    (if (zero? value-int)\n      value-int\n      (if (zero? (- value-int))\n\
    \        (+ value-int 1)\n        (+ value-int (- 1)))))\n)\n\n;; Test it out",
  "  (let ((n (string->number value)))\n    (if (zero? n)\n      (string->number \"\
    0\")\n      (if (zero? (abs n))\n        (string->number \"0\")\n        (let\
    \ ((x (floor n)))\n          (if (zero? (abs (sub1 x)))\n            (string->number\
    \ (sub1 x))\n            (string->number (sub1 (sub1 x))))))))))\n", "  (let ((n\
    \ (string->number value)))\n    (if (< (abs n) 1)\n      (if (zero? n)\n     \
    \   (string->number \"0\")\n        (string->number (+ n 1)))\n      (string->number\
    \ (- n 1)))))\n\n;; Test it out", "  (let ((value-int (string->number value)))\n\
    \    (if (zero? value-int)\n      (string->number (string-append \"0\" value-int))\n\
    \      (string->number (string-append value-int \"0\"))))\n)\n\n;; Test it out",
  "  (let ((n (string->number value)))\n    (if (zero? n)\n      (string->number 0)\n\
    \      (if (negative? n)\n        (string->number (- n 1))\n        (string->number\
    \ (* n (/ 1 2)))))\n  )\n)\n\n;; Test it out", "  (let ((result (+ (string-to-number\
    \ value) 0)))\n    (if (< result 0)\n      (- result)\n      (if (> result 0)\n\
    \        (+ result 1)\n        result))))\n", "  (let ((result (+ (string->number\
    \ value) 0.5)))\n    (if (< result 0)\n      (if (> result 0)\n        (+ result\
    \ 1)\n        (+ result -1))\n      result)))\n\n;; Create a function that takes\
    \ a value (string) representing a number\n;; and returns the closest integer to\
    \ it. If the number is equidistant\n;; from two integers, round it away from zero.\n\
    ;; Examples\n;; >>> (closest_integer \"10\")\n;; 10\n;; >>> (closest_integer \"\
    15.3\")\n;; 15\n;; Note:\n;; Rounding away from zero means that if the given number\
    \ is equidistant\n;; from two integers, the one you should return is the one that\
    \ is the\n;; farthest from zero. For example closest_integer(\"14.5\") should\n\
    ;; return 15 and closest_integer(\"-14.5\") should return -15.", "  (let ((n (string->number\
    \ value)))\n    (if (< n 0)\n      (if (< n (string->number \"0\")))\n       \
    \ (string->number \"0\")\n      (if (< n (string->number \"1\"))\n        (string->number\
    \ \"1\")\n      (let ((x (string->number \"0\")))\n        (let ((y (string->number\
    \ \"1\")))\n          (if (< n (string->number (+ x y)))\n            (string->number\
    \ (+ x y))\n          (if (< n (string->number (- x y)))\n            (string->number\
    \ (- x y))\n          (string->number (+ x y)))))\n      (string->number (+ n\
    \ \"0\"))))))\n", "  (let ((int-val (string->number value)))\n    (if (zero? int-val)\n\
    \      (string->number (string->number/string \"0\")))\n    (let ((diff (abs (-\
    \ int-val) (string->number/string \"1\"))))\n      (if (zero? diff)\n        (string->number/string\
    \ (- int-val))\n        (if (zero? diff)\n          (string->number/string (-\
    \ int-val))\n          (string->number/string (- int-val))))))))\n", "  (let ((result\
    \ (string->number value)))\n    (if (zero? result)\n      (string->number \"0\"\
    )\n      (if (zero? (abs result))\n        (string->number \"0\")\n        (if\
    \ (zero? (abs (- result)))\n          (string->number \"0\")\n          (if (zero?\
    \ (abs (- result)))\n            (string->number \"0\")\n            (if (zero?\
    \ (abs (- result)))\n              (string->number \"0\")\n              (if (zero?\
    \ (abs (- result)))\n                (string->number \"0\")\n                (if\
    \ (zero? (abs (- result)))\n                  (string->number \"0\")\n       \
    \           (if (zero? (abs (- result)))\n                    (string->number\
    \ \"0\")\n                    (if (zero? (abs (- result)))\n                 \
    \     (string->number \"0\")\n                      (if (zero? (abs (- result)))\n\
    \                        (string->number \"0\")\n                        (if (zero?\
    \ (abs (- result)))\n                          (string->number \"0\")\n      \
    \                    (if (zero? (abs (- result)))\n                          \
    \  (string->number \"0\")\n                            (if (zero? (abs (- result)))\n\
    \                              (string->number \"0\")\n                      \
    \        (if (zero? (abs (- result)))\n                                (string->number\
    \ \"0\")\n                                (if (zero? (abs (- result)))\n     \
    \                             (string->number \"0\")\n                       \
    \           (if (zero? (abs (- result)))\n                                   \
    \ (string->number \"0\")\n                                    (if (zero? (abs\
    \ (- result)))\n                                      (string->number \"0\")\n\
    \                                      (if (zero? (abs (- result)))\n        \
    \                                (string->number \"0\")\n                    \
    \                    (if (zero? (abs (- result)))\n                          \
    \                (string->number \"0\")\n                                    \
    \      (if (zero? (abs (- result)))\n                                        \
    \    (string->number \"0\")\n                                            (if (zero?\
    \ (abs (- result)))\n                                              (string->number\
    \ \"0\")\n                                              (if (zero? (abs (- result)))\n\
    \                                                (string->number \"0\")\n    \
    \                            ", "  (let ((result (string->number value)))\n  \
    \  (if (zero? result)\n      (string->number \"0\")\n      (if (zero? (- result))\n\
    \        (string->number \"0\")\n        (if (zero? (+ result))\n          (string->number\
    \ \"0\")\n          (string->number (+ (- result) result)\n            (if (zero?\
    \ (- result))\n              (string->number \"0\")\n              (string->number\
    \ (- (+ result) result)))))\n      )))\n)\n\n;; Test it out", "  (let ((n (string->number\
    \ value)))\n    (if (zero? n)\n      (string->number \"0\")\n      (let ((x (floor\
    \ n)))\n        (if (zero? (abs n - x))\n          (string->number (if (negative?\
    \ n) (- x) x))\n          (string->number (if (negative? n) (- x) x)))))\n  )\n\
    )\n", "  (let ((value-int (string->number value)))\n    (if (zero? value-int)\n\
    \      (if (negative? value-int)\n        (negate value-int)\n        value-int)\n\
    \      (if (zero? value-int)\n        (negate value-int)\n        value-int)\n\
    \      (if (zero? value-int)\n        value-int\n        (if (negative? value-int)\n\
    \          (negate value-int)\n          value-int))))\n\n;; Test it out", " \
    \ (let ((n (string->number value)))\n    (if (zero? n)\n      n\n      (let ((d\
    \ (abs n)))\n        (if (zero? d)\n          (+ n 1)\n          (if (> d 1)\n\
    \            (+ n -1)\n            (+ n 0)))))))\n", "  (let ((value-str (string->number\
    \ value)))\n    (if (zero? value-str)\n      (string->number \"0\")\n      (let\
    \ ((value-int (string->number value-str)))\n        (if (zero? value-int)\n  \
    \        (string->number value-str)\n          (let ((value-int-2 (string->number\
    \ (sub1 value-str))))\n            (if (zero? value-int-2)\n              (string->number\
    \ (sub1 value-str))\n              (let ((value-int-1 (string->number (sub1 value-int))))\n\
    \                (if (zero? value-int-1)\n                  (string->number (sub1\
    \ value-int))\n                  (string->number value-int)))))))))))\n", "  (let\
    \ ((n (string->number value)))\n    (if (zero? n)\n      (string->number \"0\"\
    )\n      (if (zero? (abs n))\n        (string->number \"0\")\n        (if (zero?\
    \ (abs (- n))))\n          (string->number \"0\")\n          (if (zero? (abs (-\
    \ (- n))))\n            (string->number \"0\")\n            (if (zero? (abs (n\
    \ - 1))))\n              (string->number \"1\")\n              (if (zero? (abs\
    \ (n - 2))))\n                (string->number \"2\")\n                (if (zero?\
    \ (abs (n - 3))))\n                  (string->number \"3\")\n                \
    \  (if (zero? (abs (n - 4))))\n                    (string->number \"4\")\n  \
    \                  (if (zero? (abs (n - 5))))\n                      (string->number\
    \ \"5\")\n                      (if (zero? (abs (n - 6))))\n                 \
    \       (string->number \"6\")\n                        (if (zero? (abs (n - 7))))\n\
    \                          (string->number \"7\")\n                          (if\
    \ (zero? (abs (n - 8))))\n                            (string->number \"8\")\n\
    \                            (if (zero? (abs (n - 9))))\n                    \
    \          (string->number \"9\")\n                              (if (zero? (abs\
    \ (n - 10))))\n                                (string->number \"10\")\n     \
    \                           (if (zero? (abs (n - 11))))\n                    \
    \              (string->number \"11\")\n                                  (if\
    \ (zero? (abs (n - 12))))\n                                    (string->number\
    \ \"12\")\n                                    (if (zero? (abs (n - 13))))\n \
    \                                     (string->number \"13\")\n              \
    \                        (if (zero? (abs (n - 14))))\n                       \
    \                 (string->number \"14\")\n                                  \
    \      (if (zero? (abs (n - 15))))\n                                         \
    \ (string->number \"15\")\n                                          (if (zero?\
    \ (abs (n - 16))))\n                                            (string->number\
    \ \"16\")\n                                            (if (zero? (abs (n - 17))))\n\
    \                                              (string", "  (let ((val (string->number\
    \ value)))\n    (if (< val 0)\n      (if (< val -1)\n        (- val)\n       \
    \ (+ val))\n      (if (> val 0)\n        (if (> val 1)\n          (+ val)\n  \
    \        (- val))\n        (+ val)))))\n\n;; Test it out", "  (let ((value-int\
    \ (string->integer value)))\n    (if (zero? value-int)\n      (string->integer\
    \ value)\n      (if (zero? (- value-int))\n        (string->integer (- value-int))\n\
    \        (string->integer (if (zero? value-int) 1 -1 value-int))))))\n\n;; >>>\
    \ (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 11\n\
    ;; >>> (closest_integer \"10.7\")\n;; 11\n;; >>> (closest_integer \"10.9\")\n\
    ;; 11\n;; >>> (closest_integer \"10.11\")\n;; 11\n;; >>> (closest_integer \"10.13\"\
    )\n;; 11\n;; >>> (closest_integer \"10.15\")\n;; 11\n;; >>> (closest_integer \"\
    10.17\")\n;; 11\n;; >>> (closest_integer \"10.19\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.21\")\n;; 11\n;; >>> (closest_integer \"10.23\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.25\")\n;; 11\n;; >>> (closest_integer \"10.27\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.29\")\n;; 11\n;; >>> (closest_integer \"10.31\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.33\")\n;; 11\n;; >>> (closest_integer \"10.35\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.37\")\n;; 11\n;; >>> (closest_integer \"10.39\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.41\")\n;; 11\n;; >>> (closest_integer \"10.43\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.45\")\n;; 11\n;; >>> (closest_integer \"10.47\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.49\")\n;; 11\n;; >>> (closest_integer \"10.51\")\n;; 11\n;; >>> (closest_",
  "  (let ((int-val (string->number value)))\n    (if (zero? int-val)\n      (string->number\
    \ (string->number/1 value))\n      (if (zero? (- int-val))\n        (string->number\
    \ (string->number/1 value))\n        (string->number (string->number/1 (- int-val)))))\n\
    \    ))\n\n;; Test it out", "  (let ((n (string->number value)))\n    (if (zero?\
    \ n)\n      (string->number \"0\")\n      (if (negative? n)\n        (string->number\
    \ (- n 1))\n        (string->number (+ n 1))))))\n\n;; Test it out", "  (let ((n\
    \ (string->number value)))\n    (if (negative? n)\n      (negate (string->number\
    \ (+ n 1)))\n      (string->number (+ n 0))))))\n\n;; >>> (closest_integer \"\
    10.5\")\n;; 10\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.6\")\n;; 11\n;; >>> (closest_integer \"10.9\")\n;; 11\n;; >>> (closest_integer\
    \ \"10.8\")\n;; 10\n;; >>> (closest_integer \"10.7\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.6\")\n;; 10\n;; >>> (closest_integer \"10.5\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.4\")\n;; 10\n;; >>> (closest_integer \"10.3\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.2\")\n;; 10\n;; >>> (closest_integer \"10.1\")\n;; 10\n;; >>> (closest_integer\
    \ \"10\")\n;; 10\n;; >>> (closest_integer \"9.9\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.8\")\n;; 9\n;; >>> (closest_integer \"9.7\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.6\")\n;; 9\n;; >>> (closest_integer \"9.5\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.4\")\n;; 9\n;; >>> (closest_integer \"9.3\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.2\")\n;; 9\n;; >>> (closest_integer \"9.1\")\n;; 9\n;; >>> (closest_integer\
    \ \"9\")\n;; 9\n;; >>> (closest_integer \"8.9\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.8\")\n;; 8\n;; >>> (closest_integer \"8.7\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.6\")\n;; 8\n;; >>> (closest_integer \"8.", "  (let ((value-int (string->integer\
    \ value)))\n    (if (zero? value-int)\n      (string->integer (string-append \"\
    0\" (string-length value)))\n      (string->integer (string-append (string-append/j\
    \ (string->integer value-int) \"1\") (string-length value))))))\n\n;; Test it\
    \ out", "  (let ((n (string->number value)))\n    (if (negative? n)\n      (negate\
    \ (string->number (+ n 1)))\n      (string->number (+ n 0))))))\n\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 11\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>> (closest_integer\
    \ \"8.9\")\n;; 8\n;; >>> (closest_integer \"8.8\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.7\")\n;; 8\n;; >>> (closest_integer \"8.6\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.5\")\n;; 8\n;; >>> (closest_integer \"8.4\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.3\")\n;; 8\n;; >>> (closest_integer \"8.2\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.1\")\n;; 8\n;; >>> (closest_integer \"8.0\")\n;; 8\n;; >>> (closest_integer\
    \ \"7.9\")\n;; 7\n;; >>> (closest_", "  (let ((int-value (string->number value)))\n\
    \    (if (zero? int-value)\n      (string->number (string->number (string->number\
    \ int-value) -1))\n      (string->number (string->number (string->number int-value)\
    \ +1))))\n)\n\n;; Test it out", "  (let ((result (string->number value)))\n  \
    \  (if (zero? result)\n      result\n      (if (> result 0)\n        (+ result\
    \ (/ result 2))\n        (+ result (/ result -2))))))\n\n;; >>> (closest_integer\
    \ \"10.5\")\n;; 10\n;; >>> (closest_integer \"10.4\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.3\")\n;; 10\n;; >>> (closest_integer \"10.2\")\n;; 10\n;; >>> (closest_integer\
    \ \"10.1\")\n;; 10\n;; >>> (closest_integer \"10.0\")\n;; 10\n;; >>> (closest_integer\
    \ \"9.9\")\n;; 9\n;; >>> (closest_integer \"9.8\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.7\")\n;; 9\n;; >>> (closest_integer \"9.6\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.5\")\n;; 9\n;; >>> (closest_integer \"9.4\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.3\")\n;; 9\n;; >>> (closest_integer \"9.2\")\n;; 9\n;; >>> (closest_integer\
    \ \"9.1\")\n;; 9\n;; >>> (closest_integer \"9.0\")\n;; 9\n;; >>> (closest_integer\
    \ \"8.9\")\n;; 8\n;; >>> (closest_integer \"8.8\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.7\")\n;; 8\n;; >>> (closest_integer \"8.6\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.5\")\n;; 8\n;; >>> (closest_integer \"8.4\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.3\")\n;; 8\n;; >>> (closest_integer \"8.2\")\n;; 8\n;; >>> (closest_integer\
    \ \"8.1\")\n;; 8\n;; >>> (closest_integer \"8.0\")\n;; 8\n;; >>> (closest_integer\
    \ \"7.9\")\n;; 7\n", "  (let ((n (string->number value)))\n    (if (zero? n)\n\
    \      (string->number \"0\")\n      (if (negative? n)\n        (string->number\
    \ (- n 1))\n        (string->number (floor n)))))\n)\n\n;; Test it out", "  (let\
    \ ((n (string->number value)))\n    (if (< n 0)\n      (string->number (- n 1))\n\
    \      (if (> n 0)\n        (string->number (+ n 1))\n        (string->number\
    \ 0))))\n)\n\n;; Test it out", "  (let ((n (string->number value)))\n    (if (zero?\
    \ n)\n      (string->number \"0\")\n      (if (negative? n)\n        (string->number\
    \ (- n 1))\n        (string->number (+ n 1))))))\n", "  (let ((value-str (string\
    \ value)))\n    (if (string? value-str)\n      (let ((value-int (string->number\
    \ value-str)))\n        (if (zero? value-int)\n          value-int\n         \
    \ (if (zero? (- value-int) value-int)\n            (if (zero? value-int)\n   \
    \           (- value-int)\n              value-int)\n            (if (zero? value-int)\n\
    \              value-int)\n            (if (zero? (- value-int) value-int)\n \
    \             value-int)\n            (if (zero? value-int)\n              value-int)\n\
    \            (if (zero? value-int)\n              value-int)\n            (if\
    \ (zero? value-int)\n              value-int)\n            (if (zero? value-int)\n\
    \              value-int)\n            (if (zero? value-int)\n              value-int)\n\
    \            (if (zero? value-int)\n              value-int)\n            (if\
    \ (zero? value-int)\n              value-int)\n            (if (zero? value-int)\n\
    \              value-int)\n            (if (zero? value-int)\n              value-int)\n\
    \            (if (zero? value-int)\n              value-int)\n            (if\
    \ (zero? value-int)\n              value-int)\n            (if (zero? value-int)\n\
    \              value-int)\n            (if (zero? value-int)\n              value-int)\n\
    \            (if (zero? value-int)\n              value-int)\n            (if\
    \ (zero? value-int)\n              value-int)\n            (if (zero? value-int)\n\
    \              value-int)\n            (if (zero? value-int)\n              value-int)\n\
    \            (if (zero? value-int)\n              value-int)\n            (if\
    \ (zero? value-int)\n              value-int)\n            (if (zero? value-int)\n\
    \              value-int)\n            (if (zero? value-int)\n              value-int)\n\
    \            (if (zero? value-int)\n              value-int)\n            (if\
    \ (", "  (let ((value-str (string->number value)))\n    (if (zero? value-str)\n\
    \      (string->number \"0\")\n      (let ((value-int (string->number value-str)))\n\
    \        (if (zero? value-int)\n          (string->number \"0\")\n          (let\
    \ ((value-int-2 (string->number (add value-int \"1\"))))\n            (if (zero?\
    \ value-int-2)\n              (string->number (sub value-int-2 \"1\"))\n     \
    \         (string->number value-int-2))))))))))\n\n;; Test it out", "  (let ((result\
    \ (+ (string-to-number value) 0.5)))\n    (if (< result 0)\n      (if (< result\
    \ result-1)\n        (+ result 1)\n        (+ result result-1))\n      (if (>\
    \ result result-1)\n        (+ result -1)\n        (+ result result-1))))\n)\n\
    \n;; Test it out"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
