{
  "name": "HumanEval_66_digitSum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+ (map char-upper (string-to-list s)) 0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp6yr9rm41.rkt:20:10: char-upper: unbound identifier\n  in: char-upper\n  location...:\n   /tmp/tmp6yr9rm41.rkt:20:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmptknbq_yg.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmptknbq_yg.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpbv6_58mc.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpbv6_58mc.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code\n      (string-map char-upcase s)\n      (+ 1 (char-code '0)))\n    (char-code '0)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmphoagfmt9.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmphoagfmt9.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ (c 65) 1)))) s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpim273tzb.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ (c 65) 1)))\n  location...:\n   /tmp/tmpim273tzb.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (ascii-char c) - 32))))\n      (string-to-list s)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp3l0fpbe3.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (ascii-char c) - 32)))\n  location...:\n   /tmp/tmp3l0fpbe3.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                              (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                                (+\n                                                                                                                                                  (+\n                                                                                                                                                    (+\n                                                                                                                                                       (+\n                                                                                                                                                         (+\n                                                                                             \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292539,
      "stdout": "",
      "stderr": "/tmp/tmpse8zlcpi.rkt:86:153: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 88\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp0sbuz9rl.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 64) (sum (+ (char->integer c) 1)))\n  location...:\n   /tmp/tmp0sbuz9rl.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (ascii-char c)))) s) s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpwphih6pp.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (ascii-char c))))\n  location...:\n   /tmp/tmpwphih6pp.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c)\n                (if (> c 65)\n                    (sum (+ (char->integer c) (char->integer (char->ascii c))))\n                    sum))\n             s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp04lt2tmh.rkt:23:62: char->ascii: unbound identifier\n  in: char->ascii\n  location...:\n   /tmp/tmp04lt2tmh.rkt:23:62\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 91) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 97) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 123) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 91) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 65) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 57) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 48) (sum (+ (char->integer c) (char->integer (char->integer c) + 1))))\n                                  (if (< c 48) (sum (+ (char->integer c\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpjz46wmmg.rkt:36:55: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 37\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp6xyor11_.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp6xyor11_.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp0sbuz9rl.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 64) (sum (+ (char->integer c) 1)))\n  location...:\n   /tmp/tmp0sbuz9rl.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper-p char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp11_1u9hp.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp11_1u9hp.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar\n      (lambda (c)\n        (+ (char-code c) (char-code (char-upcase c))))\n      (string-to-list s))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpvfqvrjjv.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpvfqvrjjv.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar #\"A\" (string-split s \"\") (string-length s))\n    (mapcar #\"A\" (string-split s \"\") (string-length s))\n  )\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp33l0j2ik.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmp33l0j2ik.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) (char->integer (char->integer c) - 64))))\n                                  (if (< c 91) (sum (+ c (char->integer c) (char->integer (char->integer c) - 96))))\n                                  (if (< c 123) (sum (+ c (char->integer c) (char->integer (char->integer c) - 128))))\n                                  (if (< c 192) (sum (+ c (char->integer c) (char->integer (char->integer c) - 192))))\n                                  (if (< c 255) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpid8it1ij.rkt:21:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 36\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) (char->integer (char->integer c) - 64)))) (else sum))\n      s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpgf1z0g93.rkt:21:109: else: not allowed as an expression\n  in: (else sum)\n  location...:\n   /tmp/tmpgf1z0g93.rkt:21:109\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar #\"A\"\n      (mapcar #\"A\"\n        (mapcar #\"A\"\n          (mapcar #\"A\"\n            (mapcar #\"A\"\n              (mapcar #\"A\"\n                (mapcar #\"A\"\n                  (mapcar #\"A\"\n                    (mapcar #\"A\"\n                      (mapcar #\"A\"\n                        (mapcar #\"A\"\n                          (mapcar #\"A\"\n                            (mapcar #\"A\"\n                              (mapcar #\"A\"\n                                (mapcar #\"A\"\n                                  (mapcar #\"A\"\n                                    (mapcar #\"A\"\n                                      (mapcar #\"A\"\n                                        (mapcar #\"A\"\n                                          (mapcar #\"A\"\n                                            (mapcar #\"A\"\n                                              (mapcar #\"A\"\n                                                (mapcar #\"A\"\n                                                  (mapcar #\"A\"\n                                                    (mapcar #\"A\"\n                                                      (mapcar #\"A\"\n                                                        (mapcar #\"A\"\n                                                          (mapcar #\"A\"\n                                                            (mapcar #\"A\"\n                                                              (mapcar #\"A\"\n                                                                (mapcar #\"A\"\n                                                                  (mapcar #\"A\"\n                                                                    (mapcar #\"A\"\n                                                                      (mapcar #\"A\"\n                                                                        (mapcar #\"A\"\n                                                                          (mapcar #\"A\"\n                                                                            (mapcar #\"A\"\n                                                                              (mapcar #\"A\"\n                                                                                (mapcar #\"A\"\n                                                                                  (mapcar #\"A\"\n                                                                                    (mapcar #\"A\"\n                                                                                      (mapcar #\"A\"\n                                                                                        (mapcar #\"A\"\n                                                                                          (mapcar #\"A\"\n                                                              \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292539,
      "stdout": "",
      "stderr": "/tmp/tmpvk0wdayf.rkt:64:90: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 66\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c) (char-ascii c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpyy1s0_6m.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmpyy1s0_6m.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpjv_ou99v.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpjv_ou99v.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar\n      (lambda (c)\n        (+ (char->integer (string-upcase c)) 0))\n      (string-upcase s)))\n  0)\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpigf27m3v.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpigf27m3v.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                             (+\n                                                                                                              (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                           (+\n                                                                                                                                                (+\n                                                                                                                                                  (+\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp_5q18di2.rkt:86:146: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 87\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c)\n      (if (> c 65)\n        (sum (+ (c 65)))\n        (sum sum)))\n      s)\n    sum))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao0p86l.rkt:49:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao0p86l.rkt:50:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao0p86l.rkt:51:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao0p86l.rkt:52:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjao0p86l.rkt:53:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n-----",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ (c 65) 1)))) s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpwmr4w6ss.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ (c 65) 1)))\n  location...:\n   /tmp/tmpwmr4w6ss.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n                  (sum (+ c (if (< c 90) 65, 91)))\n                (sum c)))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpas3ilhcj.rkt:23:43: unquote: not in quasiquote\n  in: (unquote 91)\n  location...:\n   /tmp/tmpas3ilhcj.rkt:23:43\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    (+\n      (map (lambda (c) (char-code c))\n        (string-to-list (substring s 1 1)))\n      (map (lambda (c) (char-code c))\n        (string-to-list (substring s 2 1))))))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp8w7wkhjj.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp8w7wkhjj.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ (c 65) 1))))\n      s))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpovfldq0t.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ (c 65) 1)))\n  location...:\n   /tmp/tmpovfldq0t.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp9l0brbdv.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp9l0brbdv.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c)\n                (if (> (char->integer c) (char->integer 'A'))\n                    (sum (+ (char->integer c) (char->integer 'A')))\n                    sum)\n                sum)\n      s))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpw8pc84xm.rkt:22:59: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp6xyor11_.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp6xyor11_.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c)\n                (if (> c 65)\n                    (sum (+ c (char->integer c)\n                          (char->integer (char->integer c) - 32))))\n                s)\n      (+ sum 1)))\n)\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpo0kcvjx_.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c) (char->integer (char->integer c) - 32))))\n  location...:\n   /tmp/tmpo0kcvjx_.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                              (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                           (+\n                                                                                                                                             (+\n                                                                                                                                               (+\n                                                                                                                                                (+\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpiz6227hq.rkt:86:144: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 87\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpuwno4x7a.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpuwno4x7a.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (if (> c 65)\n              (+ (if (> c 90)\n                    (+ (if (> c 97)\n                          (+ (if (> c 122)\n                                (+ (if (> c 192)\n                                      (+ (if (> c 223)\n                                           (+ (if (> c 224)\n                                                (+ (if (> c 233)\n                                                    (+ (if (> c 240)\n                                                        (+ (if (> c 248)\n                                                            (+ (if (> c 252)\n                                                                (+ (if (> c 223)\n                                                                    (+ (if (> c 192)\n                                                                       (+ (if (> c 128)\n                                                                          (+ (if (> c 64)\n                                                                            (+ (if (> c 32)\n                                                                              (+ (if (> c 16)\n                                                                                (+ (if (> c 8)\n                                                                                    (+ (if (> c 0)\n                                                                                      (+ (if (> c 128)\n                                                                                        (+ (if (> c 192)\n                                                                                          (+ (if (> c 224)\n                                                                                            (+ (if (> c 240)\n                                                                                             (+ (if (> c 248)\n                                                                                             (+ (if (> c 252)\n                                                                                             (+ (if (> c 233)\n                                                                                             (+ (if (> c 224)\n                                                                                             (+ (if (> c 192)\n                                                                                             (+ (if (> c 128)\n                                                                                             (+ (if (> c 64)\n                                                                                             (+ (if (> c 32)\n                                                                                             (+ (if (> c 16)\n                                                                                             (+ (if (> c 8)\n                                                                                             (+ (if (> c 0)\n                                                                                             (+ (if (> c 128)\n                                                                                             (+ (if (> c 192)\n                                                                                             (+ (if (> c 224)\n                                                                                             (+ (if (> c 240)\n                                                                                             (+ (if (> c 248)\n                                                              \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpwzxdckj9.rkt:61:96: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 63\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                              (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                        (+\n                                                                                                                                         (+\n                                                                                                                                           (+\n                                                                                                                                                (+\n                                                                                                                                                  (+\n                                                                                                                                                    (+\n                               \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp2hky5gro.rkt:86:148: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 88\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n             (char->integer (string->char s c))))\n      (string->char s)))\n  0)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp1oqj8eto.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmp1oqj8eto.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (if (< c 90) 0 1)))) s)\n      (string-to-number c)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp63r5m0dd.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (if (< c 90) 0 1))))\n  location...:\n   /tmp/tmp63r5m0dd.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar #\"A\" s)\n    (mapcar #\"A\" (string-upcase s))\n  )\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpf0via72m.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpf0via72m.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpjv_ou99v.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpjv_ou99v.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp0sbuz9rl.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 64) (sum (+ (char->integer c) 1)))\n  location...:\n   /tmp/tmp0sbuz9rl.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> (char->integer c) 64)\n                  (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n                s)\n      sum))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpou0o5jgd.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 64) (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n  location...:\n   /tmp/tmpou0o5jgd.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpedyxakwy.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpedyxakwy.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65) c))\n      (string-to-list s))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp886kfzww.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmp886kfzww.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ (c 65) (digitSum (substring s (1 - (index-of c s)))))\n            0))\n      s))\n  0)\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpm4id94ia.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmpm4id94ia.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char c))\n             (char->integer (string->char (substring s 1 1))))\n          (string->char s)))\n    0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp93kjp8ne.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmp93kjp8ne.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c 91) (if (< c 97) (if (< c 123) (+ c (if (< c\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpm9a9o0n7.rkt:21:1133: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 22\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar #\"A\" (string-split s \"\") (string-length s))\n    (mapcar #\"A\" (string-split s \"\") (string-length s))\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp7kseta66.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmp7kseta66.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter (lambda (c) (char-code c))\n      (string-to-list s)))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpi9pjsi25.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpi9pjsi25.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpjv_ou99v.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpjv_ou99v.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;;; (digitSum \"hello\")\n;;; 131\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;; 67\n;;; (digitSum \"abcd\")\n;;;\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp5uwtn7_.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpp5uwtn7_.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ (char-ascii c) (char-ascii (char-upcase c)))\n            (char-ascii c)))\n      s)\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmprf90afb2.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmprf90afb2.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code\n      (string-split s \"\")\n      (lambda (c) (char-code c))\n      )\n    0))\n\n;;; (digitSum \"helloE\")\n;;; 131\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"a\")\n;;; 1\n;;; (digitSum \"ab\")\n;;; 3\n;;; (digitSum \"abc\")\n;;; 3\n;;; (digitSum \"abcd\")\n;;; 7\n;;; (digitSum \"abcde\")\n;;; 7\n;;; (digitSum \"abcdef\")\n;;; 11\n;;; (digitSum \"abcdefg\")\n;;; 11\n;;; (digitSum \"abcdefgh\")\n;;; 15\n;;; (digitSum \"abcdefghi\")\n;;; 15\n;;; (digitSum \"abcdefghij\")\n;;; 19\n;;; (digitSum \"abcdefghijk\")\n;;; 19\n;;; (digitSum \"abcdefghijkl\")\n;;; 23\n;;; (digitSum \"abcdefghijklm\")\n;;; 23\n;;; (digitSum \"abcdefghijklmn\")\n;;; 27\n;;; (digitSum \"abcdefghijklmno\")\n;;; 27\n;;; (digitSum \"abcdefghijklmnop\")\n;;; 31\n;;; (digitSum \"abcdefghijklmnopq\")\n;;; 31\n;;; (digitSum \"abcdefghijklmnopqr\")\n;;; 35\n;;; (digitSum \"abcdefghijklmnopqrs\")\n;;; 35\n;;; (digitSum \"abcdefghijklmnopqrst\")\n;;; 39\n;;; (digitSum \"abcdefghijklmnopqrstu\")\n;;; 39\n;;; (digitSum \"abcdefghijklmnopqrstuv\")\n;;; 43\n;;; (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpdcrp_jav.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpdcrp_jav.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ (char-code c) (char-code (char-upcase c)))\n            0))\n      s)\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp9ekfevwl.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmp9ekfevwl.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar\n      (lambda (c)\n        (+ (char->integer (string-upcase c)) (char->integer (string-upcase (string-substring s 1 1)))))\n      (string-upcase s)))\n  0)\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp0jtj5q8v.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmp0jtj5q8v.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpxomo5s3t.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 64) (sum (+ (char->integer c) 1)))\n  location...:\n   /tmp/tmpxomo5s3t.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp90q660cu.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp90q660cu.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (if (< c 90) 0 1)))) s)\n      (string-char c)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp9umueta_.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (if (< c 90) 0 1))))\n  location...:\n   /tmp/tmp9umueta_.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char c))\n             (char->integer (string->char (substring s 1 1))))\n         (string->char s)))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpl2cly7n3.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmpl2cly7n3.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ (char-ascii c) (char-ascii (char-upcase c)))\n            0))\n      s)\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpsajft9ju.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmpsajft9ju.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([digits (string-split s \"\")]\n         [sum (0)])\n    (for-each digits (map (lambda (x) (string-to-number x)) digits)\n      (sum (+ (string-to-number (first digits)) (string-to-number (last digits)))))))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpbvd49i6m.rkt:22:39: string-to-number: unbound identifier\n  in: string-to-number\n  location...:\n   /tmp/tmpbvd49i6m.rkt:22:39\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n                  (sum (+ c (ascii-char-code c)\n                         (ascii-char-code c)\n                         (ascii-char-code c))))\n                (string-char c s)))\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp8og1y5i9.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (ascii-char-code c) (ascii-char-code c) (ascii-char-code c))))\n  location...:\n   /tmp/tmp8og1y5i9.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpbvhh18zu.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpbvhh18zu.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                              (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                        (+\n                                                                                                                                         (+\n                                                                                                                                           (+\n                                                                                                                                                (+\n                                                                                                                                                  (+\n                                                                                                                                                    (+\n                               \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp2hky5gro.rkt:86:148: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 88\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c)\n                (if (> c 65)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n                (if (< c 91)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 96))))\n                (if (< c 123)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 128))))\n                (if (< c 192)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 192))))\n                (if (< c 223)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 224))))\n                (if (< c 240)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 240))))\n                (if (< c 245)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 248))))\n                (if (< c 250)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 252))))\n                (if (< c 255)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 255))))\n                (if (< c 256)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 256))))\n                (if (< c 257)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 257))))\n                (if (< c 258)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 258))))\n                (if (< c 260)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 260))))\n                (if (< c 261)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 261))))\n                (if (< c 262)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 262))))\n                (if (< c 263)\n                    (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmptxwir8l9.rkt:53:20: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 54\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c)\n                (if (> (char->integer c) 65)\n                  (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n                s)\n      (+ sum 1)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp8odci3xi.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 65) (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n  location...:\n   /tmp/tmp8odci3xi.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c) (char-ascii c))\n      (string-to-list s))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp1vgu4r9x.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmp1vgu4r9x.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code\n      (string-map char-upcase s)\n      (range 0 (string-length s)))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpjjanbf3p.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpjjanbf3p.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                             (+\n                                                                                                              (+\n                                                                                                                (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                           (+\n                                                                                                                                             (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmph7dh964b.rkt:86:141: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 87\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                              (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                           (+\n                                                                                                                                             (+\n                                                                                                                                               (+\n                                                                                                                                                (+\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpiz6227hq.rkt:86:144: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 87\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpuwno4x7a.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpuwno4x7a.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                              (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                                (+\n                                                                                                                                                  (+\n                                                                                                                                                   (+\n                                                                                                                                                      (+\n                                                                                                                                                        (+\n                                                                                             \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmprhp1p3w0.rkt:86:152: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 88\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code\n      (string-split s \"\")\n      (filter (lambda (c) (char-code c))\n        (string-split s \"\")\n        (filter (lambda (c) (char-code c))\n          (string-split s \"\")\n          (filter (lambda (c) (char-code c))\n            (string-split s \"\")\n            (filter (lambda (c) (char-code c))\n              (string-split s \"\")\n              (filter (lambda (c) (char-code c))\n                (string-split s \"\")\n                (filter (lambda (c) (char-code c))\n                  (string-split s \"\")\n                  (filter (lambda (c) (char-code c))\n                    (string-split s \"\")\n                    (filter (lambda (c) (char-code c))\n                      (string-split s \"\")\n                      (filter (lambda (c) (char-code c))\n                        (string-split s \"\")\n                        (filter (lambda (c) (char-code c))\n                          (string-split s \"\")\n                          (filter (lambda (c) (char-code c))\n                            (string-split s \"\")\n                            (filter (lambda (c) (char-code c))\n                              (string-split s \"\")\n                              (filter (lambda (c) (char-code c))\n                                (string-split s \"\")\n                                (filter (lambda (c) (char-code c))\n                                  (string-split s \"\")\n                                  (filter (lambda (c) (char-code c))\n                                    (string-split s \"\")\n                                    (filter (lambda (c) (char-code c))\n                                      (string-split s \"\")\n                                      (filter (lambda (c) (char-code c))\n                                        (string-split s \"\")\n                                        (filter (lambda (c) (char-code c))\n                                          (string-split s \"\")\n                                          (filter (lambda (c) (char-code c))\n                                            (string-split s \"\")\n                                            (filter (lambda (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpsw98ucnz.rkt:61:60: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 62\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code\n      (string-split s \"\")\n      (lambda (c) (char-code c) 0))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp2fgsr_1b.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp2fgsr_1b.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+ (map char-upper (string-split s \"\") 1)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp7tssr79c.rkt:20:10: char-upper: unbound identifier\n  in: char-upper\n  location...:\n   /tmp/tmp7tssr79c.rkt:20:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar (lambda (c) (if (> c 65) c))\n      (string-split \" \" s))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpvvg6fspa.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpvvg6fspa.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                              (+\n                                                                                                                (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                                (+\n                                                                                                                                                  (+\n                                                                                                                                                   (+\n                                                                                                                                                      (+\n                                                              \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpe2l1hc9y.rkt:86:150: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 88\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (ascii-code c)\n             (ascii-code (string-upcase c)))))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpskcte18_.rkt:22:14: ascii-code: unbound identifier\n  in: ascii-code\n  location...:\n   /tmp/tmpskcte18_.rkt:22:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar #\"A\" s)\n    (mapcar #\"A\" (string-upcase s))\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpuum6l59j.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpuum6l59j.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n                  (sum (+ (c 65) 1)))\n                (if (< c 91)\n                  (sum (+ (c 91) 1)))\n                (if (< c 97)\n                  (sum (+ (c 97) 1)))\n                (if (< c 123)\n                  (sum (+ (c 123) 1)))\n                (if (< c 192)\n                  (sum (+ (c 192) 1)))\n                (if (< c 255)\n                  (sum (+ (c 255) 1)))\n                (if (< c 256)\n                  (sum (+ (c 256) 1)))\n                (if (< c 383)\n                  (sum (+ (c 383) 1)))\n                (if (< c 563)\n                  (sum (+ (c 563) 1)))\n                (if (< c 652)\n                  (sum (+ (c 652) 1)))\n                (if (< c 769)\n                  (sum (+ (c 769) 1)))\n                (if (< c 884)\n                  (sum (+ (c 884) 1)))\n                (if (< c 891)\n                  (sum (+ (c 891) 1)))\n                (if (< c 892)\n                  (sum (+ (c 892) 1)))\n                (if (< c 893)\n                  (sum (+ (c 893) 1)))\n                (if (< c 894)\n                  (sum (+ (c 894) 1)))\n                (if (< c 895)\n                  (sum (+ (c 895) 1)))\n                (if (< c 896)\n                  (sum (+ (c 896) 1)))\n                (if (< c 897)\n                  (sum (+ (c 897) 1)))\n                (if (< c 898)\n                  (sum (+ (c 898) 1)))\n                (if (< c 899)\n                  (sum (+ (c 899) 1)))\n                (if (< c 900)\n                  (sum (+ (c 900) 1)))\n                (if (< c 901)\n                  (sum (+ (c 901) 1)))\n                (if (< c 902)\n                  (sum (+ (c 902) 1)))\n                (if (< c 903\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpfm2gyow3.rkt:70:20: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 71\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-upper-digit s)\n    (map char-upper-digit (substring s 1))))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpatl2m8qo.rkt:21:9: char-upper-digit: unbound identifier\n  in: char-upper-digit\n  location...:\n   /tmp/tmpatl2m8qo.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n             (char->integer (string->char s (string->char s c) - 1))))\n       (string->char s)))\n  s)\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp2wcayls6.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmp2wcayls6.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code\n      (string-map char-upcase s)\n      (range 0 (string-length s)))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp7xuehujs.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp7xuehujs.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar\n      (lambda (c)\n        (+ (char->integer (string-upcase c)) (char->integer (string-upcase (string-downcase c)))))\n      (string-split s \"\")\n    )\n    0))\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpsuqjsta3.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpsuqjsta3.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ c 32)\n            c))\n      s)\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmplr1nlfod.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmplr1nlfod.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n             (char->integer (string->char s c))))\n      (string->char s)))\n  0)\n\n;;; (digitSum \"helloE\")\n;;; 131\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"abcd\")\n;;; 0\n;;; (digitSum \"\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpj8krk0zq.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmpj8krk0zq.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (if (< c 90) 0 1))) sum)) s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuf34x1f.rkt:43:4\n\nfor-each: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuf34x1f.rkt:44:4\n\nfor-each: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuf34x1f.rkt:45:4\n\nfor-each: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuf34x1f.rkt:46:4\n\nfor-each: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuf34x1f.rkt:47:4\n\nfor-each: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbuf34x1f.rkt:48:4\n\nfor-each: contract violation\n  expected: list?\n  given: ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n             (char->integer (string->char s c))))\n      (string->char s)))\n  0)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpmzcuf6wd.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmpmzcuf6wd.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp45powww2.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmp45powww2.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n                  (sum (+ c (ascii-char-code c)\n                         (ascii-char-code (ascii-char-code c) - 32))))\n                s)\n      sum))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpmbp5hn4z.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (ascii-char-code c) (ascii-char-code (ascii-char-code c) - 32))))\n  location...:\n   /tmp/tmpmbp5hn4z.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar #\"A\"\n      (mapcar #\"A\"\n        (mapcar #\"A\"\n          (mapcar #\"A\"\n            (mapcar #\"A\"\n              (mapcar #\"A\"\n                (mapcar #\"A\"\n                  (mapcar #\"A\"\n                    (mapcar #\"A\"\n                      (mapcar #\"A\"\n                        (mapcar #\"A\"\n                          (mapcar #\"A\"\n                            (mapcar #\"A\"\n                              (mapcar #\"A\"\n                                (mapcar #\"A\"\n                                  (mapcar #\"A\"\n                                    (mapcar #\"A\"\n                                      (mapcar #\"A\"\n                                        (mapcar #\"A\"\n                                          (mapcar #\"A\"\n                                            (mapcar #\"A\"\n                                              (mapcar #\"A\"\n                                                (mapcar #\"A\"\n                                                  (mapcar #\"A\"\n                                                    (mapcar #\"A\"\n                                                      (mapcar #\"A\"\n                                                        (mapcar #\"A\"\n                                                          (mapcar #\"A\"\n                                                            (mapcar #\"A\"\n                                                              (mapcar #\"A\"\n                                                                (mapcar #\"A\"\n                                                                  (mapcar #\"A\"\n                                                                    (mapcar #\"A\"\n                                                                      (mapcar #\"A\"\n                                                                        (mapcar #\"A\"\n                                                                          (mapcar #\"A\"\n                                                                            (mapcar #\"A\"\n                                                                              (mapcar #\"A\"\n                                                                                (mapcar #\"A\"\n                                                                                  (mapcar #\"A\"\n                                                                                    (mapcar #\"A\"\n                                                                                      (mapcar #\"A\"\n                                                                                        (mapcar #\"A\"\n                                                                                          (mapcar #\"A\"\n                                                              \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292539,
      "stdout": "",
      "stderr": "/tmp/tmpvk0wdayf.rkt:64:90: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 66\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c) (char-ascii-value c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmparos6m_2.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmparos6m_2.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar\n      (lambda (c)\n        (+ (char->integer (string-upcase c)) (char->integer (string-upcase (string-substring s 1 1)))))\n      (string-upcase s)))\n  0)\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp0jtj5q8v.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmp0jtj5q8v.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar\n      (lambda (c)\n        (+ (char-code c) (char-code (char-upcase c)))))\n    s))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpjh9rprv7.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpjh9rprv7.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpwpat9zfd.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpwpat9zfd.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    (map (lambda (c) (char-code c))\n      (string-to-list \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpib6vx_oe.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpib6vx_oe.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpjv_ou99v.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpjv_ou99v.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n                  (sum (+ c (char->integer c)\n                         (char->integer (char->integer c) - 64))))\n                s)\n      sum))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpzmvk9o6u.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c) (char->integer (char->integer c) - 64))))\n  location...:\n   /tmp/tmpzmvk9o6u.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum 0])\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpcdk43a03.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpcdk43a03.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp90q660cu.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp90q660cu.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (string-map char-upcase s)\n    0))\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum \"helloE\")\n;;; 69\n;;; (digitSum \"woArBld\")\n;;; 131\n;;; (digitSum \"aAaaaXa\")\n;;; 153\n\n;;; (digitSum \"\")\n;;; 0\n;;; (digitSum \"abAB\")\n;;; 131\n;;; (digitSum \"abcCd\")\n;;; 67\n;;; (digitSum\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp8oueq7d_.rkt:21:5: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp8oueq7d_.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n             (char->integer (string->char s c))))\n       (string->list s)))\n  0)\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpldya79p4.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmpldya79p4.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n                                  (if (> c 97) (sum (+ (char->integer c) (char->integer (char->integer c) - 96))))\n                                  (if (> c 122) (sum (+ (char->integer c) (char->integer (char->integer c) - 128))))\n                                  (if (> c 48) (sum (+ (char->integer c) (char->integer (char->integer c) - 57))))\n                                  (if (> c 57) (sum (+ (char->integer c) (char->integer (char->integer c) - 48))))\n                                  (if (> c 65) (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n                                  (if (> c 97) (sum (+ (char->integer c) (char->integer (char->integer c) - 96))))\n                                  (if (> c 122) (sum (+ (char->integer c) (char->integer (char->integer c) - 128))))\n                                  (if (> c 48) (sum (+ (char->integer c) (char->integer (char->integer c) - 57))))\n                                  (if (> c 57) (sum (+ (char->integer c) (char->integer (char->integer c) - 48))))\n                                  (if (> c 65) (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n                                  (if (> c 97) (sum (+ (char->integer c) (char->integer (char->integer c) - 96))))\n                                  (if (> c 122) (sum (+ (char->integer c) (char->integer (char->integer c) - 128))))\n                                  (if (> c 48) (sum (+ (char->integer c) (char->integer (char->integer c) - 57))))\n                                  (if (> c 57) (sum (+ (char->integer c) (char->integer (char->integer c) - 48))))\n                                  (if (> c 65) (sum (+ (char->integer c\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp2261b_td.rkt:36:55: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 37\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n             (char->integer (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char s (string->char\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpszoryfsb.rkt:23:1548: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 24\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar #\"A\" s)\n    (mapcar #\"A\" (string-upcase s))\n  ))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpfw1ow6xq.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpfw1ow6xq.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([n (string-length s)])\n    (+ (string-map char-upcase s)\n       (if (> n 1)\n         (+ (string-map char-upcase (substring s 1 n))\n             (string-map char-upcase (substring s 1 n - 1)))))))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp4edb790k.rkt:21:8: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp4edb790k.rkt:21:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char c))\n             (char->integer (string->char (substring s 1))))\n         (string->char s)))\n    0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpp3c5q_xk.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmpp3c5q_xk.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ c 32)\n            c))\n      s)\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpz3939j7r.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmpz3939j7r.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                             (+\n                                                                                                              (+\n                                                                                                                (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                          (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                           (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp9wh8d5ky.rkt:86:139: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 87\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmppb6y48tk.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmppb6y48tk.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                              (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                           (+\n                                                                                                                                             (+\n                                                                                                                                               (+\n                                                                                                                                                (+\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpiz6227hq.rkt:86:144: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 87\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n                  (sum (+ c (char->integer c) % 26)))\n                s)\n      (+ sum 1)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp1nva0qv6.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c) % 26)))\n  location...:\n   /tmp/tmp1nva0qv6.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n                  (sum (+ c (char->integer c)\n                         (if (> c 90)\n                           9\n                           0))))\n                s)\n              (lambda (c)\n                (if (> c 65)\n                  (sum (+ c (char->integer c)\n                         (if (> c 90)\n                           9\n                           0)))))))\n  sum)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp4l4co8r8.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c) (if (> c 90) 9 0))))\n  location...:\n   /tmp/tmp4l4co8r8.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpbv6_58mc.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpbv6_58mc.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpjv_ou99v.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpjv_ou99v.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ c 32)\n            c))\n      s)\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmplr1nlfod.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmplr1nlfod.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer c) 65) (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n          (string-set! s c))\n      s))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpqhf_ivjt.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 65) (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n  location...:\n   /tmp/tmpqhf_ivjt.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpq63sagff.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpq63sagff.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-upper (string-split s \"\") 1)\n    (map char-upper (string-split s \"\") 2)\n    (map char-upper (string-split s \"\") 3)\n    (map char-upper (string-split s \"\") 4)\n    (map char-upper (string-split s \"\") 5)\n    (map char-upper (string-split s \"\") 6)\n    (map char-upper (string-split s \"\") 7)\n    (map char-upper (string-split s \"\") 8)\n    (map char-upper (string-split s \"\") 9)\n    (map char-upper (string-split s \"\") 10)\n    (map char-upper (string-split s \"\") 11)\n    (map char-upper (string-split s \"\") 12)\n    (map char-upper (string-split s \"\") 13)\n    (map char-upper (string-split s \"\") 14)\n    (map char-upper (string-split s \"\") 15)\n    (map char-upper (string-split s \"\") 16)\n    (map char-upper (string-split s \"\") 17)\n    (map char-upper (string-split s \"\") 18)\n    (map char-upper (string-split s \"\") 19)\n    (map char-upper (string-split s \"\") 20)\n    (map char-upper (string-split s \"\") 21)\n    (map char-upper (string-split s \"\") 22)\n    (map char-upper (string-split s \"\") 23)\n    (map char-upper (string-split s \"\") 24)\n    (map char-upper (string-split s \"\") 25)\n    (map char-upper (string-split s \"\") 26)\n    (map char-upper (string-split s \"\") 27)\n    (map char-upper (string-split s \"\") 28)\n    (map char-upper (string-split s \"\") 29)\n    (map char-upper (string-split s \"\") 30)\n    (map char-upper (string-split s \"\") 31)\n    (map char-upper (string-split s \"\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp3y_fosne.rkt:65:48: read-syntax: expected a closing `\"`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (string-map char-upcase s)\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp_61pf51_.rkt:21:5: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmp_61pf51_.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                             (+\n                                                                                                              (+\n                                                                                                                (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                           (+\n                                                                                                                                             (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmph7dh964b.rkt:86:141: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 87\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (if (> c 65) c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpjs0xn9rn.rkt:21:21: if: missing an \"else\" expression\n  in: (if (> c 65) c)\n  location...:\n   /tmp/tmpjs0xn9rn.rkt:21:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code\n      (string-split s \"\")\n      (lambda (c) (char-code c))\n      )\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmps90d591g.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmps90d591g.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c)\n      (if (> c 65)\n        (sum (+ c (char->integer c)\n              (char->integer (char->integer c) + 128))))\n      s)\n      (lambda (c)\n        (if (> c 65)\n          (sum (+ c (char->integer c)\n                (char->integer (char->integer c) + 128)))))))\n  sum)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n;; >>> (digitSum \"aAaaaXa\")\n;;\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpokds6jxt.rkt:22:6: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c) (char->integer (char->integer c) + 128))))\n  location...:\n   /tmp/tmpokds6jxt.rkt:22:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n                  (sum (+ c (ascii-char-code c)\n                         (ascii-char-code c)\n                         (ascii-char-code c))))\n                (string-char c s)))\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmppgoykhe1.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (ascii-char-code c) (ascii-char-code c) (ascii-char-code c))))\n  location...:\n   /tmp/tmppgoykhe1.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n                    (sum (+ c (char->integer c)\n                          (if (char->integer c)\n                              1\n                              0))))\n                s)\n      sum))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp480p12e5.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c) (if (char->integer c) 1 0))))\n  location...:\n   /tmp/tmp480p12e5.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar #\"A\" s)\n    (mapcar #\"A\" (string-upcase s))\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpuum6l59j.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpuum6l59j.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp90q660cu.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp90q660cu.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code\n      (string-map char-upcase s)\n      '(65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255)\n    ))\n  ))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp54mqnihh.rkt:25:3: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar #'(lambda (c) (if (> c 65) c))\n      (string-to-list s))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpj9pqkjnd.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpj9pqkjnd.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (ascii-char c) )))\n          (string-ref s c))\n      sum))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpuet8sugz.rkt:19:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 41\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> c 65)\n                  (+ sum (car c)))\n                )\n              s)\n    sum))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmp8_191z9n.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> c 65) (+ sum (car c)))\n  location...:\n   /tmp/tmp8_191z9n.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n             (char->integer (string->char s c))))\n      (string->char s)))\n  0)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpuwi49mam.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmpuwi49mam.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpbv6_58mc.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpbv6_58mc.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ c 32)\n            c))\n      s)\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 65\n;; >>> (digitSum \"abcCd\")\n;; 97\n;; >>> (digitSum \"helloE\")\n;; 101\n;; >>> (digitSum \"woArBld\")\n;; 65\n;; >>> (digitSum \"aAaaaXa\")\n;; 97\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpfd1m8bk0.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmpfd1m8bk0.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+ (map char-code char s)\n       (filter char-upper-p char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpulipnz95.rkt:20:10: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpulipnz95.rkt:20:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                             (+\n                                                                                                              (+\n                                                                                                                (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                          (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                           (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp9wh8d5ky.rkt:86:139: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 87\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpwhof6vej.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 64) (sum (+ (char->integer c) 1)))\n  location...:\n   /tmp/tmpwhof6vej.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char c))\n             (char->integer (string->char (string->char s) 1))))\n       (string->char s)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpwxhxc2d_.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmpwxhxc2d_.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp90q660cu.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp90q660cu.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map-char\n      (lambda (c)\n        (if (> c 65)\n            (+ (char-code c) (char-code (char-upcase c)))\n            0))\n      s)\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp9ekfevwl.rkt:21:5: map-char: unbound identifier\n  in: map-char\n  location...:\n   /tmp/tmp9ekfevwl.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpbv6_58mc.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpbv6_58mc.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar\n      (lambda (c)\n        (+ (char->integer (string->char s c)) (char->integer (string->char s c))))\n      (string->char s)))\n  0)\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpvq5iymfg.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpvq5iymfg.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar #'(lambda (c) (if (> c 65) c))\n      (string-upper-case s))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpjhgltvo7.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpjhgltvo7.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp0sbuz9rl.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 64) (sum (+ (char->integer c) 1)))\n  location...:\n   /tmp/tmp0sbuz9rl.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    (map (lambda (c) (char-code c))\n      (string-to-list \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n  ))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpymgv071o.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpymgv071o.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c)\n                (if (> (char->integer c) 65)\n                  (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n                s)\n      (+ sum 1)))\n)\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpnwn0avhh.rkt:22:16: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 65) (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n  location...:\n   /tmp/tmpnwn0avhh.rkt:22:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-upper-digit s)\n    (map char-upper-digit (substring s 1))))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpz4dd2lo_.rkt:21:9: char-upper-digit: unbound identifier\n  in: char-upper-digit\n  location...:\n   /tmp/tmpz4dd2lo_.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+ (map char-upper (string-to-list s)) 0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpa1qzjsp0.rkt:20:10: char-upper: unbound identifier\n  in: char-upper\n  location...:\n   /tmp/tmpa1qzjsp0.rkt:20:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmpwpat9zfd.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpwpat9zfd.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpw9ts6m52.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpw9ts6m52.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpxomo5s3t.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 64) (sum (+ (char->integer c) 1)))\n  location...:\n   /tmp/tmpxomo5s3t.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+\n            (+\n              (+\n                (+\n                  (+\n                    (+\n                      (+\n                        (+\n                          (+\n                            (+\n                              (+\n                                (+\n                                  (+\n                                    (+\n                                      (+\n                                        (+\n                                          (+\n                                            (+\n                                              (+\n                                                (+\n                                                  (+\n                                                    (+\n                                                      (+\n                                                        (+\n                                                          (+\n                                                            (+\n                                                              (+\n                                                                (+\n                                                                  (+\n                                                                    (+\n                                                                      (+\n                                                                        (+\n                                                                          (+\n                                                                            (+\n                                                                              (+\n                                                                                (+\n                                                                                    (+\n                                                                                      (+\n                                                                                        (+\n                                                                                          (+\n                                                                                             (+\n                                                                                               (+\n                                                                                                (+\n                                                                                                  (+\n                                                                                                    (+\n                                                                                                      (+\n                                                                                                        (+\n                                                                                                          (+\n                                                                                                            (+\n                                                                                                             (+\n                                                                                                              (+\n                                                                                                                (+\n                                                                                                                  (+\n                                                                                                                    (+\n                                                                                                                      (+\n                                                                                                                        (+\n                                                                                                                          (+\n                                                                                                                            (+\n                                                                                                                              (+\n                                                                                                                                (+\n                                                                                                                                  (+\n                                                                                                                                     (+\n                                                                                                                                       (+\n                                                                                                                                         (+\n                                                                                                                                           (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp9wh8d5ky.rkt:86:139: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 87\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c)\n                (if (> c 65)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 64))))\n                (if (< c 91)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 96))))\n                (if (< c 123)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 128))))\n                (if (< c 192)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 192))))\n                (if (< c 223)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 224))))\n                (if (< c 240)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 240))))\n                (if (< c 248)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 248))))\n                (if (< c 252)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 252))))\n                (if (< c 253)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 253))))\n                (if (< c 254)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 254))))\n                (if (< c 255)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 255))))\n                (if (< c 256)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 256))))\n                (if (< c 257)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 257))))\n                (if (< c 258)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 258))))\n                (if (< c 259)\n                    (sum (+ (char->integer c) (char->integer (char->integer c) - 259))))\n                (if (< c 260)\n                    (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmp6z2voiip.rkt:53:20: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 54\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (string-map\n      (lambda (c) (string-ci-p? c))\n      (string-upper-case s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpg96zxfcl.rkt:21:5: string-map: unbound identifier\n  in: string-map\n  location...:\n   /tmp/tmpg96zxfcl.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292543,
      "stdout": "",
      "stderr": "/tmp/tmppb6y48tk.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmppb6y48tk.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char c))\n             (char->integer (string->char (substring s 1 1))))\n         (string->char s)))\n    0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpl2cly7n3.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmpl2cly7n3.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n             (char->integer (string->char s (string->char s c) - 1)))))\n    (string->char s)))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmp3a2ouwpx.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmp3a2ouwpx.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let* ([sum (0)])\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpwhof6vej.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 64) (sum (+ (char->integer c) 1)))\n  location...:\n   /tmp/tmpwhof6vej.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> (char->integer c) 64) (sum (+ (char->integer c) 1))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmp0sbuz9rl.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> (char->integer c) 64) (sum (+ (char->integer c) 1)))\n  location...:\n   /tmp/tmp0sbuz9rl.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpbv6_58mc.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpbv6_58mc.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char c))\n             (char->integer (string->char (string->char s) 1))))\n       (string->char s)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpwxhxc2d_.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmpwxhxc2d_.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (if (< c 90) 0 1)))) s)\n      (string-to-number c)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmp63r5m0dd.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (if (< c 90) 0 1))))\n  location...:\n   /tmp/tmp63r5m0dd.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmp90q660cu.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmp90q660cu.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c)\n          (+ (char->integer (string->char s c))\n             (char->integer (string->char s c))))\n       (string->char s)))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpco_0emn9.rkt:22:29: string->char: unbound identifier\n  in: string->char\n  location...:\n   /tmp/tmpco_0emn9.rkt:22:29\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) (char->integer (char->integer c) - 64))))\n                                  (if (< c 91) (sum (+ c (char->integer c) (char->integer (char->integer c) - 96))))\n                                  (if (< c 123) (sum (+ c (char->integer c) (char->integer (char->integer c) - 128))))\n                                  (if (< c 192) (sum (+ c (char->integer c) (char->integer (char->integer c) - 192))))\n                                  (if (< c 255) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                  (if (< c 256) (sum (+ c (char->integer c) (char->integer (char->integer c) - 256))))\n                                \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpy5jevb_n.rkt:21:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 37\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (if (< c 90) 65))) sum)) s)\n    sum))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpnf2eo4un.rkt:21:49: if: missing an \"else\" expression\n  in: (if (< c 90) 65)\n  location...:\n   /tmp/tmpnf2eo4un.rkt:21:49\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map char-code char s)\n    (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292541,
      "stdout": "",
      "stderr": "/tmp/tmpp4w1n7nh.rkt:21:9: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpp4w1n7nh.rkt:21:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+ (map char-code char s)\n       (filter char-upper char s)))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpu3h7fsc9.rkt:20:10: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpu3h7fsc9.rkt:20:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+ (map (lambda (c) (char-code c)) (string-to-list s)) 0))\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the lower characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpvc8h9gto.rkt:20:23: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpvc8h9gto.rkt:20:23\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpbv6_58mc.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpbv6_58mc.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292542,
      "stdout": "",
      "stderr": "/tmp/tmpbvhh18zu.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmpbvhh18zu.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpbv6_58mc.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpbv6_58mc.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Answer\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpjv_ou99v.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpjv_ou99v.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (mapcar\n      (lambda (c)\n        (+ (char->integer (string-upcase c)) 0))\n      (string-upcase s)))\n  0)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n;; Solution\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292544,
      "stdout": "",
      "stderr": "/tmp/tmpo7ufhpam.rkt:21:5: mapcar: unbound identifier\n  in: mapcar\n  location...:\n   /tmp/tmpo7ufhpam.rkt:21:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (let ((sum 0))\n    (for-each (lambda (c) (if (> c 65) (sum (+ c (char->integer c) ))))\n      s))\n)\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmpbv6_58mc.rkt:21:26: if: missing an \"else\" expression\n  in: (if (> c 65) (sum (+ c (char->integer c))))\n  location...:\n   /tmp/tmpbv6_58mc.rkt:21:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Task\n;; Write a function that takes a string as input and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n(define (digitSum s)\n  (+\n    (map (lambda (c) (char-code c))\n      (string-to-list s))\n    0))\n\n;; Test\n;; >>> (digitSum \"\")\n;; 0\n;; >>> (digitSum \"abAB\")\n;; 131\n;; >>> (digitSum \"abcCd\")\n;; 67\n;; >>> (digitSum \"helloE\")\n;; 69\n;; >>> (digitSum \"woArBld\")\n;; 131\n;; >>> (digitSum \"aAaaaXa\")\n;; 153\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)",
      "timestamp": 1664292540,
      "stdout": "",
      "stderr": "/tmp/tmptknbq_yg.rkt:21:22: char-code: unbound identifier\n  in: char-code\n  location...:\n   /tmp/tmptknbq_yg.rkt:21:22\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}