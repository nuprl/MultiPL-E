name: HumanEval_156_int_to_mini_roman
language: rkt
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n;; >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman\
  \ 152)\n;; \"clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"\n(define (int_to_mini_roman\
  \ number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (let ((result \"\"))\n    (let ((i number))\n      (while (< i 1000)\n\
    \        (let ((digit (modulo (/ i 10)))\n              (roman_digit (modulo (/\
    \ i 5)))\n              (roman_digit_count (modulo (/ i 5)))))\n        (if (eq\
    \ digit 1)\n            (append result \"i\")\n            (if (eq digit 2)\n\
    \                (append result \"ii\")\n                (if (eq digit 3)\n  \
    \                  (append result \"iii\")\n                    (if (eq digit\
    \ 4)\n                        (append result \"iv\")\n                       \
    \ (if (eq digit 5)\n                            (append result \"v\")\n      \
    \                      (if (eq digit 6)\n                                (append\
    \ result \"vi\")\n                                (if (eq digit 7)\n         \
    \                           (append result \"vii\")\n                        \
    \            (if (eq digit 8)\n                                        (append\
    \ result \"viii\")\n                                        (if (eq digit 9)\n\
    \                                            (append result \"ix\")\n        \
    \                                    (append result \"x\"))))))))))))))\n    (if\
    \ (eq result \"\")\n        (print \"No roman numeral representation for \" number)\n\
    \    (else\n        (print result)))\n)\n", "  (let* ([n (number)])\n    (if (<\
    \ n 1)\n      \"invalid\"\n      (let* ([d (div n 2)])\n        (let* ([r (rem\
    \ n 2)])\n          (if (<= r 0)\n            (let* ([s (div r 5)])\n        \
    \      (let* ([x (rem r 5)])\n                (if (<= x 0)\n                 \
    \ (let* ([y (div x 10)])\n                    (let* ([z (rem x 10)])\n       \
    \               (if (<= z 0)\n                        (let* ([a (div z 5)])\n\
    \                          (let* ([b (rem z 5)])\n                           \
    \ (if (<= b 0)\n                              (let* ([c (div b 10)])\n       \
    \                         (let* ([d (rem b 10)])\n                           \
    \       (if (<= d 0)\n                                    (let* ([e (div d 5)])\n\
    \                                      (let* ([f (rem d 5)])\n               \
    \                         (if (<= f 0)\n                                     \
    \     (let* ([g (div f 10)])\n                                            (let*\
    \ ([h (rem f 10)])\n                                              (if (<= h 0)\n\
    \                                                (let* ([i (div h 5)])\n     \
    \                                             (let* ([j (rem h 5)])\n        \
    \                                            (if (<= j 0)\n                  \
    \                                    (let* ([k (div j 10)])\n                \
    \                                        (let* ([l (rem j 10)])\n            \
    \                                              (if (<= l 0)\n                \
    \                                            (let* ([m (div l 5)])\n         \
    \                                                     (let* ([n (rem l 5)])\n\
    \                                                                (if (<= n 0)\n\
    \                                                                  (let* ([o (div\
    \ n 10)])\n                                                                  \
    \  (let* ([p (rem n 10)])\n                                                  \
    \                    (if (<= p 0)\n                                          \
    \                              (let* ([q (div p 5)])\n                       \
    \                                                   (let* ([r (rem p 5", "  (let\
    \ ((result \"\"))\n    (if (zero? number)\n      result\n    (let ((digit (modulo\
    \ number 10)))\n      (if (zero? digit)\n        (append result \"x\")\n     \
    \ (if (zero? (modulo number 5))\n        (append result \"c\")\n      (if (zero?\
    \ (modulo number 4))\n        (append result \"d\")\n      (if (zero? (modulo\
    \ number 3))\n        (append result \"m\")\n      (if (zero? (modulo number 2))\n\
    \        (append result \"i\")\n      (if (zero? (modulo number 1))\n        (append\
    \ result \"v\")\n      (append result \"i\"))))))))))\n\n;; Given a roman numeral,\
    \ obtain its integer value.\n;; Restrictions: 1 <= num <= 1000\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n\
    ;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n    (let ((n\
    \ (number)))\n      (if (< n 100)\n        (let ((d (n / 10)))\n          (if\
    \ (< d 4)\n            (let ((m (n % 10)))\n              (if (< m 9)\n      \
    \          (let ((s (d - 1)))\n                  (result (concat \"x\" (int_to_roman\
    \ m) (int_to_roman s))))\n                (let ((s (d)))\n                  (result\
    \ (concat \"c\" (int_to_roman m) (int_to_roman s))))))))\n        (let ((d (n\
    \ / 100)))\n          (if (< d 4)\n            (let ((m (n % 100)))\n        \
    \      (if (< m 9)\n                (let ((s (d - 1)))\n                  (result\
    \ (concat \"l\" (int_to_roman m) (int_to_roman s))))\n                (let ((s\
    \ (d)))\n                  (result (concat \"x\" (int_to_roman m) (int_to_roman\
    \ s))))))))\n        (let ((d (n / 1000)))\n          (if (< d 4)\n          \
    \  (let ((m (n % 1000)))\n              (if (< m 9)\n                (let ((s\
    \ (d - 1)))\n                  (result (concat \"x\" (int_to_roman m) (int_to_roman\
    \ s))))\n                (let ((s (d)))\n                  (result (concat \"\
    c\" (int_to_roman m) (int_to_roman s)))))))))))\n  result)\n\n;; Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n;; and return it\
    \ in lowercase.\n;; Restrictions: 1 <= num <= 1000\n;; Examples:\n;; >>> (int_to_roman\
    \ 19)\n;; \"xix\"\n;; >>> (int_to_roman 152)\n;; \"clii\"\n;; >>> (int_to_roman\
    \ 426)\n;; \"cdxxvi\"", "  (let* ([n (number)])\n    (if (< n 1)\n      \"i\"\n\
    \    (if (< n 2)\n      \"ii\"\n    (if (< n 3)\n      \"iii\"\n    (if (< n 4)\n\
    \      \"iv\"\n    (if (< n 5)\n      \"v\"\n    (if (< n 6)\n      \"vi\"\n \
    \   (if (< n 7)\n      \"vii\"\n    (if (< n 8)\n      \"viii\"\n    (if (< n\
    \ 9)\n      \"ix\"\n    (if (< n 10)\n      \"x\"\n    (if (< n 11)\n      \"\
    xi\"\n    (if (< n 12)\n      \"xii\"\n    (if (< n 13)\n      \"xiii\"\n    (if\
    \ (< n 14)\n      \"xiv\"\n    (if (< n 15)\n      \"xv\"\n    (if (< n 16)\n\
    \      \"xvi\"\n    (if (< n 17)\n      \"xvii\"\n    (if (< n 18)\n      \"xviii\"\
    \n    (if (< n 19)\n      \"xix\"\n    (if (< n 20)\n      \"xx\"\n    (if (<\
    \ n 30)\n      \"xxi\"\n    (if (< n 40)\n      \"xxii\"\n    (if (< n 50)\n \
    \     \"xxiii\"\n    (if (< n 60)\n      \"xxiv\"\n    (if (< n 70)\n      \"\
    xxv\"\n    (if (< n 80)\n      \"xxvi\"\n    (if (< n 90)\n      \"xxvii\"\n \
    \   (if (< n 100)\n      \"xxviii\"\n    (if (< n 200)\n      \"cc\"\n    (if\
    \ (< n 300)\n      \"ccc\"\n    (if (< n 400)\n      \"cccc\"\n    (if (< n 500)\n\
    \      \"ccccc\"\n    (if (< n 600)\n      \"cccccc\"\n    (if (< n 700)\n   \
    \   \"ccccccc\"\n    (if (< n 800)\n      \"cccccccc\"\n    (if (< n 900)\n  \
    \    \"cccc", "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((num\
    \ (number)))\n        (if (<= num 100)\n          (let ((n (num % 100)))\n   \
    \         (let ((d (num / 100)))\n              (if (<= d 4)\n               \
    \ (let ((s (d % 4)))\n                  (let ((m (d / 4)))\n                 \
    \   (result (concat (string-append \"cm\" (string-append m d)) s))))\n       \
    \         (let ((m (d / 4)))\n                  (result (concat (string-append\
    \ \"cd\" (string-append m d)) s))))\n              (let ((m (d / 4)))\n      \
    \          (result (concat (string-append \"d\" (string-append m d)) s))))\n \
    \           (let ((m (d / 4)))\n              (result (concat (string-append \"\
    m\" (string-append m d)) s))))\n          (let ((n (num % 100)))\n           \
    \ (let ((d (num / 100)))\n              (if (<= d 9)\n                (let ((s\
    \ (d % 9)))\n                  (let ((m (d / 9)))\n                    (result\
    \ (concat (string-append \"cm\" (string-append m d)) s))))\n                (let\
    \ ((m (d / 9)))\n                  (result (concat (string-append \"cd\" (string-append\
    \ m d)) s))))\n              (let ((m (d / 9)))\n                (result (concat\
    \ (string-append \"d\" (string-append m d)) s))))\n            (let ((m (d / 9)))\n\
    \              (result (concat (string-append \"m\" (string-append m d)) s)))))))\n\
    \      (let ((num (number)))\n        (if (<= num 90)\n          (let ((n (num\
    \ % 100)))\n            (let ((d (num / 100)))\n              (if (<= d 9)\n \
    \               (let ((s (d % 9)))\n                  (let ((m (d / 9)))\n   \
    \                 (result (concat (string-append \"cm\" (string-append m d)) s))))\n\
    \                (let ((m (d / 9)))\n                  (result (concat (string-append\
    \ \"cd\" (string-", "  (let* ([result (string-append \"\")])\n    (let* ([remainder\
    \ (modulo number 10)])\n      (if (zero? remainder)\n        (return result)\n\
    \        (let* ([divisor (div remainder 10)])\n          (if (zero? divisor)\n\
    \            (return result)\n            (let* ([subresult (int_to_mini_roman\
    \ (sub number divisor))])\n              (string-append subresult result)))))))))\n\
    \n;; Given a roman numeral, obtain its integer value.\n;; Restrictions: 1 <= num\
    \ <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int\
    \ \"CDXXVI\")\n;; 426", "  (let ((result \"\"))\n    (let ((n (number)))\n   \
    \   (if (< n 1)\n        (error \"Invalid number\")\n      (let ((i 0))\n    \
    \    (while (< i n)\n          (let ((digit (modulo (/ n i)))\n              \
    \  (next-i (if (< digit 1)\n                            (concat \"i\")\n     \
    \                       (concat \"v\"))))\n            (let ((next-i (if (< digit\
    \ 2)\n                            (concat \"x\")\n                           \
    \ (concat \"l\"))))\n              (let ((next-i (if (< digit 3)\n           \
    \                    (concat \"c\")\n                               (concat \"\
    d\"))))\n                (let ((next-i (if (< digit 4)\n                     \
    \            (concat \"m\")\n                                 (concat \"n\"))))\n\
    \                  (let ((next-i (if (< digit 5)\n                           \
    \        (concat \"x\")\n                                   (concat \"l\"))))\n\
    \                    (let ((next-i (if (< digit 6)\n                         \
    \           (concat \"c\")\n                                    (concat \"d\"\
    ))))\n                      (let ((next-i (if (< digit 7)\n                  \
    \                    (concat \"m\")\n                                      (concat\
    \ \"n\"))))\n                        (let ((next-i (if (< digit 8)\n         \
    \                               (concat \"x\")\n                             \
    \           (concat \"l\"))))\n                          (let ((next-i (if (<\
    \ digit 9)\n                                          (concat \"c\")\n       \
    \                                   (concat \"d\"))))\n                      \
    \      (let ((next-i (if (< digit 10)\n                                      \
    \      (concat \"m\")\n                                            (concat \"\
    n\"))))\n                              (let ((next-i (if (< digit 11)\n      \
    \                                        (concat \"x\")\n                    \
    \                          (concat \"l\"))))\n                               \
    \ (let ((next-i (if (< digit 12)\n                                           \
    \     (concat \"c\")\n                                                (concat\
    \ \"d\"))))\n                                  (let ((next-i (if (< digit 13)\n\
    \                                                 (concat \"m\")\n           \
    \                                      (concat \"n\"))))", "  (let ((result \"\
    \"))\n    (let ((n (number)))\n      (if (< n 1)\n        (return \"\")\n    \
    \  (let ((digit (modulo (/ n 10)))\n            (subtract (modulo (/ digit 2)))\n\
    \            (add (modulo (/ digit 4)))\n            (add (modulo (/ digit 5))))\n\
    \        (let ((subtract (modulo (/ digit 3)))\n              (add (modulo (/\
    \ digit 6))))\n          (let ((add (modulo (/ digit 9))))\n            (let ((add\
    \ (modulo (/ digit 8))))\n              (let ((add (modulo (/ digit 7))))\n  \
    \              (let ((add (modulo (/ digit 5))))\n                  (let ((add\
    \ (modulo (/ digit 4))))\n                    (let ((add (modulo (/ digit 9))))\n\
    \                      (let ((add (modulo (/ digit 8))))\n                   \
    \     (let ((add (modulo (/ digit 7))))\n                          (let ((add\
    \ (modulo (/ digit 6))))\n                            (let ((add (modulo (/ digit\
    \ 5))))\n                              (let ((add (modulo (/ digit 9))))\n   \
    \                             (let ((add (modulo (/ digit 8))))\n            \
    \                      (let ((add (modulo (/ digit 7))))\n                   \
    \                 (let ((add (modulo (/ digit 6))))\n                        \
    \              (let ((add (modulo (/ digit 5))))\n                           \
    \             (let ((add (modulo (/ digit 9))))\n                            \
    \              (let ((add (modulo (/ digit 8))))\n                           \
    \                 (let ((add (modulo (/ digit 7))))\n                        \
    \                      (let ((add (modulo (/ digit 6))))\n                   \
    \                             (let ((add (modulo (/ digit 5))))\n            \
    \                                      (let ((add (modulo (/ digit 9))))\n   \
    \                                                 (let ((add (modulo (/ digit\
    \ 8))))\n                                                      (let ((add (modulo\
    \ (/ digit 7))))\n                                                        (let\
    \ ((add (modulo (/ digit 6))))\n                                             \
    \             (let ((add (modulo (/ digit 5))))\n                            \
    \                                (let ((add (modulo (/ digit 9))))\n         \
    \                                                     (let ((add (modulo (/",
  "  (let* ([num (number)]\n          [result (make-string number)])\n    (let ([i\
    \ 0])\n      (while (< i num)\n        [(set! i (i + 1))\n         (let ([n (modulo\
    \ (/ i 2))])\n           (if (< n 1)\n             (append result \"\")\n    \
    \       [append result (string-append (string-append \"I\" \"I\")\n          \
    \                                 (string-append \"V\" \"V\")\n              \
    \                             (string-append \"X\" \"X\")\n                  \
    \                         (string-append \"L\" \"L\")\n                      \
    \                     (string-append \"C\" \"C\")\n                          \
    \                 (string-append \"D\" \"D\"))\n                             \
    \              (string-append \"M\" \"M\"))\n                                \
    \           (string-append \"M\" \"M\"))\n                                   \
    \        (string-append \"I\" \"I\"))\n                                      \
    \     (string-append \"V\" \"V\"))\n                                         \
    \  (string-append \"X\" \"X\"))\n                                           (string-append\
    \ \"L\" \"L\"))\n                                           (string-append \"\
    C\" \"C\"))\n                                           (string-append \"D\" \"\
    D\"))\n                                           (string-append \"M\" \"M\"))\n\
    \                                           (string-append \"M\" \"M\"))\n   \
    \                                        (string-append \"I\" \"I\"))\n      \
    \                                     (string-append \"V\" \"V\"))\n         \
    \                                  (string-append \"X\" \"X\"))\n            \
    \                               (string-append \"L\" \"L\"))\n               \
    \                            (string-append \"C\" \"C\"))\n                  \
    \                         (string-append \"D\" \"D\"))\n                     \
    \                      (string-append \"M\" \"M\"))\n                        \
    \                   (string-append \"M\" \"M\"))\n                           \
    \                (string-append \"I\" \"I\"))\n                              \
    \             (string-append \"V\" \"V\"))\n                                 \
    \          (string-append \"X\" \"X\"))\n                                    \
    \       (string-append \"L\" \"L\"))\n                                       \
    \    (string-append \"C", "  (let ((result \"\"))\n    (if (< number 100)\n  \
    \    (let ((digit (number % 10)))\n        (if (< digit 10)\n          (let ((sub\
    \ (number / 10)))\n            (let ((subsub (sub % 10)))\n              (result\
    \ (concat (string-append \"x\" (int_to_roman digit))\n                       \
    \           (string-append \"c\" (int_to_roman subsub)))))\n            (result\
    \ (concat (string-append \"c\" (int_to_roman digit)))))\n          (let ((sub\
    \ (number / 10)))\n            (let ((subsub (sub % 10)))\n              (result\
    \ (concat (string-append \"x\" (int_to_roman digit))\n                       \
    \           (string-append \"x\" (int_to_roman subsub)))))\n            (result\
    \ (concat (string-append \"x\" (int_to_roman digit)))))\n        (result (concat\
    \ (string-append \"x\" (int_to_roman digit))))\n      )\n    (else\n      (let\
    \ ((sub (number / 100)))\n        (let ((subsub (sub % 100)))\n          (result\
    \ (concat (string-append \"c\" (int_to_roman subsub)))))\n        (result (concat\
    \ (string-append \"xc\" (int_to_roman subsub))))\n      )\n    )\n    (result\
    \ (string-lowercase result)))\n)\n\n;; Given a roman numeral, obtain its integer\
    \ value.\n;; Return 0 if the input is not a valid roman numeral.\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"xvii\")\n;; 27\n\
    ;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (define (roman_digits n)\n    (if\
    \ (<= n 0)\n      \"0\"\n    (if (<= n 1)\n      \"I\"\n    (if (<= n 2)\n   \
    \   \"II\"\n    (if (<= n 3)\n      \"III\"\n    (if (<= n 4)\n      \"IV\"\n\
    \    (if (<= n 5)\n      \"V\"\n    (if (<= n 6)\n      \"VI\"\n    (if (<= n\
    \ 7)\n      \"VII\"\n    (if (<= n 8)\n      \"VIII\"\n    (if (<= n 9)\n    \
    \  \"IX\"\n    (if (<= n 10)\n      \"X\"\n    (if (<= n 11)\n      \"XI\"\n \
    \   (if (<= n 12)\n      \"XII\"\n    (if (<= n 13)\n      \"XIII\"\n    (if (<=\
    \ n 14)\n      \"XIV\"\n    (if (<= n 15)\n      \"XV\"\n    (if (<= n 16)\n \
    \     \"XVI\"\n    (if (<= n 17)\n      \"XVII\"\n    (if (<= n 18)\n      \"\
    XVIII\"\n    (if (<= n 19)\n      \"XIX\"\n    (if (<= n 20)\n      \"XX\"\n \
    \   (if (<= n 30)\n      \"XXX\"\n    (if (<= n 40)\n      \"XL\"\n    (if (<=\
    \ n 50)\n      \"L\"\n    (if (<= n 60)\n      \"LX\"\n    (if (<= n 70)\n   \
    \   \"LXX\"\n    (if (<= n 80)\n      \"LXXX\"\n    (if (<= n 90)\n      \"XC\"\
    \n    (if (<= n 100)\n      \"C\"\n    (if (<= n 200)\n      \"CC\"\n    (if (<=\
    \ n 300)\n      \"CCC\"\n    (if (<= n 400)\n      \"CD\"\n    (if (<= n 500)\n\
    \      \"D\"\n    (if (<= n 600)\n      \"DC\"\n    (if (<= n 700)\n      ", " \
    \ (let ((result \"\"))\n    (if (< number 1000)\n      (let ((n (number)))\n \
    \       (if (<= n 100)\n          (let ((n (number)))\n            (if (<= n 10)\n\
    \              (let ((n (number)))\n                (if (<= n 1)\n           \
    \       (result \"\")\n                  (result (string-append (string-append\
    \ \"I\" \"I\") (string-append \"V\" \"I\")) result)\n                )\n     \
    \           (let ((n (number)))\n                  (if (<= n 9)\n            \
    \        (let ((n (number)))\n                      (if (<= n 5)\n           \
    \             (let ((n (number)))\n                          (if (<= n 4)\n  \
    \                          (let ((n (number)))\n                             \
    \ (if (<= n 3)\n                                (let ((n (number)))\n        \
    \                          (if (<= n 2)\n                                    (let\
    \ ((n (number)))\n                                      (if (<= n 1)\n       \
    \                                 (result \"\")\n                            \
    \            (result (string-append \"I\" \"I\") (string-append \"X\" \"I\"))\n\
    \                                      )\n                                   \
    \   (result (string-append \"I\" \"I\") (string-append \"L\" \"I\"))\n       \
    \                             )\n                                  )\n       \
    \                           (result (string-append \"I\" \"I\") (string-append\
    \ \"C\" \"I\"))\n                                )\n                         \
    \     )\n                            (result (string-append \"I\" \"I\") (string-append\
    \ \"D\" \"I\"))\n                          )\n                        (result\
    \ (string-append \"I\" \"I\") (string-append \"M\" \"I\"))\n                 \
    \     )\n                    (result (string-append \"I\" \"I\") (string-append\
    \ \"C\" \"I\"))\n                  )\n                  (result (string-append\
    \ \"I\" \"I\") (string-append \"M\" \"I\"))\n                )\n             \
    \ )\n            (result (string-append \"I\" \"I\") (string-append \"V\" \"I\"\
    ))\n          )\n        (result (string-append \"I\" \"I\") (string-append \"\
    X\" \"I\"))\n      )\n    (result (string-append \"I\" \"I\") (", "  (let* ([result\
    \ (string)])\n    (let* ([n (number)])\n      (if (<= n 1)\n        (result \"\
    \")\n      (let* ([n (number)])\n        (if (<= n 1000)\n          (let* ([n\
    \ (number)])\n            (if (<= n 100)\n              (let* ([n (number)])\n\
    \                (if (<= n 10)\n                  (let* ([n (number)])\n     \
    \               (if (<= n 1)\n                      (result \"\")\n          \
    \          (let* ([n (number)])\n                      (result (string-append\
    \ (string-append \"M\" (int_to_roman n)) \"\") result)\n                    )\n\
    \                  )\n                )\n              )\n            )\n    \
    \      )\n        )\n      )\n    )\n    result\n  )\n)\n\n;; Given a roman numeral,\
    \ obtain its integer equivalent.\n;; Restrictions: 1 <= num <= 1000\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"MCDXLIV\")\n;; 442\n\
    ;; >>> (roman_to_int \"CDXXVI\")\n;; 426", "  (let ((result \"\"))\n    (let ((digit\
    \ (number % 10)))\n      (if (zero? digit)\n        (result (string-append result\
    \ \"x\"))\n        (let ((sub (number / 10)))\n          (if (zero? sub)\n   \
    \         (string-append result \"x\")\n            (let ((subsub (sub / 10)))\n\
    \              (if (zero? subsub)\n                (string-append result \"x\"\
    )\n                (let ((subsubsub (subsub / 100)))\n                  (if (zero?\
    \ subsubsub)\n                    (string-append result \"x\")\n             \
    \       (let ((subsubsubsub (subsubsub / 1000)))\n                      (if (zero?\
    \ subsubsubsub)\n                        (string-append result \"x\")\n      \
    \                  (let ((subsubsubsubsub (subsubsubsub / 10000)))\n         \
    \                 (if (zero? subsubsubsubsub)\n                            (string-append\
    \ result \"x\")\n                            (let ((subsubsubsubsubsub (subsubsubsubsub\
    \ / 100000)))\n                              (if (zero? subsubsubsubsubsub)\n\
    \                                (string-append result \"x\")\n              \
    \                  (let ((subsubsubsubsubsubsub (subsubsubsubsubsub / 1000000)))\n\
    \                                  (if (zero? subsubsubsubsubsubsub)\n       \
    \                             (string-append result \"x\")\n                 \
    \                   (string-append result \"v
  "  (let ((result \"\"))\n    (let ((i number))\n      (while (< i 1000)\n      \
    \  (let ((next (modulo i 10)))\n          (if (eq? next 1)\n            (append\
    \ result \"x\")\n            (append result (string-append (string-append \"cm\"\
    \ (string-append \"ix\" \"v\" \"x\" \"l\" \"c\" \"d\" \"m\"))))))\n        (set!\
    \ i (i - 1)))\n      (return result)))\n\n;; Given a roman numeral, obtain its\
    \ integer value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"CDXXVI\")\n;; 426", "  (let ((result\
    \ \"\"))\n    (let ((n (number)))\n      (if (<= n 1)\n        (result \"\")\n\
    \      (else\n        (let ((digit (modulo n 10)))\n          (let ((sub (modulo\
    \ (sub n digit) 10)))\n            (if (<= sub 4)\n              (result (append\
    \ result (string-append \"cm\" (string-append digit (string-append \"x\" sub))))\n\
    \              (else\n                (let ((sub2 (modulo (sub n (sub 2 digit))\
    \ 10)))\n                  (if (<= sub2 4)\n                    (result (append\
    \ result (string-append \"cd\" (string-append digit (string-append \"x\" sub2))))\n\
    \                    (else\n                      (let ((sub3 (modulo (sub n (sub\
    \ 3 digit)) 10)))\n                        (if (<= sub3 4)\n                 \
    \         (result (append result (string-append \"d\" (string-append digit (string-append\
    \ \"x\" sub3))))\n                          (else\n                          \
    \  (let ((sub4 (modulo (sub n (sub 4 digit)) 10)))\n                         \
    \     (if (<= sub4 4)\n                                (result (append result\
    \ (string-append \"m\" (string-append digit (string-append \"x\" sub4))))\n  \
    \                              (else\n                                  (let ((sub5\
    \ (modulo (sub n (sub 5 digit)) 10)))\n                                    (if\
    \ (<= sub5 4)\n                                      (result (append result (string-append\
    \ \"c\" (string-append digit (string-append \"x\" sub5))))\n                 \
    \                     (else\n                                        (let ((sub6\
    \ (modulo (sub n (sub 6 digit)) 10)))\n                                      \
    \    (if (<= sub6 4)\n                                            (result (append\
    \ result (string-append \"l\" (string-append digit (string-append \"x\" sub6))))\n\
    \                                            (else\n                         \
    \                     (let ((sub7 (modulo (sub n (sub 7 digit)) 10)))\n      \
    \                                          (if (<= sub7 4)\n                 \
    \                                 (result (append result (string-append \"x\"\
    \ (string-append digit (string-append \"x\" sub7))))\n                       \
    \                         ", "  (let* ([num (number)]\n          [result (make-string\
    \ number)])\n    (let ([i (0)])\n      (while (<= i num)\n        (let ([next\
    \ (modulo (/ num (sub1 i)))])\n          (if (zero? next)\n              (append\
    \ result \"\")\n              (append result (string-append (string-append \"\
    M\" (sub1 next)) \"I\")))\n          (set! i (add1 i)))\n        (set! i (add1\
    \ i)))\n      result))\n\n;; Given a roman numeral, obtain its integer value.\n\
    ;; Restrictions: 1 <= num <= 1000\n;; Examples:\n;; >>> (roman_to_int \"xix\"\
    )\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n;; >>> (roman_to_int \"cdxxvi\"\
    )\n;; 426", "  (let ((result \"\"))\n    (let ((num (number)))\n      (if (<=\
    \ num 1000)\n        (let ((digit (num % 10)))\n          (if (<= digit 9)\n \
    \           (let ((sub (num / 10)))\n              (if (<= sub 3)\n          \
    \      (let ((subsub (sub / 3)))\n                  (result (concat (string-append\
    \ \"m\" (subsub)) result))))\n              (let ((subsub (sub / 3)))\n      \
    \          (result (concat (string-append \"c\" (subsub)) result))))\n       \
    \   (let ((sub (num / 10)))\n            (if (<= sub 3)\n              (let ((subsub\
    \ (sub / 3)))\n                (result (concat (string-append \"x\" (subsub))\
    \ result))))\n            (let ((subsub (sub / 3)))\n              (result (concat\
    \ (string-append \"l\" (subsub)) result))))\n        (let ((sub (num / 10)))\n\
    \          (if (<= sub 3)\n            (let ((subsub (sub / 3)))\n           \
    \   (result (concat (string-append \"i\" (subsub)) result))))\n          (let\
    \ ((subsub (sub / 3)))\n            (result (concat (string-append \"v\" (subsub))\
    \ result))))\n      (else\n        (let ((sub (num / 10)))\n          (if (<=\
    \ sub 3)\n            (let ((subsub (sub / 3)))\n              (result (concat\
    \ (string-append \"i\" (subsub)) result))))\n          (let ((subsub (sub / 3)))\n\
    \            (result (concat (string-append \"v\" (subsub)) result)))))))\n  result)\n",
  "  (let ((result \"\"))\n    (let ((digit (number % 10)))\n      (if (zero? digit)\n\
    \          (result (string-append result \"x\"))\n          (let ((sub (number\
    \ / 10)))\n            (if (zero? sub)\n                (string-append result\
    \ \"x\")\n                (let ((subsub (sub / 10)))\n                  (if (zero?\
    \ subsub)\n                      (string-append result \"x\")\n              \
    \        (string-append result (string-append digit \"-\"))))))))))\n\n;; Given\
    \ a roman numeral, obtain its integer value.\n;; Restrictions: 1 <= num <= 3999\n\
    ;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\"\
    )\n;; 152\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n\
    \    (if (< number 100)\n      (let ((digit (number % 10)))\n        (if (< digit\
    \ 9)\n          (let ((sub (number / 10)))\n            (if (< sub 10)\n     \
    \         (let ((subsub (sub / 10)))\n                (result (string-append (string-append\
    \ \"cm\" (int_to_mini_roman subsub)) (int_to_mini_roman digit))))\n          \
    \    (result (string-append \"m\" (int_to_mini_roman digit))))\n            (result\
    \ (string-append \"x\" (int_to_mini_roman digit))))\n        (result (string-append\
    \ \"i\" (int_to_mini_roman digit))))\n      (result (string-append \"v\" (int_to_mini_roman\
    \ (number / 10)))))))\n\n;; Given a roman numeral, obtain its integer value.\n\
    ;; Restrictions: 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\"\
    )\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n;; >>> (roman_to_int \"cdxxvi\"\
    )\n;; 426", "  (define (roman_digit number)\n    (cond\n      [(< number 10) \"\
    x\"]\n      [(< number 100) \"c\"]\n      [(< number 1000) \"m\"]\n      [(< number\
    \ 10000) \"d\"]\n      [(< number 100000) \"l\"]\n      [(< number 1000000) \"\
    x\"]\n      [(< number 10000000) \"v\"]\n      [(< number 100000000) \"i\"]\n\
    \      [(< number 1000000000) \"m\"]\n      [(< number 10000000000) \"x\"]\n \
    \     [(< number 100000000000) \"c\"]\n      [(< number 1000000000000) \"m\"]\n\
    \      [(< number 10000000000000) \"d\"]\n      [(< number 100000000000000) \"\
    l\"]\n      [(< number 1000000000000000) \"x\"]\n      [(< number 10000000000000000)\
    \ \"v\"]\n      [(< number 100000000000000000) \"i\"]\n      [(< number 10000000000000000000)\
    \ \"m\"]\n      [(< number 10000000000000000000) \"x\"]\n      [(< number 10000000000000000000)\
    \ \"c\"]\n      [(< number 10000000000000000000) \"m\"]\n      [(< number 10000000000000000000)\
    \ \"d\"]\n      [(< number 10000000000000000000) \"l\"]\n      [(< number 10000000000000000000)\
    \ \"x\"]\n      [(< number 10000000000000000000) \"v\"]\n      [(< number 10000000000000000000)\
    \ \"i\"]\n      [(< number 10000000000000000000) \"m\"]\n      [(< number 10000000000000000000)\
    \ \"x\"]\n      [(< number 10000000000000000000) \"c\"]\n      [(< number 10000000000000000000)\
    \ \"m\"]\n      [(< number 10000000000000000000) \"d\"]\n      [(< number 10000000000000000000)\
    \ \"l\"]\n      [(< number 10000000000000000000) \"x\"]\n      [(< number 10000000000000000000)\
    \ \"v\"]\n      [(< number 10000000000000000000) \"i\"]\n      [(< number 10000000000000000000)\
    \ \"m\"]\n      [(< number 10000000000000000000) \"x\"]\n      [(< number 10000000000000000000)\
    \ \"", "  (let ((result \"\"))\n    (if (< number 100)\n      (let ((digit (number\
    \ % 10)))\n        (if (< digit 9)\n          (result (concat \"x\" digit))\n\
    \          (let ((sub (number / 10)))\n            (if (< sub 10)\n          \
    \    (result (concat \"x\" digit))\n              (let ((subsub (sub / 10)))\n\
    \                (if (< subsub 9)\n                  (result (concat \"x\" digit))\n\
    \                  (let ((subsubsub (subsub / 10)))\n                    (if (<\
    \ subsubsub 9)\n                      (result (concat \"x\" digit))\n        \
    \              (result (concat \"x\" digit) (concat \"x\" digit))))))))))))\n\
    \    (if (< number 10)\n      (let ((digit (number % 10)))\n        (if (< digit\
    \ 9)\n          (result (concat \"x\" digit))\n          (let ((sub (number /\
    \ 10)))\n            (if (< sub 10)\n              (result (concat \"x\" digit))\n\
    \              (let ((subsub (sub / 10)))\n                (if (< subsub 9)\n\
    \                  (result (concat \"x\" digit))\n                  (let ((subsubsub\
    \ (subsub / 10)))\n                    (if (< subsubsub 9)\n                 \
    \     (result (concat \"x\" digit))\n                      (result (concat \"\
    x\" digit) (concat \"x\" digit))))))))))))\n    (if (< number 1)\n      (let ((digit\
    \ (number % 10)))\n        (if (< digit 9)\n          (result (concat \"x\" digit))\n\
    \          (let ((sub (number / 10)))\n            (if (< sub 10)\n          \
    \    (result (concat \"x\" digit))\n              (let ((subsub (sub / 10)))\n\
    \                (if (< subsub 9)\n                  (result (concat \"x\" digit))\n\
    \                  (let ((subsubsub (subsub / 10)))\n                    (if (<\
    \ subsubsub 9)\n                      (result (concat \"x\" digit))\n        \
    \              (result (concat \"x\" digit) (concat \"x\" digit))))))))))))\n\
    \    (result result)))\n\n;; Given a roman numeral, obtain its integer value.\n",
  "  (let ((result \"\"))\n    (if (<= number 1000)\n      (let ((digit (number %\
    \ 10)))\n        (if (< digit 10)\n          (let ((sub (number / 10)))\n    \
    \        (if (< sub 10)\n              (let ((subsub (sub / 10)))\n          \
    \      (if (< subsub 10)\n                  (let ((subsubsub (subsub / 10)))\n\
    \                    (if (< subsubsub 10)\n                      (let ((subsubsubsub\
    \ (subsubsub / 10)))\n                        (if (< subsubsubsub 10)\n      \
    \                    (let ((subsubsubsubsub (subsubsubsub / 10)))\n          \
    \                  (if (< subsubsubsubsub 10)\n                              (let\
    \ ((subsubsubsubsubsub (subsubsubsubsub / 10)))\n                            \
    \    (if (< subsubsubsubsubsub 10)\n                                  (let ((subsubsubsubsubsubsub\
    \ (subsubsubsubsubsub / 10)))\n                                    (if (< subsubsubsubsubsubsub\
    \ 10)\n                                      (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub\
    \ / 10)))\n                                        (if (< subsubsubsubsubsubsubsub\
    \ 10)\n                                          (let ((subsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsub / 10)))\n                                        \
    \    (if (< subsubsubsubsubsubsubsubsub 10)\n                                \
    \              (let ((subsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                                (if (< subsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                  (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsub / 10)))\n                                  \
    \                  (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n            \
    \                                          (let ((subsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                         (if (< subsubsubsubsubsubsubsubsubsubsubsub 10)\n  \
    \                                                        (let ((subsubsubsubsubsubsubsub",
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((digit (number % 10)))\n\
    \        (if (< digit 10)\n          (let ((sub (number / 10)))\n            (if\
    \ (< sub 10)\n              (let ((subsub (sub / 10)))\n                (if (<\
    \ subsub 10)\n                  (let ((subsubsub (subsub / 10)))\n           \
    \         (result (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                 \"x\"\n                   \
    \              (string-append\n                                  \"v\"\n     \
    \                             (string-append\n                               \
    \     \"i\"\n                                    (string-append\n            \
    \                          \"i\"\n                                      (string-append\n\
    \                                        \"i\"\n                             \
    \           \"x
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((digit (modulo number\
    \ 10)))\n        (if (< digit 1)\n          (result \"\")\n          (let ((subresult\
    \ (int_to_mini_roman (number / 10)))\n                (remainder (number % 10)))\n\
    \            (result (concat subresult (string-append \"-\" subresult))))\n  \
    \        (result (concat result (string-append \"-\" digit))))\n        (let ((subresult\
    \ (int_to_mini_roman (number / 5))))\n          (result (concat subresult (string-append\
    \ \"-\" subresult))))\n        (let ((subresult (int_to_mini_roman (number / 1))))\n\
    \          (result (concat subresult (string-append \"-\" subresult))))\n    \
    \    (result (concat result (string-append \"-\" digit))))\n      (result (string-append\
    \ \"m\" number))))\n\n;; Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
    ;; Examples:\n;; >>> (int_to_roman 19)\n;; \"xix\"\n;; >>> (int_to_roman 152)\n\
    ;; \"clii\"\n;; >>> (int_to_roman 426)\n;; \"cdxxvi\"", "  (let ((result \"\"\
    ))\n    (if (< number 1000)\n      (let ((n (number)))\n        (if (<= n 100)\n\
    \          (let ((n (n)))\n            (let ((n (n)))\n              (let ((n\
    \ (n)))\n                (let ((n (n)))\n                  (let ((n (n)))\n  \
    \                  (let ((n (n)))\n                      (let ((n (n)))\n    \
    \                    (let ((n (n)))\n                          (let ((n (n)))\n\
    \                            (let ((n (n)))\n                              (let\
    \ ((n (n)))\n                                (let ((n (n)))\n                \
    \                  (let ((n (n)))\n                                    (let ((n\
    \ (n)))\n                                      (let ((n (n)))\n              \
    \                          (let ((n (n)))\n                                  \
    \        (let ((n (n)))\n                                            (let ((n\
    \ (n)))\n                                              (let ((n (n)))\n      \
    \                                          (let ((n (n)))\n                  \
    \                                (let ((n (n)))\n                            \
    \                        (let ((n (n)))\n                                    \
    \                  (let ((n (n)))\n                                          \
    \              (let ((n (n)))\n                                              \
    \            (let ((n (n)))\n                                                \
    \            (let ((n (n)))\n                                                \
    \              (let ((n (n)))\n                                              \
    \                  (let ((n (n)))\n                                          \
    \                        (let ((n (n)))\n                                    \
    \                                (let ((n (n)))\n                            \
    \                                          (let ((n (n)))\n                  \
    \                                                      (let ((n (n)))\n      \
    \                                                                    (let ((n\
    \ (n)))\n                                                                    \
    \        (let ((n (n)))\n                                                    \
    \                          (let ((n (n)))\n                                  \
    \                                              (let ((n (n)))\n              \
    \                                                                    (let ((n\
    \ (n)))\n                                                                    \
    \                (let ((n (n)))\n                                            \
    \                                          (let ((n (n)))\n                  \
    \                                                                      (let ((n\
    \ (n)))\n                                                                    \
    \                      (let ((n (n)))", "  (let ((result \"\"))\n    (if (zero?\
    \ number)\n      \"0\"\n    (if (< number 10)\n      (let ((digit (number % 10)))\n\
    \        (if (< digit 4)\n          (let ((sub (number / 10)))\n            (if\
    \ (< sub 3)\n              (let ((sub2 (sub / 10)))\n                (if (< sub2\
    \ 2)\n                  (let ((sub3 (sub2 / 10)))\n                    (if (<\
    \ sub3 1)\n                      (let ((sub4 (sub3 / 10)))\n                 \
    \       (if (< sub4 2)\n                          (let ((sub5 (sub4 / 10)))\n\
    \                            (if (< sub5 1)\n                              (let\
    \ ((sub6 (sub5 / 10)))\n                                (if (< sub6 2)\n     \
    \                             (let ((sub7 (sub6 / 10)))\n                    \
    \                (if (< sub7 1)\n                                      (let ((sub8\
    \ (sub7 / 10)))\n                                        (if (< sub8 2)\n    \
    \                                      (let ((sub9 (sub8 / 10)))\n           \
    \                                 (if (< sub9 1)\n                           \
    \                   (let ((sub10 (sub9 / 10)))\n                             \
    \                   (if (< sub10 2)\n                                        \
    \          (let ((sub11 (sub10 / 10)))\n                                     \
    \               (if (< sub11 1)\n                                            \
    \          (let ((sub12 (sub11 / 10)))\n                                     \
    \                   (if (< sub12 2)\n                                        \
    \                  (let ((sub13 (sub12 / 10)))\n                             \
    \                               (if (< sub13 1)\n                            \
    \                                  (let ((sub14 (sub13 / 10)))\n             \
    \                                                   (if (< sub14 2)\n        \
    \                                                          (let ((sub15 (sub14\
    \ / 10)))\n                                                                  \
    \  (if (< sub15 1)\n                                                         \
    \             (let ((sub16 (sub15 / 10)))\n                                  \
    \                                      (if (< sub16 2)\n                     \
    \                                                     (let ((sub17 (sub16 / 10)))\n\
    \                                                                            (if\
    \ (< sub17 1)\n                                                              \
    \                (let ((sub18", "  (let ((result \"\"))\n    (if (<= number 1000)\n\
    \      (let ((digit (number % 10)))\n        (if (<= digit 9)\n          (result\
    \ (append result (string-append \"x\" digit)))\n          (let ((prev (string-append\
    \ \"c\" digit)))\n            (let ((next (string-append \"d\" digit)))\n    \
    \          (let ((nextnext (string-append \"m\" digit)))\n                (let\
    \ ((nextnextnext (string-append \"v\" digit)))\n                  (let ((nextnextnextnext\
    \ (string-append \"x\" digit)))\n                    (let ((nextnextnextnextnext\
    \ (string-append \"l\" digit)))\n                      (let ((nextnextnextnextnextnext\
    \ (string-append \"x\" digit)))\n                        (result (append result\
    \ (string-append \"x\" digit)))))))))))))))\n    (result result)))\n\n;; Given\
    \ a roman numeral, obtain its integer value.\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n;; >>> (roman_to_int\
    \ \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n    (if (< number 100)\n    \
    \  (let ((n (number)))\n        (if (< n 4)\n          (let ((n (number)))\n \
    \           (if (< n 9)\n              (let ((n (number)))\n                (if\
    \ (< n 40)\n                  (let ((n (number)))\n                    (if (<\
    \ n 90)\n                      (let ((n (number)))\n                        (if\
    \ (< n 400)\n                          (let ((n (number)))\n                 \
    \           (result (string-append \"cm\" (string-append (string-append \"cd\"\
    \ (string-append \"xc\" (string-append \"xl\" (string-append \"x\" (string-append\
    \ \"ix\" (string-append \"v\" (string-append \"i\" (string-append \"m\"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (let ((result \"\"))\n    (if (< number 100)\n      (let ((digit (number % 10)))\n\
    \        (if (< digit 10)\n          (result (string-append result \"I\"))))\n\
    \        (let ((digit (number / 10)))\n          (if (< digit 10)\n          \
    \  (result (string-append result \"I\"))))\n          (let ((digit (number / 100)))\n\
    \            (if (< digit 10)\n              (result (string-append result \"\
    I\"))))\n              (let ((digit (number / 1000)))\n                (if (<\
    \ digit 10)\n                  (result (string-append result \"I\"))))\n     \
    \             (let ((digit (number / 10000)))\n                    (if (< digit\
    \ 10)\n                      (result (string-append result \"I\"))))\n       \
    \               (let ((digit (number / 100000)))\n                        (if\
    \ (< digit 10)\n                          (result (string-append result \"I\"\
    ))))\n                          (let ((digit (number / 1000000)))\n          \
    \                  (if (< digit 10)\n                              (result (string-append\
    \ result \"I\"))))\n                              (let ((digit (number / 10000000)))\n\
    \                                (if (< digit 10)\n                          \
    \        (result (string-append result \"I\"))))\n                           \
    \       (let ((digit (number / 100000000)))\n                                \
    \    (if (< digit 10)\n                                      (result (string-append\
    \ result \"I\"))))\n                                      (let ((digit (number\
    \ / 1000000000)))\n                                        (if (< digit 10)\n\
    \                                          (result (string-append result \"I\"\
    ))))\n                                        (let ((digit (number / 10000000000)))\n\
    \                                          (if (< digit 10)\n                \
    \                            (result (string-append result \"I\"))))\n       \
    \                                     (let ((digit (number / 100000000000)))\n\
    \                                              (if (< digit 10)\n            \
    \                                    (result (string-append result \"I\"))))\n\
    \                                                (let ((digit (number / 1000000000000)))\n\
    \                                                  (if (< digit 10)\n        \
    \                                            (result (string-append result \"\
    I\"))))\n                                                  (let ((digit (number\
    \ / 10000000000000)))\n                                                    (if\
    \ (< digit 10)", "  (let ((result \"\"))\n    (if (< number 100)\n      (let ((n\
    \ (number)))\n        (if (< n 1000)\n          (let ((n (number)))\n        \
    \    (if (< n 500)\n              (let ((n (number)))\n                (if (<\
    \ n 100)\n                  (let ((n (number)))\n                    (if (< n\
    \ 50)\n                      (let ((n (number)))\n                        (if\
    \ (< n 10)\n                          (let ((n (number)))\n                  \
    \          (if (< n 5)\n                              (let ((n (number)))\n  \
    \                              (if (< n 1)\n                                 \
    \ (let ((n (number)))\n                                    (result (string-append\
    \ \"i\")))))))))))))))))))))))))\n    (result (string-append \"i\" result)))\n\
    \n;; Given a roman numeral, obtain its integer value.\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"xvii\")\n;; 17\n;; >>> (roman_to_int\
    \ \"xviii\")\n;; 18\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int\
    \ \"xx\")\n;; 20\n;; >>> (roman_to_int \"xxi\")\n;; 21\n;; >>> (roman_to_int \"\
    xxii\")\n;; 22\n;; >>> (roman_to_int \"xxiii\")\n;; 23\n;; >>> (roman_to_int \"\
    xxiv\")\n;; 24\n;; >>> (roman_to_int \"xxv\")\n;; 25\n;; >>> (roman_to_int \"\
    xxvi\")\n;; 26\n;; >>> (roman_to_int \"xxvii\")\n;; 27\n;; >>> (roman_to_int \"\
    xxviii\")\n;; 28\n;; >>> (roman_to_int \"xxix\")\n;; 29\n;; >>> (roman_to_int\
    \ \"xxx\")\n;; 30\n;; >>> (roman_to_int \"xxxi\")\n;; 31\n;; >>> (roman_to_int\
    \ \"xxxii\")\n;; 32\n;; >>> (roman_to_int \"xxxiii\")\n;; 33\n;; >>> (roman_to_int\
    \ \"xxxiv\")\n;; 34\n;; >>> (roman_to_int", "  (let ((result \"\"))\n    (if (<\
    \ number 1000)\n      (let ((n (number)))\n        (if (<= n 100)\n          (let\
    \ ((n (number)))\n            (let ((n (number)))\n              (let ((n (number)))\n\
    \                (let ((n (number)))\n                  (let ((n (number)))\n\
    \                    (let ((n (number)))\n                      (let ((n (number)))\n\
    \                        (let ((n (number)))\n                          (let ((n\
    \ (number)))\n                            (let ((n (number)))\n              \
    \                (let ((n (number)))\n                                (let ((n\
    \ (number)))\n                                  (let ((n (number)))\n        \
    \                            (let ((n (number)))\n                           \
    \           (let ((n (number)))\n                                        (let\
    \ ((n (number)))\n                                          (let ((n (number)))\n\
    \                                            (let ((n (number)))\n           \
    \                                   (let ((n (number)))\n                    \
    \                            (let ((n (number)))\n                           \
    \                       (let ((n (number)))\n                                \
    \                    (let ((n (number)))\n                                   \
    \                   (let ((n (number)))\n                                    \
    \                    (let ((n (number)))\n                                   \
    \                       (let ((n (number)))\n                                \
    \                            (let ((n (number)))\n                           \
    \                                   (let ((n (number)))\n                    \
    \                                            (let ((n (number)))\n           \
    \                                                       (let ((n (number)))\n\
    \                                                                    (let ((n\
    \ (number)))\n                                                               \
    \       (let ((n (number)))\n                                                \
    \                        (let ((n (number)))\n                               \
    \                                           (let ((n (number)))\n            \
    \                                                                (let ((n (number)))\n\
    \                                                                            \
    \  (let ((n (number)))\n                                                     \
    \                           (let ((n (number)))\n                            \
    \                                                      (let ((n (number)))\n \
    \                                                                            \
    \       (let ((n (number)))\n                                                \
    \                                      (let ((n (number)))\n                 \
    \                                                                       (let ((n\
    \ (number)))\n                                                               \
    \                           (let ((n (number)))", "  (let ((result (string)))\n\
    \    (if (< number 100)\n      (let ((digit (number % 10)))\n        (if (< digit\
    \ 10)\n          (let ((sub (number / 10)))\n            (if (< sub 10)\n    \
    \          (string-append (string-append \"x\" (int_to_mini_roman sub)) result)\n\
    \              (string-append (string-append \"c\" (int_to_mini_roman sub)) result)\n\
    \              )\n            (string-append (string-append \"v\" (int_to_mini_roman\
    \ digit)) result)\n            )\n          (string-append (string-append \"i\"\
    \ (int_to_mini_roman digit)) result)\n          )\n        (string-append (string-append\
    \ \"m\" (int_to_mini_roman (number / 10))) result)\n        )\n      (string-append\
    \ (string-append \"m\" (int_to_mini_roman (number % 10))) result)\n      )\n \
    \   )\n  )\n)\n", "  (let* ([\n    sum (lambda (n) (+ (number - 1) (* 10 n)))]\n\
    \    [roman (lambda (n)\n      (let ([\n        n_ (number - 1)]\n        [result\
    \ (make-string n)])\n        (while (<= n_ n)\n          [(let ([digit (modulo\
    \ 10 n_)])\n            [(set-car! result digit)\n             (set-cdr! result\
    \ digit)])\n           (set-cdr! result 'I))\n          (set-cdr! result 'V))\n\
    \        (set-cdr! result 'X))\n      )])\n    [result (map roman number)])\n\
    \  (string-map! result #\"-\" #\"\")\n  result)\n", "  (let ((result \"\"))\n\
    \    (if (<= number 1000)\n      (let ((digit (number % 10)))\n        (if (<\
    \ digit 10)\n          (result (string-append result \"I\" digit))\n         \
    \ (let ((next_digit (number / 10)))\n            (if (< next_digit 10)\n     \
    \         (result (string-append result \"V\" next_digit))\n              (let\
    \ ((next_next_digit (number / 100)))\n                (if (< next_next_digit 10)\n\
    \                  (result (string-append result \"X\" next_next_digit))\n   \
    \               (let ((next_next_next_digit (number / 1000)))\n              \
    \      (if (< next_next_next_digit 10)\n                      (result (string-append\
    \ result \"L\" next_next_next_digit))\n                      (result (string-append\
    \ result \"C\" next_next_next_digit))))))))))))\n    (result result)))\n\n;; Given\
    \ a roman numeral, obtain its integer value.\n;; Restrictions: 1 <= num <= 1000\n\
    ;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\"\
    )\n;; 152\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (define (roman_digit\
    \ roman_numeral)\n    (if (< roman_numeral #\"i\")\n      (if (< roman_numeral\
    \ #\"v\")\n        \"i\"\n        \"v\")\n      (if (< roman_numeral #\"x\")\n\
    \        \"x\"\n        \"l\"))\n    (if (< roman_numeral #\"c\")\n      (if (<\
    \ roman_numeral #\"d\")\n        \"c\"\n        \"l\"))\n    (if (< roman_numeral\
    \ #\"m\")\n      \"m\")\n    (if (< roman_numeral #\"i\")\n      \"i\")\n    (if\
    \ (< roman_numeral #\"v\")\n      \"v\")\n    (if (< roman_numeral #\"x\")\n \
    \     \"x\")\n    (if (< roman_numeral #\"l\")\n      \"l\")\n    (if (< roman_numeral\
    \ #\"c\")\n      \"c\")\n    (if (< roman_numeral #\"d\")\n      \"d\")\n    (if\
    \ (< roman_numeral #\"m\")\n      \"m\")\n    \"?\"))\n  (define (convert_number\
    \ roman_numeral)\n    (let ((result \"\"))\n      (while (not (zero? number))\n\
    \        (let ((next_roman_numeral (roman_digit roman_numeral)))\n          (if\
    \ (not (zero? (number - (number - 1) * next_roman_numeral))))\n            (let\
    \ ((next_roman_numeral (roman_digit next_roman_numeral)))\n              (result\
    \ (string-append result (string-append \"-\" (convert_number next_roman_numeral))))\n\
    \              (number (number - 1))\n              (result (string-append result\
    \ (string-append \"-\" (convert_number roman_numeral))))\n              (number\
    \ (number - 1)))))\n      (result (string-append result (string-append \"-\" (convert_number\
    \ roman_numeral))))))\n  (convert_number (int_to_roman number)))\n", "  (let ((result\
    \ \"\"))\n    (if (< number 1000)\n      (let ((n (number)))\n        (if (<=\
    \ n 100)\n          (let ((n (n)))\n            (let ((n (n)))\n             \
    \ (let ((n (n)))\n                (let ((n (n)))\n                  (let ((n (n)))\n\
    \                    (let ((n (n)))\n                      (let ((n (n)))\n  \
    \                      (let ((n (n)))\n                          (let ((n (n)))\n\
    \                            (let ((n (n)))\n                              (let\
    \ ((n (n)))\n                                (let ((n (n)))\n                \
    \                  (let ((n (n)))\n                                    (let ((n\
    \ (n)))\n                                      (let ((n (n)))\n              \
    \                          (let ((n (n)))\n                                  \
    \        (let ((n (n)))\n                                            (let ((n\
    \ (n)))\n                                              (let ((n (n)))\n      \
    \                                          (let ((n (n)))\n                  \
    \                                (let ((n (n)))\n                            \
    \                        (let ((n (n)))\n                                    \
    \                  (let ((n (n)))\n                                          \
    \              (let ((n (n)))\n                                              \
    \            (let ((n (n)))\n                                                \
    \            (let ((n (n)))\n                                                \
    \              (let ((n (n)))\n                                              \
    \                  (let ((n (n)))\n                                          \
    \                        (let ((n (n)))\n                                    \
    \                                (let ((n (n)))\n                            \
    \                                          (let ((n (n)))\n                  \
    \                                                      (let ((n (n)))\n      \
    \                                                                    (let ((n\
    \ (n)))\n                                                                    \
    \        (let ((n (n)))\n                                                    \
    \                          (let ((n (n)))\n                                  \
    \                                              (let ((n (n)))\n              \
    \                                                                    (let ((n\
    \ (n)))\n                                                                    \
    \                (let ((n (n)))\n                                            \
    \                                          (let ((n (n)))\n                  \
    \                                                                      (let ((n\
    \ (n)))\n                                                                    \
    \                      (let ((n (n)))", "  (let* ([num (number)]\n          [result\
    \ \"\"])\n    (cond ([(< number 1000)\n            (let* ([n (number % 1000)]\n\
    \                    [i 0])\n              (if (>= n 100)\n                  (let\
    \ ([n1 (n % 100)]\n                         [i1 0])\n                    (if (>=\
    \ n 10)\n                        (let ([n2 (n1 % 10)]\n                      \
    \         [i2 0])\n                          (if (>= n 1)\n                  \
    \            (let ([n3 (n2 % 1)]\n                                     [i3 0])\n\
    \                                (if (>= n 3)\n                              \
    \        (let ([n4 (n3 % 3)]\n                                            [i4\
    \ 0])\n                                        (if (>= n 4)\n                \
    \                              (let ([n5 (n4 % 4)]\n                         \
    \                           [i5 0])\n                                        \
    \        (if (>= n 5)\n                                                      (let\
    \ ([n6 (n5 % 5)]\n                                                           \
    \ [i6 0])\n                                                        (if (>= n 6)\n\
    \                                                            (let ([n7 (n6 % 6)]\n\
    \                                                                 [i7 0])\n  \
    \                                                            (if (>= n 7)\n  \
    \                                                                  (let ([n8 (n7\
    \ % 7)]\n                                                                    \
    \     [i8 0])\n                                                              \
    \        (if (>= n 8)\n                                                      \
    \                      (let ([n9 (n8 % 8)]\n                                 \
    \                                                 [i9 0])\n                  \
    \                                                             (if (>= n 9)\n \
    \                                                                            \
    \      (let ([n10 (n9 % 9)]\n                                                \
    \                                         [i10 0])\n                         \
    \                                                              (if (>= n 10)\n\
    \                                                                            \
    \               (let ([n11 (n10 % 10)]\n                                     \
    \                                                           [i11 0])\n       \
    \                                                                            \
    \          (if (>= n 11)\n                                                   \
    \                                               (let ([n12 (n11 % 11)]\n     \
    \                                                                            \
    \                      [i12 0])\n                                            \
    \                                                         (if (>=", "  (let ((result\
    \ \"\"))\n    (let ((i number))\n      (while (< i 1000)\n        (let ((next\
    \ (modulo i 10)))\n          (if (< next 5)\n            (append result (string-append\
    \ \" \" (string-append (string-append \"I\" \"I\") (string-append \"I\" \"I\"\
    ) (string-append \"I\" \"I\"))))\n            (append result (string-append \"\
    \ \" (string-append (string-append \"I\" \"I\") (string-append \"I\" \"I\") (string-append\
    \ \"I\" \"I\"))))\n          (set! i (i - 1)))\n        (set! i (i + 1)))\n  \
    \    (return result)))\n)\n\n;; Given a roman numeral, obtain its integer value.\n\
    ;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"CDXXVI\"\
    )\n;; 426", "  (define (roman_digit roman)\n    (cond ((= roman \"I\") 1)\n  \
    \    ((= roman \"V\") 5)\n      ((= roman \"X\") 10)\n      ((= roman \"L\") 50)\n\
    \      ((= roman \"C\") 100)\n      ((= roman \"D\") 500)\n      ((= roman \"\
    M\") 1000)))\n  (define (roman_to_int roman)\n    (cond ((= roman \"I\") 1)\n\
    \      ((= roman \"V\") 5)\n      ((= roman \"X\") 10)\n      ((= roman \"L\"\
    ) 50)\n      ((= roman \"C\") 100)\n      ((= roman \"D\") 500)\n      ((= roman\
    \ \"M\") 1000)))\n  (define (convert_digit digit)\n    (cond ((= digit 1) \"I\"\
    )\n      ((= digit 2) \"II\")\n      ((= digit 3) \"III\")\n      ((= digit 4)\
    \ \"IV\")\n      ((= digit 5) \"V\")\n      ((= digit 6) \"VI\")\n      ((= digit\
    \ 7) \"VII\")\n      ((= digit 8) \"VIII\")\n      ((= digit 9) \"IX\")\n    \
    \  ((= digit 10) \"X\")\n      ((= digit 11) \"XI\")\n      ((= digit 12) \"XII\"\
    )\n      ((= digit 13) \"XIII\")\n      ((= digit 14) \"XIV\")\n      ((= digit\
    \ 15) \"XV\")\n      ((= digit 16) \"XVI\")\n      ((= digit 17) \"XVII\")\n \
    \     ((= digit 18) \"XVIII\")\n      ((= digit 19) \"XIX\")\n      ((= digit\
    \ 20) \"XX\")\n      ((= digit 21) \"XXI\")\n      ((= digit 22) \"XXII\")\n \
    \     ((= digit 23) \"XXIII\")\n      ((= digit 24) \"XXIV\")\n      ((= digit\
    \ 25) \"XXV\")\n      ((= digit 26) \"XXVI\")\n      ((= digit 27) \"XXVII\")\n\
    \      ((= digit 28) \"XXVIII\")\n      ((= digit 29) \"XXIX\")\n      ((= digit\
    \ 30)", "  (let ((result \"\"))\n    (if (< number 100)\n      (let ((n (number)))\n\
    \        (if (< n 4)\n          (let ((n (number)))\n            (let ((i 1))\n\
    \              (while (<= i n)\n                (let ((j (floor (i n) / 2)))\n\
    \                  (if (<= j i)\n                    (set! i (i - 1))\n      \
    \              (set! j (j - 1)))\n                  (set! result (concat result\
    \ (string-append (string-append \"M\" (number-to-string j)) \"C\"))))\n      \
    \          (set! i (i + 1))))\n            (set! result (concat result (string-append\
    \ \"M\" (number-to-string n)))))\n        (else\n          (let ((n (number)))\n\
    \            (let ((i 1))\n              (while (<= i n)\n                (let\
    \ ((j (floor (i n) / 5)))\n                  (if (<= j i)\n                  \
    \  (set! i (i - 1))\n                    (set! j (j - 1)))\n                 \
    \ (set! result (concat result (string-append \"D\" (number-to-string j)))))\n\
    \                (set! i (i + 1))))\n            (set! result (concat result (string-append\
    \ \"C\" (number-to-string n)))))\n        (else\n          (let ((n (number)))\n\
    \            (let ((i 1))\n              (while (<= i n)\n                (let\
    \ ((j (floor (i n) / 4)))\n                  (if (<= j i)\n                  \
    \  (set! i (i - 1))\n                    (set! j (j - 1)))\n                 \
    \ (set! result (concat result (string-append \"L\" (number-to-string j)))))\n\
    \                (set! i (i + 1))))\n            (set! result (concat result (string-append\
    \ \"X\" (number-to-string n)))))\n        (else\n          (let ((n (number)))\n\
    \            (let ((i 1))\n              (while (<= i n)\n                (let\
    \ ((j (floor (i n) / 9)))\n                  (if (<= j i)\n                  \
    \  (set! i", "  (let ((result \"\"))\n    (let ((num (number)))\n      (if (<=\
    \ num 1000)\n        (do ((i 1 (+ i 1)))\n          ((= i 3)\n           (let\
    \ ((sub (num / i)))\n             (if (<= sub 3)\n               (let ((sub2 (num\
    \ % i)))\n                 (if (<= sub2 3)\n                   (let ((sub3 (num\
    \ / i)))\n                     (if (<= sub3 3)\n                       (let ((sub4\
    \ (num % i)))\n                         (if (<= sub4 3)\n                    \
    \       (let ((sub5 (num / i)))\n                             (if (<= sub5 3)\n\
    \                               (let ((sub6 (num % i)))\n                    \
    \             (if (<= sub6 3)\n                                   (let ((sub7\
    \ (num / i)))\n                                     (if (<= sub7 3)\n        \
    \                               (let ((sub8 (num % i)))\n                    \
    \                     (if (<= sub8 3)\n                                      \
    \     (let ((sub9 (num / i)))\n                                             (if\
    \ (<= sub9 3)\n                                               (let ((sub10 (num\
    \ % i)))\n                                                 (if (<= sub10 3)\n\
    \                                                  (let ((sub11 (num / i)))\n\
    \                                                   (if (<= sub11 3)\n       \
    \                                              (let ((sub12 (num % i)))\n    \
    \                                                   (if (<= sub12 3)\n       \
    \                                                 (let ((sub13 (num / i)))\n \
    \                                                         (if (<= sub13 3)\n \
    \                                                          (let ((sub14 (num %\
    \ i)))\n                                                            (if (<= sub14\
    \ 3)\n                                                              (let ((sub15\
    \ (num / i)))\n                                                              \
    \  (if (<= sub15 3)\n                                                        \
    \          (let ((sub16 (num % i)))\n                                        \
    \                            (if (<= sub16 3)\n                              \
    \                                        (let ((sub17 (num / i)))\n          \
    \                                                              (if (<= sub17 3)\n\
    \                                                                          (",
  "  (let ((result \"\"))\n    (if (zero? number)\n      \"0\"\n    (if (< number\
    \ 10)\n      (let ((digit (modulo number 10)))\n        (if (zero? digit)\n  \
    \        \"0\"\n        (let ((sub (modulo (sub number digit) 10)))\n        \
    \  (if (< sub 4)\n            (let ((sub2 (modulo (sub sub 2) 10)))\n        \
    \      (if (zero? sub2)\n                (concat \"i\" result)\n             \
    \ (concat \"v\" result)\n              (concat \"x\" result)\n              (concat\
    \ \"l\" result)\n              (concat \"c\" result)\n              (concat \"\
    d\" result)\n              (concat \"m\" result))))\n          (let ((sub2 (modulo\
    \ (sub sub 2) 10)))\n            (if (zero? sub2)\n              (concat \"i\"\
    \ result)\n            (concat \"v\" result)\n            (concat \"x\" result)\n\
    \            (concat \"l\" result)\n            (concat \"c\" result)\n      \
    \      (concat \"d\" result)\n            (concat \"m\" result))))))))\n    (concat\
    \ result \"x\"))))\n\n;; Given a roman numeral, obtain its integer value.\n;;\
    \ Restrictions: 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n\
    ;; 19\n;; >>> (roman_to_int \"CDXXVI\")\n;; 426", "  (let ((result \"\"))\n  \
    \  (let ((n (number)))\n      (if (< n 100)\n        (let ((n (number)))\n   \
    \       (if (< n 10)\n            (let ((n (number)))\n              (if (< n\
    \ 5)\n                (let ((n (number)))\n                  (if (< n 2)\n   \
    \                 (let ((n (number)))\n                      (if (< n 1)\n   \
    \                     (result \"\")\n                        (result (string-append\
    \ \"i\" result))))\n                      (result (string-append \"v\" result))))\n\
    \                  (result (string-append \"x\" result))))\n              (result\
    \ (string-append \"l\" result))))\n        (result (string-append \"c\" result))))\n\
    \    (result)))\n\n;; Given a roman numeral, obtain its integer value.\n;; Restrictions:\
    \ 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>>\
    \ (roman_to_int \"cdxxvi\")\n;; 426", "  (let* ([n (number)])\n    (let ([result\
    \ (string)])\n      (let ([i (1)])\n        (while (< i n)\n          [(let ([j\
    \ (i - 1)])\n            (if (<= j 2)\n              (set! result (concat result\
    \ (string #\"i\"))))\n            (set! result (concat result (string #\"v\"))))\n\
    \            (set! i (i + 1))])\n          (set! result (concat result (string\
    \ #\"i\"))))\n      (return result)))\n)\n\n;; Given a roman numeral, obtain its\
    \ integer value.\n;; Restrictions: 1 <= num <= 1000\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"CDXXVI\")\n;; 426", "  (let ((result\
    \ \"\"))\n    (if (<= number 1000)\n      (let ((divisor (number % 10)))\n   \
    \     (if (<= divisor 9)\n          (let ((quotient (number / 10)))\n        \
    \    (let ((remainder (number % 10)))\n              (if (<= remainder 5)\n  \
    \              (let ((subtract (quotient * 10)))\n                  (let ((subtract\
    \ (quotient * 100)))\n                    (let ((subtract (quotient * 1000)))\n\
    \                      (let ((subtract (quotient * 10000)))\n                \
    \        (let ((subtract (quotient * 100000)))\n                          (let\
    \ ((subtract (quotient * 1000000)))\n                            (let ((subtract\
    \ (quotient * 10000000)))\n                              (let ((subtract (quotient\
    \ * 100000000)))\n                                (let ((subtract (quotient *\
    \ 1000000000)))\n                                  (let ((subtract (quotient *\
    \ 10000000000)))\n                                    (let ((subtract (quotient\
    \ * 100000000000)))\n                                      (let ((subtract (quotient\
    \ * 1000000000000)))\n                                        (let ((subtract\
    \ (quotient * 10000000000000)))\n                                          (let\
    \ ((subtract (quotient * 100000000000000)))\n                                \
    \            (let ((subtract (quotient * 1000000000000000)))\n               \
    \                               (let ((subtract (quotient * 10000000000000000)))\n\
    \                                                (let ((subtract (quotient * 100000000000000000)))\n\
    \                                                  (let ((subtract (quotient *\
    \ 1000000000000000000)))\n                                                   \
    \ (let ((subtract (quotient * 10000000000000000000)))\n                      \
    \                                (let ((subtract (quotient * 10000000000000000000)))\n\
    \                                                        (let ((subtract (quotient\
    \ * 100000000000000000000)))\n                                               \
    \           (let ((subtract (quotient * 1000000000000000000000)))\n          \
    \                                                  (let ((subtract (quotient *\
    \ 10000000000000000000000)))", "  (let ((result \"\"))\n    (let ((digit (number\
    \ % 10)))\n      (if (zero? digit)\n        (result (string-append result \"x\"\
    ))))\n      (let ((sub (number / 10)))\n        (if (zero? sub)\n          (result\
    \ (string-append result \"x\"))))\n        (let ((sub (number / 100)))\n     \
    \     (if (zero? sub)\n            (result (string-append result \"c\"))))\n \
    \           (let ((sub (number / 1000)))\n              (if (zero? sub)\n    \
    \            (result (string-append result \"m\"))))\n                (let ((sub\
    \ (number / 10000)))\n                  (if (zero? sub)\n                    (result\
    \ (string-append result \"d\"))))\n                    (let ((sub (number / 100000)))\n\
    \                      (if (zero? sub)\n                        (result (string-append\
    \ result \"c\"))))\n                        (let ((sub (number / 1000000)))\n\
    \                          (if (zero? sub)\n                            (result\
    \ (string-append result \"m\"))))\n                            (let ((sub (number\
    \ / 10000000)))\n                              (if (zero? sub)\n             \
    \                   (result (string-append result \"m\"))))\n                \
    \                (let ((sub (number / 100000000)))\n                         \
    \         (if (zero? sub)\n                                    (result (string-append\
    \ result \"m\"))))\n                                  (let ((sub (number / 1000000000)))\n\
    \                                    (if (zero? sub)\n                       \
    \               (result (string-append result \"m\"))))\n                    \
    \                (let ((sub (number / 10000000000)))\n                       \
    \               (if (zero? sub)\n                                        (result\
    \ (string-append result \"m\"))))\n                                      (let\
    \ ((sub (number / 100000000000)))\n                                        (if\
    \ (zero? sub)\n                                          (result (string-append\
    \ result \"m\"))))\n                                        (let ((sub (number\
    \ / 1000000000000)))\n                                          (if (zero? sub)\n\
    \                                            (result (string-append result \"\
    m\"))))\n                                          (let ((sub (number / 10000000000000)))\n\
    \                                            (if (zero? sub)\n               \
    \                  ", "  (let* ([num (number)])\n    (if (<= num 1000)\n     \
    \ (let* ([n (num)])\n        (let* ([n1 (n / 10)])\n          (let* ([n2 (n %\
    \ 10)])\n            (if (< n2 4)\n              (let* ([n3 (n2 / 2)])\n     \
    \           (let* ([n4 (n2 % 2)])\n                  (if (< n4 0)\n          \
    \          (let* ([n5 (n3 / 3)])\n                      (let* ([n6 (n3 % 3)])\n\
    \                        (if (< n6 0)\n                          (let* ([n7 (n4\
    \ / 4)])\n                            (let* ([n8 (n4 % 4)])\n                \
    \              (if (< n8 0)\n                                (let* ([n9 (n5 /\
    \ 5)])\n                                  (let* ([n10 (n5 % 5)])\n           \
    \                         (if (< n10 0)\n                                    \
    \  (let* ([n11 (n6 / 6)])\n                                        (let* ([n12\
    \ (n6 % 6)])\n                                          (if (< n12 0)\n      \
    \                                      (let* ([n13 (n7 / 7)])\n              \
    \                                (let* ([n14 (n7 % 7)])\n                    \
    \                            (if (< n14 0)\n                                 \
    \                 (let* ([n15 (n8 / 8)])\n                                   \
    \                 (let* ([n16 (n8 % 8)])\n                                   \
    \                   (if (< n16 0)\n                                          \
    \              (let* ([n17 (n9 / 9)])\n                                      \
    \                    (let* ([n18 (n9 % 9)])\n                                \
    \                           (if (< n18 0)\n                                  \
    \                            (let* ([n19 (n10 / 10)])\n                      \
    \                                          (let* ([n20 (n10 % 10)])\n        \
    \                                                          (if (< n20 0)\n   \
    \                                                                   (let* ([n21\
    \ (n11 / 11)])\n                                                             \
    \           (let* ([n22 (", "  (let ((result \"\"))\n    (if (< number 1000)\n\
    \      (let ((n (number)))\n        (if (<= n 100)\n          (let ((d (n / 100)))\n\
    \            (let ((m (n % 100)))\n              (if (<= m 9)\n              \
    \  (result (concat \"cm\" result))\n                (let ((c (m / 10)))\n    \
    \              (let ((x (m % 10)))\n                    (if (<= x 5)\n       \
    \               (result (concat \"x\" result))\n                      (let ((y\
    \ (d / 10)))\n                        (let ((z (d % 10)))\n                  \
    \        (if (<= z 2)\n                            (result (concat \"cd\" result))\n\
    \                            (let ((a (c / 100)))\n                          \
    \    (let ((b (c % 100)))\n                                (if (<= b 5)\n    \
    \                              (result (concat \"d\" result))\n              \
    \                    (let ((h (b / 10)))\n                                   \
    \ (let ((i (b % 10)))\n                                      (if (<= i 2)\n  \
    \                                      (result (concat \"c\" result))\n      \
    \                                  (let ((j (a / 100)))\n                    \
    \                      (let ((k (a % 100)))\n                                \
    \            (if (<= k 2)\n                                              (result\
    \ (concat \"c\" result))\n                                              (let ((l\
    \ (j / 10)))\n                                                (let ((m (j % 10)))\n\
    \                                                  (if (<= m 2)\n            \
    \                                       (result (concat \"x\" result))\n     \
    \                                              (let ((n (k / 100)))\n        \
    \                                             (let ((o (k % 100)))\n         \
    \                                              (if (<= o 2)\n                \
    \                                         (result (concat \"l\" result))\n   \
    \                                                     (result (concat \"x\" result))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (let ((result \"\"))\n    (let ((i number))\n      (while (< i 1000)\n      \
    \  (let ((next (modulo i 10)))\n          (if (< next 5)\n            (append\
    \ result (string-append \"v\" (string-append \"i\" (string-append \"x\" (string-append\
    \ \"c\" (string-append \"l\" (string-append \"d\" (string-append \"m\"))))))))\n\
    \          (append result (string-append \"x\" (string-append \"i\" (string-append\
    \ \"x\" (string-append \"x\" (string-append \"v\" (string-append \"i\" (string-append\
    \ \"x\" (string-append \"c\" (string-append \"l\" (string-append \"d\" (string-append\
    \ \"m\"))))))))))))\n        (i (modulo i 10)))\n      (result)))\n  )\n)\n\n\
    ;; Given a roman numeral, obtain its integer value.\n;; Restrictions: 1 <= num\
    \ <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int\
    \ \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n    (let ((i number))\n     \
    \ (while (< i 1000)\n        (let ((digit (modulo (/ i 10)))\n              (num\
    \ (if (< digit 2) \"cm\" \"cd\" \"d\" \"m\" \"v\" \"x\" \"l\" \"c\")))\n     \
    \     (set! result (concat result (num))))\n        (set! i (quotient (/ i 10)))\n\
    \      )\n    )\n    (reverse result)\n  )\n)\n\n;; Given a roman numeral, obtain\
    \ its integer value.\n;; Return 0 if the input is not a valid roman numeral.\n\
    ;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"xlix\"\
    )\n;; 19\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426\n;; >>> (roman_to_int \"mcdxxvi\"\
    )\n;; 0\n;; >>> (roman_to_int \"\")\n;; 0", "  (let ((result \"\"))\n    (if (<\
    \ number 1000)\n      (let ((n (number)))\n        (if (<= n 100)\n          (let\
    \ ((n (n)))\n            (if (<= n 9)\n              (result \"x\" (result \"\
    v\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"\
    i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"\
    x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"\
    i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"\
    x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"\
    i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"\
    x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"\
    i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"\
    x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"\
    i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"\
    x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"\
    i\" \"x\" \"i\" \"x\" \"i\" \"x\" \"i\" \"x", "  (let ((result \"\"))\n    (let\
    \ ((digit (number % 10)))\n      (if (< digit 10)\n        (let ((sub (number\
    \ / 10)))\n          (if (< sub 10)\n            (let ((subsub (sub / 10)))\n\
    \              (if (< subsub 10)\n                (let ((subsubsub (subsub / 10)))\n\
    \                  (if (< subsubsub 10)\n                    (let ((subsubsubsub\
    \ (subsubsub / 10)))\n                      (if (< subsubsubsub 10)\n        \
    \                (let ((subsubsubsubsub (subsubsubsub / 10)))\n              \
    \            (if (< subsubsubsubsub 10)\n                            (let ((subsubsubsubsubsub\
    \ (subsubsubsubsub / 10)))\n                              (if (< subsubsubsubsubsub\
    \ 10)\n                                (let ((subsubsubsubsubsubsub (subsubsubsubsubsub\
    \ / 10)))\n                                  (if (< subsubsubsubsubsubsub 10)\n\
    \                                    (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub\
    \ / 10)))\n                                      (if (< subsubsubsubsubsubsubsub\
    \ 10)\n                                        (let ((subsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsub / 10)))\n                                        \
    \  (if (< subsubsubsubsubsubsubsubsub 10)\n                                  \
    \          (let ((subsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                              (if (< subsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsub / 10)))\n                                  \
    \                (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n              \
    \                                      (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                       (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n       \
    \                                                 (let ((subsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))", "  (let* ([num (number)]\n    \
    \      [result \"\"])\n    (if (<= num 1000)\n      (let* ([n (num % 1000)]\n\
    \              [m (num // 1000)])\n        (if (<= n 100)\n          (let* ([n\
    \ (n % 100)]\n                  [m (n // 100)])\n            (if (<= n 10)\n \
    \             (let* ([n (n % 10)]\n                      [m (n // 10)])\n    \
    \            (if (<= n 1)\n                  (let* ([n (n % 1)]\n            \
    \              [m (n // 1)])\n                    (if (<= m 1)\n             \
    \         (let* ([m (m % 1)]\n                              [result (concat \"\
    \")])\n                        (if (<= m 1)\n                          (let* ([m\
    \ (m % 1)]\n                                 [result (concat \"\")])\n       \
    \                     (if (<= m 1)\n                              (let* ([m (m\
    \ % 1)]\n                                     [result (concat \"\")])\n      \
    \                          (if (<= m 1)\n                                  (let*\
    \ ([m (m % 1)]\n                                         [result (concat \"\"\
    )])\n                                  (if (<= m 1)\n                        \
    \            (let* ([m (m % 1)]\n                                           [result\
    \ (concat \"\")])\n                                      (if (<= m 1)\n      \
    \                                  (let* ([m (m % 1)]\n                      \
    \                         [result (concat \"\")])\n                          \
    \                (if (<= m 1)\n                                            (let*\
    \ ([m (m % 1)]\n                                                  [result (concat\
    \ \"\")])\n                                              (if (<= m 1)\n      \
    \                                          (let* ([m (m % 1)]\n              \
    \                                         [result (concat \"\")])\n          \
    \                                        (if (<= m 1)\n                      \
    \                             (let* ([m (m % 1)]\n                           \
    \                              [result (concat \"\")])\n                     \
    \                                (if (<= m 1)\n                              \
    \                          (let* ([m (m % 1)]\n", "  (let* ([num (number)]\n \
    \         [result \"\"])\n    (if (<= num 1000)\n      (let* ([n (num / 100)]\n\
    \              [m (num % 100)]\n              [i (n / 10)]\n              [j (n\
    \ % 10)])\n        (if (<= i 10)\n          (let* ([k (i / 10)]\n            \
    \      [l (i % 10)])\n            (if (<= l 10)\n              (let* ([x (l /\
    \ 10)]\n                      [y (l % 10)])\n                (if (<= y 10)\n \
    \                 (let* ([z (y / 10)]\n                          [a (y % 10)])\n\
    \                    (if (<= a 10)\n                      (let* ([b (a / 10)]\n\
    \                              [c (a % 10)])\n                        (if (<=\
    \ c 10)\n                          (let* ([d (c / 10)]\n                     \
    \             [e (c % 10)])\n                            (if (<= e 10)\n     \
    \                         (let* ([f (e / 10)]\n                              \
    \        [g (e % 10)])\n                                (if (<= g 10)\n      \
    \                            (let* ([h (g / 10)]\n                           \
    \               [i (g % 10)])\n                                    (if (<= i 10)\n\
    \                                      (let* ([j (i / 10)]\n                 \
    \                             [k (i % 10)])\n                                \
    \        (if (<= k 10)\n                                          (let* ([l (k\
    \ / 10)]\n                                                  [m (k % 10)])\n  \
    \                                          (if (<= m 10)\n                   \
    \                           (let* ([n (m / 10)]\n                            \
    \                         [o (m % 10)])\n                                    \
    \            (if (<= o 10)\n                                                 \
    \ (let* ([p (o / 10)]\n                                                      \
    \   [q (o % 10)])\n                                                    (if (<=\
    \ q 10)\n                                                      (let* ([r (q /\
    \ 10)]\n                                                              [s (q %\
    \ 10)])\n                                                        (if (<", "  (define\
    \ (roman_digit n)\n    (cond ((number < 10) (number))\n      ((number % 10) (number))\n\
    \      (else (roman_digit (number / 10)))))\n  (let ((result \"\"))\n    (while\
    \ (< number 1000)\n      (let ((n (number - 1)))\n        (let ((d (roman_digit\
    \ n)))\n          (if (< d 4)\n            (append result (string-append d \"\
    -\"))\n          (else\n            (append result (string-append d \"x\"))\n\
    \            (append result (string-append d \"-\"))))\n        (number = n)))\n\
    \    (reverse result)))\n)\n\n;; Given a roman numeral, obtain its integer value.\n\
    ;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\"\
    )\n;; 152\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n\
    \    (let ((i number))\n      (while (< i 1000)\n        (let ((next (modulo i\
    \ 10)))\n          (if (< next 5)\n            (append result \"v\" (modulo i\
    \ 5))\n            (append result \"x\" (modulo i 4)))\n          (append result\
    \ \"m\" (modulo i 3))\n          (append result \"c\" (modulo i 2))\n        \
    \  (append result \"l\" (modulo i 1))\n          (set! i (i - 1)))\n        (set!\
    \ i (i + 1)))\n      (reverse result)))\n  (string result)))\n\n;; Given a roman\
    \ numeral, obtain its integer value.\n;; Examples:\n;; >>> (roman_to_int \"xix\"\
    )\n;; 19\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n\
    \    (let ((n (number)))\n      (if (< n 1)\n        (error \"Invalid number\"\
    )\n      (let ((i 0))\n        (while (< i n)\n          (let ((digit (modulo\
    \ (/ n i))))\n            (if (< digit 10)\n              (append result (string-append\
    \ \"x\" digit))\n              (append result (string-append \"c\" digit))\n \
    \           (set! i (+ i 1))))))\n      (return (string-lowercase result))))\n\
    )\n\n;; Given a roman numeral, obtain its integer value.\n;; Restrictions: 1 <=\
    \ num <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int\
    \ \"clii\")\n;; 152\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result\
    \ \"\"))\n    (if (< number 100)\n      (let ((n (number)))\n        (if (< n\
    \ 10)\n          (result \"x\" (int_to_mini_roman (n - 1)))\n          (result\
    \ \"c\" (int_to_mini_roman (n - 2)))\n          (result \"cd\" (int_to_mini_roman\
    \ (n - 3)))\n          (result \"d\" (int_to_mini_roman (n - 4)))\n          (result\
    \ \"m\" (int_to_mini_roman (n - 5)))\n          (result \"mc\" (int_to_mini_roman\
    \ (n - 6)))\n          (result \"mcd\" (int_to_mini_roman (n - 7)))\n        \
    \  (result \"mcdx\" (int_to_mini_roman (n - 8)))\n          (result \"mcdxx\"\
    \ (int_to_mini_roman (n - 9)))\n          (result \"mcdxxx\" (int_to_mini_roman\
    \ (n - 10))))\n        (result \"cm\" (int_to_mini_roman (n - 9)))\n        (result\
    \ \"cdm\" (int_to_mini_roman (n - 8)))\n        (result \"cdx\" (int_to_mini_roman\
    \ (n - 7)))\n        (result \"cdxx\" (int_to_mini_roman (n - 6)))\n        (result\
    \ \"cdxxx\" (int_to_mini_roman (n - 5)))\n        (result \"cdxxxx\" (int_to_mini_roman\
    \ (n - 4)))\n        (result \"cdxxxxx\" (int_to_mini_roman (n - 3)))\n      \
    \  (result \"cdxxxxxx\" (int_to_mini_roman (n - 2)))\n        (result \"cdxxxxxxx\"\
    \ (int_to_mini_roman (n - 1))))\n      (result \"m\" (int_to_mini_roman (n - 5))))\n\
    \    (result \"x\" (int_to_mini_roman (number - 10))))\n)\n", "  (let ((result\
    \ \"\"))\n    (let ((digit (number % 10)))\n      (if (< digit 10)\n        (let\
    \ ((subresult (int_to_mini_roman (number / 10))))\n          (result (concat subresult\
    \ digit))))\n      (let ((subresult (int_to_mini_roman (number / 100))))\n   \
    \     (result (concat subresult (digit / 10))))\n      (let ((subresult (int_to_mini_roman\
    \ (number / 1000))))\n        (result (concat subresult (digit / 100))))\n   \
    \   (result (concat subresult (digit % 10))))))\n\n;; Given a roman numeral, obtain\
    \ its integer value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n;; >>>\
    \ (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"CDXXVI\")\n;; 426", " \
    \ (let ((result \"\"))\n    (let ((num (number)))\n      (if (<= num 1000)\n \
    \       (let ((n (num % 1000)))\n          (if (<= n 100)\n            (let ((d\
    \ (n / 100)))\n              (if (<= d 9)\n                (result (string-append\
    \ result \"c\" d))\n              )\n              (let ((d (n / 100)))\n    \
    \            (if (<= d 9)\n                  (result (string-append result \"\
    xc\" d))\n                )\n              )\n            )\n          )\n   \
    \       (let ((n (num / 100)))\n            (if (<= n 9)\n              (result\
    \ (string-append result \"x\" n))\n            )\n          )\n        )\n   \
    \   )\n    )\n    result\n  )\n)\n\n;; Given a roman numeral, obtain its integer\
    \ value.\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int\
    \ \"cdxxvi\")\n;; 426", "  (let* ([n (number)])\n    (if (<= n 1)\n      \"x\"\
    \n      (let* ([n1 (n - 1)])\n        (let* ([n2 (n - 2)])\n          (let* ([n3\
    \ (n - 3)])\n            (let* ([n4 (n - 4)])\n              (let* ([n5 (n - 5)])\n\
    \                (let* ([n6 (n - 6)])\n                  (let* ([n7 (n - 7)])\n\
    \                    (let* ([n8 (n - 8)])\n                      (let* ([n9 (n\
    \ - 9)])\n                        (let* ([n10 (n - 10)])\n                   \
    \       (let* ([n11 (n - 11)])\n                            (let* ([n12 (n - 12)])\n\
    \                              (let* ([n13 (n - 13)])\n                      \
    \          (let* ([n14 (n - 14)])\n                                  (let* ([n15\
    \ (n - 15)])\n                                    (let* ([n16 (n - 16)])\n   \
    \                                   (let* ([n17 (n - 17)])\n                 \
    \                       (let* ([n18 (n - 18)])\n                             \
    \             (let* ([n19 (n - 19)])\n                                       \
    \     (let* ([n20 (n - 20)])\n                                              (let*\
    \ ([n21 (n - 21)])\n                                                (let* ([n22\
    \ (n - 22)])\n                                                  (let* ([n23 (n\
    \ - 23)])\n                                                    (let* ([n24 (n\
    \ - 24)])\n                                                      (let* ([n25 (n\
    \ - 25)])\n                                                        (let* ([n26\
    \ (n - 26)])\n                                                          (let*\
    \ ([n27 (n - 27)])\n                                                         \
    \   (let* ([n28 (n - 28)])\n                                                 \
    \             (let* ([n29 (n - 29)])\n                                       \
    \                         (let* ([n30 (n - 30)])\n                           \
    \                                       (", "  (let ((result \"\"))\n    (let\
    \ ((i number))\n      (while (< i 1000)\n        (let ((num (modulo i 10)))\n\
    \          (if (<= num 5)\n            (append result \"v\" num)\n           \
    \ (append result \"x\" num)\n            (append result \"c\" num)\n         \
    \   (append result \"l\" num)\n            (append result \"d\" num)\n       \
    \     (append result \"x\" num))\n          (set! i (i - 1)))\n        (set! i\
    \ (i + 1)))\n      (return result)))\n)\n\n;; Given a roman numeral, obtain its\
    \ integer equivalent.\n;; Return -1 if the input is not a valid roman numeral.\n\
    ;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"xlix\"\
    )\n;; 19\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426\n;; >>> (roman_to_int \"cdxxvix\"\
    )\n;; -1", "  (let ((result \"\"))\n    (let ((n (number)))\n      (if (<= n 1000)\n\
    \        (let ((i 0))\n          (while (<= i n)\n            (let ((digit (modulo\
    \ (/ n (dec n))))\n                  (if (zero? digit)\n                    (append\
    \ result \"v\")\n                    (append result \"i\")))\n              (set!\
    \ i (add 1 n)))\n            (set! i (add 1 n)))\n          (append result \"\
    m\"))\n        (else\n          (let ((i 0))\n            (while (<= i n)\n  \
    \            (let ((digit (modulo (/ n (dec n))))\n                    (if (zero?\
    \ digit)\n                      (append result \"v\")\n                      (append\
    \ result \"i\")))\n                (set! i (add 1 n)))\n              (set! i\
    \ (add 1 n)))\n            (append result \"m\"))))\n    (reverse result)))\n\n\
    ;; Given a roman numeral, obtain its integer value.\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n;; >>> (roman_to_int\
    \ \"cdxxvi\")\n;; 426", "  (let* ([n (number)]\n          [result (make-string\
    \ number)])\n    (let ([i 0])\n      (while (<= i n)\n        [(set! i (i + 1))\n\
    \         (let ([d (div n (i))])\n           (if (< d 2)\n             (set! result\
    \ (concat result (string-append \"i\"))))\n           (if (< d 4)\n          \
    \   (set! result (concat result (string-append \"v\"))))\n           (if (< d\
    \ 5)\n             (set! result (concat result (string-append \"x\"))))\n    \
    \       (if (< d 9)\n             (set! result (concat result (string-append \"\
    c\"))))\n           (if (< d 10)\n             (set! result (concat result (string-append\
    \ \"l\"))))\n           (if (< d 50)\n             (set! result (concat result\
    \ (string-append \"d\"))))\n           (if (< d 100)\n             (set! result\
    \ (concat result (string-append \"c\"))))\n           (if (< d 500)\n        \
    \     (set! result (concat result (string-append \"m\"))))\n           (if (<\
    \ d 1000)\n             (set! result (concat result (string-append \"x\"))))\n\
    \           (set! result (concat result (string-append \"i\"))))\n        ])\n\
    \      )\n    )\n    result\n  )\n)\n", "  (let ((result \"\"))\n    (let ((digit\
    \ (number % 10)))\n      (if (zero? digit)\n        (result (string-append result\
    \ \"x\"))))\n      (let ((divisor (number / 10)))\n        (if (zero? divisor)\n\
    \          (result (string-append result \"x\"))))\n        (let ((remainder (number\
    \ / 100)))\n          (if (zero? remainder)\n            (result (string-append\
    \ result \"c\"))))\n            (let ((quotient (number / 1000)))\n          \
    \    (if (zero? quotient)\n                (result (string-append result \"c\"\
    ))))\n                (let ((quotient (number / 10000)))\n                  (if\
    \ (zero? quotient)\n                    (result (string-append result \"d\"))))\n\
    \                    (let ((quotient (number / 100000)))\n                   \
    \   (if (zero? quotient)\n                        (result (string-append result\
    \ \"c\"))))\n                        (let ((quotient (number / 1000000)))\n  \
    \                        (if (zero? quotient)\n                            (result\
    \ (string-append result \"m\"))))))))))\n\n;; Given a roman numeral, obtain its\
    \ integer value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"xvii\")\n;; 27\n;; >>> (roman_to_int\
    \ \"xviii\")\n;; 28\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result\
    \ \"\"))\n    (let ((digit (number % 10)))\n      (if (< digit 10)\n        (let\
    \ ((sub (number / 10)))\n          (if (< sub 10)\n            (let ((subsub (sub\
    \ / 10)))\n              (if (< subsub 10)\n                (let ((subsubsub (subsub\
    \ / 10)))\n                  (if (< subsubsub 10)\n                    (let ((subsubsubsub\
    \ (subsubsub / 10)))\n                      (if (< subsubsubsub 10)\n        \
    \                (let ((subsubsubsubsub (subsubsubsub / 10)))\n              \
    \            (if (< subsubsubsubsub 10)\n                            (let ((subsubsubsubsubsub\
    \ (subsubsubsubsub / 10)))\n                              (if (< subsubsubsubsubsub\
    \ 10)\n                                (let ((subsubsubsubsubsubsub (subsubsubsubsubsub\
    \ / 10)))\n                                  (if (< subsubsubsubsubsubsub 10)\n\
    \                                    (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub\
    \ / 10)))\n                                      (if (< subsubsubsubsubsubsubsub\
    \ 10)\n                                        (let ((subsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsub / 10)))\n                                        \
    \  (if (< subsubsubsubsubsubsubsubsub 10)\n                                  \
    \          (let ((subsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                              (if (< subsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsub / 10)))\n                                  \
    \                (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n              \
    \                                      (let ((subsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                       (if (< subsubsubsubsubsubsubsubsubsubsubsub 10)\n    \
    \                                                    (let ((subsubsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub", "  (let* ([num (number)])\n    (if (<=\
    \ num 1000)\n      (let* ([n (num)])\n        (let* ([r (string)])\n         \
    \ (let* ([i (0)])\n            (while (<= n i)\n              (let* ([d (n - i)])\n\
    \                (if (< d 1)\n                  (r (concat r \"i\"))\n       \
    \           (r (concat r \"v\" (if (< d 4) \"i\" \"\")))\n                  (r\
    \ (concat r \"x\" (if (< d 9) \"v\" \"\")))\n                  (r (concat r \"\
    l\" (if (< d 16) \"x\" \"\")))\n                  (r (concat r \"c\" (if (< d\
    \ 25) \"l\" \"\")))\n                  (r (concat r \"d\" (if (< d 36) \"c\" \"\
    \")))\n                  (r (concat r \"m\" (if (< d 49) \"d\" \"\")))\n     \
    \             (r (concat r \"x\" (if (< d 64) \"m\" \"\")))\n                \
    \  (r (concat r \"y\" (if (< d 81) \"x\" \"\"))))\n                (set! i (+\
    \ i 1)))))\n          (return r)))\n      (return \"error\")))))\n\n;; Given a\
    \ roman numeral, obtain its integer value.\n;; Return -1 if the input is not a\
    \ valid roman numeral.\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;;\
    \ >>> (roman_to_int \"xlix\")\n;; 20\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426\n\
    ;; >>> (roman_to_int \"xlix\")\n;; -1", "  (let* ([num (number)]\n          [result\
    \ (make-string number)])\n    (let ([i 0])\n      (while (<= i num)\n        [(set!\
    \ i (i + 1))\n         (let ([n (num - i)])\n           (if (<= n 3)\n       \
    \      (let ([n (num - i)])\n               (if (<= n 2)\n                 (let\
    \ ([n (num - i)])\n                   (if (<= n 1)\n                     (let\
    \ ([n (num - i)])\n                       (if (<= n 0)\n                     \
    \    (let ([n (num - i)])\n                           (if (<= n -1)\n        \
    \                     (let ([n (num - i)])\n                               (if\
    \ (<= n -2)\n                                 (let ([n (num - i)])\n         \
    \                          (if (<= n -3)\n                                   \
    \  (let ([n (num - i)])\n                                       (if (<= n -4)\n\
    \                                         (let ([n (num - i)])\n             \
    \                              (if (<= n -5)\n                               \
    \              (let ([n (num - i)])\n                                        \
    \       (if (<= n -6)\n                                                 (let ([n\
    \ (num - i)])\n                                                  (if (<= n -7)\n\
    \                                                    (let ([n (num - i)])\n  \
    \                                                    (if (<= n -8)\n         \
    \                                               (let ([n (num - i)])\n       \
    \                                                   (if (<= n -9)\n          \
    \                                                  (let ([n (num - i)])\n    \
    \                                                          (if (<= n -10)\n  \
    \                                                              (let ([n (num -\
    \ i)])\n                                                                  (if\
    \ (<= n -11)\n                                                               \
    \      (let ([n (num - i)])\n                                                \
    \                      (if (<= n -12)\n                                      \
    \                                  (let ([n (num - i)])\n                    \
    \                                                      (if (<= n -13)\n      \
    \                                                                      (let ([n\
    \ (num -", "  (let ((result \"\"))\n    (if (zero? number)\n      (return result)\n\
    \      (let ((digit (modulo number 10)))\n        (if (zero? digit)\n        \
    \  (return result)\n          (let ((sub (modulo (sub number digit) 10)))\n  \
    \          (if (zero? sub)\n              (return result)\n              (let\
    \ ((sub2 (modulo (sub sub 2) 10)))\n                (if (zero? sub2)\n       \
    \           (return result)\n                  (let ((sub3 (modulo (sub sub3 3)\
    \ 10)))\n                    (if (zero? sub3)\n                      (return result)\n\
    \                      (let ((sub4 (modulo (sub sub4 4) 10)))\n              \
    \          (if (zero? sub4)\n                          (return result)\n     \
    \                     (let ((sub5 (modulo (sub sub5 5) 10)))\n               \
    \             (if (zero? sub5)\n                              (return result)\n\
    \                              (let ((sub6 (modulo (sub sub6 6) 10)))\n      \
    \                          (if (zero? sub6)\n                                \
    \  (return result)\n                                  (let ((sub7 (modulo (sub\
    \ sub7 7) 10)))\n                                    (if (zero? sub7)\n      \
    \                                (return result)\n                           \
    \           (let ((sub8 (modulo (sub sub8 8) 10)))\n                         \
    \               (if (zero? sub8)\n                                          (return\
    \ result)\n                                          (let ((sub9 (modulo (sub\
    \ sub9 9) 10)))\n                                            (if (zero? sub9)\n\
    \                                              (return result)\n             \
    \                                 (let ((sub10 (modulo (sub sub10 10) 10)))\n\
    \                                                (if (zero? sub10)\n         \
    \                                         (return result)\n                  \
    \                                (let ((sub11 (modulo (sub sub11 11) 10)))\n \
    \                                                   (if (zero? sub11)\n      \
    \                                                (return result)\n           \
    \                                           (let ((sub12 (modulo (sub sub12 12)\
    \ 10)))\n                                                        (if (zero? sub12)\n\
    \                                ", "  (let ((result \"\"))\n    (let ((digit\
    \ (number % 10)))\n      (if (< digit 10)\n        (let ((sub (number / 10)))\n\
    \          (if (< sub 10)\n            (let ((subsub (sub / 10)))\n          \
    \    (if (< subsub 10)\n                (let ((subsubsub (subsub / 10)))\n   \
    \               (if (< subsubsub 10)\n                    (let ((subsubsubsub\
    \ (subsubsub / 10)))\n                      (if (< subsubsubsub 10)\n        \
    \                (let ((subsubsubsubsub (subsubsubsub / 10)))\n              \
    \            (if (< subsubsubsubsub 10)\n                            (let ((subsubsubsubsubsub\
    \ (subsubsubsubsub / 10)))\n                              (if (< subsubsubsubsubsub\
    \ 10)\n                                (let ((subsubsubsubsubsubsub (subsubsubsubsubsub\
    \ / 10)))\n                                  (if (< subsubsubsubsubsubsub 10)\n\
    \                                    (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub\
    \ / 10)))\n                                      (if (< subsubsubsubsubsubsubsub\
    \ 10)\n                                        (let ((subsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsub / 10)))\n                                        \
    \  (if (< subsubsubsubsubsubsubsubsub 10)\n                                  \
    \          (let ((subsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                              (if (< subsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsub / 10)))\n                                  \
    \                (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n              \
    \                                      (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                       (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n       \
    \                                                 (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n", "  (define (roman_digit n)\n\
    \    (cond\n      ((= n 1) \"I\")\n      ((= n 2) \"II\")\n      ((= n 3) \"III\"\
    )\n      ((= n 4) \"IV\")\n      ((= n 5) \"V\")\n      ((= n 6) \"VI\")\n   \
    \   ((= n 7) \"VII\")\n      ((= n 8) \"VIII\")\n      ((= n 9) \"IX\")\n    \
    \  ((= n 10) \"X\")\n      ((= n 11) \"XI\")\n      ((= n 12) \"XII\")\n     \
    \ ((= n 13) \"XIII\")\n      ((= n 14) \"XIV\")\n      ((= n 15) \"XV\")\n   \
    \   ((= n 16) \"XVI\")\n      ((= n 17) \"XVII\")\n      ((= n 18) \"XVIII\")\n\
    \      ((= n 19) \"XIX\")\n      ((= n 20) \"XX\")\n      ((= n 30) \"XXX\")\n\
    \      ((= n 40) \"XL\")\n      ((= n 50) \"L\")\n      ((= n 60) \"LX\")\n  \
    \    ((= n 70) \"LXX\")\n      ((= n 80) \"LXXX\")\n      ((= n 90) \"XC\")\n\
    \      ((= n 100) \"C\")\n      ((= n 200) \"CC\")\n      ((= n 300) \"CCC\")\n\
    \      ((= n 400) \"CD\")\n      ((= n 500) \"D\")\n      ((= n 600) \"DC\")\n\
    \      ((= n 700) \"DCC\")\n      ((= n 800) \"DCCC\")\n      ((= n 900) \"CM\"\
    )\n      ((= n 1000) \"M\")\n      (else \"?\")))\n  (string-append\n    (map\
    \ roman_digit number)\n    \"\")\n  )\n)\n", "  (let ((result \"\"))\n    (let\
    \ ((digit (number % 10)))\n      (if (< digit 10)\n        (let ((sub (number\
    \ / 10)))\n          (let ((sub_digit (sub % 10)))\n            (if (< sub_digit\
    \ 10)\n              (let ((sub_sub (sub / 10)))\n                (let ((sub_sub_digit\
    \ (sub_sub % 10)))\n                  (if (< sub_sub_digit 10)\n             \
    \       (let ((sub_sub_sub (sub_sub / 10)))\n                      (let ((sub_sub_sub_digit\
    \ (sub_sub_sub % 10)))\n                        (if (< sub_sub_sub_digit 10)\n\
    \                          (let ((sub_sub_sub_sub (sub_sub_sub / 10)))\n     \
    \                       (let ((sub_sub_sub_sub_digit (sub_sub_sub_sub % 10)))\n\
    \                              (if (< sub_sub_sub_sub_digit 10)\n            \
    \                    (let ((sub_sub_sub_sub_sub (sub_sub_sub_sub / 10)))\n   \
    \                               (let ((sub_sub_sub_sub_sub_digit (sub_sub_sub_sub_sub\
    \ % 10)))\n                                    (if (< sub_sub_sub_sub_sub_digit\
    \ 10)\n                                      (let ((sub_sub_sub_sub_sub_sub (sub_sub_sub_sub_sub\
    \ / 10)))\n                                        (let ((sub_sub_sub_sub_sub_sub_digit\
    \ (sub_sub_sub_sub_sub_sub % 10)))\n                                         \
    \ (if (< sub_sub_sub_sub_sub_sub_digit 10)\n                                 \
    \           (let ((sub_sub_sub_sub_sub_sub_sub (sub_sub_sub_sub_sub_sub / 10)))\n\
    \                                              (let ((sub_sub_sub_sub_sub_sub_sub_digit\
    \ (sub_sub_sub_sub_sub_sub_sub % 10)))\n                                     \
    \           (if (< sub_sub_sub_sub_sub_sub_sub_digit 10)\n                   \
    \                               (let ((sub_sub_sub_sub_sub_sub_sub_sub (sub_sub_sub",
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((num (number)))\n\
    \        (if (<= num 100)\n          (let ((n (num / 100)))\n            (result\
    \ (append result (string-append \"c\" (int_to_roman n))) \"c\")\n            (result\
    \ (append result (string-append \"x\" (int_to_roman (num % 100)))) \"x\"))\n \
    \       (let ((n (num / 100)))\n          (result (append result (string-append\
    \ \"c\" (int_to_roman n))) \"c\")\n          (result (append result (string-append\
    \ \"x\" (int_to_roman (num % 100)))) \"x\"))\n        (let ((n (num / 100)))\n\
    \          (result (append result (string-append \"x\" (int_to_roman n))) \"x\"\
    ))\n        (result (append result (string-append \"ix\" (int_to_roman (num %\
    \ 100)))) \"ix\"))\n      (result (append result (string-append \"m\" (int_to_roman\
    \ (num / 100)))) \"m\"))\n    (result (append result (string-append \"m\" (int_to_roman\
    \ (num % 100)))) \"m\"))\n  result)\n)\n\n;; Given a roman numeral, obtain its\
    \ integer value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"mcdxxvi\")\n;; 426", "  (let ((result\
    \ \"\"))\n    (let ((i number))\n      (while (< i 1000)\n        (let ((digit\
    \ (modulo (/ i 10)))\n              (roman_digit (modulo (/ i 5)))\n         \
    \     (subtract (cond ((= digit 9) (cond ((= i 2) \"\")\n                    \
    \                            (else (subtract (cond ((= digit 4) \"v\")\n     \
    \                                                               (else (subtract\
    \ \"m\"))))))))\n                (cond ((= i 4) \"iv\")\n                    \
    \ (else (cond ((= i 9) \"ix\")\n                               (else (subtract\
    \ \"x\"))))))))\n          (set! result (concat result roman_digit)))\n      (set!\
    \ i (subtract 1)))\n    (reverse result)))\n\n;; Given a roman numeral, obtain\
    \ its integer value.\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>>\
    \ (roman_to_int \"clii\")\n;; 152\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426",
  "  (let ((result \"\"))\n    (let ((i number))\n      (while (< i 1000)\n      \
    \  (let ((d (div i 4)))\n          (let ((m (mod i 4)))\n            (if (< d\
    \ 2)\n              (if (< m 1)\n                \"i\"\n                (if (<\
    \ m 2)\n                  \"ii\"\n                  \"iii\"))\n              (if\
    \ (< m 3)\n                \"iv\"\n                (if (< m 4)\n             \
    \     \"v\"\n                  \"vi\"))\n              (if (< m 5)\n         \
    \       \"vii\"\n                (if (< m 6)\n                  \"viii\"\n   \
    \               \"ix\"))\n              (if (< m 7)\n                \"x\"\n \
    \               (if (< m 8)\n                  \"xi\"\n                  \"xii\"\
    ))\n              (if (< m 9)\n                \"xiii\"\n                \"xiv\"\
    ))\n            (if (< m 2)\n              \"ii\"\n              \"iii\"))\n \
    \           (if (< m 3)\n              \"iv\"\n              \"v\"))\n       \
    \     (if (< m 4)\n              \"vii\"\n              \"viii\"))\n         \
    \   (if (< m 5)\n              \"viii\"\n              \"ix\"))\n            (if\
    \ (< m 6)\n              \"x\"\n              \"xi\"))\n            (if (< m 7)\n\
    \              \"xii\"\n              \"xiii\"))\n            (if (< m 8)\n  \
    \            \"xiv\"\n              \"xv\"))\n            (if (< m 9)\n      \
    \        \"xvi\"\n              \"xvii\"))\n            (if (< m 10)\n       \
    \       \"xviii\"\n              \"xix\"))\n            (if (< m 11)\n       \
    \       \"xx\"\n              \"xxi\"))\n            (if (< m 12)\n          \
    \    \"xxii\"\n              \"xxiii\"))\n            (if (< m 13)\n         \
    \     \"xxiv\"\n              \"xxv\"))\n            (if (< m 14)\n          \
    \    \"xxvi\"\n              \"xxvii\"))\n            (if (< m 15)\n         \
    \     \"xxviii\"\n              \"xxix\"))\n            (if (< m 16)\n       \
    \       \"xxx\"\n              \"xxxi\"))\n            (if (< m 17)\n        \
    \      \"xxxii\"\n              ", "  (let ((result \"\"))\n    (let ((num (number)))\n\
    \      (if (<= num 1000)\n        (let ((digit (num % 10)))\n          (if (<\
    \ digit 10)\n            (let ((sub (num / 10)))\n              (if (< sub 1000)\n\
    \                (let ((sub_digit (sub % 10)))\n                  (if (< sub_digit\
    \ 10)\n                    (let ((sub_sub (sub / 10)))\n                     \
    \ (if (< sub_sub 1000)\n                        (let ((sub_sub_digit (sub_sub\
    \ % 10)))\n                          (if (< sub_sub_digit 10)\n              \
    \              (let ((sub_sub_sub (sub_sub / 10)))\n                         \
    \     (if (< sub_sub_sub 1000)\n                                (let ((sub_sub_sub_digit\
    \ (sub_sub_sub % 10)))\n                                  (if (< sub_sub_sub_digit\
    \ 10)\n                                    (let ((sub_sub_sub_sub (sub_sub_sub\
    \ / 10)))\n                                      (if (< sub_sub_sub_sub 1000)\n\
    \                                        (let ((sub_sub_sub_sub_digit (sub_sub_sub_sub\
    \ % 10)))\n                                          (if (< sub_sub_sub_sub_digit\
    \ 10)\n                                            (let ((sub_sub_sub_sub_sub\
    \ (sub_sub_sub_sub / 10)))\n                                              (if\
    \ (< sub_sub_sub_sub_sub 1000)\n                                             \
    \   (let ((sub_sub_sub_sub_sub_digit (sub_sub_sub_sub_sub % 10)))\n          \
    \                                        (if (< sub_sub_sub_sub_sub_digit 10)\n\
    \                                                    (let ((sub_sub_sub_sub_sub_sub\
    \ (sub_sub_sub_sub_sub / 10)))\n                                             \
    \         (if (< sub_sub_sub_sub_sub_sub 1000)\n                             \
    \                           (let ((sub_sub_sub_sub_sub_sub_digit (sub_sub_sub_sub_sub_sub\
    \ % 10)))\n                                                          (if (< sub_sub_sub_sub_sub_sub_",
  "  (let ((result \"\"))\n    (let ((digit (number % 10)))\n      (if (< digit 10)\n\
    \        (let ((sub (number / 10)))\n          (if (< sub 10)\n            (let\
    \ ((subsub (sub / 10)))\n              (if (< subsub 10)\n                (let\
    \ ((subsubsub (subsub / 10)))\n                  (if (< subsubsub 10)\n      \
    \              (let ((subsubsubsub (subsubsub / 10)))\n                      (if\
    \ (< subsubsubsub 10)\n                        (let ((subsubsubsubsub (subsubsubsub\
    \ / 10)))\n                          (if (< subsubsubsubsub 10)\n            \
    \                (let ((subsubsubsubsubsub (subsubsubsubsub / 10)))\n        \
    \                      (if (< subsubsubsubsubsub 10)\n                       \
    \         (let ((subsubsubsubsubsubsub (subsubsubsubsubsub / 10)))\n         \
    \                         (if (< subsubsubsubsubsubsub 10)\n                 \
    \                   (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub / 10)))\n\
    \                                      (if (< subsubsubsubsubsubsubsub 10)\n \
    \                                       (let ((subsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsub\
    \ / 10)))\n                                          (if (< subsubsubsubsubsubsubsubsub\
    \ 10)\n                                            (let ((subsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsub / 10)))\n                                     \
    \         (if (< subsubsubsubsubsubsubsubsubsub 10)\n                        \
    \                        (let ((subsubsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                                  (if (< subsubsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                    (let ((subsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                       (if (< subsubsubsubsubsubsubsubsubsubsubsub 10)\n    \
    \                                                    (let ((subsubsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub", "  (let ((result \"\"))\n    (let ((i number))\n\
    \      (while (< i 1000)\n        (let ((n (if (< i 100)\n                   (if\
    \ (< i 50)\n                       (if (< i 10)\n                           (if\
    \ (< i 5)\n                               (if (< i 2)\n                      \
    \             (result \"\")\n                                   (result \"i\"\
    ))\n                               (result \"v\"))\n                         \
    \      (result \"x\"))\n                               (result \"l\"))\n     \
    \                          (result \"c\"))\n                               (result\
    \ \"d\"))\n                               (result \"m\"))\n                  \
    \             (result \"\")\n                               (result \"k\"))\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n                               (result \"\")\n              \
    \                 (result \"\")\n                               (result \"\")\n\
    \                               (result \"\")\n                              \
    \ (result \"\")\n", "  (let ((result \"\"))\n    (let ((digit (number % 10)))\n\
    \      (if (< digit 10)\n        (let ((sub (number / 10)))\n          (if (<\
    \ sub 10)\n            (let ((subsub (sub / 10)))\n              (if (< subsub\
    \ 10)\n                (let ((subsubsub (subsub / 10)))\n                  (if\
    \ (< subsubsub 10)\n                    (let ((subsubsubsub (subsubsub / 10)))\n\
    \                      (if (< subsubsubsub 10)\n                        (let ((subsubsubsubsub\
    \ (subsubsubsub / 10)))\n                          (if (< subsubsubsubsub 10)\n\
    \                            (let ((subsubsubsubsubsub (subsubsubsubsub / 10)))\n\
    \                              (if (< subsubsubsubsubsub 10)\n               \
    \                 (let ((subsubsubsubsubsubsub (subsubsubsubsubsub / 10)))\n \
    \                                 (if (< subsubsubsubsubsubsub 10)\n         \
    \                           (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub\
    \ / 10)))\n                                      (if (< subsubsubsubsubsubsubsub\
    \ 10)\n                                        (let ((subsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsub / 10)))\n                                        \
    \  (if (< subsubsubsubsubsubsubsubsub 10)\n                                  \
    \          (let ((subsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                              (if (< subsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsub / 10)))\n                                  \
    \                (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n              \
    \                                      (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                       (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n       \
    \                                                 (let ((subsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))", "  (let ((result \"\"))\n    (if\
    \ (< number 100)\n      (let ((n (number)))\n        (do ((i 1) (j 1))\n     \
    \     ((< i 3)\n            (let ((k (modulo (- n i) 4)))\n              (set!\
    \ result (concat result (string-append (string-append \"M\" (modulo (- n j) 4))\
    \ \"D\"))))\n            (set! result (concat result (string-append \"C\" (modulo\
    \ (- n k) 4)) \"L\"))))\n        (set! result (concat result (string-append \"\
    X\" (modulo (- n (modulo (- n i) 5)) 4)) \"V\"))))\n    (return result)))\n\n\
    ;; Given a roman numeral, obtain its integer value.\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"CDXLVI\")\n;; 426", "  (let* ([result\
    \ (string-append \"\")])\n    (let* ([remainder (modulo number 10)])\n      (if\
    \ (zero? remainder)\n        (return result)\n        (let* ([divisor (div remainder\
    \ 10)])\n          (if (zero? divisor)\n            (return result)\n        \
    \    (let* ([subdivisor (div remainder 100)])\n              (if (zero? subdivisor)\n\
    \                (return result)\n                (let* ([subsubdivisor (div remainder\
    \ 1000)])\n                  (if (zero? subsubdivisor)\n                    (return\
    \ result)\n                    (let* ([subsubsubdivisor (modulo number 1000)])\n\
    \                      (if (zero? subsubsubdivisor)\n                        (return\
    \ result)\n                        (return (string-append\n                  \
    \               (string-append\n                                  (string-append\n\
    \                                    (string-append\n                        \
    \              (string-append\n                                        (string-append\n\
    \                                          (string-append\n                  \
    \                          (string-append\n                                  \
    \            (string-append\n                                                (string-append\n\
    \                                                  (string-append\n          \
    \                                          (string-append\n                  \
    \                                    (string-append\n                        \
    \                                (string-append\n                            \
    \                              (string-append\n                              \
    \                              (string-append\n                              \
    \                                (string-append\n                            \
    \                                    (string-append\n                        \
    \                                          (string-append\n                  \
    \                                                  (string-append\n          \
    \                                                            (string-append\n\
    \                                                                        (string-append\n\
    \                                                                          (string-append\n\
    \                                                                            (string-append\n\
    \                                                                            \
    \  (string-append\n                                                          \
    \                      (string-append\n                                      \
    \                                              (string-append\n              \
    \                                                                        (string-append\n\
    \                                                                            \
    \            (string-append\n                                                \
    \                                          (string-append\n                  \
    \                                                                          (string-append\n\
    \                                                                            \
    \                 (string-append\n                                           \
    \                                                    (string-append\n        \
    \                                                                            \
    \            (string-append\n                                                \
    \              ", "  (let ((result \"\"))\n    (if (< number 1000)\n      (let\
    \ ((digit (modulo number 10)))\n        (if (< digit 1)\n          (append result\
    \ \"x\")\n        (else\n          (append result (string-append \"cm\" (modulo\
    \ (- digit 2) 10)))\n        )\n      )\n      (append result (string-append \"\
    m\" (modulo (- number 5) 10)))\n    )\n    (append result (string-append \"i\"\
    \ (modulo (- number 4) 10)))\n    (append result (string-append \"v\" (modulo\
    \ (- number 9) 10)))\n    (append result (string-append \"x\" (modulo (- number\
    \ 10) 10)))\n    result)\n)\n\n;; Given a roman numeral, obtain its integer value.\n\
    ;; Restrictions: 1 <= roman <= 1000\n;; Examples:\n;; >>> (roman_to_int \"xix\"\
    )\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n;; >>> (roman_to_int \"cdxxvi\"\
    )\n;; 426", "  (let ((n (number)))\n    (if (< n 1)\n      \"0\"\n    (if (< n\
    \ 2)\n      \"i\"\n    (if (< n 3)\n      \"ii\"\n    (if (< n 4)\n      \"iii\"\
    \n    (if (< n 5)\n      \"iv\"\n    (if (< n 6)\n      \"v\"\n    (if (< n 7)\n\
    \      \"vi\"\n    (if (< n 8)\n      \"vii\"\n    (if (< n 9)\n      \"viii\"\
    \n    (if (< n 10)\n      \"ix\"\n    (if (< n 11)\n      \"x\"\n    (if (< n\
    \ 12)\n      \"xi\"\n    (if (< n 13)\n      \"xii\"\n    (if (< n 14)\n     \
    \ \"xiii\"\n    (if (< n 15)\n      \"xiv\"\n    (if (< n 16)\n      \"xv\"\n\
    \    (if (< n 17)\n      \"xvi\"\n    (if (< n 18)\n      \"xvii\"\n    (if (<\
    \ n 19)\n      \"xviii\"\n    (if (< n 20)\n      \"xix
  "  (let ((result \"\"))\n    (if (zero? number)\n      \"0\"\n    (if (< number\
    \ 10)\n      (let ((digit (modulo number 10)))\n        (if (zero? digit)\n  \
    \        \"0\"\n        (let ((sub (modulo (sub number digit) 10)))\n        \
    \  (if (zero? sub)\n            (concat \"i\")\n          (let ((sub2 (modulo\
    \ (sub number (sub sub 2)) 10)))\n            (if (zero? sub2)\n             \
    \ (concat \"v\")\n            (let ((sub3 (modulo (sub number (sub sub3)) 10)))\n\
    \              (if (zero? sub3)\n                (concat \"x\")\n            \
    \  (let ((sub4 (modulo (sub number (sub sub4)) 10)))\n                (if (zero?\
    \ sub4)\n                  (concat \"l\")\n                (let ((sub5 (modulo\
    \ (sub number (sub sub5)) 10)))\n                  (if (zero? sub5)\n        \
    \            (concat \"c\")\n                  (let ((sub6 (modulo (sub number\
    \ (sub sub6)) 10)))\n                    (if (zero? sub6)\n                  \
    \    (concat \"d\")\n                    (let ((sub7 (modulo (sub number (sub\
    \ sub7)) 10)))\n                      (if (zero? sub7)\n                     \
    \   (concat \"m\")\n                      (let ((sub8 (modulo (sub number (sub\
    \ sub8)) 10)))\n                        (if (zero? sub8)\n                   \
    \       (concat \"i\")\n                        (let ((sub9 (modulo (sub number\
    \ (sub sub9)) 10)))\n                          (if (zero? sub9)\n            \
    \                (concat \"v\")\n                          (let ((sub10 (modulo\
    \ (sub number (sub sub10)) 10)))\n                            (if (zero? sub10)\n\
    \                              (concat \"x\")\n                            (let\
    \ ((sub11 (modulo (sub number (sub sub11)) 10)))\n                           \
    \   (if (zero? sub11)\n                                (concat \"l\")\n      \
    \                        (let ((sub12 (modulo (sub number (sub sub12)) 10)))\n\
    \                                (if (zero? sub12)\n                         \
    \         (concat \"c\")\n                                (let", "  (let ((result\
    \ \"\"))\n    (let ((num (number)))\n      (if (<= num 1000)\n        (let ((n\
    \ (num % 1000)))\n          (if (<= n 100)\n            (let ((n (n % 100)))\n\
    \              (if (<= n 10)\n                (let ((n (n % 10)))\n          \
    \        (if (<= n 1)\n                    (result \"\")\n                   \
    \ (result (string-append (string-append \"I\" \"I\")\n                       \
    \      (string-append \"V\" \"I\")\n                             (string-append\
    \ \"X\" \"I\")\n                             (string-append \"L\" \"X\")\n   \
    \                          (string-append \"C\" \"X\")\n                     \
    \        (string-append \"D\" \"X\")\n                             (string-append\
    \ \"M\" \"X\"))\n                            (result (string-append \"M\" \"I\"\
    )\n                             (string-append \"C\" \"I\")\n                \
    \             (string-append \"L\" \"I\")\n                             (string-append\
    \ \"X\" \"I\")\n                             (string-append \"V\" \"I\")\n   \
    \                          (string-append \"I\" \"I\")\n                     \
    \        (result (string-append \"D\" \"I\")\n                             (string-append\
    \ \"M\" \"I\")\n                             (string-append \"C\" \"I\")\n   \
    \                          (string-append \"L\" \"I\")\n                     \
    \        (string-append \"X\" \"I\")\n                             (string-append\
    \ \"V\" \"I\")))))\n                  (if (<= n 9)\n                    (let ((n\
    \ (n % 9)))\n                      (if (<= n 5)\n                        (let\
    \ ((n (n % 5)))\n                          (if (<= n 4)\n                    \
    \        (let ((n (n % 4)))\n                              (if (<= n 3)\n    \
    \                            (let ((n (n % 3)))\n                            \
    \      (if (<= n 2)\n                                    (let ((n (n % 2)))\n\
    \                                      (if (<= n 1)\n                        \
    \                (result \"\")\n                                        (result\
    \ (string-append \"I\" \"I\")\n                                         (string-append\
    \ \"V\" \"I\")\n                                         (string-append \"X\"\
    \ \"I\")\n                                         (string-append \"L\" \"X\")",
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((num (number)))\n\
    \        (if (<= num 100)\n          (let ((n (num % 100)))\n            (if (<=\
    \ n 10)\n              (result (string-append \"c\" (number-to-string n)))\n \
    \             (result (string-append \"xc\" (number-to-string n)))\n         \
    \   )\n            (result (string-append \"x\" (number-to-string n)))\n     \
    \     )\n          (let ((n (num % 10)))\n            (if (<= n 5)\n         \
    \     (result (string-append \"v\" (number-to-string n)))\n              (result\
    \ (string-append \"ix\" (number-to-string n)))\n            )\n            (result\
    \ (string-append \"i\" (number-to-string n)))\n          )\n        )\n      \
    \  (let ((n (number / 100)))\n          (if (<= n 10)\n            (result (string-append\
    \ \"c\" (number-to-string n)))\n            (result (string-append \"xc\" (number-to-string\
    \ n)))\n          )\n          (result (string-append \"x\" (number-to-string\
    \ n)))\n        )\n      )\n      (result (string-append \"m\" (number-to-string\
    \ number)))\n    )\n    result\n  )\n)\n", "  (let ((result \"\"))\n    (let ((n\
    \ (number)))\n      (if (< n 1)\n        (error \"int_to_mini_roman: number must\
    \ be positive\")\n      (let ((n (number)))\n        (while (< n 1000)\n     \
    \     (let ((digit (div n 10)))\n            (let ((rem (modulo n 10)))\n    \
    \          (if (< rem 2)\n                (let ((rem (rem)))\n               \
    \   (let ((quot (div rem 10)))\n                    (let ((rem (modulo rem 10)))\n\
    \                      (if (< rem 3)\n                        (let ((rem (rem)))\n\
    \                          (let ((quot (div rem 10)))\n                      \
    \      (let ((rem (modulo rem 10)))\n                              (if (< rem\
    \ 4)\n                                (let ((rem (rem)))\n                   \
    \               (let ((quot (div rem 10)))\n                                 \
    \   (let ((rem (modulo rem 10)))\n                                      (if (<\
    \ rem 5)\n                                        (let ((rem (rem)))\n       \
    \                                   (let ((quot (div rem 10)))\n             \
    \                               (let ((rem (modulo rem 10)))\n               \
    \                               (if (< rem 6)\n                              \
    \                  (let ((rem (rem)))\n                                      \
    \            (let ((quot (div rem 10)))\n                                    \
    \                (let ((rem (modulo rem 10)))\n                              \
    \                        (if (< rem 7)\n                                     \
    \                   (let ((rem (rem)))\n                                     \
    \                     (let ((quot (div rem 10)))\n                           \
    \                                 (let ((rem (modulo rem 10)))\n             \
    \                                                 (if (< rem 8)\n            \
    \                                                    (let ((rem (rem)))\n    \
    \                                                              (let ((quot (div\
    \ rem 10)))\n                                                                \
    \    (let ((rem (modulo rem 10)))\n                                          \
    \                            (if (< rem 9)\n                                 \
    \                                       (let ((rem (rem)))\n                 \
    \                                                         (let ((quot (div rem\
    \ 10)))\n                                                                    \
    \        (let ((rem (modulo rem 10)))\n                                      \
    \                                        (if (< rem 10)\n                    \
    \                                                            (", "  (define (roman_digit_value\
    \ digit)\n    (if (zero? digit)\n      \"i\"\n    (if (odd? digit)\n      \"v\"\
    \n    \"x\")))\n  (define (roman_digit_value digit)\n    (if (zero? digit)\n \
    \     \"i\"\n    (if (odd? digit)\n      \"v\"\n    \"x\")))\n  (define (roman_digit_value\
    \ digit)\n    (if (zero? digit)\n      \"i\"\n    (if (odd? digit)\n      \"v\"\
    \n    \"x\")))\n  (define (roman_digit_value digit)\n    (if (zero? digit)\n \
    \     \"i\"\n    (if (odd? digit)\n      \"v\"\n    \"x\")))\n  (define (roman_digit_value\
    \ digit)\n    (if (zero? digit)\n      \"i\"\n    (if (odd? digit)\n      \"v\"\
    \n    \"x\")))\n  (define (roman_digit_value digit)\n    (if (zero? digit)\n \
    \     \"i\"\n    (if (odd? digit)\n      \"v\"\n    \"x\")))\n  (define (roman_digit_value\
    \ digit)\n    (if (zero? digit)\n      \"i\"\n    (if (odd? digit)\n      \"v\"\
    \n    \"x\")))\n  (define (roman_digit_value digit)\n    (if (zero? digit)\n \
    \     \"i\"\n    (if (odd? digit)\n      \"v\"\n    \"x\")))\n  (define (roman_digit_value\
    \ digit)\n    (if (zero? digit)\n      \"i\"\n    (if (odd? digit)\n      \"v\"\
    \n    \"x\")))\n  (define (roman_digit_value digit)\n    (if (zero? digit)\n \
    \     \"i\"\n    (if (odd? digit)\n      \"v\"\n    \"x\")))\n  (define (roman_digit_value\
    \ digit)\n    (if (zero? digit)\n      \"i\"\n    (if (odd? digit)\n      \"v\"\
    \n    \"x\")))\n  (define (roman_", "  (let* ([num (number)])\n    (let ([result\
    \ (string)])\n      (let ([i (1)])\n        (while (< i num)\n          [(let\
    \ ([j (i - 1)])\n            (if (<= j 2)\n              (set! result (concat\
    \ result (string #\"i\"))))\n            (set! result (concat result (string #\"\
    v\"))))\n            (set! i (i + 1))])\n          (set! result (concat result\
    \ (string #\"i\"))))\n      (return result)))\n)\n\n;; Given a roman numeral,\
    \ obtain its integer value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"CDXXVI\")\n;; 426",
  "  (let ((result \"\"))\n    (let ((digit (number % 10)))\n      (if (< digit 10)\n\
    \        (let ((sub (number / 10)))\n          (let ((sub_digit (sub % 10)))\n\
    \            (if (< sub_digit 10)\n              (let ((sub_sub (sub / 10)))\n\
    \                (let ((sub_sub_digit (sub_sub % 10)))\n                  (if\
    \ (< sub_sub_digit 10)\n                    (let ((sub_sub_sub (sub_sub / 10)))\n\
    \                      (let ((sub_sub_sub_digit (sub_sub_sub % 10)))\n       \
    \                 (if (< sub_sub_sub_digit 10)\n                          (let\
    \ ((sub_sub_sub_sub (sub_sub_sub / 10)))\n                            (let ((sub_sub_sub_sub_digit\
    \ (sub_sub_sub_sub % 10)))\n                              (if (< sub_sub_sub_sub_digit\
    \ 10)\n                                (let ((sub_sub_sub_sub_sub (sub_sub_sub_sub\
    \ / 10)))\n                                  (let ((sub_sub_sub_sub_sub_digit\
    \ (sub_sub_sub_sub_sub % 10)))\n                                    (if (< sub_sub_sub_sub_sub_digit\
    \ 10)\n                                      (let ((sub_sub_sub_sub_sub_sub (sub_sub_sub_sub_sub\
    \ / 10)))\n                                        (let ((sub_sub_sub_sub_sub_sub_digit\
    \ (sub_sub_sub_sub_sub_sub % 10)))\n                                         \
    \ (if (< sub_sub_sub_sub_sub_sub_digit 10)\n                                 \
    \           (let ((sub_sub_sub_sub_sub_sub_sub (sub_sub_sub_sub_sub_sub / 10)))\n\
    \                                              (let ((sub_sub_sub_sub_sub_sub_sub_digit\
    \ (sub_sub_sub_sub_sub_sub_sub % 10)))\n                                     \
    \           (if (< sub_sub_sub_sub_sub_sub_sub_digit 10)\n                   \
    \                               (let ((sub_sub_sub_sub_sub_sub_sub_sub_digit (sub_sub",
  "  (let ((result \"\"))\n    (if (<= number 1000)\n      (let ((n (number)))\n \
    \       (if (<= n 100)\n          (let ((n (number)))\n            (if (<= n 10)\n\
    \              (let ((n (number)))\n                (if (<= n 1)\n           \
    \       (result \"\")\n                  (result (string-append \"i\" (int_to_roman\
    \ n)))\n                )\n              )\n            )\n            (let ((n\
    \ (number)))\n              (if (<= n 9)\n                (let ((n (number)))\n\
    \                  (if (<= n 5)\n                    (let ((n (number)))\n   \
    \                   (if (<= n 4)\n                        (let ((n (number)))\n\
    \                          (if (<= n 3)\n                            (let ((n\
    \ (number)))\n                              (if (<= n 2)\n                   \
    \             (let ((n (number)))\n                                  (if (<= n\
    \ 1)\n                                    (result \"\")\n                    \
    \                (result (string-append \"v\" (int_to_roman n)))\n           \
    \                       )\n                                )\n               \
    \               )\n                            )\n                          )\n\
    \                        )\n                      )\n                    )\n \
    \                 )\n                )\n              )\n            )\n     \
    \     )\n        )\n      )\n    )\n    result\n  )\n)\n", "  (let* ([result (string)])\n\
    \    (let ([i (number)])\n      (while (< i 1000)\n        (let ([d (div i 2)])\n\
    \          (if (< d 1)\n            (append result (string->symbol (symbol->string\
    \ \"I\"))))\n          (append result (string->symbol (symbol->string (string->symbol\
    \ \"I\"))))\n          (append result (string->symbol (symbol->string \"V\"))))\n\
    \        (append result (string->symbol (symbol->string \"I\"))))\n      (append\
    \ result (string->symbol (symbol->string \"I\"))))\n    (string->symbol result)))\n\
    \n;; Given a roman numeral, obtain its integer value, and return it as a string.\n\
    ;; Restrictions: 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\"\
    )\n;; 19\n;; >>> (roman_to_int \"CDXXVI\")\n;; 426", "  (define (roman_digit roman)\n\
    \    (cond\n      ((= roman 'I) 1)\n      ((= roman 'V) 5)\n      ((= roman 'X)\
    \ 10)\n      ((= roman 'L) 50)\n      ((= roman 'C) 100)\n      ((= roman 'D)\
    \ 500)\n      ((= roman 'M) 1000)\n      (else 0)))\n  (define (roman_to_int roman)\n\
    \    (cond\n      ((= roman 'I) (quotient number 9))\n      ((= roman 'V) (quotient\
    \ number 5))\n      ((= roman 'X) (quotient number 10))\n      ((= roman 'L) (quotient\
    \ number 50))\n      ((= roman 'C) (quotient number 100))\n      ((= roman 'D)\
    \ (quotient number 500))\n      ((= roman 'M) (quotient number 1000))\n      (else\
    \ 0)))\n  (define (roman_to_string roman)\n    (cond\n      ((= roman 'I) \"I\"\
    )\n      ((= roman 'V) \"V\")\n      ((= roman 'X) \"X\")\n      ((= roman 'L)\
    \ \"L\")\n      ((= roman 'C) \"C\")\n      ((= roman 'D) \"D\")\n      ((= roman\
    \ 'M) \"M\")\n      (else \"?\")))\n  (define (roman_to_string roman)\n    (cond\n\
    \      ((= roman 'I) \"I\")\n      ((= roman 'V) \"V\")\n      ((= roman 'X) \"\
    X\")\n      ((= roman 'L) \"L\")\n      ((= roman 'C) \"C\")\n      ((= roman\
    \ 'D) \"D\")\n      ((= roman 'M) \"M\")\n      (else \"?\")))\n  (define (roman_to_string\
    \ roman)\n    (cond\n      ((= roman 'I) \"I\")\n      ((= roman 'V) \"V\")\n\
    \      ((= roman 'X) \"X\")\n      ((= roman 'L) \"L", "  (let ((result \"\"))\n\
    \    (if (< number 1000)\n      (let ((digit (div number 10)))\n        (let ((sub\
    \ (mod number 10)))\n          (if (< sub 3)\n            (let ((sub2 (mod sub\
    \ 2)))\n              (if (< sub2 1)\n                (let ((sub3 (mod sub 3)))\n\
    \                  (if (< sub3 1)\n                    (let ((sub4 (mod sub 4)))\n\
    \                      (if (< sub4 1)\n                        (let ((sub5 (mod\
    \ sub 5)))\n                          (if (< sub5 1)\n                       \
    \     (let ((sub6 (mod sub 6)))\n                              (if (< sub6 1)\n\
    \                                (let ((sub7 (mod sub 7)))\n                 \
    \                 (if (< sub7 1)\n                                    (let ((sub8\
    \ (mod sub 8)))\n                                      (if (< sub8 1)\n      \
    \                                  (let ((sub9 (mod sub 9)))\n               \
    \                           (if (< sub9 1)\n                                 \
    \           (let ((sub10 (mod sub 10)))\n                                    \
    \          (if (< sub10 1)\n                                                (let\
    \ ((sub11 (mod sub 11)))\n                                                  (if\
    \ (< sub11 1)\n                                                    (let ((sub12\
    \ (mod sub 12)))\n                                                      (if (<\
    \ sub12 1)\n                                                        (let ((sub13\
    \ (mod sub 13)))\n                                                          (if\
    \ (< sub13 1)\n                                                            (let\
    \ ((sub14 (mod sub 14)))\n                                                   \
    \           (if (< sub14 1)\n                                                \
    \                (let ((sub15 (mod sub 15)))\n                               \
    \                                   (if (< sub15 1)\n                        \
    \                                            (let ((sub16 (mod sub 16)))\n   \
    \                                                                   (if (< sub16\
    \ 1)\n                                                                       \
    \ (let ((sub17 (mod sub 17)))\n                                              \
    \                            (if (< sub17 1)\n                               \
    \                                             (let ((sub18 (mod sub 18)))\n  \
    \                                                                            (if\
    \ (< sub18 1)\n                                                              \
    \                  (let ((sub19 (mod sub 19)))\n                             \
    \                                                     (", "  (let ((result \"\"\
    ))\n    (if (zero? number)\n      (return result)\n      (let ((num (abs number)))\n\
    \        (if (zero? num)\n          (return result)\n          (let ((i 1))\n\
    \            (while (< i num)\n              (let ((d (div num i)))\n        \
    \        (if (< d 2)\n                  (let ((n (sub1 i)))\n                \
    \    (let ((r (sub1 (div d 2))))\n                      (let ((s (sub1 (div d\
    \ 3))))\n                        (let ((t (sub1 (div d 4))))\n               \
    \           (let ((u (sub1 (div d 5))))\n                            (let ((v\
    \ (sub1 (div d 6))))\n                              (let ((w (sub1 (div d 7))))\n\
    \                                (let ((x (sub1 (div d 8))))\n               \
    \                   (let ((y (sub1 (div d 9))))\n                            \
    \        (let ((z (sub1 (div d 10))))\n                                      (result\
    \ (concat\n                                               (concat\n          \
    \                                      (concat\n                             \
    \                     (concat\n                                              \
    \     (concat\n                                                     (concat\n\
    \                                                       (concat\n            \
    \                                            (concat\n                       \
    \                                   (concat\n                                \
    \                            (concat\n                                       \
    \                       (concat\n                                            \
    \                    (concat\n                                               \
    \                   (concat\n                                                \
    \                    (concat\n                                               \
    \                       (concat\n                                            \
    \                            (concat\n                                       \
    \                                   (concat\n                                \
    \                                            (concat\n                       \
    \                                                       (concat\n            \
    \                                                                    (concat\n\
    \                                                                            \
    \        (concat\n                                                           \
    \                           (concat\n                                        \
    \                                                (concat\n                   \
    \                                                                       (concat\n\
    \                                                                            \
    \                (concat\n                                                   \
    \                                          (concat\n                         \
    \                                                                      (concat\n\
    \                                                                            \
    \                    (concat\n                                               \
    \                                                   (concat\n                \
    \                                                                            \
    \        (concat\n                                                           \
    \                                           (concat\n                        \
    \                                                                       ", " \
    \ (let* ([n (number)]\n          [result (make-string n)]))\n  (let ([i 0])\n\
    \    (while (<= i n)\n      (let ([d (div n (i))])\n        (if (< d 2)\n    \
    \      (let ([r (rem n (i))])\n            (if (< r 1)\n              (append\
    \ result \"i\")\n              (append result \"v\")\n              (append result\
    \ \"x\"))\n            (append result \"m\"))\n          (append result \"c\"\
    ))\n        (append result \"d\"))\n      (set! i (+ i 1)))\n    result))\n\n\
    ;; Given a roman numeral, obtain its integer value.\n;; Restrictions: 1 <= num\
    \ <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int\
    \ \"clii\")\n;; 152\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result\
    \ \"\"))\n    (if (<= number 1000)\n      (let ((n (number)))\n        (if (<=\
    \ n 100)\n          (let ((n (n)))\n            (let ((n (n)))\n             \
    \ (let ((n (n)))\n                (let ((n (n)))\n                  (let ((n (n)))\n\
    \                    (let ((n (n)))\n                      (let ((n (n)))\n  \
    \                      (let ((n (n)))\n                          (let ((n (n)))\n\
    \                            (let ((n (n)))\n                              (let\
    \ ((n (n)))\n                                (let ((n (n)))\n                \
    \                  (let ((n (n)))\n                                    (let ((n\
    \ (n)))\n                                      (let ((n (n)))\n              \
    \                          (let ((n (n)))\n                                  \
    \        (let ((n (n)))\n                                            (let ((n\
    \ (n)))\n                                              (let ((n (n)))\n      \
    \                                          (let ((n (n)))\n                  \
    \                                (let ((n (n)))\n                            \
    \                        (let ((n (n)))\n                                    \
    \                  (let ((n (n)))\n                                          \
    \              (let ((n (n)))\n                                              \
    \            (let ((n (n)))\n                                                \
    \            (let ((n (n)))\n                                                \
    \              (let ((n (n)))\n                                              \
    \                  (let ((n (n)))\n                                          \
    \                        (let ((n (n)))\n                                    \
    \                                (let ((n (n)))\n                            \
    \                                          (let ((n (n)))\n                  \
    \                                                      (let ((n (n)))\n      \
    \                                                                    (let ((n\
    \ (n)))\n                                                                    \
    \        (let ((n (n)))\n                                                    \
    \                          (let ((n (n)))\n                                  \
    \                                              (let ((n (n)))\n              \
    \                                                                    (let ((n\
    \ (n)))\n                                                                    \
    \                (let ((n (n)))\n                                            \
    \                                          (let ((n (n)))\n                  \
    \                                                                      (let ((n\
    \ (n)))\n                                                                    \
    \                      (let ((n (n", "  (let ((result \"\"))\n    (if (zero? number)\n\
    \      \"0\"\n    (if (< number 10)\n      (let ((digit (modulo number 10)))\n\
    \        (if (zero? digit)\n          \"0\"\n        (let ((sub (modulo (sub number\
    \ digit) 10)))\n          (if (zero? sub)\n            (concat \"i\")\n      \
    \    (let ((sub2 (modulo (sub number (sub sub 2)) 10)))\n            (if (zero?\
    \ sub2)\n              (concat \"v\")\n            (let ((sub3 (modulo (sub number\
    \ (sub sub3)) 10)))\n              (if (zero? sub3)\n                (concat \"\
    x\")\n              (let ((sub4 (modulo (sub number (sub sub4)) 10)))\n      \
    \          (if (zero? sub4)\n                  (concat \"l\")\n              \
    \  (let ((sub5 (modulo (sub number (sub sub5)) 10)))\n                  (if (zero?\
    \ sub5)\n                    (concat \"c\")\n                  (let ((sub6 (modulo\
    \ (sub number (sub sub6)) 10)))\n                    (if (zero? sub6)\n      \
    \                (concat \"d\")\n                    (let ((sub7 (modulo (sub\
    \ number (sub sub7)) 10)))\n                      (if (zero? sub7)\n         \
    \               (concat \"m\")\n                      (let ((sub8 (modulo (sub\
    \ number (sub sub8)) 10)))\n                        (if (zero? sub8)\n       \
    \                   (concat \"i\")\n                        (let ((sub9 (modulo\
    \ (sub number (sub sub9)) 10)))\n                          (if (zero? sub9)\n\
    \                            (concat \"v\")\n                          (let ((sub10\
    \ (modulo (sub number (sub sub10)) 10)))\n                            (if (zero?\
    \ sub10)\n                              (concat \"x\")\n                     \
    \       (let ((sub11 (modulo (sub number (sub sub11)) 10)))\n                \
    \              (if (zero? sub11)\n                                (concat \"l\"\
    )\n                              (let ((sub12 (modulo (sub number (sub sub12))\
    \ 10)))\n                                (if (zero? sub12)\n                 \
    \                 (concat \"c\")\n                                (let", "  (let\
    \ ((result \"\"))\n    (let ((n (number)))\n      (if (< n 100)\n        (let\
    \ ((d (n % 10)))\n          (if (< d 4)\n            (let ((m (n / 10)))\n   \
    \           (if (< m 3)\n                (let ((c (n % 100)))\n              \
    \    (if (< c 10)\n                    (let ((l (n / 100)))\n                \
    \      (if (< l 2)\n                        (result \"x\"))))\n              \
    \    (result \"c\"))))\n            (let ((m (n / 10)))\n              (if (<\
    \ m 3)\n                (let ((c (n % 100)))\n                  (if (< c 10)\n\
    \                    (let ((l (n / 100)))\n                      (if (< l 2)\n\
    \                        (result \"x\"))))\n                  (result \"c\"))))\n\
    \            (let ((c (n % 100)))\n              (if (< c 10)\n              \
    \  (let ((l (n / 100)))\n                  (if (< l 2)\n                    (result\
    \ \"x\"))))\n              (result \"c\"))))\n        (let ((d (n % 10)))\n  \
    \        (if (< d 4)\n            (let ((m (n / 10)))\n              (if (< m\
    \ 3)\n                (let ((c (n % 100)))\n                  (if (< c 10)\n \
    \                   (let ((l (n / 100)))\n                      (if (< l 2)\n\
    \                        (result \"x\"))))\n                  (result \"c\"))))\n\
    \            (let ((m (n / 10)))\n              (if (< m 3)\n                (let\
    \ ((c (n % 100)))\n                  (if (< c 10)\n                    (let ((l\
    \ (n / 100)))\n                      (if (< l 2)\n                        (result\
    \ \"x\"))))\n                  (result \"c\"))))\n            (let ((c (n % 100)))\n\
    \              (if (< c 10)\n                (let ((l (n / 100)))\n          \
    \        (if (< l 2)\n                    (result \"x\"))))\n              (result\
    \ \"c\"))))\n        (let ((d (n % 10)))\n          (if (< d 4)\n            (let\
    \ ((m (n / 10)))\n              (if (< m 3)\n                (let ((c (n % 100)))\n",
  "  (let* ([result (string-append \"\")])\n    (let* ([num (number)])\n      (if\
    \ (<= num 1000)\n        (let* ([num_digits (number-to-string num)])\n       \
    \   (let* ([num_digits_length (length num_digits)])\n            (if (>= num_digits_length\
    \ 3)\n              (let* ([num_digits_substr (substring num_digits num_digits_length\
    \ - 2)])\n                (let* ([num_digits_substr_length (length num_digits_substr)])\n\
    \                  (if (>= num_digits_substr_length 2)\n                    (let*\
    \ ([num_digits_substr_substr (substring num_digits_substr num_digits_substr_length\
    \ - 1)])\n                      (let* ([num_digits_substr_substr_length (length\
    \ num_digits_substr_substr)])\n                        (if (>= num_digits_substr_substr_length\
    \ 2)\n                          (let* ([num_digits_substr_substr_substr (substring\
    \ num_digits_substr_substr num_digits_substr_substr_length - 2)])\n          \
    \                  (let* ([num_digits_substr_substr_substr_length (length num_digits_substr_substr_substr)])\n\
    \                              (if (>= num_digits_substr_substr_substr_length\
    \ 2)\n                                (let* ([num_digits_substr_substr_substr_substr\
    \ (substring num_digits_substr_substr_substr num_digits_substr_substr_substr_length\
    \ - 3)])\n                                  (let* ([num_digits_substr_substr_substr_substr_length\
    \ (length num_digits_substr_substr_substr_substr)])\n                        \
    \            (if (>= num_digits_substr_substr_substr_substr_length 2)\n      \
    \                                (let* ([num_digits_substr_substr_substr", " \
    \ (let ((result \"\"))\n    (if (zero? number)\n      \"0\"\n    (if (< number\
    \ 10)\n      (let ((n (number)))\n        (if (< n 2)\n          \"i\"\n     \
    \   (if (< n 3)\n          \"ii\"\n        (if (< n 4)\n          \"iii\"\n  \
    \      (if (< n 5)\n          \"iv\"\n        (if (< n 6)\n          \"v\"\n \
    \       (if (< n 7)\n          \"vi\"\n        (if (< n 8)\n          \"vii\"\n\
    \        (if (< n 9)\n          \"viii\"\n        (if (< n 10)\n          \"ix\"\
    )))))))))))\n    (result (string-append result (string-append (string-append \"\
    m\" (string-append \"cm\" (string-append \"d\" (string-append \"cd\" (string-append\
    \ \"c\" (string-append \"xc\" (string-append \"l\" (string-append \"xl\" (string-append\
    \ \"x\" (string-append \"ix\")))))))))))))))\n\n;; Given a roman numeral, obtain\
    \ its integer value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n;; >>>\
    \ (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"xlix\")\n;; 20\n;; >>>\
    \ (roman_to_int \"cdxxix\")\n;; 29\n;; >>> (roman_to_int \"mcdlxxxix\")\n;; 299\n\
    ;; >>> (roman_to_int \"mcdlxxxix\")\n;; 299\n;; >>> (roman_to_int \"mcdlxxxix\"\
    )\n;; 299\n;; >>> (roman_to_int \"mcdlxxxix\")\n;; 299\n;; >>> (roman_to_int \"\
    mcdlxxxix\")\n;; 299\n;; >>> (roman_to_int \"mcdlxxxix\")\n;; 299\n;; >>> (roman_to_int\
    \ \"mcdlxxxix\")\n;; 299\n;; >>> (roman_to_int \"mcdlxxxix\")\n;; 299\n;; >>>\
    \ (roman_to_int \"mcdlxxxix\")\n;; 299\n;; >>> (roman_to_int \"mcdl", "  (let\
    \ ((result \"\"))\n    (if (< number 100)\n      (let ((n (number)))\n       \
    \ (if (< n 10)\n          (let ((n (number)))\n            (if (< n 5)\n     \
    \         (let ((n (number)))\n                (if (< n 4)\n                 \
    \ (let ((n (number)))\n                    (if (< n 3)\n                     \
    \ (let ((n (number)))\n                        (if (< n 2)\n                 \
    \         (let ((n (number)))\n                            (if (< n 1)\n     \
    \                         (let ((n (number)))\n                              \
    \  (result (string-append \"i\"))))\n                            (result (string-append\
    \ \"v\"))))))))))))))))\n    (result (string-append \"m\"))))\n\n;; Given a roman\
    \ numeral, obtain its integer value.\n;; Examples:\n;; >>> (roman_to_int \"xix\"\
    )\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n;; >>> (roman_to_int \"cdxxvi\"\
    )\n;; 426", "  (let ((result \"\"))\n    (if (< number 100)\n      (let ((n (number)))\n\
    \        (do ((i 1) (j 1))\n          ((< i 3)\n            (let ((k (modulo (sub1\
    \ n) 10)))\n              (set! result (concat result (string-append (string-append\
    \ \"M\" (modulo (sub1 k) 10)) \"M\"))))\n          (> i 3)\n            (let ((k\
    \ (modulo (sub1 n) 10)))\n              (set! result (concat result (string-append\
    \ (string-append \"CM\" (modulo (sub1 k) 10)) \"CM\"))))\n          (> j 3)\n\
    \            (let ((k (modulo (sub1 n) 10)))\n              (set! result (concat\
    \ result (string-append (string-append \"D\" (modulo (sub1 k) 10)) \"D\"))))\n\
    \          (> j 4)\n            (let ((k (modulo (sub1 n) 10)))\n            \
    \  (set! result (concat result (string-append (string-append \"CD\" (modulo (sub1\
    \ k) 10)) \"CD\"))))\n          (> j 5)\n            (let ((k (modulo (sub1 n)\
    \ 10)))\n              (set! result (concat result (string-append (string-append\
    \ \"C\" (modulo (sub1 k) 10)) \"C\"))))\n          (> j 6)\n            (let ((k\
    \ (modulo (sub1 n) 10)))\n              (set! result (concat result (string-append\
    \ (string-append \"XC\" (modulo (sub1 k) 10)) \"XC\"))))\n          (> j 7)\n\
    \            (let ((k (modulo (sub1 n) 10)))\n              (set! result (concat\
    \ result (string-append (string-append \"L\" (modulo (sub1 k) 10)) \"L\"))))\n\
    \          (> j 8)\n            (let ((k (modulo (sub1 n) 10)))\n            \
    \  (set! result (concat result (string-append (string-append \"XL\" (modulo (sub1\
    \ k) 10)) \"XL\"))))\n          (> j 9)\n            (", "  (let ((result \"\"\
    ))\n    (if (<= number 1000)\n      (let ((digit (modulo number 10)))\n      \
    \  (if (< digit 2)\n          (append result \"x\")\n          (append result\
    \ \"c\")\n          (append result \"l\")\n          (append result \"d\")\n \
    \         (append result \"v\"))\n        (append result \"m\")\n        (append\
    \ result \"i\")\n        (append result \"x\"))\n      (append result \"m\"))\n\
    \    result))\n\n;; Given a roman numeral, obtain its integer value.\n;; Return\
    \ 0 if the input is not a valid roman numeral.\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"xcm\")\n;; 0\n;; >>> (roman_to_int \"\
    cdxxvi\")\n;; 426", "  (let* ([\n    n (number)\n    result (list)\n    ])\n \
    \   (if (<= n 1)\n      (result \"\")\n      (let* ([\n        i (0)\n       \
    \ ])\n        (while (<= (modulo n 10) 0)\n          (let ([\n            digit\
    \ (modulo (remainder n 10) 10)\n            ])\n            (if digit == 1\n \
    \             (append result \"i\")\n              (append result \"v\")\n   \
    \           (append result \"x\"))\n            (set! i (+ i 1)))\n          (set!\
    \ n (remainder n 10)))\n        (append result \"m\")\n        (append result\
    \ \"c\")\n        (append result \"l\")\n        (append result \"d\")\n     \
    \   (append result \"x\")\n        (append result \"v\")\n        (append result\
    \ \"i\")\n        (append result \"x\"))\n      (result)))\n  ))\n\n;; Given a\
    \ roman numeral, obtain its integer value.\n;; Restrictions: 1 <= num <= 3999\n\
    ;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"CDXXVI\"\
    )\n;; 426", "  (define (roman_digit roman_numeral)\n    (cond\n      [(<= number\
    \ (sub1 roman_numeral)) (return (concat \"\") roman_numeral)]\n      [(>= number\
    \ (sub1 roman_numeral)) (return (concat roman_numeral) \"\")]\n      [else (return\
    \ (concat roman_numeral) \"\")]))\n  (define (convert roman_numeral)\n    (cond\n\
    \      [(= roman_numeral \"\") (return \"\")]\n      [else (return (concat (roman_digit\
    \ roman_numeral) \"\"))]))\n  (convert (int_to_roman number)))\n\n;; Given a roman\
    \ numeral, obtain its integer equivalent.\n;; Restrictions: 1 <= roman_numeral\
    \ <= 1000\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int\
    \ \"clii\")\n;; 152\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result\
    \ \"\"))\n    (if (zero? number)\n      (return result)\n      (let ((num (abs\
    \ number)))\n        (if (zero? num)\n          (return result)\n          (let\
    \ ((last (num % 10)))\n            (if (zero? last)\n              (return result)\n\
    \              (let ((next (num / 10)))\n                (if (zero? next)\n  \
    \                (return result)\n                  (let ((next (num / 100)))\n\
    \                    (if (zero? next)\n                      (return result)\n\
    \                      (let ((next (num / 1000)))\n                        (if\
    \ (zero? next)\n                          (return result)\n                  \
    \        (let ((next (num / 10000)))\n                            (if (zero? next)\n\
    \                              (return result)\n                             \
    \ (let ((next (num / 100000)))\n                                (if (zero? next)\n\
    \                                  (return result)\n                         \
    \         (let ((next (num / 1000000)))\n                                    (if\
    \ (zero? next)\n                                      (return result)\n      \
    \                                (let ((next (num / 10000000)))\n            \
    \                            (if (zero? next)\n                              \
    \            (return result)\n                                          (let ((next\
    \ (num / 100000000)))\n                                            (if (zero?\
    \ next)\n                                              (return result)\n     \
    \                                         (let ((next (num / 1000000000)))\n \
    \                                               (if (zero? next)\n           \
    \                                       (return result)\n                    \
    \                              (let ((next (num / 10000000000)))\n           \
    \                                         (if (zero? next)\n                 \
    \                                     (return result)\n                      \
    \                                (let ((next (num / 100000000000)))\n        \
    \                                                (if (zero? next)\n          \
    \                                                (return result)\n           \
    \                                               (let ((next (num / 1000000000000)))\n\
    \                                                            (if (zero? next)\n\
    \                                                              (return result)\n\
    \                                                              (let ((next (num\
    \ / 10000000000000)))\n                                                      \
    \          (if (zero? next)\n                                                \
    \              ", "  (let ((result \"\"))\n    (if (< number 100)\n      (let\
    \ ((digit (number % 10)))\n        (if (< digit 4)\n          (let ((sub (number\
    \ / 10)))\n            (let ((sub2 (number % 10)))\n              (if (< sub 2)\n\
    \                (let ((sub3 (number / 100)))\n                  (let ((sub4 (number\
    \ % 100)))\n                    (if (< sub3 3)\n                      (let ((sub5\
    \ (number / 1000)))\n                        (let ((sub6 (number % 1000)))\n \
    \                         (if (< sub5 2)\n                            (let ((sub7\
    \ (number / 10000)))\n                              (let ((sub8 (number % 10000)))\n\
    \                                (if (< sub7 1)\n                            \
    \      (let ((sub9 (number / 100000)))\n                                    (let\
    \ ((sub10 (number % 100000)))\n                                      (if (< sub9\
    \ 2)\n                                        (let ((sub11 (number / 1000000)))\n\
    \                                          (let ((sub12 (number % 1000000)))\n\
    \                                            (if (< sub11 1)\n               \
    \                               (let ((sub13 (number / 10000000)))\n         \
    \                                       (let ((sub14 (number % 10000000)))\n \
    \                                                 (if (< sub13 2)\n          \
    \                                          (let ((sub15 (number / 100000000)))\n\
    \                                                      (let ((sub16 (number %\
    \ 100000000)))\n                                                        (if (<\
    \ sub15 2)\n                                                          (let ((sub17\
    \ (number / 1000000000)))\n                                                  \
    \          (let ((sub18 (number % 1000000000)))\n                            \
    \                                  (if (< sub17 2)\n                         \
    \                                       (let ((sub19 (number / 10000000000)))\n\
    \                                                                  (let ((sub20\
    \ (number % 10000000000)))\n                                                 \
    \                   (if (< sub19 2)\n                                        \
    \                              (let ((sub21 (number / 100000000000)))\n      \
    \                                                                  (let ((sub22\
    \ (number % 100000000000)))\n                                                \
    \                          (if (< sub21 2)\n                                 \
    \                                           (let ((sub23 (number / 1000000000000)))\n\
    \                                                               ", "  (let ((result\
    \ \"\"))\n    (let ((digit (number % 10)))\n      (if (< digit 10)\n        (let\
    \ ((sub (number / 10)))\n          (if (< sub 10)\n            (let ((subsub (sub\
    \ / 10)))\n              (if (< subsub 10)\n                (let ((subsubsub (subsub\
    \ / 10)))\n                  (if (< subsubsub 10)\n                    (let ((subsubsubsub\
    \ (subsubsub / 10)))\n                      (if (< subsubsubsub 10)\n        \
    \                (let ((subsubsubsubsub (subsubsubsub / 10)))\n              \
    \            (if (< subsubsubsubsub 10)\n                            (let ((subsubsubsubsubsub\
    \ (subsubsubsubsub / 10)))\n                              (if (< subsubsubsubsubsub\
    \ 10)\n                                (let ((subsubsubsubsubsubsub (subsubsubsubsubsub\
    \ / 10)))\n                                  (if (< subsubsubsubsubsubsub 10)\n\
    \                                    (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub\
    \ / 10)))\n                                      (if (< subsubsubsubsubsubsubsub\
    \ 10)\n                                        (let ((subsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsub / 10)))\n                                        \
    \  (if (< subsubsubsubsubsubsubsubsub 10)\n                                  \
    \          (let ((subsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                              (if (< subsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsub / 10)))\n                                  \
    \                (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n              \
    \                                      (let ((subsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                       (if (< subsubsubsubsubsubsubsubsubsubsubsub 10)\n    \
    \                                                    (let ((subsubsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub", "  (let ((result \"\"))\n    (let ((n (number)))\n\
    \      (if (< n 1000)\n        (let ((num (n % 1000)))\n          (if (<= num\
    \ 100)\n            (let ((unit (num / 100)))\n              (if (<= unit 9)\n\
    \                (result (string-append result (string-append \"cm\" unit))))\n\
    \              (else\n                (result (string-append result (string-append\
    \ \"cd\" unit))))))\n          (else\n            (let ((unit (n / 100)))\n  \
    \            (if (<= unit 9)\n                (result (string-append result (string-append\
    \ \"x\" unit))))\n              (else\n                (result (string-append\
    \ result (string-append \"xc\" unit))))))\n        (else\n          (let ((unit\
    \ (n / 100)))\n            (if (<= unit 9)\n              (result (string-append\
    \ result (string-append \"i\" unit))))\n            (else\n              (result\
    \ (string-append result (string-append \"ii\" unit))))))\n      (else\n      \
    \  (let ((unit (n / 100)))\n          (if (<= unit 9)\n            (result (string-append\
    \ result (string-append \"m\" unit))))\n          (else\n            (result (string-append\
    \ result (string-append \"mm\" unit))))))\n    result))\n\n;; Given a roman numeral,\
    \ obtain its integer value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n\
    ;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((n (number)))\n    (if (<\
    \ n 1000)\n      (let ((num (string-append \"M\" (string-append \"CM\" (string-append\
    \ \"D\" (string-append \"CD\" (string-append \"C\" (string-append \"XC\" (string-append\
    \ \"L\" (string-append \"XL\" (string-append \"X\" (string-append \"IX\"))))))))))))\n\
    \      (string-append \"M\" (string-append \"CM\" (string-append \"D\" (string-append\
    \ \"CD\" (string-append \"C\" (string-append \"XC\" (string-append \"L\" (string-append\
    \ \"XL\" (string-append \"X\" (string-append \"IX\"))))))))))))))\n\n;; Given\
    \ a roman numeral, obtain its integer value.\n;; Return 0 if the input is not\
    \ a valid roman numeral.\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n\
    ;; >>> (roman_to_int \"xvii\")\n;; 17\n;; >>> (roman_to_int \"xlix\")\n;; 19\n\
    ;; >>> (roman_to_int \"cdxxvi\")\n;; 426\n;; >>> (roman_to_int \"xlix\")\n;; 0",
  "  (let ((result \"\"))\n    (let ((n (number)))\n      (if (<= n 1)\n        (result\
    \ \"\")\n      (let ((digit (modulo (/ n 10)))\n            (subtract (modulo\
    \ (/ digit 2)))\n            (add (modulo (/ digit 5)))\n            (add (modulo\
    \ (/ digit 9))))\n        (let ((subtract (modulo (/ digit 4))))\n          (let\
    \ ((add (modulo (/ digit 9))))\n            (let ((add (modulo (/ digit 5))))\n\
    \              (let ((add (modulo (/ digit 9))))\n                (let ((add (modulo\
    \ (/ digit 5))))\n                  (let ((add (modulo (/ digit 9))))\n      \
    \              (let ((add (modulo (/ digit 5))))\n                      (let ((add\
    \ (modulo (/ digit 9))))\n                        (let ((add (modulo (/ digit\
    \ 5))))\n                          (let ((add (modulo (/ digit 9))))\n       \
    \                     (let ((add (modulo (/ digit 5))))\n                    \
    \          (let ((add (modulo (/ digit 9))))\n                               \
    \ (let ((add (modulo (/ digit 5))))\n                                  (let ((add\
    \ (modulo (/ digit 9))))\n                                    (let ((add (modulo\
    \ (/ digit 5))))\n                                      (let ((add (modulo (/\
    \ digit 9))))\n                                        (let ((add (modulo (/ digit\
    \ 5))))\n                                          (let ((add (modulo (/ digit\
    \ 9))))\n                                            (let ((add (modulo (/ digit\
    \ 5))))\n                                              (let ((add (modulo (/ digit\
    \ 9))))\n                                                (let ((add (modulo (/\
    \ digit 5))))\n                                                  (let ((add (modulo\
    \ (/ digit 9))))\n                                                    (let ((add\
    \ (modulo (/ digit 5))))\n                                                   \
    \   (let ((add (modulo (/ digit 9))))\n                                      \
    \                  (let ((add (modulo (/ digit 5))))\n                       \
    \                                   (let ((add (modulo (/ digit 9))))\n      \
    \                                                      (let ((add (modulo (/ digit\
    \ 5))))\n                                                              (let ((add\
    \ (modulo (/ digit 9))))\n                                                   \
    \             (let ((", "  (let ((result \"\"))\n    (let ((digit (number % 10)))\n\
    \      (if (< digit 10)\n        (let ((sub (number / 10)))\n          (if (<\
    \ sub 10)\n            (let ((subsub (sub / 10)))\n              (if (< subsub\
    \ 10)\n                (let ((subsubsub (subsub / 10)))\n                  (if\
    \ (< subsubsub 10)\n                    (let ((subsubsubsub (subsubsub / 10)))\n\
    \                      (if (< subsubsubsub 10)\n                        (let ((subsubsubsubsub\
    \ (subsubsubsub / 10)))\n                          (if (< subsubsubsubsub 10)\n\
    \                            (let ((subsubsubsubsubsub (subsubsubsubsub / 10)))\n\
    \                              (if (< subsubsubsubsubsub 10)\n               \
    \                 (let ((subsubsubsubsubsubsub (subsubsubsubsubsub / 10)))\n \
    \                                 (if (< subsubsubsubsubsubsub 10)\n         \
    \                           (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub\
    \ / 10)))\n                                      (if (< subsubsubsubsubsubsubsub\
    \ 10)\n                                        (let ((subsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsub / 10)))\n                                        \
    \  (if (< subsubsubsubsubsubsubsubsub 10)\n                                  \
    \          (let ((subsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                              (if (< subsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsub / 10)))\n                                  \
    \                (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n              \
    \                                      (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                       (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n       \
    \                                                 (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n", "  (let ((n (number)))\n    (if\
    \ (< n 1)\n      \"i\"\n      (let ((sum (int_to_roman (sub1 n))))\n        (if\
    \ (<= sum n)\n          (string-append sum (int_to_roman (sub1 (sub1 n))))\n \
    \         (string-append sum (int_to_roman n)))))))\n\n;; Given a roman numeral,\
    \ obtain its integer value.\n;; Restrictions: 1 <= roman <= 1000\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n\
    ;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n    (let ((num\
    \ (number)))\n      (if (zero? num)\n\t(result \"\")\n\t(let ((digit (modulo num\
    \ 10)))\n\t  (if (zero? digit)\n\t    (result \"\")\n\t    (let ((sub (modulo\
    \ (sub num digit) 10)))\n\t      (if (zero? sub)\n\t\t(result digit)\n\t\t(result\
    \ digit \"\")\n\t\t(result digit sub)\n\t\t(result digit \"\")\n\t\t(result digit\
    \ sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result\
    \ digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\
    \t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub\
    \ \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result\
    \ digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\
    \t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub\
    \ \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result\
    \ digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\
    \t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub\
    \ \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result\
    \ digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\
    \t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub\
    \ \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result\
    \ digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\
    \t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub\
    \ \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result\
    \ digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\
    \t(result digit sub \"\")\n\t\t(result digit sub \"\")\n\t\t(result digit sub\
    \ \"\")\n\t\t(result digit sub", "  (let ((n (number)))\n    (if (< n 1)\n   \
    \   \"i\"\n    (if (< n 2)\n      \"ii\"\n    (if (< n 3)\n      \"iii\"\n   \
    \ (if (< n 4)\n      \"iv\"\n    (if (< n 5)\n      \"v\"\n    (if (< n 6)\n \
    \     \"vi\"\n    (if (< n 7)\n      \"vii\"\n    (if (< n 8)\n      \"viii\"\n\
    \    (if (< n 9)\n      \"ix\"\n    (if (< n 10)\n      \"x\"\n    (if (< n 11)\n\
    \      \"xi\"\n    (if (< n 12)\n      \"xii\"\n    (if (< n 13)\n      \"xiii\"\
    \n    (if (< n 14)\n      \"xiv\"\n    (if (< n 15)\n      \"xv\"\n    (if (<\
    \ n 16)\n      \"xvi\"\n    (if (< n 17)\n      \"xvii\"\n    (if (< n 18)\n \
    \     \"xviii\"\n    (if (< n 19)\n      \"xix\"\n    (if (< n 20)\n      \"xx\"\
    \n    (if (< n 30)\n      \"xxi\"\n    (if (< n 40)\n      \"xxii\"\n    (if (<\
    \ n 50)\n      \"xxiii\"\n    (if (< n 60)\n      \"xxiv\"\n    (if (< n 70)\n\
    \      \"xxv\"\n    (if (< n 80)\n      \"xxvi\"\n    (if (< n 90)\n      \"xxvii\"\
    \n    (if (< n 100)\n      \"xxviii\"\n    \"xxxx\"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (define (roman_digit roman_numeral)\n    (if (< roman_numeral \"I\")\n      (if\
    \ (< roman_numeral \"V\")\n        (if (< roman_numeral \"X\")\n          (if\
    \ (< roman_numeral \"L\")\n            (if (< roman_numeral \"C\")\n         \
    \     (if (< roman_numeral \"D\")\n                \"0\")\n              \"1\"\
    ))\n          \"2\"))\n      \"3\"))\n  (define (roman_numeral_to_int roman_numeral)\n\
    \    (cond\n      ((= roman_numeral \"I\") 1)\n      ((= roman_numeral \"V\")\
    \ 5)\n      ((= roman_numeral \"X\") 10)\n      ((= roman_numeral \"L\") 50)\n\
    \      ((= roman_numeral \"C\") 100)\n      ((= roman_numeral \"D\") 500)\n  \
    \    (else 0)))\n  (define (convert_to_roman roman_numeral)\n    (cond\n     \
    \ ((= roman_numeral \"I\") \"I\")\n      ((= roman_numeral \"V\") \"V\")\n   \
    \   ((= roman_numeral \"X\") \"X\")\n      ((= roman_numeral \"L\") \"L\")\n \
    \     ((= roman_numeral \"C\") \"C\")\n      ((= roman_numeral \"D\") \"D\")\n\
    \      (else \"?\")))\n  (define (convert_to_int roman_numeral)\n    (cond\n \
    \     ((= roman_numeral \"I\") 1)\n      ((= roman_numeral \"V\") 5)\n      ((=\
    \ roman_numeral \"X\") 10)\n      ((= roman_numeral \"L\") 50)\n      ((= roman_numeral\
    \ \"C\") 100)\n      ((= roman_numeral \"D\") 500)\n      (else 0)))\n  (define\
    \ (convert_to_roman_string roman_numeral)\n    (convert_to_roman (string-append\
    \ \"I\" (string-append \"V\" (string-append \"X\" (string-append \"L\" (string-",
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((num (number)))\n\
    \        (if (<= num 100)\n          (let ((n (num / 100)))\n            (result\
    \ (concat \"c\" (int_to_mini_roman n)))\n            )\n          (let ((n (num\
    \ / 100)))\n            (result (concat \"c\" (int_to_mini_roman n)))\n      \
    \      )\n          (let ((n (num / 100)))\n            (result (concat \"c\"\
    \ (int_to_mini_roman n)))\n            )\n          (let ((n (num / 100)))\n \
    \           (result (concat \"c\" (int_to_mini_roman n)))\n            )\n   \
    \       (let ((n (num / 100)))\n            (result (concat \"c\" (int_to_mini_roman\
    \ n)))\n            )\n          (let ((n (num / 100)))\n            (result (concat\
    \ \"c\" (int_to_mini_roman n)))\n            )\n          (let ((n (num / 100)))\n\
    \            (result (concat \"c\" (int_to_mini_roman n)))\n            )\n  \
    \        (let ((n (num / 100)))\n            (result (concat \"c\" (int_to_mini_roman\
    \ n)))\n            )\n          (let ((n (num / 100)))\n            (result (concat\
    \ \"c\" (int_to_mini_roman n)))\n            )\n          (let ((n (num / 100)))\n\
    \            (result (concat \"c\" (int_to_mini_roman n)))\n            )\n  \
    \        (let ((n (num / 100)))\n            (result (concat \"c\" (int_to_mini_roman\
    \ n)))\n            )\n          (let ((n (num / 100)))\n            (result (concat\
    \ \"c\" (int_to_mini_roman n)))\n            )\n          (let ((n (num / 100)))\n\
    \            (result (concat \"c\" (int_to_mini_roman n)))\n            )\n  \
    \        (let ((n (num / 100)))\n            (result (concat \"c\" (int_to_mini_roman\
    \ n)))\n            )\n          (", "  (let ((result \"\"))\n    (if (zero? number)\n\
    \      \"0\"\n    (if (< number 10)\n      (let ((digit number))\n        (let\
    \ ((digit_value (string-ci (string-append \"I\" digit))))\n          (let ((next_digit\
    \ (sub1 digit_value)))\n            (let ((next_digit_value (string-ci (string-append\
    \ \"I\" next_digit))))\n              (let ((next_next_digit (sub1 next_digit_value)))\n\
    \                (let ((next_next_digit_value (string-ci (string-append \"I\"\
    \ next_next_digit))))\n                  (let ((next_next_next_digit (sub1 next_next_digit_value)))\n\
    \                    (let ((next_next_next_digit_value (string-ci (string-append\
    \ \"I\" next_next_next_digit))))\n                      (let ((next_next_next_next_digit\
    \ (sub1 next_next_next_digit_value))))\n                        (let ((next_next_next_next_digit_value\
    \ (string-ci (string-append \"I\" next_next_next_next_digit))))\n            \
    \              (let ((next_next_next_next_next_digit (sub1 next_next_next_next_digit_value))))\n\
    \                            (let ((next_next_next_next_next_digit_value (string-ci\
    \ (string-append \"I\" next_next_next_next_next_digit))))\n                  \
    \            (let ((next_next_next_next_next_next_digit (sub1 next_next_next_next_next_digit_value))))\n\
    \                                (let ((next_next_next_next_next_next_digit_value\
    \ (string-ci (string-append \"I\" next_next_next_next_next_next_digit))))\n  \
    \                                (let ((next_next_next_next_next_next_next_digit\
    \ (sub1 next_next_next_next_next_next_next_digit_value))))\n                 \
    \                   (let ((next_next_next_next_next_next_next_next_digit_value\
    \ (string-ci (string-append \"I\" next_next_next_next_next_next_next_", "  (let*\
    \ ([num (number)])\n    (let ([result (make-string num)])\n      (let ([i 0])\n\
    \        (while (< i num)\n          (let ([digit (num % 10)])\n            (if\
    \ (< digit 4)\n              (set! result (concat result \" \"))\n           \
    \   (set! result (concat result (string-append \"M\" (number - digit))))\n   \
    \         (set! i (i + 1)))\n          (set! i (i + 1)))\n        (set! result\
    \ (concat result \"M\"))\n      )\n      (return result)\n    )\n  )\n)\n\n;;\
    \ Given a roman numeral, obtain its integer value.\n;; Return -1 if the input\
    \ is not a valid roman numeral.\n;; Examples:\n;; >>> (roman_to_int \"M\")\n;;\
    \ 1\n;; >>> (roman_to_int \"MM\")\n;; 2\n;; >>> (roman_to_int \"MMM\")\n;; 3\n\
    ;; >>> (roman_to_int \"MMMM\")\n;; -1\n;; >>> (roman_to_int \"MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((digit (number % 10)))\n\
    \        (if (< digit 10)\n          (let ((sub (number / 10)))\n            (let\
    \ ((sub2 (sub / 10)))\n              (if (< sub2 2)\n                (let ((sub3\
    \ (sub2 / 10)))\n                  (if (< sub3 3)\n                    (let ((sub4\
    \ (sub3 / 10)))\n                      (if (< sub4 4)\n                      \
    \  (let ((sub5 (sub4 / 10)))\n                          (if (< sub5 5)\n     \
    \                       (let ((sub6 (sub5 / 10)))\n                          \
    \    (if (< sub6 6)\n                                (let ((sub7 (sub6 / 10)))\n\
    \                                  (if (< sub7 7)\n                          \
    \          (let ((sub8 (sub7 / 10)))\n                                      (if\
    \ (< sub8 8)\n                                        (let ((sub9 (sub8 / 10)))\n\
    \                                          (if (< sub9 9)\n                  \
    \                          (let ((sub10 (sub9 / 10)))\n                      \
    \                        (if (< sub10 2)\n                                   \
    \             (let ((sub11 (sub10 / 10)))\n                                  \
    \                (if (< sub11 1)\n                                           \
    \         (result \"i\")\n                                                   \
    \ (result \"v\")\n                                                    (result\
    \ \"x\"))\n                                                  (if (< sub11 2)\n\
    \                                                    (let ((sub12 (sub11 / 10)))\n\
    \                                                      (if (< sub12 3)\n     \
    \                                                   (let ((sub13 (sub12 / 10)))\n\
    \                                                          (if (< sub13 4)\n \
    \                                                           (let ((sub14 (sub13\
    \ / 10)))\n                                                              (if (<\
    \ sub14 5)\n                                                                (let\
    \ ((sub15 (sub14 / 10)))\n                                                   \
    \               (if (< sub15 6)\n                                            \
    \                        (let ((sub16 (sub15 / 10)))\n                       \
    \                                               (if (< sub16 7)\n            \
    \                                                            (let ((sub17 (sub16\
    \ / 10)))\n                                                                  \
    \      ", "  (let ((result \"\"))\n    (if (zero? number)\n      (return \"\"\
    )\n      (let ((n (abs number)))\n        (if (zero? n)\n          (return \"\"\
    )\n          (let ((i (1)))\n            (while (<= n i)\n              (let ((d\
    \ (div n i)))\n                (if (zero? d)\n                  (return \"\")\n\
    \                  (let ((r (div d 10)))\n                    (if (zero? r)\n\
    \                      (return \"\")\n                      (let ((c (div r 5)))\n\
    \                        (if (zero? c)\n                          (return \"\"\
    )\n                          (let ((l (div c 3)))\n                          \
    \  (if (zero? l)\n                              (return \"\")\n              \
    \                (let ((s (div l 2)))\n                                (if (zero?\
    \ s)\n                                  (return \"\")\n                      \
    \            (let ((t (div s 7)))\n                                    (if (zero?\
    \ t)\n                                      (return \"\")\n                  \
    \                    (let ((u (div t 10)))\n                                 \
    \       (if (zero? u)\n                                          (return \"\"\
    )\n                                          (let ((v (div u 5)))\n          \
    \                                  (if (zero? v)\n                           \
    \                   (return \"\")\n                                          \
    \    (let ((w (div v 3)))\n                                                (if\
    \ (zero? w)\n                                                  (return \"\")\n\
    \                                                  (let ((x (div w 2)))\n    \
    \                                                (if (zero? x)\n             \
    \                                         (return \"\")\n                    \
    \                                  (let ((y (div x 7)))\n                    \
    \                                    (if (zero? y)\n                         \
    \                                 (return \"\")\n                            \
    \                              (let ((z (div y 10)))\n                       \
    \                                     (if (zero? z)\n                        \
    \                                      (return \"\")\n                       \
    \                                       (result (concat\n                    \
    \                                                  \"x\"\n                   \
    \                                                   (concat\n                \
    \                                                        \"i\"\n             \
    \                                                           (concat\n        \
    \                                                       ", "  (let ((result \"\
    \"))\n    (if (< number 100)\n      (let ((digit (number % 10)))\n        (if\
    \ (< digit 10)\n          (let ((sub (number / 10)))\n            (let ((sub2\
    \ (sub / 10)))\n              (if (< sub2 2)\n                (let ((sub3 (sub2\
    \ / 10)))\n                  (if (< sub3 3)\n                    (let ((sub4 (sub3\
    \ / 10)))\n                      (if (< sub4 4)\n                        (let\
    \ ((sub5 (sub4 / 10)))\n                          (if (< sub5 5)\n           \
    \                 (let ((sub6 (sub5 / 10)))\n                              (if\
    \ (< sub6 6)\n                                (let ((sub7 (sub6 / 10)))\n    \
    \                              (if (< sub7 7)\n                              \
    \      (let ((sub8 (sub7 / 10)))\n                                      (if (<\
    \ sub8 8)\n                                        (let ((sub9 (sub8 / 10)))\n\
    \                                          (if (< sub9 9)\n                  \
    \                          (let ((sub10 (sub9 / 10)))\n                      \
    \                        (if (< sub10 2)\n                                   \
    \             (let ((sub11 (sub10 / 10)))\n                                  \
    \                (if (< sub11 1)\n                                           \
    \         (result \"i\")\n                                                   \
    \ (result \"v\")\n                                                    (result\
    \ \"x\"))\n                                                  (if (< sub11 2)\n\
    \                                                    (let ((sub12 (sub11 / 10)))\n\
    \                                                      (if (< sub12 3)\n     \
    \                                                   (let ((sub13 (sub12 / 10)))\n\
    \                                                          (if (< sub13 4)\n \
    \                                                           (let ((sub14 (sub13\
    \ / 10)))\n                                                              (if (<\
    \ sub14 5)\n                                                                (let\
    \ ((sub15 (sub14 / 10)))\n                                                   \
    \               (if (< sub15 6)\n                                            \
    \                        (let ((sub16 (sub15 / 10)))\n                       \
    \                                               (if (< sub16 7)\n            \
    \                                                            (let ((sub17 (sub16\
    \ / 10)))\n                                                                  \
    \      ", "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((num (number)))\n\
    \        (if (<= num 100)\n          (let ((n (num % 100)))\n            (let\
    \ ((r (num / 100)))\n              (if (< r 3)\n                (result (string-append\
    \ result \"c\"))))\n              (if (<= n 10)\n                (result (string-append\
    \ result \"x\"))))\n              (if (<= n 9)\n                (result (string-append\
    \ result \"ix\"))))\n              (if (<= n 5)\n                (result (string-append\
    \ result \"v\"))))\n              (if (<= n 4)\n                (result (string-append\
    \ result \"iv\"))))\n              (if (<= n 1)\n                (result (string-append\
    \ result \"i\"))))\n              (if (<= n 2)\n                (result (string-append\
    \ result \"ii\"))))\n              (if (<= n 3)\n                (result (string-append\
    \ result \"iii\"))))\n              (if (<= n 2)\n                (result (string-append\
    \ result \"ii\"))))\n              (if (<= n 1)\n                (result (string-append\
    \ result \"i\"))))\n              (if (<= n 0)\n                (result (string-append\
    \ result \"x\"))))))))\n    (result \"\")\n  )\n)\n", "  (let ((result \"\"))\n\
    \    (if (< number 1000)\n      (let ((digit (number % 10)))\n        (if (< digit\
    \ 10)\n          (let ((sub (number / 10)))\n            (let ((sub2 (sub / 10)))\n\
    \              (if (< sub2 2)\n                (let ((sub3 (sub2 / 10)))\n   \
    \               (if (< sub3 3)\n                    (let ((sub4 (sub3 / 10)))\n\
    \                      (if (< sub4 4)\n                        (let ((sub5 (sub4\
    \ / 10)))\n                          (if (< sub5 5)\n                        \
    \    (let ((sub6 (sub5 / 10)))\n                              (if (< sub6 6)\n\
    \                                (let ((sub7 (sub6 / 10)))\n                 \
    \                 (if (< sub7 7)\n                                    (let ((sub8\
    \ (sub7 / 10)))\n                                      (if (< sub8 8)\n      \
    \                                  (let ((sub9 (sub8 / 10)))\n               \
    \                           (if (< sub9 9)\n                                 \
    \           (let ((sub10 (sub9 / 10)))\n                                     \
    \         (if (< sub10 2)\n                                                (let\
    \ ((sub11 (sub10 / 10)))\n                                                  (if\
    \ (< sub11 1)\n                                                    (result \"\
    i\")\n                                                    (result \"v\")\n   \
    \                                                 (result \"x\"))\n          \
    \                                        (if (< sub11 2)\n                   \
    \                                 (result \"l\")\n                           \
    \                         (result \"c\"))\n                                  \
    \                (if (< sub11 3)\n                                           \
    \         (result \"d\")\n                                                   \
    \ (result \"m\"))\n                                                  (if (< sub11\
    \ 4)\n                                                    (result \"i\")\n   \
    \                                                 (result \"v\")\n           \
    \                                         (result \"x\"))\n                  \
    \                                (if (< sub11 5)\n                           \
    \                         (result \"l\")\n                                   \
    \                 (result \"c\"))\n                                          \
    \        (if (< sub11 6)\n                                                   \
    \ (result \"d\")\n                                                    (result\
    \ \"m\"))\n                                                  (if (< sub11", " \
    \ (define (roman_digit roman)\n    (cond ((= roman \"I\") 1)\n      ((= roman\
    \ \"V\") 5)\n      ((= roman \"X\") 10)\n      ((= roman \"L\") 50)\n      ((=\
    \ roman \"C\") 100)\n      ((= roman \"D\") 500)\n      ((= roman \"M\") 1000)))\n\
    \  (define (roman_to_int roman)\n    (cond ((= roman \"I\") 1)\n      ((= roman\
    \ \"V\") 5)\n      ((= roman \"X\") 10)\n      ((= roman \"L\") 50)\n      ((=\
    \ roman \"C\") 100)\n      ((= roman \"D\") 500)\n      ((= roman \"M\") 1000)))\n\
    \  (define (roman_to_string roman)\n    (cond ((= roman \"I\") \"I\")\n      ((=\
    \ roman \"V\") \"V\")\n      ((= roman \"X\") \"X\")\n      ((= roman \"L\") \"\
    L\")\n      ((= roman \"C\") \"C\")\n      ((= roman \"D\") \"D\")\n      ((=\
    \ roman \"M\") \"M\")))\n  (define (roman_to_mini_roman roman)\n    (cond ((=\
    \ roman \"I\") \"x\")\n      ((= roman \"V\") \"v\")\n      ((= roman \"X\") \"\
    x\")\n      ((= roman \"L\") \"l\")\n      ((= roman \"C\") \"c\")\n      ((=\
    \ roman \"D\") \"d\")\n      ((= roman \"M\") \"m\")))\n  (define (roman_to_roman\
    \ roman)\n    (cond ((= roman \"I\") \"I\")\n      ((= roman \"V\") \"V\")\n \
    \     ((= roman \"X\") \"X\")\n      ((= roman \"L\") \"L\")\n      ((= roman\
    \ \"C\") \"C\")\n      ((= roman \"D\") \"D\")\n      ((= roman \"M\") \"M\")))\n\
    \  (define (roman_to_int roman)\n    (cond ((= roman \"I\") 1)\n      ((", " \
    \ (let ((result \"\"))\n    (if (< number 100)\n      (let ((digit (number % 10)))\n\
    \        (if (< digit 9)\n          (result (append result \"\" digit))\n    \
    \      (let ((next (number / 10)))\n            (if (< next 100)\n           \
    \   (let ((next_digit (next % 10)))\n                (if (< next_digit 9)\n  \
    \                (result (append result \"\" next_digit))\n                  (let\
    \ ((next_next (next / 10)))\n                    (if (< next_next 100)\n     \
    \                 (let ((next_next_digit (next_next % 10)))\n                \
    \        (if (< next_next_digit 9)\n                          (result (append\
    \ result \"\" next_next_digit))\n                          (result (append result\
    \ \"\" digit))))))))))))))\n    (result result)))\n\n;; Given a roman numeral,\
    \ obtain its integer value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"CDXXVI\")\n;; 426",
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((num (number)))\n\
    \        (let ((n (num)))\n          (while (< n 1000)\n            (let ((n (-\
    \ n 1)))\n              (if (< n 4)\n                (let ((n (n)))\n        \
    \          (let ((n (n)))\n                    (let ((n (n)))\n              \
    \        (let ((n (n)))\n                        (let ((n (n)))\n            \
    \              (let ((n (n)))\n                            (let ((n (n)))\n  \
    \                            (let ((n (n)))\n                                (let\
    \ ((n (n)))\n                                  (let ((n (n)))\n              \
    \                      (let ((n (n)))\n                                      (let\
    \ ((n (n)))\n                                        (let ((n (n)))\n        \
    \                                  (let ((n (n)))\n                          \
    \                  (let ((n (n)))\n                                          \
    \    (let ((n (n)))\n                                                (let ((n\
    \ (n)))\n                                                  (let ((n (n)))\n  \
    \                                                  (let ((n (n)))\n          \
    \                                            (let ((n (n)))\n                \
    \                                        (let ((n (n)))\n                    \
    \                                      (let ((n (n)))\n                      \
    \                                      (let ((n (n)))\n                      \
    \                                        (let ((n (n)))\n                    \
    \                                            (let ((n (n)))\n                \
    \                                                  (let ((n (n)))\n          \
    \                                                          (let ((n (n)))\n  \
    \                                                                    (let ((n\
    \ (n)))\n                                                                    \
    \    (let ((n (n)))\n                                                        \
    \                  (let ((n (n)))\n                                          \
    \                                  (let ((n (n)))\n                          \
    \                                                    (let ((n (n)))\n        \
    \                                                                        (let\
    \ ((n (n)))\n                                                                \
    \                  (let ((n (n)))\n                                          \
    \                                          (let ((n (n)))\n                  \
    \                                                                    (let ((n\
    \ (n)))\n                                                                    \
    \                    (let ((n (n)))\n                                        \
    \                                                  (let ((n (n)))\n", "  (let\
    \ ((result \"\"))\n    (if (< number 1000)\n      (let ((digit (modulo number\
    \ 10)))\n        (if (< digit 1)\n          (result \"\")\n          (let ((subresult\
    \ (int_to_mini_roman (number - digit))))\n            (result (concat subresult\
    \ (string-append \"-\" digit))))))\n      (let ((subresult (int_to_mini_roman\
    \ (number / 10))))\n        (let ((digit (modulo number 10)))\n          (if (<\
    \ digit 1)\n            (result \"\")\n            (let ((subresult (int_to_mini_roman\
    \ (number - digit))))\n              (result (concat subresult (string-append\
    \ \"-\" digit)))))))))\n  (result))\n\n;; Given a roman numeral, obtain its integer\
    \ value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result\
    \ \"\"))\n    (let ((i number))\n      (while (< i 1000)\n        (let ((n (modulo\
    \ i 10)))\n          (if (< n 5)\n            (append result (string-append \"\
    \ \" (string-append #\\(\"\" (string-append n \"\") \"\") \"-\"))))\n        \
    \  (append result (string-append #\\(\"\" (string-append n \"\") \"\") \" \"))\n\
    \          (set! i (i - 1)))))\n    (reverse result)))\n\n;; Given a roman numeral,\
    \ obtain its integer value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"CDXXVI\")\n;; 426",
  "  (let ((result \"\"))\n    (if (zero? number)\n      \"0\"\n    (if (< number\
    \ 10)\n      (let ((digit (number % 10)))\n        (if (< digit 3)\n         \
    \ (let ((sub (number / 10)))\n            (if (< sub 10)\n              (let ((sub2\
    \ (sub / 10)))\n                (if (< sub2 3)\n                  (let ((sub3\
    \ (sub2 / 10)))\n                    (if (< sub3 2)\n                      (let\
    \ ((sub4 (sub3 / 10)))\n                        (if (< sub4 1)\n             \
    \             (let ((sub5 (sub4 / 10)))\n                            (if (< sub5\
    \ 1)\n                              (let ((sub6 (sub5 / 10)))\n              \
    \                  (if (< sub6 1)\n                                  (let ((sub7\
    \ (sub6 / 10)))\n                                    (if (< sub7 1)\n        \
    \                              (let ((sub8 (sub7 / 10)))\n                   \
    \                     (if (< sub8 1)\n                                       \
    \   (let ((sub9 (sub8 / 10)))\n                                            (if\
    \ (< sub9 1)\n                                              (let ((sub10 (sub9\
    \ / 10)))\n                                                (if (< sub10 1)\n \
    \                                                 (let ((sub11 (sub10 / 10)))\n\
    \                                                    (if (< sub11 1)\n       \
    \                                               (let ((sub12 (sub11 / 10)))\n\
    \                                                        (if (< sub12 1)\n   \
    \                                                       (let ((sub13 (sub12 /\
    \ 10)))\n                                                            (if (< sub13\
    \ 1)\n                                                              (let ((sub14\
    \ (sub13 / 10)))\n                                                           \
    \     (if (< sub14 1)\n                                                      \
    \            (let ((sub15 (sub14 / 10)))\n                                   \
    \                                 (if (< sub15 1)\n                          \
    \                                            (let ((sub16 (sub15 / 10)))\n   \
    \                                                                     (if (< sub16\
    \ 1)\n                                                                       \
    \   (let ((sub17 (sub16 / 10)))\n                                            \
    \                                (if (< sub17 1)\n                           \
    \                                                   (let ((sub18", "  (let ((result\
    \ \"\"))\n    (let ((num (number)))\n      (if (<= num 1000)\n        (do ((i\
    \ 1) (j 1))\n          ((<= num (quotient num (remainder i 10)))\n           (set!\
    \ result (concat result (string-append (string-append \"M\" (quotient num (remainder\
    \ i 10))) \"\") (string-append \"C\" (quotient num (remainder i 100))) \"\") (string-append\
    \ \"D\" (quotient num (remainder i 1000))) \"\")\n           (set! result (concat\
    \ result (string-append \"CM\" (quotient num (remainder i 100))) \"\") (string-append\
    \ \"CD\" (quotient num (remainder i 1000))) \"\")\n           (set! result (concat\
    \ result (string-append \"XC\" (quotient num (remainder i 10))) \"\") (string-append\
    \ \"XL\" (quotient num (remainder i 100))) \"\")\n           (set! result (concat\
    \ result (string-append \"X\" (quotient num (remainder i 10))) \"\") (string-append\
    \ \"L\" (quotient num (remainder i 100))) \"\")\n           (set! result (concat\
    \ result (string-append \"XI\" (quotient num (remainder i 10))) \"\") (string-append\
    \ \"VI\" (quotient num (remainder i 100))) \"\")\n           (set! result (concat\
    \ result (string-append \"IX\" (quotient num (remainder i 10))) \"\") (string-append\
    \ \"V\" (quotient num (remainder i 100))) \"\")\n           (set! result (concat\
    \ result (string-append \"I\" (quotient num (remainder i 10))) \"\") (string-append\
    \ \"V\" (quotient num (remainder i 100))) \"\")\n           (set! result (concat\
    \ result (string-append \"I\" (quotient num (remainder i 10))) \"\") (string-append\
    \ \"I\" (quotient num (remainder i 100))) \"\")\n           (set! result (concat\
    \ result (string-append", "  (let ((result \"\"))\n    (let ((n (number)))\n \
    \     (if (< n 100)\n        (let ((n_1 (modulo n 10)))\n          (let ((n_2\
    \ (modulo n 5)))\n            (let ((n_3 (modulo n 1)))\n              (if (<\
    \ n_3 4)\n                (let ((n_4 (modulo n 4)))\n                  (if (<\
    \ n_4 9)\n                    (let ((n_5 (modulo n 5)))\n                    \
    \  (if (< n_5 4)\n                        (let ((n_6 (modulo n 6)))\n        \
    \                  (if (< n_6 9)\n                            (let ((n_7 (modulo\
    \ n 7)))\n                              (if (< n_7 4)\n                      \
    \          (let ((n_8 (modulo n 8)))\n                                  (if (<\
    \ n_8 9)\n                                    (let ((n_9 (modulo n 9)))\n    \
    \                                  (if (< n_9 4)\n                           \
    \             (let ((n_10 (modulo n 10)))\n                                  \
    \        (if (< n_10 9)\n                                            (let ((n_11\
    \ (modulo n 11)))\n                                              (if (< n_11 4)\n\
    \                                                (let ((n_12 (modulo n 12)))\n\
    \                                                  (if (< n_12 9)\n          \
    \                                          (let ((n_13 (modulo n 13)))\n     \
    \                                                 (if (< n_13 4)\n           \
    \                                             (let ((n_14 (modulo n 14)))\n  \
    \                                                        (if (< n_14 9)\n    \
    \                                                        (let ((n_15 (modulo n\
    \ 15)))\n                                                              (if (<\
    \ n_15 4)\n                                                                (let\
    \ ((n_16 (modulo n 16)))\n                                                   \
    \               (if (< n_16 9)\n                                             \
    \                       (let ((n_17 (modulo n 17)))\n                        \
    \                                              (if (< n_17 4)\n              \
    \                                                          (let ((n_18 (modulo\
    \ n 18)))\n                                                                  \
    \        (if (< n_", "  (let ((result \"\"))\n    (if (zero? number)\n      \"\
    0\"\n    (if (< number 1000)\n      (let ((n (abs number)))\n        (if (<= n\
    \ 100)\n          (let ((n (modulo n 10)))\n            (if (<= n 9)\n       \
    \       (let ((n (modulo n 5)))\n                (if (<= n 4)\n              \
    \    (let ((n (modulo n 1)))\n                    (if (<= n 3)\n             \
    \         (let ((n (modulo n 1)))\n                        (if (<= n 2)\n    \
    \                      (let ((n (modulo n 1)))\n                            (if\
    \ (<= n 1)\n                              (let ((n (modulo n 1)))\n          \
    \                      (if (<= n 1)\n                                  \"i\"\n\
    \                                  (let ((n (modulo n 1)))\n                 \
    \                   (if (<= n 1)\n                                      \"v\"\n\
    \                                      (let ((n (modulo n 1)))\n             \
    \                           (if (<= n 1)\n                                   \
    \       \"x\"\n                                          (let ((n (modulo n 1)))\n\
    \                                            (if (<= n 1)\n                  \
    \                            \"l\"\n                                         \
    \     (let ((n (modulo n 1)))\n                                              \
    \  (if (<= n 1)\n                                                  \"c\"\n   \
    \                                               (let ((n (modulo n 1)))\n    \
    \                                                (if (<= n 1)\n              \
    \                                        \"d\"\n                             \
    \                         (let ((n (modulo n 1)))\n                          \
    \                              (if (<= n 1)\n                                \
    \                          \"m\"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (let* ([\n    num_digits (number-of-digits number)\n    num_divisors (number-of-divisors\
    \ number)\n    num_roman_digits (num_digits/num_divisors)\n    num_roman_digits_minus_one\
    \ (num_roman_digits - 1)\n    num_roman_digits_minus_two (num_roman_digits - 2)\n\
    \    num_roman_digits_minus_three (num_roman_digits - 3)\n    num_roman_digits_minus_four\
    \ (num_roman_digits - 4)\n    num_roman_digits_minus_five (num_roman_digits -\
    \ 5)\n    num_roman_digits_minus_six (num_roman_digits - 6)\n    num_roman_digits_minus_seven\
    \ (num_roman_digits - 7)\n    num_roman_digits_minus_eight (num_roman_digits -\
    \ 8)\n    num_roman_digits_minus_nine (num_roman_digits - 9)\n    num_roman_digits_minus_ten\
    \ (num_roman_digits - 10)\n    num_roman_digits_minus_eleven (num_roman_digits\
    \ - 11)\n    num_roman_digits_minus_twelve (num_roman_digits - 12)\n    num_roman_digits_minus_thirteen\
    \ (num_roman_digits - 13)\n    num_roman_digits_minus_fourteen (num_roman_digits\
    \ - 14)\n    num_roman_digits_minus_fifteen (num_roman_digits - 15)\n    num_roman_digits_minus_sixteen\
    \ (num_roman_digits - 16)\n    num_roman_digits_minus_seventeen (num_roman_digits\
    \ - 17)\n    num_roman_digits_minus_eighteen (num_roman_digits - 18)\n    num_roman_digits_minus_nineteen\
    \ (num_roman_digits - 19)\n    num_roman_digits_minus_twenty (num_roman_digits\
    \ - 20)\n    num_", "  (let ((result \"\"))\n    (let ((num (number)))\n     \
    \ (if (<= num 1000)\n        (let ((i 0))\n          (while (<= num (quotient\
    \ num 10))\n            (let ((digit (quotient num 10)))\n              (set!\
    \ i (+ i digit))\n              (set! num (quotient num 10)))\n            (set!\
    \ result (concat result (string-append (string-append \"M\" (string-append (string-append\
    \ \"D\" (string-append \"C\" (string-append \"L\" \"X\")))) (string-append \"\
    I\" (string-append \"V\" \"I\"))))))\n          (set! result (concat result (string-append\
    \ \"M\" (string-append (string-append \"D\" (string-append \"C\" (string-append\
    \ \"L\" \"X\")))) (string-append \"I\" (string-append \"V\" \"I\"))))))\n    \
    \  (else\n        (let ((i 0))\n          (while (<= num 9)\n            (let\
    \ ((digit (quotient num 10)))\n              (set! i (+ i digit))\n          \
    \    (set! num (quotient num 10)))\n            (set! result (concat result (string-append\
    \ (string-append \"M\" (string-append \"D\" (string-append \"C\" (string-append\
    \ \"L\" \"X\")))) (string-append \"I\" (string-append \"V\" \"I\"))))))\n    \
    \      (set! result (concat result (string-append \"M\" (string-append (string-append\
    \ \"D\" (string-append \"C\" (string-append \"L\" \"X\")))) (string-append \"\
    I\" (string-append \"V\" \"I\"))))))))\n  (string-lowercase result))\n", "  (let\
    \ ((result \"\"))\n    (if (< number 1000)\n      (let ((n (number)))\n      \
    \  (if (<= n 100)\n          (let ((n1 (n % 10)))\n            (let ((n2 (n /\
    \ 10)))\n              (result (concat \"x\" (if (< n1 10) \"i\" (if (< n2 10)\
    \ \"v\" \"ii\"))))))))\n      (let ((n (number)))\n        (if (<= n 100)\n  \
    \        (let ((n1 (n % 10)))\n            (let ((n2 (n / 10)))\n            \
    \  (result (concat \"c\" (if (< n1 10) \"l\" (if (< n2 10) \"x\" \"cl\"))))))))\n\
    \    (result)))\n\n;; Given a roman numeral, obtain its integer value.\n;; Restrictions:\
    \ 1 <= roman <= 1000\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>>\
    \ (roman_to_int \"clii\")\n;; 152\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426",
  "  (let* ([num (number)])\n    (let ([result (make-string (number-to-string num)\
    \ 2)])\n      (for ([i (0)])\n        (when (> (string-length result) i)\n   \
    \       (string-set! result (string-insert result \"i\") i)\n          (string-set!\
    \ result (string-insert result \"v\") i)\n          (string-set! result (string-insert\
    \ result \"x\") i)\n          (string-set! result (string-insert result \"l\"\
    ) i))\n        (set! i (i + 1)))\n      result))\n)\n\n;; Given a roman numeral,\
    \ obtain its integer equivalent.\n;; Restrictions: 1 <= num <= 1000\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n\
    ;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n    (if (<\
    \ number 100)\n      (let ((n (number)))\n        (do ((i 1) (j 1))\n        \
    \  ((< i 3)\n            (let ((k (modulo n (i * 10))))\n              (let ((l\
    \ (modulo k (i * 5))))\n                (let ((m (modulo l (i * 4))))\n      \
    \            (result (concat result (number-to-roman k) \"-\")))))))))\n     \
    \ (result (number-to-roman number))))\n\n;; Given a roman numeral, obtain its\
    \ integer value.\n;; Restrictions: 1 <= num <= 1000\n;; Examples:\n;; >>> (roman_to_int\
    \ \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n;; >>> (roman_to_int\
    \ \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n    (let ((i number))\n     \
    \ (while (< i 1000)\n        (let ((d (div i 4)))\n          (if (< d 1)\n   \
    \         (append result (string-append \"i\" (string-append \"v\" \"i\")))\n\
    \            (append result (string-append \"i\" (string-append \"x\" \"i\")))\n\
    \            (append result (string-append \"i\" (string-append \"c\" \"i\")))\n\
    \            (append result (string-append \"i\" (string-append \"d\" \"i\"))))\n\
    \        (set! i (i - d)))\n      (append result (string-append \"i\" (string-append\
    \ \"x\" \"i\"))))\n    (string-to-lowercase result)))\n\n;; Given a roman numeral,\
    \ obtain its integer value.\n;; Restrictions: 1 <= num <= 3999\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426",
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((digit (number % 10)))\n\
    \        (if (< digit 10)\n          (let ((sub (number / 10)))\n            (let\
    \ ((sub2 (sub / 10)))\n              (if (< sub2 2)\n                (let ((sub3\
    \ (sub2 / 10)))\n                  (if (< sub3 3)\n                    (let ((sub4\
    \ (sub3 / 10)))\n                      (if (< sub4 4)\n                      \
    \  (let ((sub5 (sub4 / 10)))\n                          (if (< sub5 5)\n     \
    \                       (let ((sub6 (sub5 / 10)))\n                          \
    \    (if (< sub6 6)\n                                (let ((sub7 (sub6 / 10)))\n\
    \                                  (if (< sub7 7)\n                          \
    \          (let ((sub8 (sub7 / 10)))\n                                      (if\
    \ (< sub8 8)\n                                        (let ((sub9 (sub8 / 10)))\n\
    \                                          (if (< sub9 9)\n                  \
    \                          (let ((sub10 (sub9 / 10)))\n                      \
    \                        (if (< sub10 2)\n                                   \
    \             (let ((sub11 (sub10 / 10)))\n                                  \
    \                (if (< sub11 1)\n                                           \
    \         (result \"i\")\n                                                   \
    \ (result \"v\")\n                                                    (result\
    \ \"x\"))\n                                                  (if (< sub11 2)\n\
    \                                                    (let ((sub12 (sub11 / 10)))\n\
    \                                                      (if (< sub12 2)\n     \
    \                                                   (let ((sub13 (sub12 / 10)))\n\
    \                                                          (if (< sub13 3)\n \
    \                                                           (let ((sub14 (sub13\
    \ / 10)))\n                                                              (if (<\
    \ sub14 4)\n                                                                (let\
    \ ((sub15 (sub14 / 10)))\n                                                   \
    \               (if (< sub15 5)\n                                            \
    \                        (let ((sub16 (sub15 / 10)))\n                       \
    \                                               (if (< sub16 6)\n            \
    \                                                            (let ((sub17 (sub16\
    \ / 10)))\n                                                                  \
    \      ", "  (let ((result \"\"))\n    (let ((i number))\n      (while (< i 1000)\n\
    \        (let ((n (modulo i 10)))\n          (if (< n 5)\n            (append\
    \ result \"v\" (modulo i 5))\n            (append result \"x\" (modulo i 4))\n\
    \            (append result \"c\" (modulo i 3))\n            (append result \"\
    l\" (modulo i 2))\n            (append result \"d\" (modulo i 1)))\n         \
    \ (set! i (i - 1)))\n        (set! i (i + 1)))\n      (reverse result)))\n  (string-to-symbol\
    \ result))\n\n;; Given a roman numeral, obtain its integer value.\n;; Restrictions:\
    \ 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>>\
    \ (roman_to_int \"CDXXVI\")\n;; 426", "  (let ((result \"\"))\n    (let ((i number))\n\
    \      (while (< i 1000)\n        (let ((digit (modulo (/ i 10)))\n          \
    \    (sub (if (< digit 2) \"cm\" \"cd\") \"x\")\n              (add (if (< digit\
    \ 2) \"ix\" \"v\") \"i\"))\n          (set! result (concat result (substring result\
    \ digit))))\n        (set! i (quotient i 10)))\n      (return result)))\n)\n\n\
    ;; Given a roman numeral, obtain its integer value.\n;; Restrictions: 1 <= num\
    \ <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int\
    \ \"cdxxvi\")\n;; 426", "  (let* ([n (number)]\n          [result (make-string\
    \ n)]))\n  (let* ([i (0)]\n          [j (0)]\n          [k (0)]\n          [l\
    \ (0)]\n          [m (0)]\n          [n (0)]\n          [p (0)]\n          [q\
    \ (0)]\n          [r (0)]\n          [s (0)]\n          [t (0)]\n          [u\
    \ (0)]\n          [v (0)]\n          [w (0)]\n          [x (0)]\n          [y\
    \ (0)]\n          [z (0)])\n  (while (<= n i)\n    (if (<= i 2)\n      (set! i\
    \ (+ i 1))\n      (set! j (+ j 1))\n      (set! k (+ k 1))\n      (set! l (+ l\
    \ 1))\n      (set! m (+ m 1))\n      (set! n (+ n 1))\n      (set! p (+ p 1))\n\
    \      (set! q (+ q 1))\n      (set! r (+ r 1))\n      (set! s (+ s 1))\n    \
    \  (set! t (+ t 1))\n      (set! u (+ u 1))\n      (set! v (+ v 1))\n      (set!\
    \ w (+ w 1))\n      (set! x (+ x 1))\n      (set! y (+ y 1))\n      (set! z (+\
    \ z 1)))\n    (else\n      (if (<= i 3)\n        (set! i (+ i 1))\n        (set!\
    \ j (+ j 1))\n        (set! k (+ k 1))\n        (set! l (+ l 1))\n        (set!\
    \ m (+ m 1))\n        (set! n (+ n 1))\n        (set! p (+ p 1))\n        (set!\
    \ q (+ q 1))\n        (set! r (+ r 1))\n        (set! s (+ s 1))\n        (set!\
    \ t (+ t 1))\n        (set! u (+ u 1))\n        (set! v (+ v 1))\n        (set!\
    \ w (+ w 1))\n        (set! x (+ x 1))\n        (set! y (+ y 1))\n        (set!\
    \ z (+ z", "  (define (convert n)\n    (cond\n      [(< n 100)]\n        [(convert\
    \ (add n (mul 10 (convert (sub n 10)))))]\n        [else\n          (convert (add\
    \ n (mul 10 (convert (sub n 100)))))]\n    )\n  )\n  (convert number)\n)\n\n;;\
    \ >>> (int_to_mini_roman 19)\n;; \"xix\"\n;; >>> (int_to_mini_roman 152)\n;; \"\
    clii\"\n;; >>> (int_to_mini_roman 426)\n;; \"cdxxvi\"", "  (let* ([result (string-append\
    \ \"\")])\n    (let* ([num (number)])\n      (if (<= num 1000)\n        (let*\
    \ ([n (num % 1000)]\n                [d (num / 1000)])\n          (if (<= n 100)\n\
    \            (let* ([n (n % 100)]\n                    [d (n / 100)])\n      \
    \        (if (<= n 10)\n                (let* ([n (n % 10)]\n                \
    \        [d (n / 10)])\n                  (if (<= n 1)\n                    (let*\
    \ ([n (n % 1)]\n                            [d (n / 1)])\n                   \
    \   (result (string-append (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string", "  (let* ([num (number)])\n    (if (<= num 1000)\n      (let*\
    \ ([n (num)])\n        (let* ([n1 (n / 10)])\n          (let* ([n2 (n % 10)])\n\
    \            (if (< n2 4)\n              (let* ([n3 (n2 / 2)])\n             \
    \   (let* ([n4 (n2 % 2)])\n                  (if (< n4 0)\n                  \
    \  (let* ([n5 (n3 / 3)])\n                      (let* ([n6 (n3 % 3)])\n      \
    \                  (if (< n6 0)\n                          (let* ([n7 (n4 / 4)])\n\
    \                            (let* ([n8 (n4 % 4)])\n                         \
    \     (if (< n8 0)\n                                (let* ([n9 (n5 / 5)])\n  \
    \                                (let* ([n10 (n5 % 5)])\n                    \
    \                (if (< n10 0)\n                                      (let* ([n11\
    \ (n6 / 6)])\n                                        (let* ([n12 (n6 % 6)])\n\
    \                                          (if (< n12 0)\n                   \
    \                         (let* ([n13 (n7 / 7)])\n                           \
    \                   (let* ([n14 (n7 % 7)])\n                                 \
    \               (if (< n14 0)\n                                              \
    \    (let* ([n15 (n8 / 8)])\n                                                \
    \    (let* ([n16 (n8 % 8)])\n                                                \
    \      (if (< n16 0)\n                                                       \
    \ (let* ([n17 (n9 / 9)])\n                                                   \
    \       (let* ([n18 (n9 % 9)])\n                                             \
    \              (if (< n18 0)\n                                               \
    \               (let* ([n19 (n10 / 10)])\n                                   \
    \                             (let* ([n20 (n10 % 10)])\n                     \
    \                                             (if (< n20 0)\n                \
    \                                                    (let* ([n21 (n11 / 11)])\n\
    \                                                                      (let* ([n22",
  "  (let ((result \"\"))\n    (if (zero? number)\n      \"0\"\n    (if (< number\
    \ 10)\n      (let ((digit (modulo number 10)))\n        (if (zero? digit)\n  \
    \        \"0\"\n        (let ((sub (modulo (sub number digit) 10)))\n        \
    \  (if (zero? sub)\n            (concat \"0\")\n          (let ((sub2 (modulo\
    \ (sub number (sub sub 2)) 10)))\n            (if (zero? sub2)\n             \
    \ (concat \"0\")\n            (let ((sub3 (modulo (sub number (sub sub3)) 10)))\n\
    \              (if (zero? sub3)\n                (concat \"0\")\n            \
    \  (let ((sub4 (modulo (sub number (sub sub4)) 10)))\n                (if (zero?\
    \ sub4)\n                  (concat \"0\")\n                (let ((sub5 (modulo\
    \ (sub number (sub sub5)) 10)))\n                  (if (zero? sub5)\n        \
    \            (concat \"0\")\n                  (let ((sub6 (modulo (sub number\
    \ (sub sub6)) 10)))\n                    (if (zero? sub6)\n                  \
    \    (concat \"0\")\n                    (let ((sub7 (modulo (sub number (sub\
    \ sub7)) 10)))\n                      (if (zero? sub7)\n                     \
    \   (concat \"0\")\n                      (let ((sub8 (modulo (sub number (sub\
    \ sub8)) 10)))\n                        (if (zero? sub8)\n                   \
    \       (concat \"0\")\n                        (let ((sub9 (modulo (sub number\
    \ (sub sub9)) 10)))\n                          (if (zero? sub9)\n            \
    \                (concat \"0\")\n                          (let ((sub10 (modulo\
    \ (sub number (sub sub10)) 10)))\n                            (if (zero? sub10)\n\
    \                              (concat \"0\")\n                            (let\
    \ ((sub11 (modulo (sub number (sub sub11)) 10)))\n                           \
    \   (if (zero? sub11)\n                                (concat \"0\")\n      \
    \                        (let ((sub12 (modulo (sub number (sub sub12)) 10)))\n\
    \                                (if (zero? sub12)\n                         \
    \         (concat \"0\")\n                                (let", "  (define (roman_digit\
    \ roman)\n    (cond\n      ((= roman \"I\") 1)\n      ((= roman \"V\") 5)\n  \
    \    ((= roman \"X\") 10)\n      ((= roman \"L\") 50)\n      ((= roman \"C\")\
    \ 100)\n      ((= roman \"D\") 500)\n      ((= roman \"M\") 1000)\n      (else\
    \ 0)))\n  (define (roman_to_int roman)\n    (cond\n      ((= roman \"I\") 1)\n\
    \      ((= roman \"V\") 5)\n      ((= roman \"X\") 10)\n      ((= roman \"L\"\
    ) 50)\n      ((= roman \"C\") 100)\n      ((= roman \"D\") 500)\n      ((= roman\
    \ \"M\") 1000)\n      (else 0)))\n  (define (roman_to_string roman)\n    (cond\n\
    \      ((= roman \"I\") \"I\")\n      ((= roman \"V\") \"V\")\n      ((= roman\
    \ \"X\") \"X\")\n      ((= roman \"L\") \"L\")\n      ((= roman \"C\") \"C\")\n\
    \      ((= roman \"D\") \"D\")\n      ((= roman \"M\") \"M\")\n      (else \"\
    ?\")))\n  (define (roman_to_mini_roman roman)\n    (cond\n      ((= roman \"I\"\
    ) \"x\")\n      ((= roman \"V\") \"v\")\n      ((= roman \"X\") \"x\")\n     \
    \ ((= roman \"L\") \"l\")\n      ((= roman \"C\") \"c\")\n      ((= roman \"D\"\
    ) \"d\")\n      ((= roman \"M\") \"m\")\n      (else \"?\")))\n  (define (int_to_roman\
    \ number)\n    (cond\n      ((<= number 0) \"\")\n      ((<= number 1) \"I\")\n\
    \      ((<= number 2) \"II\")\n      ((<= number 3) \"III\")\n      ((<= number\
    \ 4) \"IV\")\n      ((<= number 5) \"V\")\n      ((<= number 6) \"VI\")\n    \
    \  ((<=", "  (let* ([num (number)]\n          [result (make-string number)])\n\
    \    (let ([i 0])\n      (while (<= i num)\n        (let ([j (i - 1)])\n     \
    \     (if (<= j 2)\n            (set! result (concat result \"i\"))\n        \
    \    (set! result (concat result \"v\"))\n            (set! i j))\n          (set!\
    \ i j))\n        (set! i 2))\n      result))\n\n;; >>> (int_to_mini_roman 1000)\n\
    ;; \"m\"\n;; >>> (int_to_mini_roman 1001)\n;; \"cm\"\n;; >>> (int_to_mini_roman\
    \ 9999)\n;; \"mcm\"\n;; >>> (int_to_mini_roman 9999)\n;; \"mcm\"\n;; >>> (int_to_mini_roman\
    \ 10001)\n;; \"cmcm\"\n;; >>> (int_to_mini_roman 10001)\n;; \"cmcm\"\n;; >>> (int_to_mini_roman\
    \ 100001)\n;; \"cmcmcm\"\n;; >>> (int_to_mini_roman 100001)\n;; \"cmcmcm\"\n;;\
    \ >>> (int_to_mini_roman 1000001)\n;; \"cmcmcmcm\"\n;; >>> (int_to_mini_roman\
    \ 1000001)\n;; \"cmcmcmcm\"\n;; >>> (int_to_mini_roman 10000001)\n;; \"cmcmcmcmcm\"\
    \n;; >>> (int_to_mini_roman 10000001)\n;; \"cmcmcmcmcm\"\n;; >>> (int_to_mini_roman\
    \ 100000001)\n;; \"cmcmcmcmcmcm\"\n;; >>> (int_to_mini_roman 100000001)\n;; \"\
    cmcmcmcmcmcm\"\n;; >>> (int_to_mini_roman 1000000001)\n;; \"cmcmcmcmcmcmcm\"\n\
    ;; >>> (int_to_mini_roman 1000000001)\n;; \"cmcmcmcmcmcmcm\"\n;; >>> (int_to_mini_roman\
    \ 10000000001)\n;; \"cmcmcmcmcmcmcmcm\"\n;; >>> (int_to_mini_roman 10000000001)\n\
    ;; \"cm", "  (let ((result \"\"))\n    (if (< number 100)\n      (let ((n (number)))\n\
    \        (if (<= n 5)\n          (let ((n (number)))\n            (if (<= n 4)\n\
    \              (let ((n (number)))\n                (if (<= n 3)\n           \
    \       (let ((n (number)))\n                    (if (<= n 2)\n              \
    \        (let ((n (number)))\n                        (if (<= n 1)\n         \
    \                 (let ((n (number)))\n                            (if (<= n 1)\n\
    \                              (let ((n (number)))\n                         \
    \       (if (<= n 1)\n                                  (let ((n (number)))\n\
    \                                    (if (<= n 1)\n                          \
    \            (let ((n (number)))\n                                        (if\
    \ (<= n 1)\n                                          (let ((n (number)))\n  \
    \                                          (if (<= n 1)\n                    \
    \                          (let ((n (number)))\n                             \
    \                   (if (<= n 1)\n                                           \
    \       (let ((n (number)))\n                                                \
    \    (if (<= n 1)\n                                                      (let\
    \ ((n (number)))\n                                                        (if\
    \ (<= n 1)\n                                                          (let ((n\
    \ (number)))\n                                                            (if\
    \ (<= n 1)\n                                                              (let\
    \ ((n (number)))\n                                                           \
    \     (if (<= n 1)\n                                                         \
    \         (let ((n (number)))\n                                              \
    \                      (if (<= n 1)\n                                        \
    \                              (let ((n (number)))\n                         \
    \                                               (if (<= n 1)\n               \
    \                                                           (let ((n (number)))\n\
    \                                                                            (if\
    \ (<= n 1)\n                                                                 \
    \             (let ((n (number)))\n                                          \
    \                                      (if (<= n 1)\n                        \
    \                                                          (let ((n (number)))\n\
    \                                                                            \
    \        (if (<= n 1)\n                                                      \
    \                                (let ((n (number)))\n                       \
    \                                                                 (if (<= n 1)\n\
    \                                                                            \
    \              (let ((n (number)))", "  (let ((n (number)))\n    (if (< n 1)\n\
    \      \"error\"\n      (let ((result (string-append\n                     (string-append\n\
    \                      (string-append\n                       (string-append\n\
    \                        (string-append\n                          (string-append\n\
    \                           (string-append\n                            (string-append\n\
    \                              (string-append\n                              \
    \  (string-append\n                                 (string-append\n         \
    \                         (string-append\n                                   \
    \ (string-append\n                                      (string-append\n     \
    \                                   (string-append\n                         \
    \                 (string-append\n                                           \
    \ (string-append\n                                              (string-append\n\
    \                                                (string-append\n            \
    \                                      (string-append\n                      \
    \                              (string-append\n                              \
    \                        (string-append\n                                    \
    \                    (string-append\n                                        \
    \                  (string-append\n                                          \
    \                  (string-append\n                                          \
    \                    (string-append\n                                        \
    \                        (string-append\n                                    \
    \                              (string-append\n                              \
    \                                      (string-append\n                      \
    \                                                (string-append\n            \
    \                                                            (string-append\n\
    \                                                                          (string-append\n\
    \                                                                            (string-append\n\
    \                                                                            \
    \  (string-append\n                                                          \
    \                      (string-append\n                                      \
    \                                              (string-append\n              \
    \                                                                        (string-append\n\
    \                                                                            \
    \            (string-append\n                                                \
    \                                          (string-append\n                  \
    \                                                                          (string-append\n\
    \                                                                            \
    \                 (string-append\n                                           \
    \                                                    (string-append\n        \
    \                                                                            \
    \            (string-append\n                                                \
    \                                                  (string-append\n          \
    \                                                                            \
    \              (string-append\n                                              \
    \                                                        (string-append\n    \
    \                                                                            \
    \                        (string-append\n                                    \
    \                                                                      (string-append\n\
    \                                                                            \
    \                                (string-append\n                            \
    \                                                                            \
    \      (string-append\n                                                      \
    \                                                          (string-append\n  \
    \                                                                            \
    \                                    (string-append\n                        \
    \                                      ", "  (let ((result \"\"))\n    (if (<\
    \ number 1000)\n      (let ((n (number)))\n        (if (<= n 100)\n          (let\
    \ ((n (number)))\n            (if (<= n 90)\n              (let ((n (number)))\n\
    \                (if (<= n 90)\n                  (let ((n (number)))\n      \
    \              (if (<= n 90)\n                      (let ((n (number)))\n    \
    \                    (if (<= n 90)\n                          (let ((n (number)))\n\
    \                            (if (<= n 90)\n                              (let\
    \ ((n (number)))\n                                (if (<= n 90)\n            \
    \                      (let ((n (number)))\n                                 \
    \   (if (<= n 90)\n                                      (let ((n (number)))\n\
    \                                        (if (<= n 90)\n                     \
    \                     (let ((n (number)))\n                                  \
    \          (if (<= n 90)\n                                              (let ((n\
    \ (number)))\n                                                (if (<= n 90)\n\
    \                                                  (let ((n (number)))\n     \
    \                                               (if (<= n 90)\n              \
    \                                        (let ((n (number)))\n               \
    \                                         (if (<= n 90)\n                    \
    \                                      (let ((n (number)))\n                 \
    \                                           (if (<= n 90)\n                  \
    \                                            (let ((n (number)))\n           \
    \                                                     (if (<= n 90)\n        \
    \                                                          (let ((n (number)))\n\
    \                                                                    (if (<= n\
    \ 90)\n                                                                      (let\
    \ ((n (number)))\n                                                           \
    \             (if (<= n 90)\n                                                \
    \                          (let ((n (number)))\n                             \
    \                                               (if (<= n 90)\n              \
    \                                                                (let ((n (number)))\n\
    \                                                                            \
    \    (if (<= n 90)\n                                                         \
    \                         (let ((n (number)))\n                              \
    \                                                      (if (<= n 90)\n       \
    \                                                                            \
    \   (let ((n (number)))\n                                                    \
    \                                    (if (<= n 90)\n                         \
    \                                                                 (let ((n (number)))",
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((n (number)))\n  \
    \      (if (<= n 100)\n          (let ((n (number)))\n            (if (<= n 90)\n\
    \              (let ((n (number)))\n                (if (<= n 90)\n          \
    \        (let ((n (number)))\n                    (if (<= n 90)\n            \
    \          (let ((n (number)))\n                        (if (<= n 90)\n      \
    \                    (let ((n (number)))\n                            (if (<=\
    \ n 90)\n                              (let ((n (number)))\n                 \
    \               (if (<= n 90)\n                                  (let ((n (number)))\n\
    \                                    (if (<= n 90)\n                         \
    \             (let ((n (number)))\n                                        (if\
    \ (<= n 90)\n                                          (let ((n (number)))\n \
    \                                           (if (<= n 90)\n                  \
    \                            (let ((n (number)))\n                           \
    \                     (if (<= n 90)\n                                        \
    \          (let ((n (number)))\n                                             \
    \       (if (<= n 90)\n                                                      (let\
    \ ((n (number)))\n                                                        (if\
    \ (<= n 90)\n                                                          (let ((n\
    \ (number)))\n                                                            (if\
    \ (<= n 90)\n                                                              (let\
    \ ((n (number)))\n                                                           \
    \     (if (<= n 90)\n                                                        \
    \          (let ((n (number)))\n                                             \
    \                       (if (<= n 90)\n                                      \
    \                                (let ((n (number)))\n                       \
    \                                                 (if (<= n 90)\n            \
    \                                                              (let ((n (number)))\n\
    \                                                                            (if\
    \ (<= n 90)\n                                                                \
    \              (let ((n (number)))\n                                         \
    \                                       (if (<= n 90)\n                      \
    \                                                            (let ((n (number)))\n\
    \                                                                            \
    \        (if (<= n 90)\n                                                     \
    \                                 (let ((n (number)))\n                      \
    \                                                                  (if (<= n 90)\n\
    \                                                                            \
    \              (let ((n (number)))", "  (let ((result \"\"))\n    (if (< number\
    \ 100)\n      (let ((n (number)))\n        (if (<= n 5)\n          (let ((n (number)))\n\
    \            (if (<= n 4)\n              (let ((n (number)))\n               \
    \ (if (<= n 3)\n                  (let ((n (number)))\n                    (if\
    \ (<= n 2)\n                      (let ((n (number)))\n                      \
    \  (if (<= n 1)\n                          (let ((n (number)))\n             \
    \               (if (<= n 0)\n                              (let ((n (number)))\n\
    \                                (if (<= n -1)\n                             \
    \     (let ((n (number)))\n                                    (if (<= n -2)\n\
    \                                      (let ((n (number)))\n                 \
    \                       (if (<= n -3)\n                                      \
    \    (let ((n (number)))\n                                            (if (<=\
    \ n -4)\n                                              (let ((n (number)))\n \
    \                                               (if (<= n -5)\n              \
    \                                    (let ((n (number)))\n                   \
    \                                 (if (<= n -6)\n                            \
    \                          (let ((n (number)))\n                             \
    \                           (if (<= n -7)\n                                  \
    \                        (let ((n (number)))\n                               \
    \                             (if (<= n -8)\n                                \
    \                              (let ((n (number)))\n                         \
    \                                       (if (<= n -9)\n                      \
    \                                            (let ((n (number)))\n           \
    \                                                         (if (<= n -10)\n   \
    \                                                                   (let ((n (number)))\n\
    \                                                                        (if (<=\
    \ n -11)\n                                                                   \
    \       (let ((n (number)))\n                                                \
    \                            (if (<= n -12)\n                                \
    \                                              (let ((n (number)))\n         \
    \                                                                       (if (<=\
    \ n -13)\n                                                                   \
    \               (let ((n (number)))\n                                        \
    \                                            (if (<= n -14)\n                \
    \                                                                      (let ((n\
    \ (number)))\n                                                               \
    \                         (if (<= n -", "  (let ((result \"\"))\n    (let ((n\
    \ (number)))\n      (if (<= n 1000)\n        (let ((i (1)))\n          (while\
    \ (<= i n)\n            (let ((next (modulo n i)))\n              (if (eqv? (modulo\
    \ n i) next)\n                (set! result (concat result (string-append (int_to_roman\
    \ i) \" \"))))\n              (set! i (i + 1)))\n            (set! i 1)))\n  \
    \      (set! result (concat result (string-append (int_to_roman n) \" \"))))\n\
    \      (else\n        (set! result (string-append (int_to_roman n) \" \"))))\n\
    \  result)\n\n;; Given a roman numeral, obtain its integer value.\n;; Restrictions:\
    \ 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>>\
    \ (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n    (let ((n (number)))\n\
    \      (if (<= n 1)\n        (result \"\")\n      (else\n        (let ((n (number)))\n\
    \          (if (<= n 1000)\n            (let ((n (number)))\n              (if\
    \ (<= n 100)\n                (let ((n (number)))\n                  (if (<= n\
    \ 10)\n                    (let ((n (number)))\n                      (if (<=\
    \ n 1)\n                        (result \"\")\n                      (else\n \
    \                       (result (string-append\n                             \
    \    (string-append\n                                  (string-append\n      \
    \                              \"I\"\n                                    (string-append\n\
    \                                      \"V\"\n                               \
    \       (string-append\n                                        \"X\"\n      \
    \                                  (string-append\n                          \
    \                \"L\"\n                                          (string-append\n\
    \                                            \"C\"\n                         \
    \                   (string-append\n                                         \
    \     \"D\"\n                                              (string-append\n  \

  "  (let ((result \"\"))\n    (let ((num (number)))\n      (if (<= num 1000)\n  \
    \      (let ((n (num % 1000)))\n          (if (<= n 100)\n            (let ((n\
    \ (n % 100)))\n              (if (<= n 10)\n                (let ((n (n % 10)))\n\
    \                  (if (<= n 1)\n                    (result \"\")\n         \
    \           (result (string-append (string-append \"I\" \"I\")\n             \
    \                 (string-append \"V\" \"I\" \"I\" \"I\" \"I\" \"I\" \"I\" \"\
    I\" \"I\" \"I\"))\n                              (string-append \"X\" \"I\" \"\
    I\" \"I\" \"I\" \"I\" \"I\" \"I\" \"I\" \"I\"))\n                            \
    \  (result (string-append \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\"\
    \ \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\"\
    \ \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\"\
    \ \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\"\
    \ \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\"\
    \ \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\"\
    \ \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\"\
    \ \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\"\
    \ \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C\" \"C", "  (let* ([num (number)])\n\
    \    (if (<= num 1000)\n      (let* ([n (num)])\n        (let* ([n_digits (string-length\
    \ n)])\n          (let* ([n_divides_5 (modulo n 5)])\n            (let* ([n_divides_4\
    \ (modulo n 4)])\n              (let* ([n_divides_3 (modulo n 3)])\n         \
    \       (let* ([n_divides_2 (modulo n 2)])\n                  (let* ([n_divides_1\
    \ (modulo n 1)])\n                    (if (and (not n_divides_5) (not n_divides_4)\
    \ (not n_divides_3) (not n_divides_2) (not n_divides_1))\n                   \
    \   (let* ([n_divides_1 (modulo n 10)])\n                        (if (and (not\
    \ n_divides_5) (not n_divides_4) (not n_divides_3) (not n_divides_2) (not n_divides_1))\n\
    \                          (let* ([n_divides_1 (modulo n 100)])\n            \
    \                (if (and (not n_divides_5) (not n_divides_4) (not n_divides_3)\
    \ (not n_divides_2) (not n_divides_1))\n                              (let* ([n_divides_1\
    \ (modulo n 1000)])\n                                (if (and (not n_divides_5)\
    \ (not n_divides_4) (not n_divides_3) (not n_divides_2) (not n_divides_1))\n \
    \                                 (let* ([n_divides_1 (modulo n 1000)])\n    \
    \                                (if (and (not n_divides_5) (not n_divides_4)\
    \ (not n_divides_3) (not n_divides_2) (not n_divides_1))\n                   \
    \                   (let* ([n_divides_1 (modulo n 1000)])\n                  \
    \                      (if (and (not n_div", "  (let* ([n (number)]\n        \
    \  [result \"\"])\n    (if (<= n 1)\n      (result \"\")\n    (else\n      (let*\
    \ ([num_digits (floor (log n 10))]\n              [num_roman (floor (n/10))]\n\
    \              [num_roman_digits (floor (log num_roman 10))]\n              [num_roman_digits_digits\
    \ (floor (log num_roman_digits 10))])\n        (if (<= num_roman_digits_digits\
    \ 2)\n          (let* ([num_roman_digits_digit (num_roman_digits)]\n         \
    \         [num_roman_digits_digit_digits (num_roman_digits_digit)]\n         \
    \         [num_roman_digits_digit_digits_digit (num_roman_digits_digit_digits)]\n\
    \                  [num_roman_digits_digit_digits_digit_digit (num_roman_digits_digit_digits_digit)]\n\
    \                  [num_roman_digits_digit_digits_digit_digit_digit (num_roman_digits_digit_digits_digit_digit)])\n\
    \            (if (<= num_roman_digits_digit_digits 2)\n              (let* ([num_roman_digits_digit_digit_digit\
    \ (num_roman_digits_digit_digits_digit)]\n                      [num_roman_digits_digit_digits_digit_digit_digit\
    \ (num_roman_digits_digit_digits_digit_digit)])\n                (result (string-append\n\
    \                         (string-append\n                          (string-append\n\
    \                           (string-append\n                            (string-append\n\
    \                              (string-append\n                              \
    \  (string-append\n                                 (string-append\n         \
    \                         (string-append\n                                   \
    \ (string-append\n                                      (string-append\n     \
    \                                   (string-append\n                         \
    \                 (string-append\n                                           \
    \ (string-append\n                                              (string-append\n\
    \                                                (string-append\n            \
    \                                      (string-append\n                      \
    \                              (string-append\n                              \
    \                        (", "  (let ((result \"\"))\n    (let ((digit (number\
    \ % 10)))\n      (if (zero? digit)\n          (result (string-append result \"\
    x\"))))\n      (let ((sub (number / 10)))\n        (if (zero? sub)\n         \
    \   (string-append result \"x\"))\n          (let ((subsub (sub / 10)))\n    \
    \        (if (zero? subsub)\n                (string-append result \"x\"))\n \
    \             (let ((subsubsub (subsub / 10)))\n                (if (zero? subsubsub)\n\
    \                    (string-append result \"x\"))\n                  (let ((subsubsubsub\
    \ (subsubsub / 10)))\n                    (if (zero? subsubsubsub)\n         \
    \               (string-append result \"x\"))\n                      (let ((subsubsubsubsub\
    \ (subsubsubsub / 10)))\n                        (if (zero? subsubsubsubsub)\n\
    \                            (string-append result \"x\"))\n                 \
    \         (let ((subsubsubsubsubsub (subsubsubsubsub / 10)))\n               \
    \             (if (zero? subsubsubsubsubsub)\n                               \
    \ (string-append result \"x\"))\n                              (let ((subsubsubsubsubsubsub\
    \ (subsubsubsubsubsub / 10)))\n                                (if (zero? subsubsubsubsubsubsub)\n\
    \                                    (string-append result \"x\"))\n         \
    \                         (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub\
    \ / 10)))\n                                    (if (zero? subsubsubsubsubsubsubsub)\n\
    \                                        (string-append result \"x\"))\n     \
    \                                 (let ((subsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsub\
    \ / 10)))\n                                        (if (zero? subsubsubsubsubsubsubsubsub)\n\
    \                                            (string-append result \"x\"))\n \
    \                                         (let ((subsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsub / 10)))\n                                     \
    \       (if (zero? subsubsubsubsubsubsubsubsubsub)\n                         \
    \                       (string-append result \"x\"))\n                      \
    \                        (let ((subsubsubsubsubsubsubsubsubsubsub (sub", "  (let*\
    \ ([result (string-append \"\")])\n    (if (< number 100)\n      (let* ([n (number\
    \ - number)])\n        (if (<= n 5)\n          (let* ([n (number - n)])\n    \
    \        (if (<= n 3)\n              (let* ([n (number - n)])\n              \
    \  (if (<= n 2)\n                  (let* ([n (number - n)])\n                \
    \    (if (<= n 1)\n                      (let* ([n (number - n)])\n          \
    \              (if (<= n 1)\n                          (let* ([n (number - n)])\n\
    \                            (if (<= n 1)\n                              (let*\
    \ ([n (number - n)])\n                                (if (<= n 1)\n         \
    \                         (let* ([n (number - n)])\n                         \
    \           (if (<= n 1)\n                                      (let* ([n (number\
    \ - n)])\n                                        (if (<= n 1)\n             \
    \                             (let* ([n (number - n)])\n                     \
    \                       (if (<= n 1)\n                                       \
    \       (let* ([n (number - n)])\n                                           \
    \     (if (<= n 1)\n                                                  (let* ([n\
    \ (number - n)])\n                                                    (if (<=\
    \ n 1)\n                                                      (let* ([n (number\
    \ - n)])\n                                                        (if (<= n 1)\n\
    \                                                          (let* ([n (number -\
    \ n)])\n                                                           (if (<= n 1)\n\
    \                                                              (let* ([n (number\
    \ - n)])\n                                                                (if\
    \ (<= n 1)\n                                                                 \
    \ (let* ([n (number - n)])\n                                                 \
    \                   (if (<= n 1)\n                                           \
    \                           (let* ([n (number - n)])\n                       \
    \                                                 (if (<= n 1)\n             \
    \                                                             (let* ([n (number\
    \ - n)])\n                                                                   \
    \         (if (<= n 1)\n                                                     \
    \                         (let* ([n (number", "  (let ((result \"\"))\n    (let\
    \ ((n (number)))\n      (if (< n 100)\n        (let ((digit (n % 10)))\n     \
    \     (if (< digit 10)\n            (let ((sub (number / 10)))\n             \
    \ (if (< sub 10)\n                (let ((subsub (sub / 10)))\n               \
    \   (if (< subsub 10)\n                    (let ((subsubsub (subsub / 10)))\n\
    \                      (result (concat (str (digit))\n                       \
    \         (str (subsubsub))\n                                (str (sub))))))))))\n\
    \          (result (concat (str (digit))\n                   (str (number / 10))))))\n\
    \      (result (concat (str (number)))))\n    (str result)))\n\n;; Given a roman\
    \ numeral, obtain its integer value.\n;; Restrictions: 1 <= num <= 1000\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"CDXXVI\")\n;; 426",
  "  (let ((result \"\"))\n    (let ((digit (number % 10)))\n      (if (< digit 10)\n\
    \        (let ((sub (number / 10)))\n          (if (< sub 10)\n            (let\
    \ ((subsub (sub / 10)))\n              (if (< subsub 10)\n                (let\
    \ ((subsubsub (subsub / 10)))\n                  (if (< subsubsub 10)\n      \
    \              (let ((subsubsubsub (subsubsub / 10)))\n                      (if\
    \ (< subsubsubsub 10)\n                        (let ((subsubsubsubsub (subsubsubsub\
    \ / 10)))\n                          (if (< subsubsubsubsub 10)\n            \
    \                (let ((subsubsubsubsubsub (subsubsubsubsub / 10)))\n        \
    \                      (if (< subsubsubsubsubsub 10)\n                       \
    \         (let ((subsubsubsubsubsubsub (subsubsubsubsubsub / 10)))\n         \
    \                         (if (< subsubsubsubsubsubsub 10)\n                 \
    \                   (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub / 10)))\n\
    \                                      (if (< subsubsubsubsubsubsubsub 10)\n \
    \                                       (let ((subsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsub\
    \ / 10)))\n                                          (if (< subsubsubsubsubsubsubsubsub\
    \ 10)\n                                            (let ((subsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsub / 10)))\n                                     \
    \         (if (< subsubsubsubsubsubsubsubsubsub 10)\n                        \
    \                        (let ((subsubsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                                  (if (< subsubsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                    (let ((subsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                       (if (< subsubsubsubsubsubsubsubsubsubsubsub 10)\n    \
    \                                                    (let ((subsubsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub", "  (let ((result \"\"))\n    (if (< number\
    \ 100)\n      (let ((n (number)))\n        (if (< n 10)\n          (let ((n (number)))\n\
    \            (let ((n (number)))\n              (if (< n 5)\n                (let\
    \ ((n (number)))\n                  (let ((n (number)))\n                    (if\
    \ (< n 2)\n                      (let ((n (number)))\n                       \
    \ (let ((n (number)))\n                          (if (< n 1)\n               \
    \             (let ((n (number)))\n                              (let ((n (number)))\n\
    \                                (if (< n 1)\n                               \
    \   (let ((n (number)))\n                                    (let ((n (number)))\n\
    \                                      (if (< n 1)\n                         \
    \               (let ((n (number)))\n                                        \
    \  (let ((n (number)))\n                                            (if (< n 1)\n\
    \                                              (let ((n (number)))\n         \
    \                                       (let ((n (number)))\n                \
    \                                  (if (< n 1)\n                             \
    \                       (let ((n (number)))\n                                \
    \                      (let ((n (number)))\n                                 \
    \                       (if (< n 1)\n                                        \
    \                  (let ((n (number)))\n                                     \
    \                       (let ((n (number)))\n                                \
    \                              (if (< n 1)\n                                 \
    \                               (let ((n (number)))\n                        \
    \                                          (let ((n (number)))\n             \
    \                                                       (if (< n 1)\n        \
    \                                                              (let ((n (number)))\n\
    \                                                                        (let\
    \ ((n (number)))\n                                                           \
    \               (if (< n 1)\n                                                \
    \                            (let ((n (number)))\n                           \
    \                                                   (let ((n (number)))\n    \
    \                                                                            (if\
    \ (< n 1)\n                                                                  \
    \                (let ((n (number)))\n                                       \
    \                                             (let ((n (number)))\n          \
    \                                                                            (if\
    \ (< n 1)\n                                                                  \
    \                      (let ((n (number)))\n                                 \
    \                                                         (let ((n (number)))\n\
    \                                                                            \
    \                (if (< n 1)\n                               ", "  (let* ([result\
    \ (string-append \"\")])\n    (let ([num (number)])\n      (if (<= num 1000)\n\
    \        (let* ([n (num % 1000)]\n                [i (1)])\n          (while (<=\
    \ n num)\n            (let ([d (num / 1000)])\n              (if (<= d 9)\n  \
    \              (string-append (string-append \"\") (string-append (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\") (string-append \"\") (string-append \"\") (string-append \"\") (string-append\
    \ \"\")", "  (let ((result \"\"))\n    (if (zero? number)\n      \"0\"\n    (if\
    \ (< number 10)\n      (let ((digit (modulo number 10)))\n        (if (zero? digit)\n\
    \          \"0\"\n        (let ((subresult (int_to_mini_roman (number - digit))))\n\
    \          (if (zero? digit)\n            (append result subresult)\n        \
    \  (append result \"-\" subresult)))\n        )\n      )\n    (let ((subresult\
    \ (int_to_mini_roman (number / 10))))\n      (append result subresult)\n    )\n\
    \    )\n  )\n)\n\n;; Given a roman numeral, obtain its integer value.\n;; Restrictions:\
    \ 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>>\
    \ (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n    (let ((digit\
    \ (number % 10)))\n      (if (zero? digit)\n\t(result (string-append result \"\
    x\"))))\n      (let ((sub (number / 10)))\n\t(if (zero? sub)\n\t  (string-append\
    \ result \"x\"))\n\t  (let ((subsub (sub / 10)))\n\t    (if (zero? subsub)\n\t\
    \      (string-append result \"x\"))\n\t      (let ((subsubsub (subsub / 10)))\n\
    \t\t(if (zero? subsubsub)\n\t\t  (string-append result \"x\"))\n\t\t  (let ((subsubsubsub\
    \ (subsubsub / 10)))\n\t\t    (if (zero? subsubsubsub)\n\t\t      (string-append\
    \ result \"x\"))\n\t\t      (let ((subsubsubsubsub (subsubsubsub / 10)))\n\t\t\
    \t(if (zero? subsubsubsubsub)\n\t\t\t  (string-append result \"x\"))\n\t\t\t \
    \ (let ((subsubsubsubsubsub (subsubsubsubsub / 10)))\n\t\t\t    (if (zero? subsubsubsubsubsub)\n\
    \t\t\t      (string-append result \"x\"))\n\t\t\t      (let ((subsubsubsubsubsubsub\
    \ (subsubsubsubsubsub / 10)))\n\t\t\t\t(if (zero? subsubsubsubsubsubsub)\n\t\t\
    \t\t  (string-append result \"x\"))\n\t\t\t\t  (let ((subsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsub / 10)))\n\t\t\t\t    (if (zero? subsubsubsubsubsubsubsub)\n\
    \t\t\t\t      (string-append result \"x\"))\n\t\t\t\t      (let ((subsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsub / 10)))\n\t\t\t\t\t(if (zero? subsubsubsubsubsubsubsubsub)\n\
    \t\t\t\t\t  (string-append result \"x\"))\n\t\t\t\t\t  (let ((subsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsub / 10)))\n\t\t\t\t\t    (if (zero? subsubsubsubsubsubsubsubsubsub)\n\
    \t\t\t\t\t      (string-append result \"x\"))\n\t\t\t\t\t      (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsub", "  (let ((result \"\"))\n    (if (zero? number)\n      \"0\"\
    \n    (if (< number 10)\n      (let ((digit (modulo number 10)))\n        (if\
    \ (< digit 4)\n          (let ((sub (modulo (sub number digit) 10)))\n       \
    \     (let ((sub2 (modulo (sub sub 2) 10)))\n              (let ((sub3 (modulo\
    \ (sub sub3 3) 10)))\n                (let ((sub4 (modulo (sub sub4 4) 10)))\n\
    \                  (let ((sub5 (modulo (sub sub5 5) 10)))\n                  \
    \  (let ((sub6 (modulo (sub sub6 6) 10)))\n                      (let ((sub7 (modulo\
    \ (sub sub7 7) 10)))\n                        (let ((sub8 (modulo (sub sub8 8)\
    \ 10)))\n                          (let ((sub9 (modulo (sub sub9 9) 10)))\n  \
    \                          (let ((sub10 (modulo (sub sub10 10) 10)))\n       \
    \                       (let ((sub11 (modulo (sub sub11 11) 10)))\n          \
    \                      (let ((sub12 (modulo (sub sub12 12) 10)))\n           \
    \                       (let ((sub13 (modulo (sub sub13 13) 10)))\n          \
    \                          (let ((sub14 (modulo (sub sub14 14) 10)))\n       \
    \                               (let ((sub15 (modulo (sub sub15 15) 10)))\n  \
    \                                      (let ((sub16 (modulo (sub sub16 16) 10)))\n\
    \                                          (let ((sub17 (modulo (sub sub17 17)\
    \ 10)))\n                                            (let ((sub18 (modulo (sub\
    \ sub18 18) 10)))\n                                              (let ((sub19\
    \ (modulo (sub sub19 19) 10)))\n                                             \
    \   (let ((sub20 (modulo (sub sub20 20) 10)))\n                              \
    \                    (let ((sub21 (modulo (sub sub21 21) 10)))\n             \
    \                                       (let ((sub22 (modulo (sub sub22 22) 10)))\n\
    \                                                      (let ((sub23 (modulo (sub\
    \ sub23 23) 10)))\n                                                        (let\
    \ ((sub24 (modulo (", "  (let* ([\n    num_digits (number-of-digits number)\n\
    \    result (make-string num_digits)\n    digit (number-of-digits-one number)\n\
    \    ])\n    (let* ([\n      i (0)\n      ])\n      (while (< i num_digits)\n\
    \        (let ([\n          j (i)\n          ])\n          (if (< digit number-of-digits-one)\n\
    \            (let ([\n              k (i)\n              ])\n              (while\
    \ (< k j)\n                (set! result (concat result (string-append \"i\")))\n\
    \                (set! j (add 1 k))\n                (set! k (sub 1 j)))\n   \
    \           (set! i (add 1 j)))\n            (set! i (add 1 j)))\n          (set!\
    \ i (add 1 j))))\n      result))\n  result)\n\n;; Given a roman numeral, obtain\
    \ its integer value.\n;; Restrictions: 1 <= roman <= 1000\n;; Examples:\n;; >>>\
    \ (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n;; >>>\
    \ (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n    (if (< number\
    \ 1000)\n      (let ((digit (modulo number 10)))\n        (if (< digit 1)\n  \
    \        (result \"\")\n          (let ((sub (modulo (sub number digit) 10)))\n\
    \            (if (< sub 3)\n              (result (string-append \"m\" result))\n\
    \              (let ((sub2 (modulo (sub number (sub sub 2)) 10)))\n          \
    \      (if (< sub2 3)\n                  (result (string-append \"c\" result))\n\
    \                  (let ((sub3 (modulo (sub number (sub sub 3)) 10)))\n      \
    \              (if (< sub3 3)\n                      (result (string-append \"\
    x\" result))\n                      (let ((sub4 (modulo (sub number (sub sub 4))\
    \ 10)))\n                        (if (< sub4 2)\n                          (result\
    \ (string-append \"l\" result))\n                          (let ((sub5 (modulo\
    \ (sub number (sub sub 5)) 10)))\n                            (if (< sub5 1)\n\
    \                              (result (string-append \"i\" result))\n       \
    \                       (let ((sub6 (modulo (sub number (sub sub 6)) 10)))\n \
    \                               (if (< sub6 1)\n                             \
    \     (result (string-append \"v\" result))\n                                \
    \  (let ((sub7 (modulo (sub number (sub sub 7)) 10)))\n                      \
    \              (if (< sub7 1)\n                                      (result (string-append\
    \ \"i\" result))\n                                      (let ((sub8 (modulo (sub\
    \ number (sub sub 8)) 10)))\n                                        (if (< sub8\
    \ 1)\n                                          (result (string-append \"i\" result))\n\
    \                                          (let ((sub9 (modulo (sub number (sub\
    \ sub 9)) 10)))\n                                            (if (< sub9 1)\n\
    \                                              (result (string-append \"i\" result))\n\
    \                                              (result (string-append \"i\" result))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((digit (number % 10)))\n\
    \        (if (< digit 10)\n          (let ((sub (number / 10)))\n            (let\
    \ ((sub2 (sub / 10)))\n              (if (< sub2 2)\n                (let ((sub3\
    \ (sub2 / 10)))\n                  (if (< sub3 3)\n                    (let ((sub4\
    \ (sub3 / 10)))\n                      (if (< sub4 4)\n                      \
    \  (let ((sub5 (sub4 / 10)))\n                          (if (< sub5 5)\n     \
    \                       (let ((sub6 (sub5 / 10)))\n                          \
    \    (if (< sub6 6)\n                                (let ((sub7 (sub6 / 10)))\n\
    \                                  (if (< sub7 7)\n                          \
    \          (let ((sub8 (sub7 / 10)))\n                                      (if\
    \ (< sub8 8)\n                                        (let ((sub9 (sub8 / 10)))\n\
    \                                          (if (< sub9 9)\n                  \
    \                          (let ((sub10 (sub9 / 10)))\n                      \
    \                        (if (< sub10 2)\n                                   \
    \             (let ((sub11 (sub10 / 10)))\n                                  \
    \                (if (< sub11 1)\n                                           \
    \         (result \"i\")\n                                                   \
    \ (result \"v\")\n                                                    (result\
    \ \"x\"))\n                                                  (if (< sub11 2)\n\
    \                                                    (let ((sub12 (sub11 / 10)))\n\
    \                                                      (if (< sub12 2)\n     \
    \                                                   (let ((sub13 (sub12 / 10)))\n\
    \                                                         (if (< sub13 3)\n  \
    \                                                         (let ((sub14 (sub13\
    \ / 10)))\n                                                            (if (<\
    \ sub14 4)\n                                                              (let\
    \ ((sub15 (sub14 / 10)))\n                                                   \
    \             (if (< sub15 5)\n                                              \
    \                    (let ((sub16 (sub15 / 10)))\n                           \
    \                                         (if (< sub16 6)\n                  \
    \                                                    (let ((sub17 (sub16 / 10",
  "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((n (number)))\n  \
    \      (if (<= n 100)\n          (let ((n (n)))\n            (let ((i 1))\n  \
    \            (while (<= n (dec n))\n                (let ((n (dec n)))\n     \
    \             (let ((j 1))\n                    (while (<= n (dec n))\n      \
    \                (let ((n (dec n)))\n                        (if (<= i 5)\n  \
    \                        (let ((i (dec i)))\n                            (let\
    \ ((j (dec j)))\n                              (let ((k 1))\n                \
    \                (while (<= n (dec n))\n                                  (let\
    \ ((n (dec n)))\n                                    (if (<= k 3)\n          \
    \                            (let ((k (dec k)))\n                            \
    \            (let ((l 1))\n                                          (while (<=\
    \ n (dec n))\n                                            (let ((n (dec n)))\n\
    \                                              (if (<= l 2)\n                \
    \                                (let ((l (dec l)))\n                        \
    \                          (let ((m 1))\n                                    \
    \                (while (<= n (dec n))\n                                     \
    \                 (let ((n (dec n)))\n                                       \
    \                 (if (<= m 3)\n                                             \
    \             (let ((m (dec m)))\n                                           \
    \                 (let ((p 1))\n                                             \
    \                 (while (<= n (dec n))\n                                    \
    \                            (let ((n (dec n)))\n                            \
    \                                      (if (<= p 2)\n                        \
    \                                            (let ((p (dec p)))\n            \
    \                                                          (let ((q 1))\n    \
    \                                                                    (while (<=\
    \ n (dec n))\n                                                               \
    \           (let ((n (dec n)))\n                                             \
    \                               (if (<= q 2)\n                               \
    \                                               (let ((q (dec q)))\n         \
    \                                                                       (let ((r\
    \ 1))\n                                                                      \
    \            (while (<= n (dec n))\n                                         \
    \                                           (let ((n (dec n)))\n             \
    \                                                                         (if\
    \ (<= r 2)\n                                                              ", " \
    \ (let ((result \"\"))\n    (if (zero? number)\n      \"0\"\n    (if (< number\
    \ 1000)\n      (let ((n (abs number)))\n        (if (< n 100)\n          (let\
    \ ((n1 (modulo n 10)))\n            (let ((n2 (modulo (sub1 n1) 10)))\n      \
    \        (let ((n3 (modulo (sub1 n2) 10)))\n                (let ((n4 (modulo\
    \ (sub1 n3) 10)))\n                  (let ((n5 (modulo (sub1 n4) 10)))\n     \
    \               (let ((n6 (modulo (sub1 n5) 10)))\n                      (let\
    \ ((n7 (modulo (sub1 n6) 10)))\n                        (let ((n8 (modulo (sub1\
    \ n7) 10)))\n                          (let ((n9 (modulo (sub1 n8) 10)))\n   \
    \                         (let ((n10 (modulo (sub1 n9) 10)))\n               \
    \               (let ((n11 (modulo (sub1 n10) 10)))\n                        \
    \        (let ((n12 (modulo (sub1 n11) 10)))\n                               \
    \   (let ((n13 (modulo (sub1 n12) 10)))\n                                    (let\
    \ ((n14 (modulo (sub1 n13) 10)))\n                                      (let ((n15\
    \ (modulo (sub1 n14) 10)))\n                                        (let ((n16\
    \ (modulo (sub1 n15) 10)))\n                                          (let ((n17\
    \ (modulo (sub1 n16) 10)))\n                                            (let ((n18\
    \ (modulo (sub1 n17) 10)))\n                                              (let\
    \ ((n19 (modulo (sub1 n18) 10)))\n                                           \
    \     (let ((n20 (modulo (sub1 n19) 10)))\n                                  \
    \                (let ((n21 (modulo (sub1 n20) 10)))\n                       \
    \                             (let ((n22 (modulo (sub1 n21) 10)))\n          \
    \                                            (let ((n23 (modulo (sub1 n22) 10)))\n\
    \                                                        (let ((n24 (modulo (sub1\
    \ n23", "  (let ((result \"\"))\n    (if (< number 1000)\n      (let ((digit (number\
    \ % 10)))\n        (if (< digit 10)\n          (let ((sub (number / 10)))\n  \
    \          (if (< sub 10)\n              (let ((subsub (sub / 10)))\n        \
    \        (result (concat \"x\" (int_to_mini_roman subsub))))\n              (let\
    \ ((subsub (sub % 10)))\n                (result (concat \"c\" (int_to_mini_roman\
    \ subsub))))\n            (let ((subsub (sub % 10)))\n              (result (concat\
    \ \"l\" (int_to_mini_roman subsub))))\n          (let ((sub (number / 10)))\n\
    \            (if (< sub 10)\n              (let ((subsub (sub / 10)))\n      \
    \          (result (concat \"x\" (int_to_mini_roman subsub))))\n             \
    \ (let ((subsub (sub % 10)))\n                (result (concat \"c\" (int_to_mini_roman\
    \ subsub))))\n            (let ((subsub (sub % 10)))\n              (result (concat\
    \ \"l\" (int_to_mini_roman subsub))))\n          (let ((sub (number / 10)))\n\
    \            (if (< sub 10)\n              (let ((subsub (sub / 10)))\n      \
    \          (result (concat \"x\" (int_to_mini_roman subsub))))\n             \
    \ (let ((subsub (sub % 10)))\n                (result (concat \"c\" (int_to_mini_roman\
    \ subsub))))\n            (let ((subsub (sub % 10)))\n              (result (concat\
    \ \"l\" (int_to_mini_roman subsub)))))))\n      (let ((digit (number % 10)))\n\
    \        (if (< digit 10)\n          (let ((sub (number / 10)))\n            (if\
    \ (< sub 10)\n              (let ((subsub (sub / 10)))\n                (result\
    \ (concat \"x\" (int_to_mini_roman subsub))))\n              (let ((subsub (sub\
    \ % 10)))\n                (result (concat \"c\" (int_to_mini_roman subsub))))\n\
    \            (let ((subsub (sub % 10)))\n              (result (concat", "  (let*\
    \ ([result (string-append \"\")])\n    (let* ([num (number)])\n      (if (<= num\
    \ 1000)\n        (let* ([n (num / 100)])\n          (if (<= n 10)\n          \
    \  (string-append \"c\" result)\n            (let* ([n (n / 10)])\n          \
    \    (if (<= n 1)\n                (string-append \"x\" result)\n            \
    \    (let* ([n (n / 1)])\n                  (if (<= n 1)\n                   \
    \ (string-append \"i\" result)\n                    (let* ([n (n / 1)])\n    \
    \                  (if (<= n 1)\n                        (string-append \"v\"\
    \ result)\n                        (let* ([n (n / 1)])\n                     \
    \     (if (<= n 1)\n                            (string-append \"i\" result)\n\
    \                            (let* ([n (n / 1)])\n                           \
    \   (if (<= n 1)\n                                (string-append \"i\" result)\n\
    \                                (string-append \"v\" result))))))))))))\n   \
    \     (let* ([n (num % 100)])\n          (if (<= n 10)\n            (string-append\
    \ \"x\" result)\n            (let* ([n (n % 10)])\n              (if (<= n 1)\n\
    \                (string-append \"i\" result)\n                (let* ([n (n %\
    \ 1)])\n                  (if (<= n 1)\n                    (string-append \"\
    v\" result)\n                    (let* ([n (n % 1)])\n                      (if\
    \ (<= n 1)\n                        (string-append \"i\" result)\n           \
    \             (let* ([n (n % 1)])\n                          (if (<= n 1)\n  \
    \                          (string-append \"i\" result)\n                    \
    \        (string-append \"v\" result))))))))))))\n    (result)))\n)\n", "  (let\
    \ ((result \"\"))\n    (let ((digit (number % 10)))\n      (if (< digit 10)\n\
    \        (let ((next (number / 10)))\n          (if (< next 10)\n            (let\
    \ ((next2 (next / 10)))\n              (if (< next2 10)\n                (let\
    \ ((next3 (next2 / 10)))\n                  (if (< next3 10)\n               \
    \     (let ((next4 (next3 / 10)))\n                      (if (< next4 10)\n  \
    \                      (let ((next5 (next4 / 10)))\n                         \
    \ (if (< next5 10)\n                            (let ((next6 (next5 / 10)))\n\
    \                              (if (< next6 10)\n                            \
    \    (let ((next7 (next6 / 10)))\n                                  (if (< next7\
    \ 10)\n                                    (let ((next8 (next7 / 10)))\n     \
    \                                 (if (< next8 10)\n                         \
    \               (let ((next9 (next8 / 10)))\n                                \
    \          (if (< next9 10)\n                                            (let\
    \ ((next10 (next9 / 10)))\n                                              (if (<\
    \ next10 10)\n                                                (let ((next11 (next10\
    \ / 10)))\n                                                  (if (< next11 10)\n\
    \                                                    (let ((next12 (next11 / 10)))\n\
    \                                                      (if (< next12 10)\n   \
    \                                                     (let ((next13 (next12 /\
    \ 10)))\n                                                          (if (< next13\
    \ 10)\n                                                            (let ((next14\
    \ (next13 / 10)))\n                                                          \
    \    (if (< next14 10)\n                                                     \
    \           (let ((next15 (next14 / 10)))\n                                  \
    \                                (if (< next15 10)\n                         \
    \                                           (let ((next16 (next15 / 10)))\n  \
    \                                                                    (if (< next16\
    \ 10)\n                                                                      \
    \  (let ((next17 (next16 / 10)))\n                                           \
    \                               (if (< next17 10)\n                          \
    \                                                  (let ((next18 (next17 / 10)))\n\
    \                                                                            \
    \  (if (< next18 10)\n                                                       \
    \                         (", "  (let ((result \"\"))\n    (let ((i number))\n\
    \      (while (< i 1000)\n        (let ((next (modulo i 10)))\n          (if (<\
    \ next 5)\n            (append result \"v\")\n            (append result \"x\"\
    )\n            (append result \"l\")\n            (append result \"c\")\n    \
    \        (append result \"d\")\n            (append result \"m\"))\n         \
    \ (set! i (i - 1)))\n        (set! i (i + 1)))\n      (return result)))\n)\n\n\
    ;; Given a roman numeral, obtain its integer value.\n;; Return 0 if the input\
    \ is not a valid roman numeral.\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n\
    ;; 19\n;; >>> (roman_to_int \"xlix\")\n;; 19\n;; >>> (roman_to_int \"cdxxvi\"\
    )\n;; 426\n;; >>> (roman_to_int \"cdv\")\n;; 0\n;; >>> (roman_to_int \"\")\n;;\
    \ 0", "  (let ((result \"\"))\n    (if (<= number 1000)\n      (let ((n (number)))\n\
    \        (if (<= n 100)\n          (let ((n (n)))\n            (let ((i 1))\n\
    \              (while (<= n 10)\n                (let ((n (n)))\n            \
    \      (let ((i (+ i 1)))\n                    (set! result (concat result (string-append\
    \ (string-append \"cm\" (string-append (string-append \"ix\" (string-append \"\
    x\" (string-append \"v\" (string-append \"i\" (string-append \"i\")))))))))))))\n\
    \              (set! result (concat result (string-append \"cd\" (string-append\
    \ (string-append \"l\" (string-append \"c\" (string-append \"x\" (string-append\
    \ \"x\"))))))))))\n        (let ((n (n)))\n          (let ((i 1))\n          \
    \  (while (<= n 1000)\n              (let ((n (n)))\n                (let ((i\
    \ (+ i 1)))\n                  (set! result (concat result (string-append (string-append\
    \ \"cm\" (string-append (string-append \"ix\" (string-append \"x\" (string-append\
    \ \"v\" (string-append \"i\" (string-append \"i\")))))))))))))\n          (set!\
    \ result (concat result (string-append \"cd\" (string-append (string-append \"\
    l\" (string-append \"c\" (string-append \"x\" (string-append \"x\"))))))))))))\n\
    \    (return result)\n)\n", "  (let ((result (string)))\n    (let ((digit (number\
    \ % 10)))\n      (if (zero? digit)\n          (append result \"\")\n         \
    \ (append result (string-append (string-append \"I\" \"V\") (string-append \"\
    X\" \"L\" \"C\" \"D\" \"M\")))\n          (append result digit)))\n    (return\
    \ (string-lowercase result)))\n)\n\n;; Given a roman numeral, obtain its integer\
    \ value.\n;; Return 0 if the input is not a valid roman numeral.\n;; Examples:\n\
    ;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"xlix\")\n;; 19\n\
    ;; >>> (roman_to_int \"cdxxvi\")\n;; 426\n;; >>> (roman_to_int \"cdxxvii\")\n\
    ;; 0", "  (let* ([result (string-append \"\")])\n    (if (< number 100)\n    \
    \  (let* ([num (number % 10)])\n        (if (< num 4)\n          (let* ([n (number\
    \ / 10)])\n            (if (< n 2)\n              (string-append \"i\")\n    \
    \          (string-append \"v\")\n              (string-append \"x\"))\n     \
    \       (string-append \"m\"))\n          (string-append \"c\"))\n        (string-append\
    \ \"d\"))\n    (string-append \"m\"))\n  result)\n)\n\n;; Given a roman numeral,\
    \ obtain its integer value.\n;; Return 0 if the input is not a valid roman numeral.\n\
    ;; Examples:\n;; >>> (roman_to_int \"xix\")\n;; 19\n;; >>> (roman_to_int \"xcm\"\
    )\n;; 200\n;; >>> (roman_to_int \"cdxxvi\")\n;; 426", "  (let ((result \"\"))\n\
    \    (let ((n (number)))\n      (if (< n 100)\n        (let ((num (n % 10)))\n\
    \          (if (< num 4)\n            (let ((d (n / 10)))\n              (if (<\
    \ d 2)\n                (result \"v\")\n                (if (< d 2)\n        \
    \          (result \"iv\")\n                  (result \"iv\")))\n            \
    \  (if (< d 2)\n                (result \"x\")\n                (if (< d 2)\n\
    \                  (result \"ix\")\n                  (result \"ix\")))\n    \
    \          (if (< d 2)\n                (result \"l\")\n                (if (<\
    \ d 2)\n                  (result \"xl\")\n                  (result \"xl\")))\n\
    \              (if (< d 2)\n                (result \"c\")\n                (if\
    \ (< d 2)\n                  (result \"xc\")\n                  (result \"xc\"\
    )))\n              (if (< d 2)\n                (result \"d\")\n             \
    \   (if (< d 2)\n                  (result \"xd\")\n                  (result\
    \ \"xd\")))\n              (if (< d 2)\n                (result \"m\")\n     \
    \           (if (< d 2)\n                  (result \"xm\")\n                 \
    \ (result \"xm\")))\n              (if (< d 2)\n                (result \"i\"\
    )\n                (if (< d 2)\n                  (result \"xi\")\n          \
    \        (result \"xi\"))))\n            (if (< d 2)\n              (result \"\
    v\")\n              (if (< d 2)\n                (result \"iv\")\n           \
    \     (result \"iv\"))))\n          (if (< num 5)\n            (let ((num (n /\
    \ 10)))\n              (if (< num 2)\n                (result \"v\")\n       \
    \         (if (< num 2)\n                  (result \"iv\")\n                 \
    \ (result \"iv\"))))\n            (if (< num 2)\n              (result \"x\")\n\
    \              (if (< num 2)\n                (result \"ix\")\n              \
    \  (result \"ix\"))))\n          (if (< num 2)\n            (result \"l\")\n \
    \           (if (< num 2)\n              (result \"xl\")\n              (result\
    \ \"xl\"))))\n        (if (< num 5)\n          (let ((num (", "  (let ((result\
    \ \"\"))\n    (if (< number 100)\n      (let ((digit (number % 10)))\n       \
    \ (if (< digit 10)\n          (let ((sub (number / 10)))\n            (if (< sub\
    \ 10)\n              (let ((subsub (sub / 10)))\n                (if (< subsub\
    \ 10)\n                  (let ((subsubsub (subsub / 10)))\n                  \
    \  (result (string-append (string-append \"cm\" (int_to_roman digit))\n      \
    \                                         (string-append \"x\" (int_to_roman subsub))\n\
    \                                               (string-append \"c\" (int_to_roman\
    \ subsubsub))))))))\n            (let ((sub (number / 10)))\n              (if\
    \ (< sub 10)\n                (let ((subsub (sub / 10)))\n                  (if\
    \ (< subsub 10)\n                    (let ((subsubsub (subsub / 10)))\n      \
    \                (result (string-append (string-append \"cd\" (int_to_roman digit))\n\
    \                                               (string-append \"x\" (int_to_roman\
    \ subsub))\n                                               (string-append \"v\"\
    \ (int_to_roman subsubsub))))))))))))\n    (else\n      (let ((digit (number %\
    \ 100)))\n        (if (< digit 100)\n          (let ((sub (number / 100)))\n \
    \           (if (< sub 10)\n              (let ((subsub (sub / 10)))\n       \
    \         (if (< subsub 10)\n                  (let ((subsubsub (subsub / 10)))\n\
    \                    (result (string-append (string-append \"d\" (int_to_roman\
    \ digit))\n                                               (string-append \"c\"\
    \ (int_to_roman subsub))\n                                               (string-append\
    \ \"x\" (int_to_roman subsubsub))))))))\n            (let ((sub (number / 100)))\n\
    \              (if (< sub 10)\n                (let ((subsub (sub / 10)))\n  \
    \                (if (< subsub 10)\n                    (let ((subsubsub (subsub\
    \ / 10)))\n                      (result (string-append (string-append \"d\" (int_to_roman\
    \ digit))\n                                               (string", "  (let ((result\
    \ \"\"))\n    (let ((num (number)))\n      (if (<= num 1000)\n        (let ((digit\
    \ (num % 10)))\n          (if (< digit 10)\n            (let ((sub (num / 10)))\n\
    \              (if (< sub 10)\n                (let ((subsub (sub / 10)))\n  \
    \                (if (< subsub 10)\n                    (let ((subsubsub (subsub\
    \ / 10)))\n                      (if (< subsubsub 10)\n                      \
    \  (let ((subsubsubsub (subsubsub / 10)))\n                          (if (< subsubsubsub\
    \ 10)\n                            (let ((subsubsubsubsub (subsubsubsub / 10)))\n\
    \                              (if (< subsubsubsubsub 10)\n                  \
    \              (let ((subsubsubsubsubsub (subsubsubsubsub / 10)))\n          \
    \                        (if (< subsubsubsubsubsub 10)\n                     \
    \               (let ((subsubsubsubsubsubsub (subsubsubsubsubsub / 10)))\n   \
    \                                   (if (< subsubsubsubsubsubsub 10)\n       \
    \                                 (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub\
    \ / 10)))\n                                          (if (< subsubsubsubsubsubsubsub\
    \ 10)\n                                            (let ((subsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsub / 10)))\n                                        \
    \      (if (< subsubsubsubsubsubsubsubsub 10)\n                              \
    \                  (let ((subsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                                  (if (< subsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                    (let ((subsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsub / 10)))\n                                  \
    \                    (if (< subsubsubsubsubsubsubsubsubsub 10)\n             \
    \                                           (let ((subsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                           (if (< subsubsubsubsubsubsubsubsubsub 10)\n      \
    \                                 ", "  (let ((result \"\"))\n    (let ((digit\
    \ (number % 10)))\n      (if (< digit 10)\n        (let ((sub (number / 10)))\n\
    \          (if (< sub 10)\n            (let ((subsub (sub / 10)))\n          \
    \    (if (< subsub 10)\n                (let ((subsubsub (subsub / 10)))\n   \
    \               (if (< subsubsub 10)\n                    (let ((subsubsubsub\
    \ (subsubsub / 10)))\n                      (if (< subsubsubsub 10)\n        \
    \                (let ((subsubsubsubsub (subsubsubsub / 10)))\n              \
    \            (if (< subsubsubsubsub 10)\n                            (let ((subsubsubsubsubsub\
    \ (subsubsubsubsub / 10)))\n                              (if (< subsubsubsubsubsub\
    \ 10)\n                                (let ((subsubsubsubsubsubsub (subsubsubsubsubsub\
    \ / 10)))\n                                  (if (< subsubsubsubsubsubsub 10)\n\
    \                                    (let ((subsubsubsubsubsubsubsub (subsubsubsubsubsubsub\
    \ / 10)))\n                                      (if (< subsubsubsubsubsubsubsub\
    \ 10)\n                                        (let ((subsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsub / 10)))\n                                        \
    \  (if (< subsubsubsubsubsubsubsubsub 10)\n                                  \
    \          (let ((subsubsubsubsubsubsubsubsubsub (subsubsubsubsubsubsubsubsub\
    \ / 10)))\n                                              (if (< subsubsubsubsubsubsubsubsubsub\
    \ 10)\n                                                (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsub / 10)))\n                                  \
    \                (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n              \
    \                                      (let ((subsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))\n                               \
    \                       (if (< subsubsubsubsubsubsubsubsubsubsub 10)\n       \
    \                                                 (let ((subsubsubsubsubsubsubsubsubsubsubsub\
    \ (subsubsubsubsubsubsubsubsubsubsub / 10)))", "  (let ((result \"\"))\n    (if\
    \ (<= number 1000)\n      (let ((digit (number % 10)))\n        (if (< digit 10)\n\
    \          (result (append result \"x\" digit))\n          (let ((sub (number\
    \ / 10)))\n            (if (< sub 10)\n              (result (append result \"\
    x\" digit))\n              (let ((subsub (sub / 10)))\n                (if (<\
    \ subsub 10)\n                  (result (append result \"x\" digit))\n       \
    \           (let ((subsubsub (subsub / 10)))\n                    (if (< subsubsub\
    \ 10)\n                      (result (append result \"x\" digit))\n          \
    \            (result (append result \"c\" digit))))))))))\n      (result (append\
    \ result \"c\" digit))))\n  (string-to-lowercase result))\n\n;; Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n;; and return it\
    \ in lowercase.\n;; Restrictions: 1 <= num <= 1000\n;; Examples:\n;; >>> (int_to_roman\
    \ 19)\n;; \"xix\"\n;; >>> (int_to_roman 152)\n;; \"clii\"\n;; >>> (int_to_roman\
    \ 426)\n;; \"cdxxvi\"", "  (let* ([\n    result (string)\n    i (number)\n   \
    \ ])\n    (while (< i 1000)\n      [\n        (let* ([\n          j (quotient\
    \ i 10)\n          k (modulo i 10)\n          ])\n          (if (< j 2)\n    \
    \        [\n              (append result (string #\" \"))\n              (append\
    \ result (string (string #\"I\")))\n            ]\n          [\n            (append\
    \ result (string #\" \"))\n            (append result (string (string #\"I\")))\n\
    \            (append result (string #\"I\"))\n          ])\n        (append result\
    \ (string #\" \"))\n        (append result (string (string #\"V\")))\n       \
    \ (append result (string #\"I\"))\n        (append result (string #\" \"))\n \
    \       (append result (string (string #\"C\")))\n        (append result (string\
    \ #\"I\"))\n        (append result (string #\"X\"))\n        (append result (string\
    \ #\" \"))\n        (append result (string (string #\"X\")))\n        (append\
    \ result (string #\"I\"))\n        (append result (string #\"X\"))\n        (append\
    \ result (string #\" \"))\n        (append result (string (string #\"X\")))\n\
    \        (append result (string #\"I\"))\n        (append result (string #\"X\"\
    ))\n        (append result (string #\" \"))\n        (append result (string (string\
    \ #\"X\")))\n        (append result (string #\"I\"))\n        (append result (string\
    \ #\"X\"))\n        (append result (string #\" \"))\n        (append result (string\
    \ (string #\"X\")))\n        (append result (string #\"I\"))\n        (append\
    \ result (string #\"X\"))\n        (append result (string #\" \"))\n        (append\
    \ result (string (string #\"X\")))\n        (append result (string #\"I\"))\n\
    \        (append result (string #\"X\"))\n        (append result (string #\" \"\
    ))\n        (append result (string (string #\"X\")))\n        (append result (string\
    \ #\"I\"))\n        (append result (string #\"X\"))\n        (append result (string",
  "  (let ((result \"\"))\n    (let ((n (number)))\n      (if (< n 100)\n        (let\
    \ ((digit (n % 10)))\n          (if (< digit 4)\n            (result (append result\
    \ \"I\")\n               (append result (string-append \"I\" \"V\" \"I\" \"X\"\
    \ \"L\" \"C\" \"D\")))\n            (if (< digit 9)\n              (result (append\
    \ result \"X\"))\n              (if (< digit 16)\n                (result (append\
    \ result \"L\"))))\n            (if (< digit 25)\n              (result (append\
    \ result \"X\"))))\n          (if (< digit 40)\n            (result (append result\
    \ \"X\"))))\n        (if (< digit 50)\n          (result (append result \"C\"\
    ))))\n      (if (< n 10)\n        (result (append result \"X\"))))\n    (if (<\
    \ n 1)\n      \"x\"\n      (append result (string-append \"I\" \"V\" \"I\" \"\
    X\" \"L\" \"C\" \"D\" \"X\"))))\n\n;; Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\n;; and return it in lowercase.\n;; Restrictions:\
    \ 1 <= num <= 1000\n;; Examples:\n;; >>> (int_to_roman 19)\n;; \"xix\"\n;; >>>\
    \ (int_to_roman 152)\n;; \"clii\"\n;; >>> (int_to_roman 426)\n;; \"cdxxvi\"",
  "  (let* ([n (number)])\n    (if (<= n 1)\n      \"x\"\n    (let* ([n1 (n - 1)])\n\
    \      (let* ([n2 (n - 2)])\n        (if (<= n2 0)\n          (let* ([n3 (n -\
    \ 3)])\n            (let* ([n4 (n - 4)])\n              (if (<= n4 0)\n      \
    \          (let* ([n5 (n - 5)])\n                  (let* ([n6 (n - 6)])\n    \
    \                (if (<= n6 0)\n                      (let* ([n7 (n - 7)])\n \
    \                       (let* ([n8 (n - 8)])\n                          (if (<=\
    \ n8 0)\n                            (let* ([n9 (n - 9)])\n                  \
    \            (let* ([n10 (n - 10)])\n                                (if (<= n10\
    \ 0)\n                                  (let* ([n11 (n - 11)])\n             \
    \                       (let* ([n12 (n - 12)])\n                             \
    \         (if (<= n12 0)\n                                        (let* ([n13\
    \ (n - 13)])\n                                          (let* ([n14 (n - 14)])\n\
    \                                            (if (<= n14 0)\n                \
    \                              (let* ([n15 (n - 15)])\n                      \
    \                          (let* ([n16 (n - 16)])\n                          \
    \                        (if (<= n16 0)\n                                    \
    \                (let* ([n17 (n - 17)])\n                                    \
    \                  (let* ([n18 (n - 18)])\n                                  \
    \                      (if (<= n18 0)\n                                      \
    \                    (let* ([n19 (n - 19)])\n                                \
    \                            (let* ([n20 (n - 20)])\n                        \
    \                                      (if (<= n20 0)\n                      \
    \                                          (let* ([n21 (n - 21)])\n          \
    \                                                        (let* ([n22 (n - 22)])\n\
    \                                                                    (if (<= n22\
    \ 0)\n", "  (let ((result \"\"))\n    (let ((i number))\n      (while (< i 1000)\n\
    \        (let ((num (modulo i 10)))\n          (if (< num 5)\n            (append\
    \ result \"v\" num)\n            (append result \"x\" num)\n            (append\
    \ result \"c\" num)\n            (append result \"l\" num)\n            (append\
    \ result \"d\" num))\n          (set! i (i - 1)))\n        (set! i (i + 1)))\n\
    \      (reverse result)))\n)\n\n;; Given a roman numeral, obtain its integer value.\n\
    ;; Restrictions: 1 <= num <= 3999\n;; Examples:\n;; >>> (roman_to_int \"xix\"\
    )\n;; 19\n;; >>> (roman_to_int \"clii\")\n;; 152\n;; >>> (roman_to_int \"cdxxvi\"\
    )\n;; 426", "  (let ((result \"\"))\n    (if (<= number 1000)\n      (let ((digit\
    \ (modulo number 10)))\n        (if (< digit 2)\n          (let ((subtract (modulo\
    \ (- number digit) 10)))\n            (let ((subtract2 (modulo (- number subtract)\
    \ 10)))\n              (let ((subtract3 (modulo (- number subtract2) 10)))\n \
    \               (let ((subtract4 (modulo (- number subtract3) 10)))\n        \
    \          (let ((subtract5 (modulo (- number subtract4) 10)))\n             \
    \       (let ((subtract6 (modulo (- number subtract5) 10)))\n                \
    \      (let ((subtract7 (modulo (- number subtract6) 10)))\n                 \
    \       (let ((subtract8 (modulo (- number subtract7) 10)))\n                \
    \          (let ((subtract9 (modulo (- number subtract8) 10)))\n             \
    \               (let ((subtract10 (modulo (- number subtract9) 10)))\n       \
    \                       (let ((subtract11 (modulo (- number subtract10) 10)))\n\
    \                                (let ((subtract12 (modulo (- number subtract11)\
    \ 10)))\n                                  (let ((subtract13 (modulo (- number\
    \ subtract12) 10)))\n                                    (let ((subtract14 (modulo\
    \ (- number subtract13) 10)))\n                                      (let ((subtract15\
    \ (modulo (- number subtract14) 10)))\n                                      \
    \  (let ((subtract16 (modulo (- number subtract15) 10)))\n                   \
    \                       (let ((subtract17 (modulo (- number subtract16) 10)))\n\
    \                                            (let ((subtract18 (modulo (- number\
    \ subtract17) 10)))\n                                              (let ((subtract19\
    \ (modulo (- number subtract18) 10)))\n                                      \
    \          (let ((subtract20 (modulo (- number subtract19) 10)))\n           \
    \                                       (let ((subtract21 (modulo (- number subtract20)\
    \ 10)))\n                                                    (let ((subtract22\
    \ (modulo (- number subtract21) 10)))\n                                      \
    \                (let ((subtract23 (modulo (- number subtract22) 10)))\n     \
    \                                                 ", "  (let ((result \"\"))\n\
    \    (if (zero? number)\n      (return \"\")\n      (let ((num (abs number)))\n\
    \        (if (zero? num)\n          (return \"\")\n          (let ((i (1)))\n\
    \            (while (zero? (remainder num 2)))\n              (let ((digit (remainder\
    \ num (quotient num 2))))\n                (if (zero? digit)\n               \
    \   (return \"\")\n                  (let ((next (add i 1)))\n               \
    \     (result (concat result (string-append (string-append \"I\" \"V\") (string-append\
    \ \"X\" \"L\" \"C\" \"D\" \"M\"))))\n                    (set! i next)))))))))))\n\
    \n;; Given a roman numeral, obtain its integer value.\n;; Return 0 if the input\
    \ is not a valid roman numeral.\n;; Examples:\n;; >>> (roman_to_int \"xix\")\n\
    ;; 19\n;; >>> (roman_to_int \"CDXXVI\")\n;; 426", "  (let* ([n (number)])\n  \
    \  (if (< n 1)\n      \"i\"\n    (if (< n 2)\n      \"ii\"\n    (if (< n 3)\n\
    \      \"iii\"\n    (if (< n 4)\n      \"iv\"\n    (if (< n 5)\n      \"v\"\n\
    \    (if (< n 6)\n      \"vi\"\n    (if (< n 7)\n      \"vii\"\n    (if (< n 8)\n\
    \      \"viii\"\n    (if (< n 9)\n      \"ix\"\n    (if (< n 10)\n      \"x\"\n\
    \    (if (< n 11)\n      \"xi\"\n    (if (< n 12)\n      \"xii\"\n    (if (< n\
    \ 13)\n      \"xiii\"\n    (if (< n 14)\n      \"xiv\"\n    (if (< n 15)\n   \
    \   \"xv\"\n    (if (< n 16)\n      \"xvi\"\n    (if (< n 17)\n      \"xvii\"\n\
    \    (if (< n 18)\n      \"xviii\"\n    (if (< n 19)\n      \"xix\"\n    (if (<\
    \ n 20)\n      \"xx\"\n    (if (< n 30)\n      \"xxi\"\n    (if (< n 40)\n   \
    \   \"xxii\"\n    (if (< n 50)\n      \"xxiii\"\n    (if (< n 60)\n      \"xxiv\"\
    \n    (if (< n 70)\n      \"xxv\"\n    (if (< n 80)\n      \"xxvi\"\n    (if (<\
    \ n 90)\n      \"xxvii\"\n    (if (< n 100)\n      \"xxviii\"\n    (if (< n 200)\n\
    \      \"cc\"\n    (if (< n 300)\n      \"ccc\"\n    (if (< n 400)\n      \"cccc\"\
    \n    (if (< n 500)\n      \"ccccc\"\n    (if (< n 600)\n      \"cccccc\"\n  \
    \  (if (< n 700)\n      \"ccccccc\"\n    (if (< n 800)\n      \"cccccccc\"\n \
    \   (if (< n 900)\n      \"cccc", "  (let ((result \"\"))\n    (if (< number 100)\n\
    \      (let ((n (number)))\n        (if (< n 10)\n          (result \"x\" n)\n\
    \          (let ((n (n - 10)))\n            (if (< n 10)\n              (result\
    \ \"x\" n)\n              (let ((n (n - 10)))\n                (if (< n 10)\n\
    \                  (result \"x\" n)\n                  (let ((n (n - 10)))\n \
    \                   (if (< n 10)\n                      (result \"x\" n)\n   \
    \                   (let ((n (n - 10)))\n                        (if (< n 10)\n\
    \                          (result \"x\" n)\n                          (let ((n\
    \ (n - 10)))\n                            (if (< n 10)\n                     \
    \         (result \"x\" n)\n                              (result \"x\" n))))))))))))))))\n\
    \    (else\n      (let ((n (number)))\n        (let ((n (n / 10)))\n         \
    \ (let ((n (n % 10)))\n            (if (< n 10)\n              (result \"x\" n)\n\
    \              (let ((n (n - 10)))\n                (if (< n 10)\n           \
    \       (result \"x\" n)\n                  (let ((n (n - 10)))\n            \
    \        (if (< n 10)\n                      (result \"x\" n)\n              \
    \        (let ((n (n - 10)))\n                        (if (< n 10)\n         \
    \                 (result \"x\" n)\n                          (let ((n (n - 10)))\n\
    \                            (if (< n 10)\n                              (result\
    \ \"x\" n)\n                              (result \"x\" n)))))))))))))))))))\n",
  "  (let ((result \"\"))\n    (let ((i number))\n      (while (< i 1000)\n      \
    \  (let ((next (modulo i 10)))\n          (if (< next 5)\n            (append\
    \ result \"v\" (modulo i 5))\n            (append result \"x\")))\n        (let\
    \ ((next (modulo i 100)))\n          (if (< next 50)\n            (append result\
    \ \"l\" (modulo i 50))\n            (append result \"c\")))\n        (let ((next\
    \ (modulo i 1000)))\n          (if (< next 500)\n            (append result \"\
    d\" (modulo i 500))\n            (append result \"c\")))\n        (let ((next\
    \ (modulo i 1000)))\n          (if (< next 500)\n            (append result \"\
    c\" (modulo i 500))\n            (append result \"c\")))\n        (let ((next\
    \ (modulo i 1000)))\n          (if (< next 500)\n            (append result \"\
    c\" (modulo i 500))\n            (append result \"c\")))\n        (let ((next\
    \ (modulo i 1000)))\n          (if (< next 500)\n            (append result \"\
    c\" (modulo i 500))\n            (append result \"c\")))\n        (let ((next\
    \ (modulo i 1000)))\n          (if (< next 500)\n            (append result \"\
    c\" (modulo i 500))\n            (append result \"c\")))\n        (let ((next\
    \ (modulo i 1000)))\n          (if (< next 500)\n            (append result \"\
    c\" (modulo i 500))\n            (append result \"c\")))\n        (let ((next\
    \ (modulo i 1000)))\n          (if (< next 500)\n            (append result \"\
    c\" (modulo i 500))\n            (append result \"c\")))\n        (let ((next\
    \ (modulo i 1000)))\n          (if (< next 500)\n            (append result \"\
    c\" (modulo i 500))\n            (append result \"c\")))\n        (let ((next\
    \ (modulo i 1000)))\n          (if (< next 500)\n            (append result \"\
    c\" (modulo i 500))\n            (append result \"c\")))\n        (let ((next\
    \ (modulo i 1000)))\n          (if", "  (define (roman_digit number)\n    (cond\n\
    \      [(< number 10) \"I\"]\n      [(< number 20) \"II\"]\n      [(< number 30)\
    \ \"III\"]\n      [(< number 40) \"IV\"]\n      [(< number 50) \"V\"]\n      [(<\
    \ number 60) \"VI\"]\n      [(< number 70) \"VII\"]\n      [(< number 80) \"VIII\"\
    ]\n      [(< number 90) \"IX\"]\n      [(< number 100) \"X\"]\n      [(< number\
    \ 200) \"XX\"]\n      [(< number 300) \"XXX\"]\n      [(< number 400) \"XL\"]\n\
    \      [(< number 500) \"L\"]\n      [(< number 600) \"LX\"]\n      [(< number\
    \ 700) \"LXX\"]\n      [(< number 800) \"LXXX\"]\n      [(< number 900) \"XC\"\
    ]\n      [(< number 1000) \"C\"]\n      [else \"?\"]\n    )\n  )\n  (string-append\n\
    \    (map (roman_digit number)\n      (string-split \"MCDXLIV\" \"?\"))\n    \"\
    \")\n)\n", "  (define (roman_digit roman_numeral)\n    (cond\n      ((= roman_numeral\
    \ \"I\") 1)\n      ((= roman_numeral \"V\") 5)\n      ((= roman_numeral \"X\"\
    ) 10)\n      ((= roman_numeral \"L\") 50)\n      ((= roman_numeral \"C\") 100)\n\
    \      ((= roman_numeral \"D\") 500)\n      ((= roman_numeral \"M\") 1000)\n \
    \     (else 0)))\n  (define (roman_numeral_to_int roman_numeral)\n    (cond\n\
    \      ((= roman_numeral \"I\") 1)\n      ((= roman_numeral \"V\") 5)\n      ((=\
    \ roman_numeral \"X\") 10)\n      ((= roman_numeral \"L\") 50)\n      ((= roman_numeral\
    \ \"C\") 100)\n      ((= roman_numeral \"D\") 500)\n      ((= roman_numeral \"\
    M\") 1000)\n      (else 0)))\n  (define (convert roman_numeral)\n    (cond\n \
    \     ((= roman_numeral \"I\") \"1\")\n      ((= roman_numeral \"V\") \"5\")\n\
    \      ((= roman_numeral \"X\") \"10\")\n      ((= roman_numeral \"L\") \"50\"\
    )\n      ((= roman_numeral \"C\") \"100\")\n      ((= roman_numeral \"D\") \"\
    500\")\n      ((= roman_numeral \"M\") \"1000\")\n      (else \"0\")))\n  (define\
    \ (convert_to_roman roman_numeral)\n    (cond\n      ((= roman_numeral \"1\")\
    \ \"I\")\n      ((= roman_numeral \"5\") \"V\")\n      ((= roman_numeral \"10\"\
    ) \"X\")\n      ((= roman_numeral \"50\") \"L\")\n      ((= roman_numeral \"100\"\
    ) \"C\")\n      ((= roman_numeral \"500\") \"D\")\n      ((= roman_numeral \"\
    1000\") \"M\")\n      (else \"0\")))", "  (let ((result (string)))\n    (if (<\
    \ number 100)\n      (let ((digit (number % 10)))\n        (if (< digit 10)\n\
    \          (string-append result \"I\")\n          (string-append result \"V\"\
    )\n          (string-append result \"X\"))\n        (if (< digit 9)\n        \
    \  (string-append result \"XI\")\n          (string-append result \"L\"))\n  \
    \      (if (< digit 8)\n          (string-append result \"XII\")\n          (string-append\
    \ result \"C\"))\n        (if (< digit 7)\n          (string-append result \"\
    XIII\")\n          (string-append result \"D\"))\n        (if (< digit 6)\n  \
    \        (string-append result \"XIV\")\n          (string-append result \"M\"\
    ))\n        (if (< digit 5)\n          (string-append result \"XV\")\n       \
    \   (string-append result \"V\"))\n        (if (< digit 4)\n          (string-append\
    \ result \"XVI\")\n          (string-append result \"I\"))\n        (if (< digit\
    \ 3)\n          (string-append result \"XVII\")\n          (string-append result\
    \ \"II\"))\n        (if (< digit 2)\n          (string-append result \"XVIII\"\
    )\n          (string-append result \"III\"))\n        (if (< digit 1)\n      \
    \    (string-append result \"XIX\")\n          (string-append result \"X\")))))\n\
    \    (else\n      (let ((digit (number / 10)))\n        (if (< digit 10)\n   \
    \       (string-append result \"X\")\n          (string-append result \"L\"))\n\
    \        (if (< digit 9)\n          (string-append result \"LX\")\n          (string-append\
    \ result \"C\"))\n        (if (< digit 8)\n          (string-append result \"\
    LXX\")\n          (string-append result \"D\"))\n        (if (< digit 7)\n   \
    \       (string-append result \"LXXX\")\n          (string-append result \"M\"\
    ))\n        (if (< digit 6)\n          (string-append result \"LXXXI\")\n    \
    \      (string-append result \"I\"))\n        (if (< digit 5)\n          (string-append\
    \ result \"LXXXII\")\n          (string"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
