name: HumanEval_47_median
language: rkt
prompt: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> (median\
  \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0\n\
  (define (median l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
  \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
  \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n \
  \   (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
  \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else\
    \ (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (first l)]\n    [else (first (first l))]\n  ))\n\n;; Return mean of elements\
    \ in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10\
    \ 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return the\
    \ median of the two lists.\n;; >>> (median (list 1 2 3 4 5 6) (list -10 4 6 1000\
    \ 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car\
    \ l)]\n    [else (median (cdr l))]))\n", "  (if (null? l)\n    (error \"Median\
    \ of empty list\")\n    (if (odd? length? l)\n      (car l)\n      (cdr l)\n \
    \     (if (odd? length? cdr l)\n        (car cdr)\n        (cdr cdr)\n       \
    \ (car cdr)\n        (cdr cdr)))))\n\n;; Return the mean of the elements in the\
    \ list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6\
    \ 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [(even? (length l))\n      (let ((n (length l))\n            (p\
    \ (partition l 2)))\n        (+ (car p) (/ (length p) 2)))\n      (else\n    \
    \    (let ((n (length l)))\n          (let ((p (partition l n)))\n           \
    \ (+ (car p) (/ (length p) n)))))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd?\
    \ (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return the median\
    \ of the elements in the list l.\n;; >>> (median-list (list 3 1 2 4 5))\n;; 3\n\
    ;; >>> (median-list (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", " \
    \ (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [(even? (length\
    \ l))\n      (let ((n (length l))\n            (p (partition (cdr l) n)))\n  \
    \      (+ (car p) (/ (length p) 2)))\n      (else (car l))]))\n", "  (cond\n \
    \   [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [else (median (cdr l))]))\n\n;; Return the median of the elements in the\
    \ list l.\n;; >>> (median-list (list 3 1 2 4 5))\n;; 3\n;; >>> (median-list (list\
    \ -10 4 6 1000 10 20))\n;; 15.0", "  (if (null? l)\n    (error \"Median of empty\
    \ list\")\n    (if (odd? length? l)\n      (car l)\n      (cdr l)\n      (divide\
    \ (car l) 2)\n      (+ (car l) (cdr l))\n      (divide (cdr l) 2)\n      (+ (car\
    \ l) (cdr l))\n      (divide (car l) 2)))))\n", "  (if (null? l)\n    (error \"\
    Median of empty list\")\n    (if (odd? length? l)\n      (car l)\n      (cdr l)\n\
    \      (if (odd? length? cdr l)\n        (car cdr)\n        (cdr cdr)\n      \
    \  (car (cdr cdr)))))\n\n;; Return mean of elements in the list l.\n;; >>> (mean\
    \ (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [else (median (cdr l))]))\n\n;; Return the mean of the elements in the list\
    \ l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000\
    \ 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car\
    \ l)]\n    [else (median (cdr l))]))\n\n;; Return the mean of elements in the\
    \ list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6\
    \ 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [(even? (length l))\n      (let ((n (length l))\n            (p\
    \ (partition (cdr l) n)))\n        (+ (car p) (/ (length p) 2)))\n      ]\n  \
    \  )\n)\n", "  (if (null? l)\n    (error \"Median of empty list\")\n    (if (odd?\
    \ length l)\n      (car l)\n      (cdr l)\n      (car (cdr l))\n      (cdr (cdr\
    \ l))\n      (car (cdr (cdr l)))\n      (cdr (cdr (cdr l)))\n      (car (cdr (cdr\
    \ (cdr l))))\n      (cdr (cdr (cdr (cdr l))))\n      (car (cdr (cdr (cdr (cdr\
    \ l)))))))))\n\n;; Return the median of the elements in the list l.\n;; >>> (median-list\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median-list (list -10 4 6 1000 10 20))\n;;\
    \ 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [(even?\
    \ (length l))\n      (let ((n (length l))\n            (p (partition (cdr l) (lambda\
    \ (x) (odd? (x))) (lambda (x) (n - (x) 1))))\n          (+ (car p) (/ (length\
    \ p) 2)))\n        (car l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [else (median (cdr l))]))\n", "  (if (null? l)\n    (error\
    \ \"Median of empty list\")\n    (if (odd? length l)\n      (car l)\n      (cdr\
    \ l)\n      (if (odd? length l)\n        (car (cdr l))\n        (cdr (cdr l))\n\
    \        (car (cdr (cdr l)))\n        (cdr (cdr (cdr l)))))))\n", "  (cond\n \
    \   [(null? l) 0]\n    [(odd? (length l)) (first l)]\n    [else (first (first\
    \ l))]\n  ))\n\n;; Return mean of elements in the list l.\n;; >>> (mean (list\
    \ 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (first l)]\n    [else (first (first\
    \ l))]))\n\n;; Return the median of the elements in the list l.\n;; >>> (median-list\
    \ (list 3 1 2 4 5))\n;; 3\n;; >>> (median-list (list -10 4 6 1000 10 20))\n;;\
    \ 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else\
    \ (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n\n;; Return median of elements in the\
    \ list l.\n;; >>> (median (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4\
    \ 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n  \
    \  [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n \
    \   [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\
    \n;; Return mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;;\
    \ Return the median of the elements in the list l.\n;; >>> (median-list (list\
    \ 3 1 2 4 5))\n;; 3\n;; >>> (median-list (list -10 4 6 1000 10 20))\n;; 15.0",
  "  (if (null? l)\n    (error \"Median of empty list\")\n    (if (odd? length? l)\n\
    \      (car l)\n      (cdr l)\n      (if (odd? length? cdr l)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car cdr", " \
    \ (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [(even? (length\
    \ l))\n      (let ((n (length l))\n            (p (partition l 2)))\n        (+\
    \ (car p) (/ n 2)))\n      (car (cdr p))]))\n", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return the\
    \ mean of the elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n\
    ;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let ((n (length\
    \ l))\n            (p (partition l 2)))\n        (+ (car p) (/ (cdr p) 2)))\n\
    \      ]\n    )\n  )\n\n;; Return mean of elements in the list l.\n;; >>> (mean\
    \ (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0",
  "  (if (null? l)\n    (error \"Can't take the median of an empty list!\")\n    (if\
    \ (odd? (length l))\n      (car l)\n      (cdr l)\n      (if (odd? (length l))\n\
    \        (car (cdr l))\n        (cdr (cdr l))\n        (car (cdr (cdr l)))))))\n\
    \n;; Return the median of the list of lists l.\n;; >>> (median (list (list 3 1\
    \ 2) (list 4 5 6)))\n;; 3.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let ((n (length\
    \ l))\n            (p (partition (cdr l) n)))\n        (+ (car p) (/ (length p)\
    \ 2)))\n      ]\n    )\n)\n", "  (if (null? l)\n    (error \"Can't take the median\
    \ of an empty list\"))\n  (if (odd? length? l)\n    (car l)\n    (cdr l))\n)\n\
    \n;; Return the mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let\
    \ ((n (length l))\n            (m (+ (n - 1) (n % 2))))\n        (car l)\n   \
    \     (if (> m 0)\n            (/ m 2)\n            (+ (car l) (car (cdr l)))\n\
    \          )\n        )\n      ]\n    )\n  )\n", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return the\
    \ mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;;\
    \ >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return mean\
    \ of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean\
    \ (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd?\
    \ (length l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    ((null?\
    \ l) 0)\n    ((odd? (length l))\n      (let ((n (length l))\n            (p (car\
    \ l)))\n        (+ (car l) (/ n 2)))\n      (car l))\n    (else\n      (let ((n\
    \ (length l))\n            (p (car l)))\n        (+ (car l) (/ n 2)))))\n)\n\n\
    ;; Return median of elements in the list l.\n;; >>> (median (list 3 1 2 4 5))\n\
    ;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;;\
    \ Return median of elements in the list l.\n;; >>> (median (list 3 1 2 4 5))\n\
    ;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;;\
    \ Return the median of the two lists.\n;; >>> (median (list 1 2 3 4 5 6) (list\
    \ -10 -20 -30 -40 -50))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let ((n (length\
    \ l))\n            (p (partition l 2)))\n        (+ (car p) (/ (cdr p) 2)))\n\
    \      ]\n  ))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [else (median (cdr l))]))\n\n;; Return mean of elements in the list l.\n\
    ;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n\
    ;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [(even?\
    \ (length l))\n      (let ((n (length l))\n            (p (partition (cdr l) n)))\n\
    \        (+ (car p) (/ (length p) 2)))\n      ]\n    )\n)\n", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;;\
    \ Return mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n\
    ;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n\
    \    ((null? l) 0)\n    ((null? (cdr l)) l)\n    (else\n      (if (> (car l) (car\
    \ (cdr l)))\n          (car (cdr l))\n          (car l)))))\n", "  (cond\n   \
    \ [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\
    \n;; Return mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;;\
    \ Return mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n\
    ;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let ((n (length\
    \ l))\n            (m (+ (n / 2) 1)))\n        (car (list (car l) (nth l m) (nth\
    \ l (m - 1)))))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car\
    \ l)]\n    [(even? (length l))\n      (let ((n (length l))\n            (m (+\
    \ (floor n) 1)))\n        (let ((p (partition l m)))\n          (cond\n      \
    \      [(null? p) 0]\n            [(odd? (length p)) (car p)]\n            [(even?\
    \ (length p))\n              (let ((m (+ (floor (length p)) 1)))\n           \
    \     (let ((p (partition p m)))\n                  (cond\n                  \
    \  [(null? p) 0]\n                    [(odd? (length p)) (car p)]\n          \
    \          [(even? (length p))\n                      (let ((m (+ (floor (length\
    \ p)) 1)))\n                        (let ((p (partition p m)))\n             \
    \             (cond\n                            [(null? p) 0]\n             \
    \               [(odd? (length p)) (car p)]\n                            [(even?\
    \ (length p))\n                              (let ((m (+ (floor (length p)) 1)))\n\
    \                                (let ((p (partition p m)))\n                \
    \                  (cond\n                                    [(null? p) 0]\n\
    \                                    [(odd? (length p)) (car p)]\n           \
    \                         [(even? (length p))\n                              \
    \        (let ((m (+ (floor (length p)) 1)))\n                               \
    \         (let ((p (partition p m)))\n                                       \
    \   (cond\n                                            [(null? p) 0]\n       \
    \                                     [(odd? (length p)) (car p)]\n          \
    \                                  [(even? (length p))\n                     \
    \                         (let ((m (+ (floor (length p)) 1)))\n              \
    \                                  (let ((p (partition p m)))\n              \
    \                                    (cond\n                                 \
    \                   [(null? p) 0]\n                                          \
    \          [(odd? (length p)) (car p)]\n                                     \
    \               [(even? (length p))\n                                        \
    \              (let ((m (+ (floor (length p)) 1)))\n                         \
    \                               (let ((p (part", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", "  (if (null?\
    \ l)\n    (error \"The list is empty!\")\n    (if (odd? (length l))\n      (car\
    \ l)\n      (cdr l)\n      (cdr (cdr l))\n      (car (cdr l))\n      (cdr (cdr\
    \ (cdr l)))\n      (car (cdr (cdr (cdr l))))\n      (cdr (cdr (cdr (cdr (cdr l)))))))))\n\
    \n;; Return the median of the elements in the list l.\n;; >>> (median-list (list\
    \ 3 1 2 4 5))\n;; 3\n;; >>> (median-list (list -10 4 6 1000 10 20))\n;; 15.0",
  "  (cond\n    ((null? l) 0)\n    ((odd? (length l))\n      (car l)\n      (cdr l))\n\
    \    (else\n      (quotient (length l) 2)\n      (apply + (map (lambda (x) (car\
    \ x)) l) (cdr l))))\n\n;; Return mean of elements in the list l.\n;; >>> (mean\
    \ (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0",
  "  (if (null? l)\n    (error \"Median of empty list\")\n    (if (odd? length? l)\n\
    \      (car l)\n      (cdr l)\n      (car (cdr l))\n      (cdr (cdr l))\n    \
    \  (car (cdr (cdr l)))\n      (cdr (cdr (cdr l))))))\n\n;; Return mean of elements\
    \ in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10\
    \ 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [(even? (length l))\n      (let ((n (length l)))\n       \
    \ (let ((l1 (cdr l)) (l2 (cdr l1)))\n          (if (odd? n)\n              (let\
    \ ((m (floor n/2)))\n                (cond\n                  [(<= m 0) 0]\n \
    \                 [(>= m (length l2)) (car l2)]\n                  [else (car\
    \ (l1 (mod n (length l2))))]))\n            (car l1))))]))\n", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;;\
    \ Return mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n\
    ;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return the\
    \ median of the elements in the list l.\n;; >>> (median-list (list 3 1 2 4 5))\n\
    ;; 3\n;; >>> (median-list (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n   \
    \ [(null? l) 0]\n    [(odd? (length l)) (first l)]\n    [else (first (first l))]\n\
    \  ))\n\n;; Return mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4\
    \ 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n \
    \   [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\
    \n;; Return the median of the two numbers.\n;; >>> (median 1 2)\n;; 1.5\n;; >>>\
    \ (median 1 2.5)\n;; 2.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n  \
    \  [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return the\
    \ median of the elements in the list l.\n;; >>> (median-list (list 3 1 2 4 5))\n\
    ;; 3\n;; >>> (median-list (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n   \
    \ [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return median of elements\
    \ in the list l.\n;; >>> (median (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list\
    \ -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [(even? (length l))\n      (let ((n (length l))\n        \
    \    (p (partition l 2)))\n        (+ (car p) (/ n 2)))\n      (car (cdr p))]))\n",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (if (null? l)\n    (error \"Median of empty list\")\n   \
    \ (if (odd? length? l)\n      (car l)\n      (cdr l)\n      (if (odd? length?\
    \ cdr l)\n\t(car cdr)\n\t(cdr cdr)\n\t(car (cdr cdr)))))\n\n;; Return the sum\
    \ of the squares of the elements in the list l.\n;; >>> (sum-of-squares (list\
    \ 1 2 3 4 5))\n;; 30\n;; >>> (sum-of-squares (list -10 4 6 1000 10 20))\n;; 1225",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n\n;; Return median of elements in the list l.\n;; >>> (median (list\
    \ 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [(even? (length l))\n\
    \      (let ((n (length l))\n            (p (partition (cdr l) n)))\n        (+\
    \ (car p) (/ (length p) 2)))\n      (else (car l))]))\n\n;; Return the median\
    \ of the elements in the list l.\n;; >>> (median (list 3 1 2 4 5))\n;; 3\n;; >>>\
    \ (median (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let ((n (length\
    \ l))\n            (p (partition l 2)))\n        (+ (car p) (/ n 2)))\n      (car\
    \ l)]\n    [else\n      (let ((n (length l)))\n        (let ((p (partition l 2)))\n\
    \          (+ (car p) (/ n 2))))\n      0]\n  ))\n", "  (cond\n    [(null? l)\
    \ 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return\
    \ the mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n\
    ;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let ((n (length\
    \ l))\n            (p (partition (cdr l) n)))\n        (+ (car p) (/ (length p)\
    \ 2)))\n      (else\n        (let ((n (length l)))\n          (let ((p (partition\
    \ (cdr l) n)))\n            (+ (car p) (/ (length p) 2)))\n          (+ (car (cdr\
    \ p)) (/ (length p) 2))))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [(even? (length l))\n      (let ((n (length l))\n        \
    \    (p (partition (cdr l) n)))\n        (+ (car p) (/ (length p) 2)))\n     \
    \ ]\n    )\n)\n\n;; Return the mean of the elements in the list l.\n;; >>> (mean\
    \ (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [(even? (length l))\n      (let ((n (length l))\n        \
    \    (p (partition l 2)))\n        (+ (car p) (/ n 2)))\n      ]\n    )\n  )\n\
    )\n", "  (if (null? l)\n    (error \"Median of empty list\")\n    (if (odd? length\
    \ l)\n      (car l)\n      (cdr l)\n      (cdr (cdr l))\n      (car (cdr l))\n\
    \      (cdr (cdr (cdr l)))\n      (car (cdr (cdr (cdr l))))\n      (cdr (cdr (cdr\
    \ (cdr (cdr l)))))))))\n\n;; Return the mean of the elements in the list l.\n\
    ;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n\
    ;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else\
    \ (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n\n;; Return the mean of elements in\
    \ the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10\
    \ 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return mean of elements in\
    \ the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10\
    \ 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n\n;; Return the mean of the elements in the list l.\n;; >>> (mean\
    \ (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (first l)]\n    [(even? (length\
    \ l))\n      (let ((n (length l)))\n        (first (list (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l", "  (if (null? l)\n    (error \"Median of empty list\")\n    (if (odd? length?\
    \ l)\n      (car l)\n      (cdr l)\n      (if (odd? length? cdr l)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr)\n        (cdr cdr)\n        (car cdr)\n        (cdr cdr)\n        (car\
    \ cdr", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else\
    \ (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n\n;; Return median of elements in the\
    \ list l.\n;; >>> (median (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4\
    \ 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n\n;; Return the mean of elements in\
    \ the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10\
    \ 4 6 1000 10 20))\n;; 15.0", "  (cond\n    ((null? l) 0)\n    ((= (car l) 0)\
    \ 0)\n    ((> (car l) 0)\n      (+ (car l) (median (- (car l) 1) (car l) (car\
    \ l) (car l) (car l)))))\n  )\n)\n", "  (if (null? l)\n    (error \"Median of\
    \ empty list\")\n    (if (odd? length? l)\n      (car l)\n      (cdr l)\n    \
    \  (if (odd? length? cdr l)\n\t(car cdr)\n\t(cdr cdr)\n\t(car cdr)\n\t(cdr cdr)))))\n\
    \n;; Return median of elements in the list l.\n;; >>> (median (list 3 1 2 4 5))\n\
    ;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (first l)]\n    [else (first (first l) + (first\
    \ (last l)) / 2)]))\n", "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) l)\n\
    \    (else\n      (if (odd? (length l))\n        (car (cdr l))\n        (cdr (cdr\
    \ l))\n      )\n    )\n  )\n)\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let ((n (length\
    \ l))\n            (p (partition l 2)))\n        (+ (car p) (/ n 2)))\n      ]\n\
    \    )\n  )\n)\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [(even? (length l))\n      (let ((n (length l))\n            (p (partition\
    \ l 2)))\n        (+ (car p) (/ (length p) 2)))\n      (else (car l))]))\n", " \
    \ (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [(even? (length l))\n      (let ((n (length l)))\n       \
    \ (let ((i 0))\n          (while (< i n)\n            (let ((j (1+ i)))\n    \
    \          (if (< (car l) (cdr l))\n                (set! i j)\n             \
    \   (set! i (1+ i))))))\n        (car l))]))\n", "  (if (null? l)\n    (error\
    \ \"Median of empty list\")\n    (if (odd? (length l))\n      (car l)\n      (cdr\
    \ l)\n      (car (cdr l))\n      (cdr (cdr l))\n      (car (cdr (cdr l)))\n  \
    \    (cdr (cdr (cdr l))))))\n\n;; Return mean of elements in the list l.\n;; >>>\
    \ (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;;\
    \ 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else\
    \ (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n", "  (if (null? l)\n    (error \"\
    The list is empty!\")\n    (if (odd? length? l)\n      (car l)\n      (cdr l)\n\
    \      (car (cdr l))\n      (cdr (cdr l))\n      (car (cdr (cdr l)))\n      (cdr\
    \ (cdr (cdr l))))))\n\n;; Return the median of the two lists l1 and l2.\n;; >>>\
    \ (median (list 1 2 3) (list 4 5 6))\n;; 3\n;; >>> (median (list 1 2 3) (list\
    \ 4 5 6 7))\n;; 6", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [(even? (length l))\n      (let ((n (length l))\n            (p (partition\
    \ (cdr l) n)))\n        (+ (car p) (/ (length p) 2)))\n      (else (car l))]))\n",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (first l)]\n    [else (first\
    \ (first l))]\n  ))\n\n;; Return the median of the two lists.\n;; >>> (median\
    \ (list 1 2 3 4 5 6) (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let\
    \ ((n (length l))\n            (p (partition (cdr l) n)))\n        (+ (car p)\
    \ (/ (length p) 2)))\n      ]\n    )\n)\n", "  (cond\n    [(null? l) 0]\n    [(odd?\
    \ (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return mean of elements\
    \ in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10\
    \ 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (first l)]\n    [else (first (first l))]\n  )\n)\n\n;; Return mean of elements\
    \ in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10\
    \ 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (first l)]\n    [else (first (first l))]\n  ))\n", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", " \
    \ (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [(even? (length l))\n      (let ((n (length l))\n            (p (partition\
    \ l 2)))\n        (+ (car p) (/ (length p) 2)))\n      (else (car l))]))\n\n;;\
    \ Return the median of the elements in the list l.\n;; >>> (median-list (list\
    \ 3 1 2 4 5))\n;; 3\n;; >>> (median-list (list -10 4 6 1000 10 20))\n;; 15.0",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (cond\n    ((null? l) 0)\n    ((odd? (length l))\n      (car\
    \ l)\n      (cdr l))\n    (else\n      (quotient (length l) 2)\n      (apply +\
    \ (map (lambda (x) (car x)) l) (cdr l))))\n\n;; Return the median of the elements\
    \ in the list l.\n;; >>> (median-list (list 3 1 2 4 5))\n;; 3\n;; >>> (median-list\
    \ (list -10 4 6 1000 10 20))\n;; 15.0", "  (if (null? l)\n    (error \"The list\
    \ is empty!\")\n    (if (odd? (length l))\n      (car l)\n      (cdr l)\n    \
    \  (cdr (cdr l))\n      (car (cdr l))\n      (cdr (cdr (cdr l)))\n      (car (cdr\
    \ (cdr (cdr l))))\n      (cdr (cdr (cdr (cdr (cdr l)))))))))\n\n;; Return the\
    \ median of the elements in the list l.\n;; >>> (median-list (list 3 1 2 4 5))\n\
    ;; 3\n;; >>> (median-list (list -10 4 6 1000 10 20))\n;; 15.0", "  (if (null?\
    \ l)\n    (error \"Median of empty list\")\n    (if (odd? (length l))\n      (car\
    \ l)\n      (cdr l)\n      (car (cdr l))\n      (cdr (cdr l))\n      (car (cdr\
    \ (cdr l)))\n      (cdr (cdr (cdr l)))\n      (car (cdr (cdr (cdr l))))\n    \
    \  (cdr (cdr (cdr (cdr l))))\n      (car (cdr (cdr (cdr (cdr l))))))\n      (cdr\
    \ (cdr (cdr (cdr (cdr l))))))\n    (error \"Median of non-odd length list\"))))\n\
    \n;; Return mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (first l)]\n    [else (first (first l))]))\n",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n\n;; Return the median of the two lists l1 and l2.\n;; >>> (median\
    \ (list 3 1 2 4 5) (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", " \
    \ (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n\n;; Return median of elements in the list l.\n;; >>> (median (list\
    \ 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0", "  (if\
    \ (null? l)\n    (error \"Median of empty list\")\n    (if (odd? length? l)\n\
    \      (car l)\n      (cdr l)\n      (if (odd? length? cdr l)\n        (car cdr)\n\
    \        (cdr cdr)\n        (car cdr)\n        )\n      )\n    )\n  )\n\n;; Return\
    \ mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;;\
    \ >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    ((null? l) 0)\n\
    \    ((odd? (length l))\n      (let ((n (length l))\n            (p (car l)))\n\
    \        (+ (car l) (/ n 2)))\n      (car l))\n    (else\n      (let ((n (length\
    \ l))\n            (p (car l)))\n        (+ (car l) (/ n 2)))))\n)\n", "  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [(even? (length l))\n\
    \      (let ((n (length l)))\n        (car (nth cdr l n) (nth cdr l (n - 1)) (nth\
    \ cdr l (n + 1))))]\n    [else (car l)]))\n\n;; Return the median of the two numbers\
    \ a and b.\n;; >>> (median 1 2)\n;; 1.5\n;; >>> (median 1 2.5)\n;; 2.0", "  (if\
    \ (null? l)\n    (error \"Median of empty list\")\n    (if (odd? length l)\n \
    \     (car l)\n      (cdr l)\n      (cdr (cdr l))\n      (car (cdr l))\n     \
    \ (cdr (cdr (cdr l)))\n      (car (cdr (cdr (cdr l))))\n      (cdr (cdr (cdr (cdr\
    \ (cdr l)))))))))\n\n;; Return mean of elements in the list l.\n;; >>> (mean (list\
    \ 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [else (median (cdr l))]))\n\n;; Return mean of elements in the list l.\n\
    ;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n\
    ;; 15.0", "  (cond\n    ((null? l) 0)\n    ((null? (cdr l)) l)\n    (else\n  \
    \    (let ((l1 (car l)) (l2 (cdr l)))\n        (if (odd? (length l))\n       \
    \   (if (> (car l1) (car l2)) l1 l2)\n          (if (< (car l1) (car l2)) l1 l2)\n\
    \          (if (even? (length l))\n            (if (> (car l1) (car l2)) l1 l2)\n\
    \            (if (< (car l1) (car l2)) l1 l2)\n            (if (even? (length\
    \ l))\n              (if (> (car l1) (car l2)) l1 l2)\n              (if (< (car\
    \ l1) (car l2)) l1 l2)\n              (if (even? (length l))\n               \
    \ (if (> (car l1) (car l2)) l1 l2)\n                (if (< (car l1) (car l2))\
    \ l1 l2)\n                (if (even? (length l))\n                  (if (> (car\
    \ l1) (car l2)) l1 l2)\n                  (if (< (car l1) (car l2)) l1 l2)\n \
    \                 (if (even? (length l))\n                    (if (> (car l1)\
    \ (car l2)) l1 l2)\n                    (if (< (car l1) (car l2)) l1 l2)\n   \
    \                 (if (even? (length l))\n                      (if (> (car l1)\
    \ (car l2)) l1 l2)\n                      (if (< (car l1) (car l2)) l1 l2)\n \
    \                     (if (even? (length l))\n                        (if (> (car\
    \ l1) (car l2)) l1 l2)\n                        (if (< (car l1) (car l2)) l1 l2)\n\
    \                        (if (even? (length l))\n                          (if\
    \ (> (car l1) (car l2)) l1 l2)\n                          (if (< (car l1) (car\
    \ l2)) l1 l2)\n                          (if (even", "  (cond\n    [(null? l)\
    \ 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return\
    \ the mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n\
    ;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let ((n (length\
    \ l))\n            (p (partition (cdr l) n)))\n        (+ (car p) (/ (length p)\
    \ 2)))\n      ]\n    )\n)\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return mean of elements in\
    \ the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10\
    \ 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [(even? (length l))\n      (let ((n (length l))\n        \
    \    (p (partition l 2)))\n        (+ (car p) (/ (cdr p) 2)))\n      ]\n    )\n\
    )\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [(even?\
    \ (length l))\n      (let ((n (length l))\n            (p (partition (cdr l) n)))\n\
    \        (if (null? (cdr p))\n            (car p)\n            (median (cdr p))))]))\n",
  "  (if (null? l)\n    (error \"Can't find median of empty list\")))\n\n;; Return\
    \ the median of the two lists.\n;; >>> (median (list 3 1 2 4 5) (list -10 4 6\
    \ 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n\n;; Return median of elements in the\
    \ list l.\n;; >>> (median (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4\
    \ 6 1000 10 20))\n;; 15.0", "  (if (null? l)\n    (error \"Median of empty list\"\
    )\n    (if (odd? (length l))\n      (car l)\n      (cdr l)\n      (car (cdr l))\n\
    \      (cdr (cdr l))\n      (car (cdr (cdr l)))\n      (cdr (cdr (cdr l))))))\n\
    \n;; Return the mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;;\
    \ Return the mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (if (null? l)\n\
    \    (error \"Median of empty list\")\n    (if (odd? length? l)\n      (car l)\n\
    \      (cdr l)\n      (cdr (cdr l))\n      (car (cdr l))\n      (cdr (cdr (cdr\
    \ l))))))\n\n;; Return mean of elements in the list l.\n;; >>> (mean (list 3 1\
    \ 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (first l)]\n    [(even? (length l))\n\
    \      (let ((n (length l))\n            (p (first l)))\n        (if (> (length\
    \ l) 1)\n            (let ((q (first l)))\n              (if (even? n)\n     \
    \           (/ (first l) (first l))\n                (/ (first l) (first l) (first\
    \ l))\n                (/ (first l) (first l) (first l) (first l))\n         \
    \       (/ (first l) (first l) (first l) (first l) (first l))\n              \
    \  (/ (first l) (first l) (first l) (first l) (first l) (first l))\n         \
    \       (/ (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l))\n                (/ (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l))\n                (/ (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l))\n                (/ (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l))\n                (/ (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l))\n          \
    \      (/ (first l) (first l) (first l) (first l) (first l) (first l) (first l)\
    \ (first l) (first l) (first l) (first l) (first l))\n                (/ (first\
    \ l) (first l) (first l) (first l) (first l) (first l) (first l) (first l) (first\
    \ l) (first l) (first l) (first l) (first l))\n                (/ (first l) (first\
    \ l) (first l) (first l", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n\n;; Return the median of the elements\
    \ in the list l.\n;; >>> (median-list (list 3 1 2 4 5))\n;; 3\n;; >>> (median-list\
    \ (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd?\
    \ (length l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", " \
    \ (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [(even? (length\
    \ l))\n      (let ((n (length l))\n            (p (partition (cdr l) n)))\n  \
    \      (+ (car p) (/ n 2)))\n      (else (car l))]))\n", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;;\
    \ Return the median of the elements in the list l.\n;; >>> (median-list (list\
    \ 3 1 2 4 5))\n;; 3\n;; >>> (median-list (list -10 4 6 1000 10 20))\n;; 15.0",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n\n;; Return mean of elements in the list l.\n;; >>> (mean (list\
    \ 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (if\
    \ (null? l)\n    (error \"Median of empty list\")\n    (if (odd? (length l))\n\
    \      (car l)\n      (cdr l)\n      (car (cdr l))\n      (cdr (cdr l))\n    \
    \  (car (cdr (cdr l)))\n      (cdr (cdr (cdr l)))\n      (car (cdr (cdr (cdr l))))\n\
    \      (cdr (cdr (cdr (cdr l))))\n      (car (cdr (cdr (cdr (cdr l))))))\n   \
    \   (cdr (cdr (cdr (cdr (cdr l))))))\n    ))\n", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return the\
    \ median of the two lists.\n;; >>> (median (list 1 2 3 4 5 6) (list -10 4 6 1000\
    \ 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car\
    \ l)]\n    [else (median (cdr l))]))\n\n;; Return mean of elements in the list\
    \ l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000\
    \ 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car\
    \ l)]\n    [else (median (cdr l))]))\n\n;; Return the median of the two lists.\n\
    ;; >>> (median (list 3 1 2 4 5) (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\
    \n;; Return mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let\
    \ ((n (length l))\n            (p (partition (cdr l) n)))\n        (+ (car p)\
    \ (/ (length p) 2)))\n      (else (car l))]))\n\n;; Return mean of elements in\
    \ the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10\
    \ 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length\
    \ l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\
    \n;; Return the mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else\
    \ (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n\n;; Return mean of elements in the\
    \ list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6\
    \ 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n\n;; Return the median of the elements\
    \ in the list l.\n;; >>> (median-list (list 3 1 2 4 5))\n;; 3\n;; >>> (median-list\
    \ (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd?\
    \ (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return the median\
    \ of the elements in the list l.\n;; >>> (median-list (list 3 1 2 4 5))\n;; 3\n\
    ;; >>> (median-list (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", " \
    \ (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [else (median (cdr l))]))\n\n;; Return mean of elements in the list l.\n\
    ;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n\
    ;; 15.0", "  (if (null? l)\n    (error \"Can't find median of empty list\")))\n\
    \n;; Return the median of the two elements in the list l.\n;; >>> (median (list\
    \ 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n",
  "  (cond\n    ((null? l) 0)\n    ((odd? (length l))\n      (let ((n (length l))\n\
    \            (m (+ n/2)))\n        (/ (* l (list (- n m) (+ m 1))) 2)))\n    (else\n\
    \      (let ((n (length l)))\n        (/ (* l (list (- n 1) (+ n 1))) 2))))\n\
    )\n\n;; Return median of elements in the list l.\n;; >>> (median (list 3 1 2 4\
    \ 5))\n;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n \
    \   [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\
    \n;; Return mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let\
    \ ((n (length l))\n            (p (partition (cdr l) n)))\n        (+ (car p)\
    \ (/ (length p) 2)))\n      ]\n    )\n)\n", "  (cond\n    [(null? l) 0]\n    [(odd?\
    \ (length l)) (car l)]\n    [else (median (cdr l))]))\n", "  (if (null? l)\n \
    \   (error \"Median of empty list\")\n    (if (odd? length? l)\n      (car l)\n\
    \      (cdr l)\n      (cdr (cdr l))\n      (car (cdr l))\n      (cdr (cdr (cdr\
    \ l)))\n      (car (cdr (cdr (cdr l))))\n      (cdr (cdr (cdr (cdr (cdr l)))))))))\n\
    \n;; Return the mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (if (null? l)\n\
    \    (error \"Median of empty list\")\n    (if (odd? length l)\n      (car l)\n\
    \      (cdr l)\n      (divide (car l) (cdr l)))))\n", "  (cond\n    [(null? l)\
    \ 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return\
    \ mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;;\
    \ >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let ((n (length\
    \ l))\n            (p (partition l 2)))\n        (+ (car p) (/ n 2)))\n      ]\n\
    \    )\n  )\n)\n", "  (if (null? l)\n    (error \"The list is empty!\")\n    (if\
    \ (odd? length? l)\n      (car l)\n      (cdr l)\n      (car (cdr l))\n      )))\n",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (first l)]\n    [else (first\
    \ (first l) + (first (last l)) / 2)]))\n\n;; Return the median of the elements\
    \ in the list l.\n;; >>> (median-list (list 3 1 2 4 5))\n;; 3\n;; >>> (median-list\
    \ (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd?\
    \ (length l)) (first l)]\n    [else (first (first l))]))\n", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", " \
    \ (cond\n    ((null? l) 0)\n    ((negative? (car l)) (median (cdr l)))\n    (else\
    \ (car l) (median (cdr l)))\n  ))\n\n;; Return median of elements in the list\
    \ l.\n;; >>> (median (list 3 1 2 4 5))\n;; 3\n;; >>> (median (list -10 4 6 1000\
    \ 10 20))\n;; 15.0", "  (cond\n    ((null? l) 0)\n    ((= (car l) 0) 0)\n    ((>\
    \ (car l) 0)\n      (if (> (cdr l) (cdr (cdr l)))\n          (car (cdr l))\n \
    \         (car (cdr (cdr l)))))\n    (else\n      (if (> (cdr l) (cdr (cdr l)))\n\
    \          (car (cdr l))\n          (car (cdr (cdr l)))))))\n\n;; Return the median\
    \ of the list of lists l.\n;; >>> (median (list (list 1 2 3) (list 4 5 6) (list\
    \ 7 8 9)))\n;; 3.5", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car\
    \ l)]\n    [else (median (cdr l))]))\n\n;; Return the mean of elements in the\
    \ list l.\n;; >>> (mean (list 3 1 2 4 5))\n;; 3.0", "  (cond\n    [(null? l) 0]\n\
    \    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return the\
    \ median of the list of lists l.\n;; >>> (median (list (list 1 2 3) (list 4 5\
    \ 6)))\n;; 3.5", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [(even? (length l))\n      (let ((n (length l))\n            (p (partition\
    \ (cdr l) n)))\n        (+ (car p) (/ (length p) 2)))\n      (else (car l))]))\n\
    \n;; Return mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;;\
    \ Return the mean of elements in the list l.\n;; >>> (mean (list 3 1 2 4 5))\n\
    ;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [(even? (length l))\n      (let\
    \ ((n (length l))\n            (p (partition (cdr l) n)))\n        (+ (car p)\
    \ (/ n 2)))\n      ]\n    )\n  )\n\n;; Return mean of elements in the list l.\n\
    ;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n\
    ;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [(even?\
    \ (length l))\n      (let ((n (length l))\n            (p (partition (cdr l) (lambda\
    \ (x) (odd? (car x))))))\n        (car (cdr p)))\n      ]\n    )\n  )\n\n;; Return\
    \ median of elements in the list l.\n;; >>> (median (list 3 1 2 4 5))\n;; 3\n\
    ;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0", "  (if (null? l)\n    (error\
    \ \"Median of empty list\")\n    (if (odd? length l)\n      (car l)\n      (cdr\
    \ l)\n      (cdr (cdr l))\n      (car (cdr l))\n      (cdr (cdr (cdr l)))\n  \
    \    (car (cdr (cdr (cdr l))))\n      (cdr (cdr (cdr (cdr (cdr l)))))))))\n\n\
    ;; Return median of elements in the list l.\n;; >>> (median (list 3 1 2 4 5))\n\
    ;; 3\n;; >>> (median (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n    [(null?\
    \ l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n", " \
    \ (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n\n;; Return mean of elements in the list l.\n;; >>> (mean (list\
    \ 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n;; 15.0", "  (cond\n\
    \    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n",
  "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else (median\
    \ (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n\
    \    [else (median (cdr l))]))\n\n;; Return mean of elements in the list l.\n\
    ;; >>> (mean (list 3 1 2 4 5))\n;; 3.0\n;; >>> (mean (list -10 4 6 1000 10 20))\n\
    ;; 15.0", "  (cond\n    [(null? l) 0]\n    [(odd? (length l)) (car l)]\n    [else\
    \ (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n    [(odd? (length l))\
    \ (car l)]\n    [else (median (cdr l))]))\n", "  (cond\n    [(null? l) 0]\n  \
    \  [(odd? (length l)) (car l)]\n    [else (median (cdr l))]))\n\n;; Return the\
    \ median of the two lists.\n;; >>> (median (list 1 2 3 4 5 6) (list -10 4 6 1000\
    \ 10 20))\n;; 15.0"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
