name: HumanEval_125_split_words
language: rkt
prompt: "#lang racket\n\n;; Given a string of words, return a list of words split\
  \ on whitespace, if no whitespaces exists in the text you\n;; should split on commas\
  \ ',' if no commas exists you should return the number of lower-case letters with\
  \ odd order in the\n;; alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
  ;; Examples\n;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\"\
  )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
  \ (split_words \"abcdef\")\n;; 3\n(define (split_words txt)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split_words))\n\
  \    (check-equal? (candidate \"Hello world!\") (list \"Hello\" \"world!\"))\n \
  \   (check-equal? (candidate \"Hello,world!\") (list \"Hello\" \"world!\"))\n  \
  \  (check-equal? (candidate \"Hello world,!\") (list \"Hello\" \"world,!\"))\n \
  \   (check-equal? (candidate \"Hello,Hello,world !\") (list \"Hello,Hello,world\"\
  \ \"!\"))\n    (check-equal? (candidate \"abcdef\") 3)\n    (check-equal? (candidate\
  \ \"aaabb\") 2)\n    (check-equal? (candidate \"aaaBb\") 1)\n    (check-equal? (candidate\
  \ \"\") 0)\n))\n\n(test-humaneval)"
completions: ["  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let\
    \ ((count (0)))\n        (for-each (lambda (w)\n                    (if (string?\
    \ w)\n                        (if (string? (first w))\n                      \
    \      (if (string? (second w))\n                               (if (string? (third\
    \ w))\n                                  (if (string? (fourth w))\n          \
    \                            (if (string? (fifth w))\n                       \
    \                 (if (string? (sixth w))\n                                  \
    \        (if (string? (seventh w))\n                                         \
    \   (if (string? (eighth w))\n                                              (if\
    \ (string? (ninth w))\n                                                (if (string?\
    \ (tenth w))\n                                                  (if (string? (eleventh\
    \ w))\n                                                    (if (string? (twelfth\
    \ w))\n                                                      (if (string? (thirteenth\
    \ w))\n                                                        (if (string? (fourteenth\
    \ w))\n                                                          (if (string?\
    \ (fifteenth w))\n                                                           \
    \ (if (string? (sixteenth w))\n                                              \
    \                (if (string? (seventeenth w))\n                             \
    \                                   (if (string? (eighteenth w))\n           \
    \                                                       (if (string? (nineteenth\
    \ w))\n                                                                    (if\
    \ (string? (twentieth w))\n                                                  \
    \                    (if (string? (twenty-first w))\n                        \
    \                                                (if (string? (twenty-second w))\n\
    \                                                                          (if\
    \ (string? (twenty-third w))\n                                               \
    \                             (if (string? (twenty-fourth w))\n              \
    \                                                                (if (string?\
    \ (twenty-fifth w))\n                                                        \
    \                        (if (string? (twenty-sixth w))\n                    \
    \                                                              (if (string? (twenty-seventh\
    \ w))\n                                                                      \
    \              (if (string? (twenty-eighth w))\n                             \
    \                                                         (if (string? (tw", " \
    \ (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count\
    \ (count-lower-case-letters txt)))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (list words)))\n)\n\n;; >>> (split_words \"\
    Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"\
    abcdefghijklmnopqrstuvwxyz123456789\")\n;; 27\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list (string-upcase (string-append\
    \ (list count) txt)))))\n      (list words)))\n)\n\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world\")\n;; 3\n\
    ;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\"\
    )\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt #\"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"b\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count txt #\"B\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt #\"c\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"C\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"d\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count txt #\"D\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt #\"e\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"E\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"f\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count txt #\"F\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt #\"g\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"G\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"h\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count t", "  (let\
    \ ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (0)))\n\
    \        (for-each (lambda (w)\n                    (if (string? w)\n        \
    \              (if (string? (cdr w))\n                        (if (string? (car\
    \ w))\n                          (if (string? (car (cdr w)))\n               \
    \             (if (string? (car (cdr (cdr w))))\n                            \
    \  (if (string? (car (cdr (cdr (cdr w))))))\n                              (count\
    \ (+ (string-length w) (string-length (car (cdr (cdr (cdr w)))))))\n         \
    \                   (count (+ (string-length w) (string-length (car (cdr w))))))\n\
    \                          (count (+ (string-length w) (string-length (car w))))\n\
    \                        (count (+ (string-length w) (string-length (car (cdr\
    \ w))))))\n                      (count (+ (string-length w) (string-length w))))\n\
    \                    (count 0)))\n          words))\n    (if (null? words)\n \
    \     (let ((count (0)))\n        (for-each (lambda (w)\n                    (if\
    \ (string? w)\n                      (if (string? (cdr w))\n                 \
    \       (if (string? (car w))\n                          (if (string? (car (cdr\
    \ w)))\n                            (if (string? (car (cdr (cdr w))))\n      \
    \                        (if (string? (car (cdr (cdr (cdr w))))))\n          \
    \                    (count (+ (string-length w) (string-length (car (cdr (cdr\
    \ (cdr w)))))))\n                            (count (+ (string-length w) (string-length\
    \ (car (cdr w))))))\n                          (count (+ (string-length w) (string-length\
    \ (car w))))\n                        (count (+ (string-length w) (string-length\
    \ (car (cdr w))))))\n                      (count (+ (string-length w) (string-length\
    \ w))))\n                    (count 0)))\n          words))\n    (if (null? words)\n\
    \      (let ((count (0)))\n        (for-each (lambda (w)\n                   \
    \ (", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n\
    \ (string-length txt)))\n        (let ((l (string-length txt)))\n          (let\
    \ ((c (string-length txt)))\n            (let ((i 0))\n              (if (even?\
    \ (modulo c 2))\n                (let ((o (string-length txt)))\n            \
    \      (let ((r (string-length txt)))\n                    (let ((c (string-length\
    \ txt)))\n                      (let ((i 0))\n                        (if (even?\
    \ (modulo c 2))\n                          (let ((o (string-length txt)))\n  \
    \                          (let ((r (string-length txt)))\n                  \
    \            (let ((c (string-length txt)))\n                                (let\
    \ ((i 0))\n                                  (if (even? (modulo c 2))\n      \
    \                              (let ((o (string-length txt)))\n              \
    \                        (let ((r (string-length txt)))\n                    \
    \                    (let ((c (string-length txt)))\n                        \
    \                  (let ((i 0))\n                                            (if\
    \ (even? (modulo c 2))\n                                              (let ((o\
    \ (string-length txt)))\n                                                (let\
    \ ((r (string-length txt)))\n                                                \
    \  (let ((c (string-length txt)))\n                                          \
    \          (let ((i 0))\n                                                    \
    \  (if (even? (modulo c 2))\n                                                \
    \        (let ((o (string-length txt)))\n                                    \
    \                      (let ((r (string-length txt)))\n                      \
    \                                     (let ((c (string-length txt)))\n       \
    \                                                     (let ((i 0))\n         \
    \                                                     (if (even? (modulo c 2))\n\
    \                                                                (let ((o (string-length\
    \ txt)))\n                                                                  (let\
    \ ((r (string-length txt)))\n                                                \
    \                    (let ((c (string-length txt)))\n                        \
    \                                              (let ((i 0))\n                \
    \                                              ", "  (let ((words (string-split\
    \ txt \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list count)))\n      (let ((count\
    \ (string-count txt \",\")))\n        (if (odd? count)\n          (list count)))\n\
    \      (let ((count (string-count txt \"A\")))\n        (if (odd? count)\n   \
    \       (list count)))\n      (let ((count (string-count txt \",\")))\n      \
    \  (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \",\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"A\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \",\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \",\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"A\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \",\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \",\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"A\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \",\")))\n   \
    \     (if (odd? count)\n          (list count)))\n", "  (let ((words (split txt\
    \ \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"a\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"A\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"b\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"B\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"c\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"C\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"d\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"D\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"e\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"E\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"f\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"F\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"g\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"G\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"h\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"H\")))\n        (if (odd? count)\n",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt #\"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (map (lambda (word)\n            (if (string-count word #\"a\" #\"z\")\n\
    \              (list (string-count word #\"a\" #\"z\")))\n            (list word)))\n\
    \      (if (null? words)\n        (list count)\n        (list words)))\n  )\n\
    )\n\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list", "  (let ((words (split txt \" \")))\n    (if (null? words)\n   \
    \   (let ((count (count-words txt)))\n        (if (odd? count)\n          (list\
    \ count)\n          (list))))))\n\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;;", "  (let ((words\
    \ (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"b\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"B\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"c\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"C\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"d\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"D\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"e\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"E\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"f\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"F\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"g\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"G\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"h\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"H\")))\n   \
    \     (if (odd? count)\n", "  (let ((words (split txt \" \")))\n    (let ((count\
    \ (length words)))\n      (let ((lower_odd_count (lambda (x) (count (string-ci-less-than?\
    \ x #\\space))))\n            (lower_odd_count_words (lambda (x) (count (string-ci-less-than?\
    \ x #\\space))))\n            (lower_odd_count_words_words (lambda (x) (count\
    \ (string-ci-less-than? x #\\space))))\n            (lower_odd_count_words_words_words\
    \ (lambda (x) (count (string-ci-less-than? x #\\space))))\n            (lower_odd_count_words_words_words_words\
    \ (lambda (x) (count (string-ci-less-than? x #\\space))))\n            (lower_odd_count_words_words_words_words_words\
    \ (lambda (x) (count (string-ci-less-than? x #\\space))))\n            (lower_odd_count_words_words_words_words_words_words\
    \ (lambda (x) (count (string-ci-less-than? x #\\space))))\n            (lower_odd_count_words_words_words_words_words_words_words\
    \ (lambda (x) (count (string-ci-less-than? x #\\space))))\n            (lower_odd_count_words_words_words_words_words_words_words_words\
    \ (lambda (x) (count (string-ci-less-than? x #\\space))))\n            (lower_odd_count_words_words_words_words_words_words_words_words_words\
    \ (lambda (x) (count (string-ci-less-than? x #\\space))))\n            (lower_odd_count_words_words_words_words_words_words_words_words_words_words\
    \ (lambda (x) (count (string-ci-less-than? x #\\space))))\n            (lower_odd_count_words_words_words_words_words_words_words_words_words_words_words\
    \ (lambda (x) (count (string-ci-less-than? x #\\space))))\n            (lower_odd_count",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \",\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (list words)))\n)", "  (let ((words (split txt \" \")))\n  \
    \  (let ((count (map (lambda (w) (count w)) words)))\n      (let ((odd (map (lambda\
    \ (w) (odd (count w)))) count))\n        (if odd\n          (list words)\n   \
    \       (list (map (lambda (w) (substring w 0 (count w) -1)) words)))))))\n\n\
    ;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count\
    \ (string-count txt \"a\")))\n        (if (odd? count)\n          (list count)\n\
    \          (list)))\n      (let ((count (string-count txt \",\")))\n        (if\
    \ (odd? count)\n          (list count)\n          (list)))\n      (let ((count\
    \ (string-count txt \"A\")))\n        (if (odd? count)\n          (list count)\n\
    \          (list)))\n      (let ((count (string-count txt \",\")))\n        (if\
    \ (odd? count)\n          (list count)\n          (list)))\n      (let ((count\
    \ (string-count txt \"a\")))\n        (if (odd? count)\n          (list count)\n\
    \          (list)))\n      (let ((count (string-count txt \",\")))\n        (if\
    \ (odd? count)\n          (list count)\n          (list)))\n      (let ((count\
    \ (string-count txt \"A\")))\n        (if (odd? count)\n          (list count)\n\
    \          (list)))\n      (let ((count (string-count txt \",\")))\n        (if\
    \ (odd? count)\n          (list count)\n          (list)))\n      (let ((count\
    \ (string-count txt \"a\")))\n        (if (odd? count)\n          (list count)\n\
    \          (list)))\n      (let ((count (string-count txt \",\")))\n        (if\
    \ (odd? count)\n          (list count)\n          (list)))\n      (let ((count\
    \ (string-count txt \"A\")))\n        (if (odd? count)\n          (list count)\n\
    \          (list)))\n      (let ((count (string-count txt \",\")))\n        (if\
    \ (odd? count)\n          (list count)\n          (list)))\n      (let ((count\
    \ (string-count txt \"a\")))\n        (if (odd? count)\n          (list count)\n\
    \          (list)))\n      (let ((count (string-count txt \",\")))\n        (if\
    \ (odd? count)\n          (list count", "  (let ((words (split txt \" \")))\n\
    \    (let ((count (map (lambda (w) (length w)) words)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (ord (string-upcase w[0])))) count)))\n      (let ((lower_odd_count\
    \ (map (lambda (w", "  (let ((words (split txt \" \")))\n    (let ((count (map\
    \ (lambda (w) (count w)) words))))\n    (let ((lower_odd (map (lambda (w) (count\
    \ (string-ci-less-than-ci w))) words))))\n    (list words count lower_odd)))\n\
    \n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;;", "  (let ((words (split\
    \ txt \" \")))\n    (let ((count (map (lambda (w) (length w)) words)))\n     \
    \ (let ((lower_odd (map (lambda (w) (ord (first w)))))\n            (lower_even\
    \ (map (lambda (w) (ord (first w)))))\n            (upper_odd (map (lambda (w)\
    \ (ord (first w)))))\n            (upper_even (map (lambda (w) (ord (first w)))))\n\
    \            (lower_odd_sum (sum lower_odd))\n            (lower_even_sum (sum\
    \ lower_even))\n            (upper_odd_sum (sum upper_odd))\n            (upper_even_sum\
    \ (sum upper_even)))\n      (let ((lower_odd_sum (sum lower_odd_sum)))\n     \
    \   (let ((lower_odd_sum (sum lower_odd)))\n          (let ((lower_odd_sum (sum\
    \ lower_odd_sum)))\n            (let ((lower_odd_sum (sum lower_odd)))\n     \
    \         (let ((lower_odd_sum (sum lower_odd_sum)))\n                (let ((lower_odd_sum\
    \ (sum lower_odd)))\n                  (let ((lower_odd_sum (sum lower_odd_sum)))\n\
    \                    (let ((lower_odd_sum (sum lower_odd)))\n                \
    \      (let ((lower_odd_sum (sum lower_odd_sum)))\n                        (let\
    \ ((lower_odd_sum (sum lower_odd)))\n                          (let ((lower_odd_sum\
    \ (sum lower_odd_sum)))\n                            (let ((lower_odd_sum (sum\
    \ lower_odd)))\n                              (let ((lower_odd_sum (sum lower_odd_sum)))\n\
    \                                (let ((lower_odd_sum (sum lower_odd)))\n    \
    \                              (let ((lower_odd_sum (sum lower_odd_sum)))\n  \
    \                                  (let ((lower_odd_sum (sum lower_odd)))\n  \
    \                                    (let ((lower_odd_sum (sum lower_odd_sum)))\n\
    \                                        (let ((lower_odd_sum (sum lower_odd)))\n\
    \                                          (let ((lower_odd_sum (sum lower_odd_sum)))\n\
    \                                            (let", "  (let ((words (split txt\
    \ \" \")))\n    (if (null? words)\n      (let ((n (length txt)))\n        (list\
    \ (map (lambda (x) (string-to-number (string-to-number x) (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-", "  (let\
    \ ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    a\" \"z\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n\
    \      (let ((count (string-count txt \"A\" \"Z\")))\n        (if (odd? count)\n\
    \          (list txt)\n          (list))))))\n\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n;; 26\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\")\n;; 26\n\
    ;; >>> (split_words \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxy",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (string-length\
    \ txt)))\n        (if (> n 0)\n          (let ((n (string-length txt)))\n    \
    \        (if (> n 0)\n              (let ((n (string-length txt)))\n         \
    \       (if (> n 0)\n                  (let ((n (string-length txt)))\n      \
    \              (if (> n 0)\n                      (let ((n (string-length txt)))\n\
    \                        (if (> n 0)\n                          (let ((n (string-length\
    \ txt)))\n                            (if (> n 0)\n                          \
    \    (let ((n (string-length txt)))\n                                (if (> n\
    \ 0)\n                                  (let ((n (string-length txt)))\n     \
    \                               (if (> n 0)\n                                \
    \      (let ((n (string-length txt)))\n                                      \
    \  (if (> n 0)\n                                          (let ((n (string-length\
    \ txt)))\n                                            (if (> n 0)\n          \
    \                                    (let ((n (string-length txt)))\n        \
    \                                        (if (> n 0)\n                       \
    \                           (let ((n (string-length txt)))\n                 \
    \                                   (if (> n 0)\n                            \
    \                          (let ((n (string-length txt)))\n                  \
    \                                      (if (> n 0)\n                         \
    \                                 (let ((n (string-length txt)))\n           \
    \                                                 (if (> n 0)\n              \
    \                                                (let ((n (string-length txt)))\n\
    \                                                                (if (> n 0)\n\
    \                                                                  (let ((n (string-length\
    \ txt)))\n                                                                   \
    \ (if (> n 0)\n                                                              \
    \        (let ((n (string-length txt)))\n                                    \
    \                                    (if (> n 0)\n                           \
    \                                               (let ((n (string-length txt)))\n\
    \                                                                            (if\
    \ (> n 0)\n                                                                  \
    \            (let ((n (string-length txt)))\n                                \
    \                                                (if (> n 0)\n", "  (let ((words\
    \ (split txt \" \")))\n    (let ((count (map (lambda (w) (count w)) words)))\n\
    \      (if (even? (reduce count))\n        (let ((letters (map (lambda (w) (count\
    \ w)) words)))\n          (if (odd? (reduce letters))\n            (list words))))))))\n",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (list\
    \ words)))\n)\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"\
    world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello", "  (let ((words (split txt \" \")))\n    (if (null? words)\n\
    \      (let ((count (count-words txt)))\n        (if (odd? count)\n          (list\
    \ (map (lambda (x) (ord x)) txt))\n          (list words))))))\n\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n", "  (let ((words (split txt \" \")))\n  \
    \  (if (null? words)\n      (let ((count (string-count txt \"a\")))\n        (if\
    \ (odd? count)\n          (list count)))\n      (let ((count (string-count txt\
    \ \",\")))\n        (if (odd? count)\n          (list count)))\n      (list words)))\n\
    )\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abc", "  (let ((words (split txt \" \")))\n    (if (null? words)\n\
    \      (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n   \
    \       (list (string-upcase txt) (string-downcase txt) (string-downcase txt)\
    \ (string-upcase txt) (string-downcase txt) (string-downcase txt) (string-upcase\
    \ txt) (string-downcase txt) (string-downcase txt) (string-upcase txt) (string-downcase\
    \ txt) (string-downcase txt) (string-upcase txt) (string-downcase txt) (string-downcase\
    \ txt) (string-upcase txt) (string-downcase txt) (string-downcase txt) (string-upcase\
    \ txt) (string-downcase txt) (string-downcase txt) (string-upcase txt) (string-downcase\
    \ txt) (string-downcase txt) (string-upcase txt) (string-downcase txt) (string-downcase\
    \ txt) (string-upcase txt) (string-downcase txt) (string-downcase txt) (string-upcase\
    \ txt) (string-downcase txt) (string-downcase txt) (string-upcase txt) (string-downcase\
    \ txt) (string-downcase txt) (string-upcase txt) (string-downcase txt) (string-downcase\
    \ txt) (string-upcase txt) (string-downcase txt) (string-downcase txt) (string-upcase\
    \ txt) (string-downcase txt) (string-downcase txt) (string-upcase txt) (string-downcase\
    \ txt) (string-downcase txt) (string-upcase txt) (string-downcase txt) (string-downcase\
    \ txt) (string-upcase txt) (string-downcase txt) (string-downcase txt) (string-upcase\
    \ txt) (string-downcase txt) (string-downcase txt) (string-upcase t", "  (let\
    \ ((words (split txt \" \")))\n    (let ((count (0)))\n      (for-each (lambda\
    \ (w) (count (+ (count (string-length w)) (count (string-length (first w)))))\
    \ count))\n        words)))\n\n;; >>> (split_words \"Hello, world!\")\n;; 3\n\
    ;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>>", "  (let ((words (split txt \" \")))\n   \
    \ (if (null? words)\n      (let ((n (string-length txt)))\n        (let ((odd_numbers\
    \ (map (lambda (x) (ord (x) - ord ('a'))))))\n          (odd_numbers (filter odd_numbers\
    \ (map odd_numbers words))))\n        (odd_numbers (filter odd_numbers words))))\n\
    \    (words)))\n\n;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"\
    world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\"\
    )\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz123456789\")\n;; 27\n\
    ;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxy",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (count-words\
    \ txt)))\n        (if (odd? count)\n          (list (map (lambda (w) (lowercase\
    \ w)) words))))\n      (words)))\n  )\n)\n", "  (let ((words (split txt \" \"\
    )))\n    (if (null? words)\n      (let ((count (string-count txt #\"a\")))\n \
    \       (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"A\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"b\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"B\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"c\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"C\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"d\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"D\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"e\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"E\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"f\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"F\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))))))\n\n;; >>> (split_words \"Hello world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world", "  (let ((words (split txt \" \")))\n    (let ((count (map\
    \ (lambda (w) (count w)) words))))\n    (let ((odd (map (lambda (w) (count (string-ci-less-than?\
    \ w #\\space))) words)))\n      (let ((n (odd? (count odd))))\n        (if (odd?\
    \ n) (list odd) (list words)))))))\n\n;; >>> (split_words \"Hello world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabc",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"a\" \"z\")))\n        (if (odd? count)\n          (list count)\n         \
    \ (list)))\n      (let ((count (string-count txt \"A\" \"Z\")))\n        (if (odd?\
    \ count)\n          (list count)\n          (list)))\n      (let ((count (string-count\
    \ txt \"0\" \"9\")))\n        (if (odd? count)\n          (list count)\n     \
    \     (list)))\n      (let ((count (string-count txt \"0\" \"9\" \"a\" \"z\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt \"0\" \"9\" \"A\" \"Z\")))\n        (if (odd? count)\n\
    \          (list count)\n          (list)))\n      (let ((count (string-count\
    \ txt \"0\" \"9\" \"a\" \"z\" \"A\" \"Z\")))\n        (if (odd? count)\n     \
    \     (list count)\n          (list)))))))\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;;", "  (let ((words (split txt \" \")))\n    (if (null?\
    \ words)\n      (let ((n (count-words txt)))\n        (if (odd? n)\n         \
    \ (list (map (lambda (x) (ord (x) - ord ('a')))) words)))\n      words)))\n\n\
    ;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"", "  (let ((words (split txt \" \")))\n\
    \    (if (null? words)\n      (let ((n (count-words txt)))\n        (if (odd?\
    \ n)\n          (list n)\n          (list)))\n      (let ((n (count-words txt)))\n\
    \        (if (odd? n)\n          (list n)\n          (list)))\n      (let ((n\
    \ (count-words txt)))\n        (if (odd? n)\n          (list n)\n          (list))))))\n\
    \n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_", "  (let ((words (split txt \"\
    \ \")))\n    (if (null? words)\n      (let ((n (length txt)))\n        (if (odd?\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-", "  (let\
    \ ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \",\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (list words)))\n)\n\n;; >>> (split_words \"Hello,world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abc", "  (let ((words (split txt \"\
    \ \")))\n    (if (null? words)\n      (let ((count (count-words txt)))\n     \
    \   (if (odd? count)\n          (list count)\n          (list))))))\n\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")", " \
    \ (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count\
    \ (count-letters txt)))\n        (if (odd? count)\n          (list count)\n  \
    \        (list)))\n      (let ((count (count-letters txt)))\n        (if (odd?\
    \ count)\n          (list count)\n          (list))))))\n\n;; >>> (split_words\
    \ \"Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"\
    abcdefghijklmnopqrstuvwxyz1234567890\")\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrst",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (string-length\
    \ txt)))\n        (let ((l (string-to-list txt)))\n          (let ((l2 (string-to-list\
    \ (string-join \" \" l))))\n            (if (null? l2)\n              (let ((l3\
    \ (string-to-list (string-join \" \" (map (lambda (x) (string-to-number (string-upcase\
    \ x))) l))))\n                    (if (odd? (string-to-number (string-upcase (car\
    \ l3))))\n                      (list (car l3) (car l3) (car l3) (car l3) (car\
    \ l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3)\
    \ (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car\
    \ l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3)\
    \ (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car\
    \ l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3)\
    \ (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car\
    \ l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3)\
    \ (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car l3) (car\
    \ l3", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let\
    \ ((count (count-words txt)))\n        (if (odd? count)\n          (list count)\n\
    \          (list)))\n      (let ((count (count-words txt)))\n        (if (odd?\
    \ count)\n          (list count)\n          (list))))))\n", "  (let ((words (split\
    \ txt \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"z\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \"z\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list))))))\n", "  (let ((words (split txt \"\
    \ \")))\n    (if (null? words)\n      (let ((n (length txt)))\n        (let ((cnt\
    \ 0))\n          (for-each (lambda (w)\n                      (if (string? w)\n\
    \                        (if (string? (cdr w))\n                          (let\
    \ ((c (cdr w)))\n                            (if (string? c)\n               \
    \               (let ((n (length c)))\n                                (if (odd?\
    \ (string-to-number (substring c 0 1)))\n                                  (cnt\
    \ (+ cnt (string-to-number (substring c 0 1))))))))))))\n            (cnt n)))\n\
    \      (list words)))\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;;\
    \ 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"", "  (let\
    \ ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (count-words\
    \ txt)))\n        (if (odd? count)\n          (list (map (lambda (x) (ord (x)\
    \ - ord ('a')))) words)\n          (list words))))\n    (if (null? words)\n  \
    \    (let ((count (count-words txt)))\n        (if (odd? count)\n          (list\
    \ (map (lambda (x) (ord (x) - ord ('a')))) words)\n          (list words))))))\n\
    \n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (", "  (let ((words (split txt \" \")))\n    (let ((count (length words)))\n\
    \      (let ((lower_odd_count (lambda (x) (let ((c (string-to-number (string-upcase\
    \ x)))) (if (even? c) 0 (if (odd? c) 1 (c)))))))\n        (if (odd? count)\n \
    \         (list (map lower_odd_count words))\n          (list (map string-to-number\
    \ words)))))))\n\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"\
    world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let\
    \ ((count (string-count txt \"a\")))\n        (if (odd? count)\n          (list\
    \ (string-upcase (string-append txt \"a\")))))\n      (let ((count (string-count\
    \ txt \",\")))\n        (if (odd? count)\n          (list (string-upcase (string-append\
    \ txt \",\")))))))\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_", "  (let ((words (split txt\
    \ \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"a\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"A\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"b\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"B\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"c\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"C\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"d\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"D\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"e\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"E\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"f\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"F\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"g\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"G\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"h\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"H\")))\n        (if (odd? count)\n",
  "  (let ((words (split txt \" \")))\n    (let ((count (map (lambda (w) (length w))\
    \ words)))\n      (let ((lower_count (map (lambda (w) (count (string-ciw w)))\
    \ words)))\n        (let ((odd_count (map (lambda (w) (count (string-ciw (string-ciw\
    \ w))))) words)))\n          (list (map (lambda (w) (string-ciw w)) words) count\
    \ lower_count odd_count))))\n)\n\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"", "  (let ((words (split txt \" \")))\n    (let\
    \ ((count (map (lambda (w) (count w)) words)))\n      (let ((odd (map (lambda\
    \ (w) (odd (count w)))) count)))\n      (let ((lower (map (lambda (w) (ord (string-ciw\
    \ (first w))))) count)))\n      (let ((upper (map (lambda (w) (ord (string-ciw\
    \ (last w))))) count)))\n      (let ((letters (concat odd lower upper)))\n   \
    \     (list words letters))))))\n\n;; >>> (split_words \"Hello world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world", "  (let ((words\
    \ (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (list words)))\n)\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"\
    Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_", "  (let ((words (split txt \" \")))\n    (let ((counts\
    \ (map (lambda (w) (count w 'a))))\n          (odds (map (lambda (w) (count w\
    \ 'a))))\n          (evens (map (lambda (w) (count w 'a))))\n          (numbers\
    \ (map (lambda (w) (count w 'a))))\n          (lower (map (lambda (w) (count w\
    \ 'a))))\n          (upper (map (lambda (w) (count w 'a))))\n          (lower_odds\
    \ (map (lambda (w) (count w 'a'))))\n          (lower_evens (map (lambda (w) (count\
    \ w 'a'))))\n          (lower_numbers (map (lambda (w) (count w 'a'))))\n    \
    \      (upper_odds (map (lambda (w) (count w 'a'))))\n          (upper_evens (map\
    \ (lambda (w) (count w 'a'))))\n          (upper_numbers (map (lambda (w) (count\
    \ w 'a'))))\n          (lower_odds_numbers (map (lambda (w) (count w 'a'))))\n\
    \          (lower_evens_numbers (map (lambda (w) (count w 'a'))))\n          (lower_numbers_numbers\
    \ (map (lambda (w) (count w 'a'))))\n          (upper_odds_numbers (map (lambda\
    \ (w) (count w 'a'))))\n          (upper_evens_numbers (map (lambda (w) (count\
    \ w 'a'))))\n          (upper_numbers_numbers (map (lambda (w) (count w 'a'))))\n\
    \          (lower_odds_upper (map (lambda (w) (count w 'a'))))\n          (lower_evens_upper\
    \ (map (lambda (w) (count w 'a'))))\n          (lower_numbers_upper (map (lambda\
    \ (w) (count w 'a'))))\n          (upper_odds_upper (map (lambda (w) (count w\
    \ 'a'))))\n          (upper_evens_upper (map (lambda (w) (count w 'a'))))\n  \
    \        (upper_numbers", "  (let ((words (split txt \" \")))\n    (if (null?\
    \ words)\n      (let ((n (count-words txt)))\n        (if (odd? n)\n         \
    \ (list (map (lambda (x) (ord x)) txt))\n          (list n)))\n      (words)))\n\
    )\n\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")", "  (let ((words\
    \ (split txt \" \")))\n    (let ((count (map (lambda (w) (count w)) words)))\n\
    \      (let ((odd (map (lambda (w) (count (string-ci-upcase w))) count)))\n  \
    \      (if odd (list words)))))))\n\n;; >>> (split_words \"Hello,world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world\")\n;; (list\
    \ \"Hello\" \"world\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"A\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"A\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"A\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count", "  (let ((words (split txt \" \")))\n    (let ((count (map\
    \ (lambda (w) (length w)) words)))\n      (let ((lower_odd_count (map (lambda\
    \ (w) (ord (string-lowercase w))))))\n        (let ((lower_odd_count (map (lambda\
    \ (w) (length w)) words))))\n        (let ((lower_odd_count (map (lambda (w) (ord\
    \ (string-lowercase w))))))\n          (let ((lower_odd_count (map (lambda (w)\
    \ (length w)) words))))))))))\n\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"", "  (let ((words (string-split\
    \ txt \" \")))\n    (let ((counts (map (lambda (w) (count-words w)) words))))\n\
    \    (let ((lower-case-odd-order (map (lambda (c) (count-words (string-to-number\
    \ (string-upcase c))))) counts)))\n      (list words (list lower-case-odd-order))))\n\
    \n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abc", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let\
    \ ((n (count-words txt)))\n        (if (odd? n)\n          (list (map (lambda\
    \ (x) (ord (x) - ord 'a'))))\n          (list n)))\n      (words)))\n  )\n)\n",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (string-length\
    \ txt)))\n        (let ((cnt 0))\n          (for-each (lambda (w) (set! cnt (+\
    \ (string-length w) (string-length (substring w 0 1))))))\n            (+ cnt\
    \ (string-length (substring txt 0 (string-length txt) - 1))))\n        (+ cnt\
    \ (string-length (substring txt 0 (string-length txt) - 1))))\n      (words)))\n\
    ;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let\
    \ ((count (count-words txt)))\n        (if (odd? count)\n          (list (map\
    \ (lambda (x) (ord x)) txt) count)\n          count)))\n    words))\n\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world", "  (let ((words (split txt \" \")))\n    (if (null?\
    \ words)\n      (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \",\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (list words)))\n)\n\n\
    ;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abc", "  (let ((words (string-split txt \"\\\\s+\")))\n    (if (null? words)\n\
    \      (let ((n (string-length txt)))\n        (let ((count (0)))\n          (for-each\
    \ (lambda (x) (if (string-ci? x) (count (+ 1 (string-ci? x))) (count (string-ci?\
    \ x)))) words)\n            (if (odd? count)\n              (let ((n (string-length\
    \ txt)))\n                (let ((count (0)))\n                  (for-each (lambda\
    \ (x) (if (string-ci? x) (count (+ 1 (string-ci? x))) (count (string-ci? x))))\
    \ words)\n                    (if (odd? count)\n                      (list n))))))))\n\
    \  (if (null? words)\n    (let ((n (string-length txt)))\n      (let ((count (0)))\n\
    \        (for-each (lambda (x) (if (string-ci? x) (count (+ 1 (string-ci? x)))\
    \ (count (string-ci? x)))) words)\n          (if (odd? count)\n            (list\
    \ n)))))))\n", "  (let ((words (split txt \" \")))\n    (if (null? words)\n  \
    \    (let ((count (string-count txt #\"a\")))\n        (if (odd? count)\n    \
    \      (list count)))\n      (list words)))\n)\n\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef", "  (let ((words\
    \ (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    a\" \"z\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n\
    \      (let ((count (string-count txt \"A\" \"Z\")))\n        (if (odd? count)\n\
    \          (list txt)\n          (list)))\n      (let ((count (string-count txt\
    \ \"0\" \"9\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n\
    \      (let ((count (string-count txt \"0\" \"9\" \"a\" \"z\")))\n        (if\
    \ (odd? count)\n          (list txt)\n          (list)))\n      (let ((count (string-count\
    \ txt \"0\" \"9\" \"A\" \"Z\")))\n        (if (odd? count)\n          (list txt)\n\
    \          (list)))\n      (let ((count (string-count txt \"0\" \"9\" \"a\" \"\
    z\" \"A\" \"Z\")))\n        (if (odd? count)\n          (list txt)\n         \
    \ (list)))\n      (let ((count (string-count txt \"0\" \"9\" \"a\" \"z\" \"A\"\
    \ \"Z\" \",\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n\
    \      (let ((count (string-count txt \"0\" \"9\" \"a\" \"z\" \"A\" \"Z\" \",\"\
    \ \" \")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n\
    \      (let ((count (string-count txt \"0\" \"9\" \"a\" \"z\" \"A\" \"Z\" \",\"\
    \ \" \" \")))\n        (if (odd? count", "  (let ((words (split txt \" \")))\n\
    \    (if (null? words)\n      (let ((n (string-length txt)))\n        (let ((n_words\
    \ (string-length words)))\n          (let ((n_words_words (string-length words)))\n\
    \            (let ((n_words_words_words (string-length words)))\n            \
    \  (let ((n_words_words_words_words (string-length words)))\n                (let\
    \ ((n_words_words_words_words_words (string-length words)))\n                \
    \  (let ((n_words_words_words_words_words_words (string-length words)))\n    \
    \                (let ((n_words_words_words_words_words_words_words (string-length\
    \ words)))\n                      (let ((n_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                        (let ((n_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                          (let ((n_words_words_words_words",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list (string-upcase (string-copy\
    \ txt 0 count)))))\n      (list words)))\n)\n\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n", "  (let ((words (split txt \" \")))\n    (let ((count (map (lambda\
    \ (w) (count w)) words)))\n      (let ((lower_odd_count (map (lambda (w) (count\
    \ (string-ci-less-than-equal? w #\\space))) count)))\n        (let ((lower_odd\
    \ (filter lower_odd_count count)))\n          (if (empty? lower_odd)\n       \
    \     (list count)\n            (list lower_odd))))))\n  (split txt \",\"))\n\n\
    ;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words", "  (let ((words (split txt\
    \ \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"a\"\
    )))\n        (if (odd? count)\n          (list txt))))\n    (if (null? words)\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list txt))))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list txt))))\n    (if (null?\
    \ words)\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list txt))))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list txt))))\n    (if (null?\
    \ words)\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list txt))))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list txt))))\n    (if (null?\
    \ words)\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list txt))))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list txt))))\n    (if (null?\
    \ words)\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list txt))))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list txt))))\n    (if (null?\
    \ words)\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list txt))))\n    (if (null? words)\n      (let ((", "  (let ((words\
    \ (split txt \" \")))\n    (let ((counts (map (lambda (w) (count w 'a))) (words)))\n\
    \      (let ((odd (counts (filter odd))))\n        (odd))))\n  txt)\n\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world", "  (let\
    \ ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (count-words\
    \ txt)))\n        (if (odd? count)\n          (list (map (lambda (w) (to-lower-case\
    \ w)) words))\n          (list words))))))\n\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3", "  (let ((words (string-split txt \" \")))\n    (let ((count\
    \ (string-count words \",\")))\n      (let ((lower-case-letters (string-map (lambda\
    \ (x) (string-lowercase x)) count)))\n        (let ((odd-count (string-count lower-case-letters\
    \ \"a\")))\n          (let ((result (list words)))\n            (if odd-count\n\
    \              (list lower-case-letters)\n              result)))))))\n", "  (let\
    \ ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list (string-upcase txt)\
    \ (string-downcase txt) (string-downcase txt))\n          (list (string-downcase\
    \ txt) (string-downcase txt) (string-downcase txt))))\n      (list words)))\n)",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (count-words\
    \ txt)))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (list words)))\n)\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"\
    Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words", "  (let ((words (split txt \" \")))\n   \
    \ (if (null? words)\n      (let ((count (count-words txt)))\n        (if (odd?\
    \ count)\n          (list count)\n          (list)))\n      (let ((count (count-words\
    \ txt)))\n        (if (odd? count)\n          (list count)\n          (list))))))\n\
    \n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef", "  (let ((words\
    \ (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \",\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (list words)))\n)\n\n;; >>> (split_words \"Hello,world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")", "  (let ((words (split\
    \ txt \" \")))\n    (if (null? words)\n      (let ((n (count-words txt)))\n  \
    \      (if (odd? n)\n          (list (map (lambda (x) (ord x)) txt))\n       \
    \   (list n)))\n      (words)))\n  )\n\n;; >>> (split_words \"Hello,world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef", "  (let ((words (split txt \" \")))\n    (let ((count (length words)))\n\
    \      (let ((lower_odd_count (lambda (x) (count (string-ci-less-than? x #\\space))))\n\
    \            (lower_odd_count_words (lambda (x) (if (string-ci-less-than? x #\\\
    space) (list x) (list))))\n            (lower_odd_count_words_words (lambda (x)\
    \ (if (string-ci-less-than? x #\\space) (list x) (list))))\n            (lower_odd_count_words_words_words\
    \ (lambda (x) (if (string-ci-less-than? x #\\space) (list x) (list))))\n     \
    \       (lower_odd_count_words_words_words_words (lambda (x) (if (string-ci-less-than?\
    \ x #\\space) (list x) (list))))\n            (lower_odd_count_words_words_words_words_words\
    \ (lambda (x) (if (string-ci-less-than? x #\\space) (list x) (list))))\n     \
    \       (lower_odd_count_words_words_words_words_words_words (lambda (x) (if (string-ci-less-than?\
    \ x #\\space) (list x) (list))))\n            (lower_odd_count_words_words_words_words_words_words_words\
    \ (lambda (x) (if (string-ci-less-than? x #\\space) (list x) (list))))\n     \
    \       (lower_odd_count_words_words_words_words_words_words_words_words (lambda\
    \ (x) (if (string-ci-less-than? x #\\space) (list x) (list))))\n            (lower_odd_count_words_words_words_words_words_words_words_words_words\
    \ (lambda (x) (if (string-ci-less-than? x #\\space) (list x) (list))))\n     \
    \       (lower_odd_count_words_words_words_words_words_words_words_words_words_words\
    \ (lambda (x) (if (string-ci-less-than? x", "  (let ((words (split txt \" \")))\n\
    \    (if (null? words)\n      (let ((count (string-count txt \"a\")))\n      \
    \  (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"A\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \",\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"A\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \",\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"a\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"A\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \",\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"a\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"A\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \",\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n\
    \          (list count)))", "  (let ((words (split txt \" \")))\n    (let ((count\
    \ (map (lambda (w) (count w)) words)))\n      (let ((odd (map (lambda (w) (count\
    \ (string-ci-less-than? w #\\space))) words)))\n        (let ((result (cons odd\
    \ count)))\n          (if (null? result) (list (string-ci-less-than? txt #\\space))\
    \ result))))))\n\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"\
    world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;;\
    \ 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")",
  "  (let ((words (split txt \" \")))\n    (let ((count (map (lambda (w) (count w))\
    \ words)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))\n      (let ((lower_odd_count (map (lambda (w) (count (string-ci-less-than-equal?\
    \ w #\\a)))) count)))", "  (let ((words (split txt \" \")))\n    (if (null? words)\n\
    \      (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n   \
    \       (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    ,\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \"a\" \"z\")))\n        (if (odd? count)\n\
    \          (list txt)\n          (list)))\n      (let ((count (string-count txt\
    \ \"A\" \"Z\")))\n        (if (odd? count)\n          (list txt)\n          (list))))))\n\
    \n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )", "  (let ((words (string-split txt \" \")))\n    (let ((count (string-count\
    \ words \",\")))\n      (let ((letters (string-count words \"a\")))\n        (let\
    \ ((odd (string-count letters \"a\")))\n          (odd? odd)))))))\n\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n\
    ;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;;", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let\
    \ ((count (string-count txt \"a\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"A\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \",\")))\n        (if (odd? count)\n          (list count)))))))\n\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (string-length\
    \ txt)))\n        (let ((n_words (string-length words)))\n          (let ((n_letters\
    \ (n_words * n)))\n            (let ((n_lower_odd (n_words / 2)))\n          \
    \    (let ((n_lower_even (n_words / 2)))\n                (let ((n_upper_odd (n_words\
    \ - n_lower_odd)))\n                  (let ((n_upper_even (n_words - n_lower_even)))\n\
    \                    (let ((n_lower_odd_letters (n_lower_odd * ord)))\n      \
    \                (let ((n_lower_even_letters (n_lower_even * ord)))\n        \
    \                (let ((n_upper_odd_letters (n_upper_odd * ord)))\n          \
    \                (let ((n_upper_even_letters (n_upper_even * ord)))\n        \
    \                    (let ((n_lower_odd_letters_sum (n_lower_odd_letters + n_lower_even_letters)))\n\
    \                              (let ((n_lower_even_letters_sum (n_lower_even_letters\
    \ + n_upper_odd_letters)))\n                                (let ((n_upper_odd_letters_sum\
    \ (n_upper_odd_letters + n_upper_even_letters)))\n                           \
    \       (let ((n_upper_even_letters_sum (n_upper_even_letters + n_lower_odd_letters)))\n\
    \                                    (let ((n_lower_odd_letters_sum (n_lower_odd_letters\
    \ + n_lower_even_letters)))\n                                      (let ((n_lower_even_letters_sum\
    \ (n_lower_even_letters + n_upper_odd_letters)))\n                           \
    \             (let ((n_upper_odd_letters_sum (n_upper_odd_letters + n_upper_even_letters)))\n\
    \                                          (let ((n_upper_even_letters_sum (n_upper_even_letters\
    \ + n_lower_odd_letters)))\n                                            (let ((n_lower_odd_letters_sum\
    \ (n_lower_odd_letters + n_lower", "  (let ((words (split txt \" \")))\n    (if\
    \ (null? words)\n      (let ((count (string-count txt #\"a\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (map (lambda (word)\n            (if\
    \ (string-count word #\"a\" #\"z\")\n              (list (string-count word #\"\
    a\" #\"z\")))\n            (list word)))\n      words))\n  )\n)\n\n;; >>> (split_words\
    \ \"Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words\
    \ \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"\
    abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\"\
    )\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n\
    ;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n\
    ;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>>\
    \ (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words\
    \ \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"\
    abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\"\
    )\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n\
    ;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n;; >>> (split_words \"abcd\")\n;; 2\n\
    ;;", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count\
    \ (string-count txt \"a\")))\n        (if (odd? count)\n          (list (string-upcase\
    \ (string-append (list count) \"a\")))))\n      (list words)))\n  )\n)\n\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>>", "  (let ((words (split txt \" \")))\n    (let ((count\
    \ (map (lambda (w) (count w)) words)))\n      (let ((odd (map (lambda (w) (count\
    \ (string-ci-upcase w))) count)))\n        (let ((letters (map (lambda (w) (string-ci-upcase\
    \ (substring w 0 1))) count)))\n          (list words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words words words words words words words words words words words words words\
    \ words", "  (let ((words (split txt \" \")))\n    (let ((count (map (lambda (w)\
    \ (length w)) words)))\n      (let ((lower_odd_count (map (lambda (w) (ord (string-lowercase\
    \ w))))))\n        (let ((odd_count (reduce (lambda (a b) (+ a b) 0) lower_odd_count)))\n\
    \          (list words (odd_count count))))))))\n", "  (let ((words (split txt\
    \ \" \")))\n    (if (null? words)\n      (let ((count (string-count txt #\"a\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (list words)))\n\
    )", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n\
    \ (string-length txt)))\n        (let ((n_words (string-length words)))\n    \
    \      (let ((n_words_words (string-length words)))\n            (let ((n_words_words_words\
    \ (string-length words)))\n              (let ((n_words_words_words_words (string-length\
    \ words)))\n                (let ((n_words_words_words_words_words (string-length\
    \ words)))\n                  (let ((n_words_words_words_words_words_words (string-length\
    \ words)))\n                    (let ((n_words_words_words_words_words_words_words\
    \ (string-length words)))\n                      (let ((n_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                        (let ((n_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                            (let ((n_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                              (let ((n_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                  (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                    (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                      (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                        (let ((", " \
    \ (let ((words (split txt \" \")))\n    (let ((count (map (lambda (w) (count_letters\
    \ w))))\n          (odds (map (lambda (w) (odd_letters w))))\n          (result\
    \ (cons words count odds))))\n      (result (cons txt (cdr result))))))\n\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n", "  (let ((words (split\
    \ txt \" \")))\n    (let ((count (map (lambda (w) (count w)) words)))\n      (let\
    \ ((odd (map (lambda (w) (count (string-ci-less-than? w #\\space))) words)))\n\
    \        (let ((result (concat words (map odd words))))\n          (if odd\n \
    \           (list result)\n            (list words)))))))\n\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"z\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \"A\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"Z\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \"0\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"1\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \"2\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"3\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \"4\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"5\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \"6\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"7\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \"8\")))\n        (if (odd? count", "  (let\
    \ ((words (split txt \" \")))\n    (let ((count (map (lambda (w) (count_lower_case_letters\
    \ w))))\n          (odd_count (map (lambda (w) (odd_count_lower_case_letters w))))\n\
    \          (lower_case_count (map (lambda (w) (lower_case_count_lower_case_letters\
    \ w))))\n          (upper_case_count (map (lambda (w) (upper_case_count_lower_case_letters\
    \ w))))\n          (upper_case_odd_count (map (lambda (w) (upper_case_odd_count_lower_case_letters\
    \ w))))\n          (lower_case_odd_count (map (lambda (w) (lower_case_odd_count_lower_case_letters\
    \ w))))\n          (lower_case_even_count (map (lambda (w) (lower_case_even_count_lower_case_letters\
    \ w))))\n          (upper_case_even_count (map (lambda (w) (upper_case_even_count_lower_case_letters\
    \ w))))\n          (upper_case_even_odd_count (map (lambda (w) (upper_case_even_odd_count_lower_case_letters\
    \ w))))\n          (lower_case_even_odd_count (map (lambda (w) (lower_case_even_odd_count_lower_case_letters\
    \ w))))\n          (lower_case_even_odd_count (map (lambda (w) (lower_case_even_odd_count_lower_case_letters\
    \ w))))\n          (upper_case_even_odd_count (map (lambda (w) (upper_case_even_odd_count_lower_case_letters\
    \ w))))\n          (lower_case_even_odd_count (map (lambda (w) (lower_case_even_odd_count_lower_case_letters\
    \ w))))\n          (lower_case_even_odd_count (map (lambda (w) (lower_case_even_odd_count_lower_case_letters\
    \ w))))\n          (lower_case_even_odd_count (map (lambda (w) (lower_case_even_odd_count_lower_case_letters\
    \ w))))\n          (", "  (let ((words (split txt \" \")))\n    (let ((count (map\
    \ (lambda (x) (length x)) words)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (x) (ord (x) - ord ('a')))) count)))\n", "  (let ((words (string-split txt \"\
    \ \")))\n    (if (null? words)\n      (let ((count (string-count txt \"a\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt \"A\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt \",\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt \".\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt \"!\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt \"?\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt \"-\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt \":\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt \";\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt \".\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt \",\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt \"!\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt \"?\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt \"-\")))\n        (if (odd? count)\n          (list\
    \ count)\n          ", "  (let ((words (split txt \" \")))\n    (let ((counts\
    \ (map (lambda (w) (count w 'a))) (counts words)))\n      (let ((odds (map (lambda\
    \ (w) (count w 'a))) (odds counts)))\n        (let ((lower (map (lambda (w) (count\
    \ w 'a')))) (lower odds))\n          (list (map (lambda (w) (lower w)) words))))))))\n\
    \n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abc", "  (let ((words (split txt \"\
    \ \")))\n    (if (null? words)\n      (let ((count (string-count txt #\"a\")))\n\
    \        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt #\"A\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"b\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"B\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count txt #\"c\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt #\"C\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"d\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"D\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count txt #\"e\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt #\"E\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"f\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"F\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count txt #\"g\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt #\"G\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"h\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count t", "  (let ((words (split txt \"\
    \ \")))\n    (let ((n (length words)))\n      (if (odd? n)\n        (let ((n (length\
    \ (map (lambda (x) (ord (x) - ord 'a'))))))\n          (list (map (lambda (x)\
    \ (string->symbol x)) words) n)))\n      (list words)))\n  )\n)\n\n;; >>> (split_words\
    \ \"Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"\
    abcdefghijklmnopqrstuvwxyz123456789\")\n;; 27\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnop",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (string-length\
    \ txt)))\n        (if (odd? n)\n          (let ((n (string-length txt)))\n   \
    \         (let ((n (string-length txt)))\n              (let ((n (string-length\
    \ txt)))\n                (let ((n (string-length txt)))\n                  (let\
    \ ((n (string-length txt)))\n                    (let ((n (string-length txt)))\n\
    \                      (let ((n (string-length txt)))\n                      \
    \  (let ((n (string-length txt)))\n                          (let ((n (string-length\
    \ txt)))\n                            (let ((n (string-length txt)))\n       \
    \                       (let ((n (string-length txt)))\n                     \
    \           (let ((n (string-length txt)))\n                                 \
    \ (let ((n (string-length txt)))\n                                    (let ((n\
    \ (string-length txt)))\n                                      (let ((n (string-length\
    \ txt)))\n                                        (let ((n (string-length txt)))\n\
    \                                          (let ((n (string-length txt)))\n  \
    \                                          (let ((n (string-length txt)))\n  \
    \                                            (let ((n (string-length txt)))\n\
    \                                                (let ((n (string-length txt)))\n\
    \                                                  (let ((n (string-length txt)))\n\
    \                                                    (let ((n (string-length txt)))\n\
    \                                                      (let ((n (string-length\
    \ txt)))\n                                                        (let ((n (string-length\
    \ txt)))\n                                                          (let ((n (string-length\
    \ txt)))\n                                                            (let ((n\
    \ (string-length txt)))\n                                                    \
    \          (let ((n (string-length txt)))\n                                  \
    \                              (let ((n (string-length txt)))\n              \
    \                                                    (let ((n (string-length txt)))\n\
    \                                                                    (let ((n\
    \ (string-length txt)))\n                                                    \
    \                  (let ((n (", "  (let ((words (split txt \" \")))\n    (let\
    \ ((count (map (lambda (w) (count w)) words)))\n      (let ((odd (map (lambda\
    \ (w) (odd (count w)))) count)))\n      (list words odd)))\n  )\n)\n\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;;", "  (let ((words (split\
    \ txt \" \")))\n    (if (null? words)\n      (let ((n (length txt)))\n       \
    \ (let ((cnt 0))\n          (for-each (lambda (w)\n                      (if (string?\
    \ w)\n                        (if (string? (first w))\n                      \
    \    (if (string? (first (rest w)))\n                            (if (string?\
    \ (first (rest (rest w))))\n                              (if (string? (first\
    \ (rest (rest (rest w))))))\n                              (if (string? (first\
    \ (rest (rest (rest (rest w)))))))\n                              (if (string?\
    \ (first (rest (rest (rest (rest (rest w))))))))\n                           \
    \   (if (string? (first (rest (rest (rest (rest (rest (rest (rest w))))))))))\n\
    \                              (if (string? (first (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest w))))))))))))\n                              \
    \ (if (string? (first (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (", "  (let ((words (split txt \" \")))\n    (if (null? words)\n     \
    \ (let ((n (count-words txt)))\n        (if (odd? n)\n          (list n)\n   \
    \       (list))))))\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3", "  (let ((words (split txt \" \")))\n    (if (null? words)\n\
    \      (let ((n (count-words txt)))\n        (if (odd? n)\n          (list (map\
    \ (lambda (x) (ord x)) (string-to-list txt)))))\n      (list words)))\n)\n\n;;\
    \ >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abc", "  (let ((words (string-split txt \" \")))\n\
    \    (if (null? words)\n      (let ((count (string-count txt \"#\")))\n      \
    \  (if (odd? count)\n          (list count)\n          (list)))\n      (list words)))\n\
    \  )\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (count-words\
    \ txt)))\n        (if (odd? n)\n          (list (map (lambda (x) (ord (x) - ord\
    \ 'a')) txt))\n          (list words))))))\n\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef", "  (let ((words (split txt \" \")))\n    (if (null? words)\n    \
    \  (let ((n (string-length txt)))\n        (if (odd? (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-", "  (let ((words (split txt \" \")))\n    (let ((count\
    \ (length words)))\n      (if (odd? count)\n        (let ((letters (map (lambda\
    \ (x) (ord (x) - ord ('a'))))))\n          (let ((odd_letters (reduce (lambda\
    \ (x y) (+ x y) 0) letters)))\n            (list words odd_letters)))\n      \
    \  (list words count)))\n    (list words count)))\n\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>", "  (let ((words (split txt\
    \ \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"a\"\
    )))\n        (if (odd? count)\n          (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list", "  (let ((words (split txt \" \"\
    )))\n    (if (null? words)\n      (let ((n (count-words txt)))\n        (if (odd?\
    \ n)\n          (list (map (lambda (x) (ord (x) - ord ('a')))) words)\n      \
    \    words))))))\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list", " \
    \ (let ((words (split txt \" \")))\n    (let ((count (length words)))\n      (if\
    \ (odd? count)\n        (let ((letters (map (lambda (x) (ord (x) - ord ('a'))))))\n\
    \          (let ((odd_letters (map (lambda (x) (odd? (count_letters x))))))\n\
    \            (list (map (lambda (x) (string-join \" \" (list words x))) words)))\n\
    \            (list (map (lambda (x) (string-join \" \" (list words x))) words)))\n\
    \          (list (map (lambda (x) (string-join \" \" (list words x))) words)))\n\
    \        (list (map (lambda (x) (string-join \" \" (list words x))) words)))\n\
    \      (list (map (lambda (x) (string-join \" \" (list words x))) words))))\n\
    \  )\n)\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split", "  (let ((words (string-split txt \"\\\\s+\")))\n    (if (null? words)\n\
    \      (let ((count (string-count txt \"\\\\p{Ll}\")\n             (odd_count\
    \ (string-count txt \"\\\\p{Ll}\\\\p{Ll}\")\n               (string-length txt))))\n\
    \        (list count odd_count)))\n  words)\n\n;; >>> (split_words \"Hello world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz1234567890\"\
    )\n;; 36\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghij",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt #\"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"b\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count txt #\"B\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt #\"c\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"C\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"d\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count txt #\"D\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt #\"e\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"E\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"f\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count txt #\"F\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt #\"g\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt #\"G\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt #\"h\")))\n        (if (odd?\
    \ count)\n          (list count)))\n      (let ((count (string-count t", "  (let\
    \ ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"b\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"B\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"c\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"C\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"d\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"D\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"e\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"E\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"f\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"F\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"g\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"G\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"h\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"H\")))\n   \
    \     (if (odd? count)\n", "  (let ((words (split txt \" \")))\n    (if (null?\
    \ words)\n      (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"A\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"b\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"B\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"c\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"C\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"d\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"D\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"e\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"E\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"f\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"F\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"g\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"G\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"h\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"H\")))\n        (if (odd? count)\n", "  (let ((words\
    \ (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list (string-upcase (substring\
    \ txt 0 (count - 1))) (string-downcase (substring txt (count - 1) count)))\n \
    \         (list (string-downcase (substring txt 0 (count - 1))) (string-upcase\
    \ (substring txt (count - 1) count))))\n        (list (string-downcase (substring\
    \ txt 0 (count - 1))) (string-downcase (substring txt (count - 1) count))))\n\
    \      (list (string-downcase (substring txt 0 (count - 1))) (string-upcase (substring\
    \ txt (count - 1) count))))\n      (list (string-upcase (substring txt 0 (count\
    \ - 1))) (string-upcase (substring txt (count - 1) count))))\n      (list (string-upcase\
    \ (substring txt 0 (count - 1))) (string-downcase (substring txt (count - 1) count))))\n\
    \      (list (string-downcase (substring txt 0 (count - 1))) (string-upcase (substring\
    \ txt (count - 1) count))))\n      (list (string-upcase (substring txt 0 (count\
    \ - 1))) (string-upcase (substring txt (count - 1) count))))\n      (list (string-upcase\
    \ (substring txt 0 (count - 1))) (string-downcase (substring txt (count - 1) count))))\n\
    \      (list (string-downcase (substring txt 0 (count - 1))) (string-downcase\
    \ (substring txt (count - 1) count))))\n      (list (string-downcase (substring\
    \ txt 0 (count - 1))) (string-upcase (substring txt (count - 1) count))))\n  \
    \    (list (string-upcase (substring txt 0 (count - 1))) (string-upcase (substring\
    \ txt (count - 1) count))))\n      (list (string-upcase (substring txt 0 (count\
    \ - 1))) (string", "  (let ((words (split txt \" \")))\n    (if (null? words)\n\
    \      (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \",\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \"A\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \",\")))\n        (if (odd? count)\n          (list count)\n          (list))))))\n\
    \n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world\")\n;; (list \"Hello\" \"world\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n\
    ;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz123456789\")\n;; 27\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnop",
  "  (let ((words (split txt \" \")))\n    (let ((count (length words)))\n      (if\
    \ (even? count)\n        (let ((letters (map (lambda (x) (ord (x) - ord ('a'))))))\n\
    \          (let ((odd (map (lambda (x) (odd? (count_letters x))))))\n        \
    \    (let ((result (list words)))\n              (for-each (lambda (x) (result\
    \ (append result x))) odd))))\n        (let ((result (list words)))\n        \
    \  (for-each (lambda (x) (result (append result x))) letters))))\n    (list words)))\n\
    \n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef", "  (let ((words (split txt \" \")))\n    (if (null? words)\n    \
    \  (let ((n (string-length txt)))\n        (let ((n_words (string-length words)))\n\
    \          (let ((n_words_words (string-length words)))\n            (let ((n_words_words_words\
    \ (string-length words)))\n              (let ((n_words_words_words_words (string-length\
    \ words)))\n                (let ((n_words_words_words_words_words (string-length\
    \ words)))\n                  (let ((n_words_words_words_words_words_words (string-length\
    \ words)))\n                    (let ((n_words_words_words_words_words_words_words\
    \ (string-length words)))\n                      (let ((n_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                        (let ((n_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                            (let ((n_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                              (let ((n_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (count-words\
    \ txt)))\n        (if (odd? n)\n          (list n)\n          (list)))\n     \
    \ (let ((n (count-words txt)))\n        (if (odd? n)\n          (list n)\n   \
    \       (list)))\n      (let ((n (count-words txt)))\n        (if (odd? n)\n \
    \         (list n)\n          (list))))))\n\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_", "  (let ((words (split txt \" \")))\n    (if (null? words)\n \
    \     (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    ,\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (list words)))\n)\n\n;; >>> (split_words \"Hello world!\")\n;; (list \"\
    Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\"\
    )\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz123456789\")\n;; 27\n\
    ;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz123456789abcdefghijklmnopqrstuvwxyz",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (length\
    \ txt)))\n        (let ((count (0)))\n          (for-each (lambda (w)\n      \
    \                (if (string? w)\n                        (count (+ (string-lower-case-punctuation\
    \ w) (string-length w) (string-length w)))\n                        (count (string-lower-case-punctuation\
    \ w))))\n                    words)\n          (return count))))\n    (let ((n\
    \ (length txt)))\n      (let ((count (0)))\n        (for-each (lambda (w)\n  \
    \                  (if (string? w)\n                      (count (+ (string-lower-case-punctuation\
    \ w) (string-length w) (string-length w)))\n                      (count (string-lower-case-punctuation\
    \ w))))\n          words)\n      (return count))))\n\n;; >>> (split_words \"Hello,world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\"", "  (let ((words (split txt \" \")))\n    (let ((count (map\
    \ (lambda (w) (count_lower_case_letters w))))\n          (odds (map (lambda (w)\
    \ (odd_letter_count w))))\n          (words (map (lambda (w) (if (odds w) (words\
    \ w) (words (words w)))) words))))\n    (words (words words))))\n\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"", "  (let ((words\
    \ (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt #\"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt #\"A\")))\n        (if (odd? count)\n  \
    \        (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ #\"b\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt #\"B\")))\n        (if (odd? count)\n  \
    \        (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ #\"c\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt #\"C\")))\n        (if (odd? count)\n  \
    \        (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ #\"d\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt #\"D\")))\n        (if (odd? count)\n  \
    \        (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ #\"e\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt #\"E\")))\n        (if (odd? count)\n  \
    \        (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ #\"f\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt #\"F\")))\n        (if (odd? count)\n  \
    \        (list count)\n          (list)))))))\n\n;;; (split_words \"Hello world!\"\
    )\n;;; (split_words \"Hello,world!\")\n;;; 3\n;;; (split_words \"abcdef\")\n;;;\
    \ 3\n", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let\
    \ ((count (count-words txt)))\n        (if (odd? count)\n          (list (map\
    \ (lambda (x) (ord x)) txt))\n          (list words))))))\n\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n", "  (let ((words (split txt \" \")))\n  \
    \  (let ((n (length words)))\n      (if (odd? n)\n        (let ((n (length (map\
    \ (lambda (x) (ord (x) - ord 'a'))))))\n          (if (odd? n)\n            (list\
    \ (map (lambda (x) (string-upcase x)) words) words)\n            (list (map (lambda\
    \ (x) (string-upcase x)) words) words))))\n      (list words words)))\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n", "  (let ((words\
    \ (split txt \" \")))\n    (let ((count (map (lambda (w) (count_lower_case_letters\
    \ w))))\n          (odd_count (map (lambda (w) (odd_letter_count w))))\n     \
    \     (even_count (map (lambda (w) (even_letter_count w))))\n          (odd_words\
    \ (filter odd_count words)))\n      (odd_words (filter even_count words)))\n \
    \   (odd_words words)))\n\n;; >>> (split_words \"Hello, world!\")\n;; (list \"\
    Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;;", "  (let ((words (split txt \" \")))\n    (if (null?\
    \ words)\n      (let ((n (string-length txt)))\n        (if (> n 0)\n        \
    \  (let ((l (string-length txt)))\n            (if (odd? l)\n              (let\
    \ ((c (string-index txt \"a\")))\n                (if (even? c)\n            \
    \      (let ((c (string-index txt \"b\")))\n                    (if (odd? c)\n\
    \                      (let ((c (string-index txt \"c\")))\n                 \
    \       (if (odd? c)\n                          (let ((c (string-index txt \"\
    d\")))\n                            (if (odd? c)\n                           \
    \   (let ((c (string-index txt \"e\")))\n                                (if (odd?\
    \ c)\n                                  (let ((c (string-index txt \"f\")))\n\
    \                                    (if (odd? c)\n                          \
    \            (let ((c (string-index txt \"g\")))\n                           \
    \             (if (odd? c)\n                                          (let ((c\
    \ (string-index txt \"h\")))\n                                            (if\
    \ (odd? c)\n                                              (let ((c (string-index\
    \ txt \"i\")))\n                                                (if (odd? c)\n\
    \                                                  (let ((c (string-index txt\
    \ \"j\")))\n                                                    (if (odd? c)\n\
    \                                                      (let ((c (string-index\
    \ txt \"k\")))\n                                                        (if (odd?\
    \ c)\n                                                          (let ((c (string-index\
    \ txt \"l\")))\n                                                            (if\
    \ (odd? c)\n                                                              (let\
    \ ((c (string-index txt \"m\")))\n                                           \
    \                     (if (odd? c)\n                                         \
    \                         (let ((c (string-index txt \"n\")))\n              \
    \                                                      (if (odd? c)\n        \
    \                                                              (let ((c (string-index\
    \ txt \"o\")))\n                                                             \
    \           (if (odd?", "  (let ((words (split txt \" \")))\n    (let ((count\
    \ (map (lambda (w) (count w)) words)))\n      (let ((odd (map (lambda (w) (count\
    \ (string-ci-less-than? w #\\space))) words)))\n        (let ((result (concat\
    \ words odd)))\n          (if (empty? result) (list count) result))))))\n\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abc", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let\
    \ ((n (string-length txt)))\n        (let ((l (string-length txt)))\n        \
    \  (let ((odd (odd? (string-to-number (string-to-number l) 0))))\n           \
    \ (let ((c (string-to-number (string-to-number l) 0)))\n              (if odd\n\
    \                (let ((l (string-to-number (string-to-number l) 0)))\n      \
    \            (let ((n (string-length txt)))\n                    (let ((l (string-length\
    \ txt)))\n                      (let ((c (string-to-number (string-to-number l)\
    \ 0)))\n                        (if odd\n                          (let ((odd\
    \ (odd? (string-to-number (string-to-number l) 0))))\n                       \
    \     (let ((c (string-to-number (string-to-number l) 0)))\n                 \
    \             (if odd\n                                (let ((n (string-length\
    \ txt)))\n                                  (let ((l (string-length txt)))\n \
    \                                   (let ((c (string-to-number (string-to-number\
    \ l) 0)))\n                                      (if odd\n                   \
    \                     (let ((odd (odd? (string-to-number (string-to-number l)\
    \ 0))))\n                                          (let ((n (string-length txt)))\n\
    \                                            (let ((l (string-length txt)))\n\
    \                                              (let ((c (string-to-number (string-to-number\
    \ l) 0)))\n                                                (if odd\n         \
    \                                         (let ((odd (odd? (string-to-number (string-to-number\
    \ l) 0))))\n                                                    (let ((n (string-length\
    \ txt)))\n                                                      (let ((l (string-length\
    \ txt)))\n                                                        (let ((c (string-to-number\
    \ (string-to-number l) 0)))\n                                                \
    \          (if odd\n                                                         \
    \   (let ((odd (odd? (string-to-number (string-", "  (let ((words (split txt \"\
    \ \")))\n    (let ((count (map (lambda (w) (count_lower_case_letters w))))\n \
    \         (odds (map (lambda (w) (odd_order_letters w))))\n          (words (map\
    \ (lambda (w) (concat w \" \"))))\n          (words (map (lambda (w) (concat w\
    \ \" \"))))\n          (words (map (lambda (w) (concat w \" \"))))\n         \
    \ (words (map (lambda (w) (concat w \" \"))))\n          (words (map (lambda (w)\
    \ (concat w \" \"))))\n          (words (map (lambda (w) (concat w \" \"))))\n\
    \          (words (map (lambda (w) (concat w \" \"))))\n          (words (map\
    \ (lambda (w) (concat w \" \"))))\n          (words (map (lambda (w) (concat w\
    \ \" \"))))\n          (words (map (lambda (w) (concat w \" \"))))\n         \
    \ (words (map (lambda (w) (concat w \" \"))))\n          (words (map (lambda (w)\
    \ (concat w \" \"))))\n          (words (map (lambda (w) (concat w \" \"))))\n\
    \          (words (map (lambda (w) (concat w \" \"))))\n          (words (map\
    \ (lambda (w) (concat w \" \"))))\n          (words (map (lambda (w) (concat w\
    \ \" \"))))\n          (words (map (lambda (w) (concat w \" \"))))\n         \
    \ (words (map (lambda (w) (concat w \" \"))))\n          (words (map (lambda (w)\
    \ (concat w \" \"))))\n          (words (map (lambda (w) (concat w \" \"))))\n\
    \          (words (map (lambda (w) (concat w \" \"))))\n          (words (map\
    \ (lambda (w) (concat w \" \"))))\n          (words (map (lambda (w) (concat w\
    \ \" \"))))\n          (words (map (lambda (w) (concat w \" \"))))\n         \
    \ (words (map (lambda (w) (concat w \" \"))))\n          (words (map (", "  (let\
    \ ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (string-length\
    \ txt)))\n        (let ((count (0)))\n          (for-each (lambda (w)\n      \
    \                (if (string-ci-caseless-equal? w \",\")\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"a\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"b\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"c\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"d\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"e\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"f\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"g\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"h\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"i\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"j\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"k\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"l\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"m\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"n\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"o\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"p\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"q\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"r\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"s\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"t\")))\n                   \
    \     (count (+ 1 (string-ci-caseless-compare w \"u\"", "  (let ((words (split\
    \ txt \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \",\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \",\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \",\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \",\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \",\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \",\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \",\")))\n", "  (let ((words (split txt \"\
    \ \")))\n    (if (null? words)\n      (let ((count (string-count txt \"a\")))\n\
    \        (if (odd? count)\n          (list count)))\n      (list words)))\n)\n\
    \n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")", "  (let ((words (split txt \" \")))\n    (if (null? words)\n \
    \     (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n    \
    \      (list count)))\n      (list words)))\n)\n\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")", "  (let ((words (split\
    \ txt \" \")))\n    (let ((counts (map (lambda (w)\n                        (let\
    \ ((l (length w)))\n                          (if (odd? l)\n                 \
    \           (let ((c (counts (substring w 0 l - 1))))\n                      \
    \          (if (odd? c)\n                                  (+ c 1)))))))\n   \
    \           (words (map (lambda (w)\n                           (let ((l (length\
    \ w)))\n                             (if (odd? l)\n                          \
    \      (let ((c (counts (substring w 0 l - 1))))\n                           \
    \       (if (odd? c)\n                                    (+ c 1))))))))\n   \
    \         (words (map (lambda (w)\n                         (let ((l (length w)))\n\
    \                           (if (odd? l)\n                             (let ((c\
    \ (counts (substring w 0 l - 1))))\n                                (if (odd?\
    \ c)\n                                  (+ c 1)))))))))))\n  (words txt)))\n\n\
    ;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;;", "  (let ((words (split txt \" \")))\n    (let ((count (map\
    \ (lambda (w) (count_letters w))))\n          (odds (map (lambda (w) (odd_letters\
    \ w))))\n          (letters (map (lambda (w) (letter_count w))))\n          (words\
    \ (filter (lambda (w) (not (empty? w)))))))\n    (list (map (lambda (w) (join\
    \ w \" \"))) words)))\n\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\"", "  (let ((words (split txt \" \"\
    )))\n    (let ((counts (map (lambda (w) (count w)) words)))\n      (let ((odds\
    \ (filter (lambda (c) (odd c)) counts)))\n        (if (null odds)\n          \
    \  (let ((letters (map (lambda (c) (ord c)) counts)))\n              (let ((l\
    \ (length letters)))\n                (list (map (lambda (l) (substring l 1 l))\
    \ words)))\n              )\n            )\n          (list words)\n         \
    \ )\n        )\n      )\n    )\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;;", "  (let ((words (split txt \" \")))\n    (if (null? words)\n\
    \      (let ((count (length txt)))\n        (if (even? count)\n          (let\
    \ ((letters (map (lambda (x) (ord (x) - ord ('a'))))))\n            (let ((odd\
    \ (map (lambda (x) (odd? (count - (length x)))))\n                   (odds (filter\
    \ odd letters))))\n              (odds (filter odd words)))))))\n      (words)))\n\
    \n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;;", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let\
    \ ((count (string-count txt #\"a\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (list words)))\n)\n\n;; >>> (split_words \"Hello, world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef", "  (let ((words (string-split\
    \ txt \"\\\\s+\")))\n    (let ((counts (map (lambda (w) (string-count w \"a\"\
    \ \"z\"))) (counts words)))\n      (let ((odds (map (lambda (w) (string-count\
    \ w \"a\" \"z\"))) (odds counts)))\n        (list (map (lambda (w) (string-join\
    \ \" \" w)) words) odds))))))\n\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (0)))\n\
    \        (for-each (lambda (w)\n                    (if (string? w)\n        \
    \              (count (+ (string-length w) (string-length w)))\n             \
    \         (count (+ (string-length w) (string-length w))))\n                 \
    \   (string-to-number (string-to-number w)))\n                  (words))\n   \
    \     (return count)))\n    (return words)))\n\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello,", "  (let ((words (split txt \" \")))\n    (let ((count\
    \ (map (lambda (w) (count w)) words)))\n      (let ((odd (map (lambda (w) (odd\
    \ (count w)))) count)))\n      (let ((lower (map (lambda (w) (ord (first w)))\
    \ words)))\n        (let ((lower_odd (map (lambda (w) (odd (count w))) lower)))\n\
    \          (list lower_odd words)))))))\n\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list txt)\n          (list)))\n      (list words)))\n)\n\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n", "  (let ((words (split txt \" \")))\n    (let ((count\
    \ (map (lambda (w) (count w)) words))))\n    (let ((lower_odd_count (map (lambda\
    \ (w) (count w) (ord (first w) - ord (last w)))) words)))\n    (list words count\
    \ lower_odd_count)))\n\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;;\
    \ 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words", "  (let ((words\
    \ (string-split txt \" \")))\n    (let ((counts (map (lambda (w)\n           \
    \             (string-count w \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\"\
    \ \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\"\
    \ \"v\" \"w\" \"x\" \"y\" \"z\"))))\n      (let ((odds (map (lambda (c) (string-count\
    \ c \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"\
    m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"\
    z\"))))\n        (let ((result (list)))\n          (for-each (lambda (w)\n   \
    \                   (if (odds (string-count w \"a\" \"b\" \"c\" \"d\" \"e\" \"\
    f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"\
    s\" \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n                        (result\
    \ (append result w))))\n          (return result)))))))\n", "  (let ((words (split\
    \ txt \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"A\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"A\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"A\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count", "  (let ((words (split txt \" \")))\n    (if (null? words)\n\
    \      (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n   \
    \       (list count)))\n      (let ((count (string-count txt \"A\")))\n      \
    \  (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"b\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"B\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"c\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"C\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"d\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"D\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"e\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"E\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"f\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"F\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"g\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"G\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"h\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"H\")))\n        (if (odd? count)\n", "  (let ((words\
    \ (split txt \" \")))\n    (let ((count (map (lambda (w) (count_lower_case_letters\
    \ w))))\n          (odd_count (map (lambda (w) (odd_count_lower_case_letters w))))\n\
    \          (odd_words (filter odd_count)))\n      (if odd_words (list odd_words\
    \ words))))))\n\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"\
    world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\"\
    )\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\"\
    )\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\"\
    )\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\"\
    )\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\"\
    )\n;; 26\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyz", "  (let ((words (string-split txt \" \")))\n\
    \    (if (null? words)\n      (let ((count (string-count txt \"a\")))\n      \
    \  (if (odd? count)\n          (list count)))\n      (list words)))\n  )\n)\n\n\
    ;; >>> (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n\
    ;; >>> (split_words \"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabc",
  "  (let ((words (split txt \" \")))\n    (let ((count (map (lambda (w) (count w))\
    \ words)))\n      (let ((odd (map (lambda (w) (odd (count w)))) count)))\n   \
    \   (odd)))\n  txt)\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;;\
    \ 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef", "  (let ((words (split txt \" \")))\n   \
    \ (if (null? words)\n      (let ((count (string-count txt \"a\")))\n        (if\
    \ (odd? count)\n          (list count)))\n      (list words)))\n)\n\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"", "  (let ((words (split\
    \ txt \" \")))\n    (if (null? words)\n      (let ((n (length txt)))\n       \
    \ (let ((count (0)))\n          (for-each (lambda (w)\n                      (if\
    \ (string? w)\n                        (if (string? (first w))\n             \
    \             (string-ci-less-than? (first w) \"a\")\n                       \
    \   (string-ci-less-than? (first w) \"z\"))\n                        (count (+\
    \ 1 (string-ci-less-than? (first w) \"a\"))))\n                      words))\n\
    \          (return count)))\n      (return words)))\n\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"", "  (let ((words\
    \ (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"b\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"B\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"c\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"C\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"d\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"D\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"e\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"E\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"f\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"F\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"g\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"G\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"h\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"H\")))\n   \
    \     (if (odd? count)\n", "  (let ((words (split txt \" \")))\n    (if (null?\
    \ words)\n      (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"A\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"b\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"B\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"c\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"C\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"d\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"D\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"e\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"E\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"f\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"F\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"g\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"G\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"h\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"H\")))\n        (if (odd? count)\n", "  (let ((words\
    \ (split txt \" \")))\n    (let ((count (0)))\n      (for-each (lambda (w) (set!\
    \ count (+ (count w) 1))) words)))\n  (if (null? words)\n    (let ((count (0)))\n\
    \      (for-each (lambda (w) (set! count (+ (count w) (count (lowercase w)))))\
    \ words)))\n  (if (null? words)\n    (let ((count (0)))\n      (for-each (lambda\
    \ (w) (set! count (+ (count w) (count (lowercase w)))) words)))\n    (if (null?\
    \ words)\n      (let ((count (0)))\n        (for-each (lambda (w) (set! count\
    \ (+ (count w) (count (lowercase w)))) words))))\n    (if (null? words)\n    \
    \  (let ((count (0)))\n        (for-each (lambda (w) (set! count (+ (count w)\
    \ (count (lowercase w)))) words))))\n    (if (null? words)\n      (let ((count\
    \ (0)))\n        (for-each (lambda (w) (set! count (+ (count w) (count (lowercase\
    \ w)))) words))))\n    (if (null? words)\n      (let ((count (0)))\n        (for-each\
    \ (lambda (w) (set! count (+ (count w) (count (lowercase w)))) words))))\n   \
    \ (if (null? words)\n      (let ((count (0)))\n        (for-each (lambda (w) (set!\
    \ count (+ (count w) (count (lowercase w)))) words))))\n    (if (null? words)\n\
    \      (let ((count (0)))\n        (for-each (lambda (w) (set! count (+ (count\
    \ w) (count (lowercase w)))) words))))\n    (if (null? words)\n      (let ((count\
    \ (0)))\n        (for-each (lambda (w) (set! count (+ (count w) (count (lowercase\
    \ w)))) words))))\n    (if (null? words)\n      (let ((count (0)))\n        (for-each\
    \ (lambda (w) (set! count (+ (count w) (count (lowercase", "  (let ((words (split\
    \ txt \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \",\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (list txt)))\n)", "  (let ((words\
    \ (split txt \" \")))\n    (let ((counts (map (lambda (w) (count w)) words)))\n\
    \      (let ((odds (filter (lambda (c) (odd c)) counts)))\n        (if odd? (list\
    \ (map (lambda (o) (string->number (string-upcase o))) odds)))))))\n\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (string-length\
    \ txt)))\n        (let ((n_words (string-length words)))\n          (let ((n_words_words\
    \ (string-length words)))\n            (let ((n_words_words_words (string-length\
    \ words)))\n              (let ((n_words_words_words_words (string-length words)))\n\
    \                (let ((n_words_words_words_words_words (string-length words)))\n\
    \                  (let ((n_words_words_words_words_words_words (string-length\
    \ words))))\n                  (let ((n_words_words_words_words_words_words_words\
    \ (string-length words))))\n                  (let ((n_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                  (let ((n_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                  (let ((n_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                  (let ((n_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                  (let ((n_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                  (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                  (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                  (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                  (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words))))\n                  (let ((n_words_words_words_words",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"A\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list))))))\n\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split", " \
    \ (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count\
    \ (string-count txt \"a\")))\n        (if (odd? count)\n          (list count)))\n\
    \      (list words)))\n)\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"\
    Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"abcdef\")", "  (let ((words (split txt \" \")))\n\
    \    (if (null? words)\n      (let ((n (count-words txt)))\n        (if (odd?\
    \ n)\n          (list n)\n          (list)))\n      (let ((n (count-words txt)))\n\
    \        (if (odd? n)\n          (list n)\n          (list))))))\n\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (string-length\
    \ txt)))\n        (let ((n_lower_odd (string-to-number (string-to-number (string-upcase\
    \ (string-downcase txt)))))\n              (n_lower_even (string-to-number (string-to-number\
    \ (string-upcase (string-downcase (string-downcase txt)))))))\n          (if (even?\
    \ n_lower_odd)\n            (list n_lower_odd)\n            (list n_lower_even))))\n\
    \    (if (null? words)\n      (let ((n (string-length txt)))\n        (let ((n_lower_odd\
    \ (string-to-number (string-to-number (string-upcase (string-downcase txt)))))\n\
    \              (n_lower_even (string-to-number (string-to-number (string-upcase\
    \ (string-downcase (string-downcase txt)))))))\n          (if (even? n_lower_odd)\n\
    \            (list n_lower_odd)\n            (list n_lower_even))))\n    (if (null?\
    \ words)\n      (let ((n (string-length txt)))\n        (let ((n_lower_odd (string-to-number\
    \ (string-to-number (string-upcase (string-downcase txt)))))\n              (n_lower_even\
    \ (string-to-number (string-to-number (string-upcase (string-downcase (string-downcase\
    \ txt)))))))\n          (if (even? n_lower_odd)\n            (list n_lower_odd)\n\
    \            (list n_lower_even)))))))\n\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (", "  (let ((words (string-split txt \" \")))\n \
    \   (let ((count (string-count words #\" \")))\n      (if (even? count)\n    \
    \    (let ((letters (string-map (lambda (x) (string-count x #\"a\" #\"z\"))) count))\n\
    \          (string-append (list (string-map (lambda (x) (string-substring x 0\
    \ (string-length x) -1)) letters)) \" \")))\n      (string-append (list (string-map\
    \ (lambda (x) (string-substring x 0 (string-length x) -1)) words)) \" \")))\n\
    \  )\n)\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list)))\n      (let ((count (string-count txt\
    \ \"a\")))\n        (if (odd? count)\n          (list count)\n          (list)))\n\
    \      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n   \
    \       (list count)\n          (list))))))\n\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world", "  (let ((words (string-split\
    \ txt \"\\\\s+\")))\n    (if (null? words)\n      (let ((count (string-count txt\
    \ \"\\\\p{Ll}\")\n             (odd_count (string-count txt \"\\\\p{Ll}\\\\p{Ll}\"\
    )\n               (string-count txt \"\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\")\n       \
    \        (string-count txt \"\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\")\n       \
    \        (string-count txt \"\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\")\n\
    \               (string-count txt \"\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\
    \\p{Ll}\")\n               (string-count txt \"\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\\
    p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\")\n               (string-count txt \"\\\\p{Ll}\\\
    \\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\")\n           \
    \    (string-count txt \"\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\
    \\p{Ll}\\\\p{Ll}\\\\p{Ll}\")\n               (string-count txt \"\\\\p{Ll}\\\\\
    p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\"\
    )\n               (string-count txt \"\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\p{Ll}\\\\\
    p{Ll}\\\\p{Ll}\\\\p{", "  (let ((words (split txt \" \")))\n    (if (null? words)\n\
    \      (let ((count (count-words txt)))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (list words)))\n)\n\n;; >>> (split_words \"\
    Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list", "  (let ((words (split txt \"\
    \ \")))\n    (if (null? words)\n      (let ((n (string-length txt)))\n       \
    \ (let ((l (string-length (string-to-list txt)))\n              (odds (string-to-list\
    \ (string-to-list txt)))\n              (i 0)))\n          (if odd? (odds (string-to-list\
    \ (string-to-list txt)))\n            (if odd? (string-to-list (string-to-list\
    \ txt)))\n              (string-to-list (string-to-list txt)))\n          (if\
    \ odd? (string-to-list (string-to-list txt)))\n            (string-to-list (string-to-list\
    \ txt)))\n        (if odd? (string-to-list (string-to-list txt)))\n          (string-to-list\
    \ (string-to-list txt)))\n        (if odd? (string-to-list (string-to-list txt)))\n\
    \          (string-to-list (string-to-list txt)))\n        (if odd? (string-to-list\
    \ (string-to-list txt)))\n          (string-to-list (string-to-list txt)))\n \
    \       (if odd? (string-to-list (string-to-list txt)))\n          (string-to-list\
    \ (string-to-list txt)))\n        (if odd? (string-to-list (string-to-list txt)))\n\
    \          (string-to-list (string-to-list txt)))\n        (if odd? (string-to-list\
    \ (string-to-list txt)))\n          (string-to-list (string-to-list txt)))\n \
    \       (if odd? (string-to-list (string-to-list txt)))\n          (string-to-list\
    \ (string-to-list txt)))\n        (if odd? (string-to-list (string-to-list txt)))\n\
    \          (string-to-list (string-to-list txt)))\n        (if odd? (string-to-list\
    \ (string-to-list txt)))\n          (string-to-list", "  (let ((words (split txt\
    \ \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"a\"\
    )))\n        (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \",\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"a\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \",\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"a\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \",\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"a\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \",\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \",\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (", "  (let ((words (split txt \" \")))\n   \
    \ (if (null? words)\n      (let ((count (string-count txt \"a\")))\n        (if\
    \ (odd? count)\n          (list (string-upcase (string-downcase txt)))))\n   \
    \   (list words)))\n)\n\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;;\
    \ 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;;", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n\
    \ (length txt)))\n        (if (odd? (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-number (string-to-number (string-to-number (string-to-number (string-to-number\
    \ (string-to-", "  (let ((words (split txt \" \")))\n    (if (null? words)\n \
    \     (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n    \
    \      (list count)))\n      (let ((count (string-count txt \"A\")))\n       \
    \ (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"b\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"B\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"c\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"C\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"d\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"D\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"e\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"E\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"f\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"F\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"g\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"G\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"h\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"H\")))\n        (if (odd? count)\n", "  (let ((words\
    \ (split txt \" \")))\n    (let ((count (map (lambda (w) (count_lower_case_letters\
    \ w))))\n          (odds (map (lambda (w) (odd_order_letters w))))\n         \
    \ (words (map (lambda (w) (if (odds w) (words w) (words (words w)))) words))))\n\
    \    (words (words words))))\n\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n\
    ;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n\
    ;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3", "  (let ((words (split\
    \ txt \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"\
    a\")))\n        (if (odd? count)\n          (list count)))\n      (let ((count\
    \ (string-count txt \",\")))\n        (if (odd? count)\n          (list count)))\n\
    \      (list words)))\n)\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"\
    Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")", "  (let ((words (split txt \" \")))\n\
    \    (if (null? words)\n      (let ((count (string-count txt \"a\")))\n      \
    \  (if (odd? count)\n          (list txt)\n          (list)))\n      (let ((count\
    \ (string-count txt \",\")))\n        (if (odd? count)\n          (list txt)\n\
    \          (list)))\n      (let ((count (string-count txt \"a\")))\n        (if\
    \ (odd? count)\n          (list txt)\n          (list)))\n      (let ((count (string-count\
    \ txt \",\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n\
    \      (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n   \
    \       (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    ,\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    ,\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    ,\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    ,\")))\n        (if (odd? count)\n          (list txt)\n          (list)))\n \
    \     (let ((count (string-count txt \"a\")))\n        (if (odd? count)\n    \
    \      (list txt)\n          (list)))\n      (let ((count (string-count txt \"\
    ,\")))\n", "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let\
    \ ((count (count-words txt)))\n        (if (odd? count)\n          (list count)\n\
    \          (list))))))\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;;\
    \ 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;;", "  (let ((words (split txt \"\
    \ \")))\n    (if (null? words)\n      (let ((n (string-length txt)))\n       \
    \ (if (odd? (string-to-number (string-to-list txt)))\n          (list n)\n   \
    \       (list))))))\n\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n;;\
    \ 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdef\")\n\
    ;; 3\n;; >>>", "  (let ((words (split txt \" \")))\n    (if (null? words)\n  \
    \    (let ((n (count-words txt)))\n        (if (odd? n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n          (list n)\n          (list n)\n          (list n)\n\
    \          (list n)\n", "  (let ((words (split txt \" \")))\n    (let ((n (length\
    \ words)))\n      (if (null? words)\n        (let ((n (count-words txt)))\n  \
    \        (if (odd? n)\n            (list (map (lambda (x) (ord x)) (string-to-list\
    \ txt)))))\n        (list words)))\n  )\n)\n\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n", "  (let ((words (split txt \" \")))\n  \
    \  (if (null? words)\n      (let ((count (string-count txt \"a\")))\n        (if\
    \ (odd? count)\n          (list count)))\n      (let ((count (string-count txt\
    \ \"A\")))\n        (if (odd? count)\n          (list count)))\n      (let ((count\
    \ (string-count txt \"b\")))\n        (if (odd? count)\n          (list count)))\n\
    \      (let ((count (string-count txt \"B\")))\n        (if (odd? count)\n   \
    \       (list count)))\n      (let ((count (string-count txt \"c\")))\n      \
    \  (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"C\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"d\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"D\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"e\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"E\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"f\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"F\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"g\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"G\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"h\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"H\")))\n        (if (odd? count)\n",
  "  (let ((words (split txt \" \")))\n    (let ((count (map (lambda (w) (count w))\
    \ words)))\n      (let ((odd (map (lambda (w) (count (string-ci-less-than? w #\\\
    space))) words)))\n        (cond ((= (length words) 1) (odd 0))\n            \
    \  ((< (length words) 2) (odd (odd + 1)))\n              (else (odd odd)))))))\n\
    \n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"Hello, world!\"\
    )\n;; 3\n;; >>> (split_words \"Hello, world!\")\n;; 3\n;; >>> (split_words \"\
    Hello, world!\")\n;; 3\n;; >>> (split_words", "  (let ((words (split txt \" \"\
    )))\n    (if (null? words)\n      (let ((count (string-count txt #\"a\")))\n \
    \       (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"A\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"b\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"B\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"c\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"C\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"d\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"D\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"e\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"E\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"f\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"F\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"g\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count", "  (let ((words (split txt \" \")))\n    (if (null?\
    \ words)\n      (let ((n (string-length txt)))\n        (let ((odd_letters (string-to-list\
    \ (map (lambda (x) (string-to-number (string-substring x 1 1))) txt)))\n     \
    \         (even_letters (string-to-list (map (lambda (x) (string-to-number (string-substring\
    \ x 2 1))) txt)))\n              (letters_count (lambda (x) (string-length x)))\n\
    \              (letters_count_odd (lambda (x) (string-length x) (string-length\
    \ odd_letters)))\n              (letters_count_even (lambda (x) (string-length\
    \ x) (string-length even_letters)))\n              (letters_count_odd_even (lambda\
    \ (x) (string-length x) (string-length odd_letters) (string-length even_letters)))\n\
    \              (letters_count_odd_even_sum (lambda (x) (string-length x) (string-length\
    \ odd_letters) (string-length even_letters) (string-length odd_letters) (string-length\
    \ even_letters))))\n        (list (map (lambda (x) (string-substring x 1 1)) words)\
    \ (map (lambda (x) (string-substring x 2 1)) words) (map (lambda (x) (string-substring\
    \ x 1 1)) words) (map (lambda (x) (string-substring x 2 1)) words) (map (lambda\
    \ (x) (string-substring x 1 1)) words) (map (lambda (x) (string-substring x 2\
    \ 1)) words) (map (lambda (x) (string-substring x 1 1)) words) (map (lambda (x)\
    \ (string-substring x 2 1)) words) (map (lambda (x) (string-substring x 1 1))\
    \ words) (map (lambda (x) (string-substring x 2 1)) words) (map (lambda (x) (string-substring\
    \ x 1 1)) words) (map (lambda (x) (string-substring x 2 1)) words) (map (lambda\
    \ (x) (string-substring x 1 1)) words) (", "  (let ((words (split txt \" \")))\n\
    \    (let ((count (map (lambda (w) (count w)) words)))\n      (let ((odd (map\
    \ (lambda (w) (odd (count w)))) count)))\n      (let ((lower (map (lambda (w)\
    \ (ord (first w))) words)))\n        (let ((lower_odd (map (lambda (w) (odd (count\
    \ w))) lower)))\n          (list lower_odd words))))))\n\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n", "  (let ((words (split txt \" \")))\n    (let ((counts (map\
    \ (lambda (w) (count w 'a))) (counts words))\n          (odds (filter (lambda\
    \ (c) (odd c)) counts)))\n      (if odd? odds\n        (list (map (lambda (w)\
    \ (substring w 0 (string-length w) -1)) words))\n        (list words)))\n  )\n\
    )\n", "  (let ((words (split txt \" \")))\n    (let ((count (map (lambda (w) (count\
    \ w)) words)))\n      (let ((odd (map (lambda (w) (count w)) words)))\n      \
    \  (let ((lower (map (lambda (w) (ord (string-ci w)))) odd))\n          (let ((sum\
    \ (reduce (lambda (a b) (+ a b)) 0 odd))))\n          (list words count sum))))))\n\
    \n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\"\
    )\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>>", "  (let ((words (split txt \" \")))\n\
    \    (if (null? words)\n      (let ((count (string-count txt \"a\")))\n      \
    \  (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"A\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"b\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"B\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"c\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"C\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"d\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"D\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"e\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"E\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"f\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"F\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"g\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"G\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"h\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"H\")))\n        (if (odd? count)\n",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count (0)))\n\
    \        (for-each (lambda (w) (if (string? w)\n                             \
    \     (count (string-lower-case-p w) (string-length w) (string-char-at w count)))\n\
    \                                  words))\n          (+ count 1)))\n    words))\n\
    \n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"abcdef\")\n;; 3\n;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz\")\n;; 26\n\
    ;; >>> (split_words \"abcdefghijklmnopqrstuvwxyz1234567890\")\n;; 36\n;; >>> (split_words\
    \ \"abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdef",
  "  (let ((words (split txt \" \")))\n    (let ((n (length words)))\n      (if (null?\
    \ words)\n        (let ((l (count-letters txt)))\n          (if (odd? l)\n   \
    \         (list (string-upcase (string-downcase (car words))) (car words) (cdr\
    \ words))\n            (list (string-upcase (string-downcase (car words))) (car\
    \ words) (cdr words))))\n        (list (string-upcase (string-downcase (car words)))\
    \ (car words) (cdr words)))))))\n\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (", "  (let ((words (split txt \" \"\
    )))\n    (if (null? words)\n      (let ((count (string-count txt \"a\")))\n  \
    \      (if (odd? count)\n          (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list (string-upcase (string-append (list (string-upcase\
    \ (string-append (list (string-upcase (string-append (list (string-upcase (string-append\
    \ (list (string-upcase (string-append (list (string-upcase (string-append (list\
    \ (string-upcase (string-append (list", "  (let ((words (split txt \" \")))\n\
    \    (let ((count (map (lambda (w) (count w)) words)))\n      (let ((lower_odd_count\
    \ (map (lambda (w) (count w)) (filter (lambda (w) (ord (first w) % 2)) words))))\n\
    \        (if (empty? lower_odd_count)\n            (let ((lower_odd_count (map\
    \ (lambda (w) (count w)) words)))\n              (if (empty? lower_odd_count)\n\
    \                  (let ((lower_odd_count (map (lambda (w) (count w)) words)))\n\
    \                    (if (empty? lower_odd_count)\n                        (let\
    \ ((lower_odd_count (map (lambda (w) (count w)) words)))\n                   \
    \       (if (empty? lower_odd_count)\n                              (let ((lower_odd_count\
    \ (map (lambda (w) (count w)) words)))\n                                (if (empty?\
    \ lower_odd_count)\n                                    (let ((lower_odd_count\
    \ (map (lambda (w) (count w)) words)))\n                                     \
    \ (if (empty? lower_odd_count)\n                                          (let\
    \ ((lower_odd_count (map (lambda (w) (count w)) words)))\n                   \
    \                         (if (empty? lower_odd_count)\n                     \
    \                           (let ((lower_odd_count (map (lambda (w) (count w))\
    \ words)))\n                                                  (if (empty? lower_odd_count)\n\
    \                                                      (let ((lower_odd_count\
    \ (map (lambda (w) (count w)) words)))\n                                     \
    \                   (if (empty? lower_odd_count)\n                           \
    \                                 (let ((lower_odd_count (map (lambda (w) (count\
    \ w)) words))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (length\
    \ txt)))\n        (let ((i 0))\n          (while (< i n)\n            (if (< (string-length\
    \ words[i]) 1)\n              (set! i (+ i 1))\n              (else\n        \
    \        (return (append words \"\") (string-length words[i]) (string-length txt)\
    \ (string-length words[i])))))\n          (return (append words \"\") (string-length\
    \ words[i]) (string-length txt) (string-length words[i]))))\n      (return (append\
    \ words \"\") (string-length words[i]) (string-length txt) (string-length words[i]))))\n\
    \n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;;\
    \ (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;;\
    \ >>> (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello, world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,\
    \ world!\")\n;; (list \"Hello\" \"world", "  (let ((words (split txt \" \")))\n\
    \    (let ((counts (map (lambda (w) (count w)) words))))\n    (let ((lower_odd_counts\
    \ (map (lambda (c) (if (odd? (string-ci-caseless-find c \"a\" \"z\")) (c) (c -\
    \ 1)))) counts)))\n    (list words (map (lambda (w) (string-ci-caseless-find w\
    \ \"a\" \"z\")) lower_odd_counts)))\n)\n\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"abcdef\")\n;; 3\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words\
    \ \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\"\
    )\n;; (list \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list\
    \ \"Hello\" \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\"\
    \ \"world!\")\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\"\
    )\n;; >>> (split_words \"Hello,world!\")\n;; (list \"Hello\" \"world!\")\n;; >>>\
    \ (split_words \"Hello,world!\")\n;; (list \"Hello", "  (let ((words (split txt\
    \ \" \")))\n    (if (null? words)\n      (let ((count (string-count txt \"a\"\
    )))\n        (if (odd? count)\n          (list txt)\n          (list)))\n    \
    \  (let ((count (string-count txt \",\")))\n        (if (odd? count)\n       \
    \   (list txt)\n          (list)))\n      (list words)))\n)", "  (let ((words\
    \ (split txt \" \")))\n    (let ((count (map (lambda (w) (count w)) words)))\n\
    \      (let ((odd (map (lambda (w) (odd (count w)))) count)))\n      (let ((lower\
    \ (map (lambda (w) (ord (string-ciw w)))) count)))\n      (let ((lower_odd (map\
    \ (lambda (w) (odd (count w)))) count)))\n      (let ((lower_odd_count (map (lambda\
    \ (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count (map (lambda\
    \ (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count_count (map\
    \ (lambda (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count_count_count\
    \ (map (lambda (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count_count_count_count\
    \ (map (lambda (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count_count_count_count_count\
    \ (map (lambda (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count_count_count_count_count_count\
    \ (map (lambda (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count_count_count_count_count_count_count\
    \ (map (lambda (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count_count_count_count_count_count_count_count\
    \ (map (lambda (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count_count_count_count_count_count_count_count_count\
    \ (map (lambda (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count_count_count_count_count_count_count_count_count_count\
    \ (map (lambda (w) (odd (count w))))) count)))\n      (let ((lower_odd_count_count_count_count_",
  "  (let ((words (split txt \" \")))\n    (let ((count (map (lambda (w) (count w))\
    \ words)))\n      (let ((lower_odd_count (map (lambda (c) (count (string-ci c)\
    \ (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci c) (string-ci\
    \ c) (string-ci c) (string-ci c) (string-ci c) (string-ci c)", "  (let ((words\
    \ (split txt \" \")))\n    (if (null? words)\n      (let ((count (string-count\
    \ txt \"a\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"A\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"b\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"B\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"c\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"C\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"d\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"D\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"e\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"E\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"f\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"F\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"g\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"G\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"h\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"H\")))\n   \
    \     (if (odd? count)\n", "  (let ((words (split txt \" \")))\n    (if (null?\
    \ words)\n      (let ((n (length txt)))\n        (let ((l (let ((i 0)) (while\
    \ (< i n) (set! i (+ i 1))))))\n          (let ((c (let ((i 0)) (while (< i n)\
    \ (set! i (+ i 1))))))\n            (let ((o (let ((i 0)) (while (< i n) (set!\
    \ i (+ i 1))))))\n              (let ((a (let ((i 0)) (while (< i n) (set! i (+\
    \ i 1))))))\n                (let ((b (let ((i 0)) (while (< i n) (set! i (+ i\
    \ 1))))))\n                  (let ((c (let ((i 0)) (while (< i n) (set! i (+ i\
    \ 1))))))\n                    (let ((d (let ((i 0)) (while (< i n) (set! i (+\
    \ i 1))))))\n                      (let ((e (let ((i 0)) (while (< i n) (set!\
    \ i (+ i 1))))))\n                        (let ((f (let ((i 0)) (while (< i n)\
    \ (set! i (+ i 1))))))\n                          (let ((g (let ((i 0)) (while\
    \ (< i n) (set! i (+ i 1))))))\n                            (let ((h (let ((i\
    \ 0)) (while (< i n) (set! i (+ i 1))))))\n                              (let\
    \ ((i (let ((i 0)) (while (< i n) (set! i (+ i 1))))))\n                     \
    \           (let ((j (let ((i 0)) (while (< i n) (set! i (+ i 1))))))\n      \
    \                            (let ((k (let ((i 0)) (while (< i n) (set! i (+ i\
    \ 1))))))\n                                    (let ((l (let ((i 0)) (while (<\
    \ i n) (set! i (+ i 1))))))\n                                      (let ((m (let\
    \ ((i 0)) (while (< i n) (set! i (+ i 1))))))\n                              \
    \          (let ((n (let ((i 0)) (while (< i n) (set! i (+ i 1))))))\n       \
    \                                   (let ((o (let ((", "  (let ((words (split\
    \ txt \" \")))\n    (if (null? words)\n      (let ((n (string-length txt)))\n\
    \        (let ((n_words (string-length words)))\n          (let ((n_words_words\
    \ (string-length words)))\n            (let ((n_words_words_words (string-length\
    \ words)))\n              (let ((n_words_words_words_words (string-length words)))\n\
    \                (let ((n_words_words_words_words_words (string-length words)))\n\
    \                  (let ((n_words_words_words_words_words_words (string-length\
    \ words)))\n                    (let ((n_words_words_words_words_words_words_words\
    \ (string-length words)))\n                      (let ((n_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                        (let ((n_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                            (let ((n_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                              (let ((n_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                  (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                    (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                      (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                        (let ((", " \
    \ (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((n (string-length\
    \ txt)))\n        (let ((n_words (string-length words)))\n          (let ((n_words_words\
    \ (string-length words)))\n            (let ((n_words_words_words (string-length\
    \ words)))\n              (let ((n_words_words_words_words (string-length words)))\n\
    \                (let ((n_words_words_words_words_words (string-length words)))\n\
    \                  (let ((n_words_words_words_words_words_words (string-length\
    \ words)))\n                    (let ((n_words_words_words_words_words_words_words\
    \ (string-length words)))\n                      (let ((n_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                        (let ((n_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                          (let ((n_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                            (let ((n_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                              (let ((n_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                  (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                    (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                      (let ((n_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words_words\
    \ (string-length words)))\n                                        (let ((", " \
    \ (let ((words (split txt \" \")))\n    (if (null? words)\n      (let ((count\
    \ (string-count txt \"a\")))\n        (if (odd? count)\n          (list count)))\n\
    \      (let ((count (string-count txt \"A\")))\n        (if (odd? count)\n   \
    \       (list count)))\n      (let ((count (string-count txt \"b\")))\n      \
    \  (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"B\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"c\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"C\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"d\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"D\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"e\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"E\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"f\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"F\")))\n        (if (odd? count)\n          (list count)))\n      (let\
    \ ((count (string-count txt \"g\")))\n        (if (odd? count)\n          (list\
    \ count)))\n      (let ((count (string-count txt \"G\")))\n        (if (odd? count)\n\
    \          (list count)))\n      (let ((count (string-count txt \"h\")))\n   \
    \     (if (odd? count)\n          (list count)))\n      (let ((count (string-count\
    \ txt \"H\")))\n        (if (odd? count)\n", "  (let ((words (split txt \" \"\
    )))\n    (if (null? words)\n      (let ((count (string-count txt #\"a\")))\n \
    \       (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"A\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"b\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"B\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"c\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"C\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"d\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"D\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"e\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"E\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"f\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count txt #\"F\")))\n        (if (odd? count)\n          (list\
    \ count)\n          (list)))\n      (let ((count (string-count txt #\"g\")))\n\
    \        (if (odd? count)\n          (list count)\n          (list)))\n      (let\
    \ ((count (string-count"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
