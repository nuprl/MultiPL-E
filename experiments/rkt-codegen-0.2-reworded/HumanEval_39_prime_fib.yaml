name: HumanEval_39_prime_fib
language: rkt
prompt: "#lang racket\n\n;; prime_fib returns n-th number that is a Fibonacci number\
  \ and it's also prime.\n;; >>> (prime_fib 1)\n;; 2\n;; >>> (prime_fib 2)\n;; 3\n\
  ;; >>> (prime_fib 3)\n;; 5\n;; >>> (prime_fib 4)\n;; 13\n;; >>> (prime_fib 5)\n\
  ;; 89\n(define (prime_fib n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_fib))\n\
  \    (check-equal? (candidate 1) 2)\n    (check-equal? (candidate 2) 3)\n    (check-equal?\
  \ (candidate 3) 5)\n    (check-equal? (candidate 4) 13)\n    (check-equal? (candidate\
  \ 5) 89)\n    (check-equal? (candidate 6) 233)\n    (check-equal? (candidate 7)\
  \ 1597)\n    (check-equal? (candidate 8) 28657)\n    (check-equal? (candidate 9)\
  \ 514229)\n    (check-equal? (candidate 10) 433494437)\n))\n\n(test-humaneval)"
completions: ["  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero? n1)\n\
    \      (return n2)\n      (if (zero? n2)\n        (return n1)\n        (if (eq?\
    \ n1 n2)\n          (return n1)\n          (return (+ n1 n2)))))))\n\n;; prime_fib_iter\
    \ returns n-th number that is a Fibonacci number and it's also prime.\n;; >>>\
    \ (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter\
    \ 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89",
  "  (let ((n (if (zero? n) 1 (prime_fib (- n 1))))\n        (n (if (zero? n) 1 (prime_fib\
    \ (- n 2))))\n        (n (if (zero? n) 1 (prime_fib (- n 3))))\n        (n (if\
    \ (zero? n) 1 (prime_fib (- n 4))))\n        (n (if (zero? n) 1 (prime_fib (-\
    \ n 5))))\n        (n (if (zero? n) 1 (prime_fib (- n 6))))\n        (n (if (zero?\
    \ n) 1 (prime_fib (- n 7))))\n        (n (if (zero? n) 1 (prime_fib (- n 8))))\n\
    \        (n (if (zero? n) 1 (prime_fib (- n 9))))\n        (n (if (zero? n) 1\
    \ (prime_fib (- n 10))))\n        (n (if (zero? n) 1 (prime_fib (- n 11))))\n\
    \        (n (if (zero? n) 1 (prime_fib (- n 12))))\n        (n (if (zero? n) 1\
    \ (prime_fib (- n 13))))\n        (n (if (zero? n) 1 (prime_fib (- n 14))))\n\
    \        (n (if (zero? n) 1 (prime_fib (- n 15))))\n        (n (if (zero? n) 1\
    \ (prime_fib (- n 16))))\n        (n (if (zero? n) 1 (prime_fib (- n 17))))\n\
    \        (n (if (zero? n) 1 (prime_fib (- n 18))))\n        (n (if (zero? n) 1\
    \ (prime_fib (- n 19))))\n        (n (if (zero? n) 1 (prime_fib (- n 20))))\n\
    \        (n (if (zero? n) 1 (prime_fib (- n 21))))\n        (n (if (zero? n) 1\
    \ (prime_fib (- n 22))))\n        (n (if (zero? n) 1 (prime_fib (- n 23))))\n\
    \        (n (if (zero? n) 1 (prime_fib (- n 24))))\n        (n (if (", "  (let\
    \ ((n1 (fib n)))\n    (if (zero? n1)\n      (return n1)\n      (let ((n2 (fib\
    \ (+ n1 n1))))\n        (if (zero? n2)\n          (return n2)\n          (return\
    \ (if (even? n)\n                     (+ n2 n2)\n                     (+ n1 n2))))))))\n\
    \n;; prime_fib_list returns a list of n-th numbers that are Fibonacci numbers\
    \ and they're also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda\
    \ (n)\n               (if (< n 2)\n                 1\n                 (fib (-\
    \ n 1)))))\n    (if (fib n)\n      (if (fib (sub1 n))\n        n\n        (prime_fib\
    \ (add1 n))))))\n\n;; prime_fib_list returns a list of n-th Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda\
    \ (n)\n               (if (< n 2)\n                 1\n                 (fib (-\
    \ n 1)))))\n    (if (fib n)\n      (if (fib (sub1 n))\n        n\n        (prime_fib\
    \ (add1 n))))))\n\n;; prime_fib_seq returns a sequence of prime numbers starting\
    \ from n-th number.\n;; >>> (prime_fib_seq 1)\n;; 2\n;; >>> (prime_fib_seq 2)\n\
    ;; 3\n;; >>> (prime_fib_seq 3)\n;; 5\n;; >>> (prime_fib_seq 4)\n;; 13\n;; >>>\
    \ (prime_fib_seq 5)\n;; 89", "  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n\
    \    (if (zero? n1)\n      n2\n      (if (zero? n2)\n        n1\n        (if (zero?\
    \ (modulo n1 n2))\n          n2\n          (prime_fib (+ n2 n1)))))))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n) (if (< n 2) 1 (f (- n\
    \ 1) (+ n 1)))))\n        (p (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n\
    \        (g (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (h (lambda\
    \ (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (i (lambda (n) (if (< n 2)\
    \ 1 (f (- n 1) (+ n 1)))))\n        (j (lambda (n) (if (< n 2) 1 (f (- n 1) (+\
    \ n 1)))))\n        (k (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n    \
    \    (l (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (m (lambda (n)\
    \ (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (n (lambda (n) (if (< n 2) 1 (f\
    \ (- n 1) (+ n 1)))))\n        (o (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n\
    \        (p (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (q (lambda\
    \ (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (r (lambda (n) (if (< n 2)\
    \ 1 (f (- n 1) (+ n 1)))))\n        (s (lambda (n) (if (< n 2) 1 (f (- n 1) (+\
    \ n 1)))))\n        (t (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n    \
    \    (u (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (v (lambda (n)\
    \ (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (w (lambda (n) (if (< n 2) 1 (f\
    \ (- n 1) (+ n 1", "  (let ((fib (lambda (n)\n               (if (< n 2)\n   \
    \              1\n                 (fib (- n 1)))))\n    (if (not (even? n))\n\
    \      (return (fib n))))\n  n))\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are Fibonacci numbers and they're also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))))\n  \
    \  (if (zero? n) 1 (else (fib n))))\n)\n\n;; prime_fib_list returns a list of\
    \ n-th numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n\
    \ 2)))))))\n    (if (zero? n) 1 (if (zero? (modulo n 2)) (fib n) (prime_fib (add\
    \ n 1)))))\n)\n\n;; prime_fib_list returns a list of n-th Fibonacci numbers that\
    \ are prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n\
    ;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n\
    ;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n   \
    \     (n2 (fib (+ n 1))))\n    (if (zero? n)\n      n1\n    (else\n      (if (zero?\
    \ n2)\n        n1\n      (else\n        (if (zero? (modulo n2 n1))\n         \
    \ n1\n        (else\n          n2))))))))\n\n;; prime_fib_list returns a list\
    \ of n-th numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1))))))\n \
    \   (f n)))\n\n;; prime_fib_iter returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter\
    \ 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n\
    ;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((fib (lambda (a b) (if (eq? b 0) a\
    \ (fib (- b 1) a))))\n        (fib (fib (- n 1) 1)))\n    (if (not (even? n))\n\
    \      (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib\
    \ (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib\
    \ (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib\
    \ (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib\
    \ (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib\
    \ (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib\
    \ (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib\
    \ (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib\
    \ (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib (fib\
    \ (fib (fib (fib (fib (fib (fib (fib (fib (f", "  (let ((f (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 1)))))\n        (p (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 2)))))\n        (i (lambda (n) (if (zero? n) 1 (prime_fib (- n 3)))))\n\
    \        (g (lambda (n) (if (zero? n) 1 (prime_fib (- n 4)))))\n        (h (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 5)))))\n        (r (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 6)))))\n        (s (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 7)))))\n        (t (lambda (n) (if (zero? n) 1 (prime_fib (- n 8)))))\n\
    \        (u (lambda (n) (if (zero? n) 1 (prime_fib (- n 9)))))\n        (v (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 10))))))\n  (+ (f n) (f (- n 1)) (p n) (i\
    \ n) (g n) (h n) (r n) (s n) (t n) (u n) (v n))))\n\n;; prime_fib_list returns\
    \ a list of n-th number that is a Fibonacci number and it's also prime.\n;; >>>\
    \ (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list\
    \ 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list\
    \ 5)\n;; '(89)", "  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero?\
    \ n2)\n      n1\n      (if (zero? n1)\n        n2\n        (if (zero? (modulo\
    \ n1 n2))\n          n1\n          (prime_fib (+ n n1)))))))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib\
    \ (- n 1)))))\n        (prime? (lambda (n) (if (not (modulo n 2)) (fib (- n 1))))))\n\
    \    (fib n)))\n\n;; prime_fib_list returns a list of n-th numbers that are Fibonacci\
    \ numbers and they're also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>>\
    \ (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>>\
    \ (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let\
    \ ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n        (result (f n)))\n\
    \    (if (zero? n)\n      result\n      (begin\n        (define (prime_fib n)\n\
    \          (if (zero? n)\n            result\n            (let ((f (lambda (n)\
    \ (if (zero? n) 1 (prime_fib (- n 1)))))\n                  (result (f n)))\n\
    \              (if (zero? n)\n                result\n                (begin\n\
    \                  (define (prime_fib n)\n                    (if (zero? n)\n\
    \                      result\n                      (let ((f (lambda (n) (if\
    \ (zero? n) 1 (prime_fib (- n 1)))))\n                            (result (f n)))\n\
    \                        (if (zero? n)\n                          result\n   \
    \                       (begin\n                            (define (prime_fib\
    \ n)\n                              (if (zero? n)\n                          \
    \      result\n                                (let ((f (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 1)))))\n                                    (result (f\
    \ n)))\n                                 (if (zero? n)\n                     \
    \              result\n                                   (begin\n           \
    \                         (define (prime_fib n)\n                            \
    \          (if (zero? n)\n                                        result\n   \
    \                                     (let ((f (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 1)))))\n                                            (result (f n)))\n \
    \                                       (if (zero? n)\n                      \
    \                    result\n                                          (begin\n\
    \                                            (define (prime_fib n)\n         \
    \                                     (if (zero? n)\n                        \
    \                        result\n                                            \
    \    (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n           \
    \                                         (result (f n)))\n                  \
    \                              (if (zero? n)\n                               \
    \                   result\n                                                 \
    \ (begin\n                                                   (define (prime_fib\
    \ n)\n                                                     (if (zero? n)\n", " \
    \ (let ((fib (lambda (n)\n               (if (zero? n)\n                 1\n \
    \                (fib (- n 1)))))\n       (fib n)))\n  (fib n))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 1))))))\n    (f n)))\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero? n1)\n      n2\n\
    \      (if (zero? n2)\n        n1\n        (if (zero? (modulo n1 n2))\n      \
    \    n2\n          (prime_fib (+ n2 n1)))))))\n\n;; prime_fib_list returns a list\
    \ of n-th numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n)\n               (if (< n 2)\n           \
    \      1\n                 (fib (- n 1)))))\n    (if (not (even? n))\n      (return\
    \ (fib n)))\n    (return (fib (fib n))))))\n\n;; prime_fib_list returns a list\
    \ of prime numbers.\n;; >>> (prime_fib_list 1)\n;; '(2)'\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3)'\n;; >>> (prime_fib_list 3)\n;; '(5)'\n;; >>> (prime_fib_list 4)\n\
    ;; '(13)'\n;; >>> (prime_fib_list 5)\n;; '(89)'", "  (let ((n1 (fib n))\n    \
    \    (n2 (fib (+ n 1))))\n    (if (zero? n2)\n      (return n1)\n      (if (zero?\
    \ n1)\n        (return n2)\n        (if (eq? n1 n2)\n          (return n1)\n \
    \         (return (+ n1 n2))))))\n\n;; prime_fib_iter returns n-th number that\
    \ is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n\
    ;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter\
    \ 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((n1 (fib n))\n      \
    \  (n2 (fib (+ n 1))))\n    (if (zero? n1)\n      n2\n      (if (zero? n2)\n \
    \       n1\n        (if (zero? (modulo n1 n2))\n          n2\n          (prime_fib\
    \ (+ n2 n1)))))))\n\n;; prime_fib_list returns a list of n-th numbers that are\
    \ a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((n1 (fib n))\n        (n2 (fib (sub1 n))))\n    (if (zero? n2)\n      (return\
    \ n1)\n      (return (if (zero? n1)\n                 (return n2)\n          \
    \       (prime_fib (add1 n1)))))))\n\n;; prime_fib_list returns a list of n-th\
    \ numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((f (lambda (x) (if (zero? x) 1 (f (- x 1) (* x x)))))\n  \
    \      (p (lambda (x) (if (zero? x) 0 (f (p (- x 1) (* x x)))))\n          (lambda\
    \ (x) (if (zero? x) 0 (f (p (- x 1) (* x x)))))))\n    (+ (f n) (f (- n 1)))))\n\
    \n;; prime_fib_prime returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n;; >>> (prime_fib_prime 1)\n;; 2\n;; >>> (prime_fib_prime 2)\n;; 3\n\
    ;; >>> (prime_fib_prime 3)\n;; 5\n;; >>> (prime_fib_prime 4)\n;; 13\n;; >>> (prime_fib_prime\
    \ 5)\n;; 89", "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (-\
    \ n 2)))))))\n    (if (zero? n) 1 (if (zero? (modulo n 2)) true (fib n))))\n)\n\
    \n;; prime_fib_list returns a list of n-th Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; (2)\n;; >>> (prime_fib_list 2)\n;; (3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; (5 13)\n;; >>> (prime_fib_list 4)\n;; (13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; (89 1389)", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 1)))))\n        (p (lambda (n) (if (zero? n) 1 (prime_fib (- n 2)))))\n\
    \        (q (lambda (n) (if (zero? n) 1 (prime_fib (- n 3)))))\n        (r (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 4)))))\n        (s (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 5)))))\n        (t (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 6)))))\n        (u (lambda (n) (if (zero? n) 1 (prime_fib (- n 7)))))\n\
    \        (v (lambda (n) (if (zero? n) 1 (prime_fib (- n 8)))))\n        (w (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 9)))))\n        (x (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 10)))))\n        (y (lambda (n) (if (zero? n) 1 (prime_fip\
    \ (- n 11))))))\n    (if (zero? n) 1 (f n))))\n\n;; prime_fib_list returns a list\
    \ of n-th numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero?\
    \ n2)\n      (return n1)\n      (else\n        (if (zero? n1)\n          (return\
    \ n2)\n          (else\n            (return (prime_fib (+ n2 n1)))))\n       \
    \ )))\n)\n\n;; prime_fib_list returns a list of n-th number that is a Fibonacci\
    \ number and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n\
    \        (n2 (fib (+ n 1))))\n    (if (even? n2)\n      (+ n1 n2)\n      (+ n1\
    \ (prime_fib (- n 2 1)))\n      )))\n\n;; prime_fib_list returns a list of n-th\
    \ numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime?\
    \ (lambda (n) (if (modulo n 2) 0 1))))\n    (fib n)))\n\n;; prime_fib_list returns\
    \ a list of n-th numbers that are Fibonacci numbers and they're also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((p (lambda (n)\n             (if (zero?\
    \ n)\n               (return 1)\n               (else\n                (let ((f\
    \ (lambda (n)\n                          (if (zero? n)\n                     \
    \       (return 1)\n                            (else\n                      \
    \        (let ((f (lambda (n)\n                                        (if (zero?\
    \ n)\n                                          (return 1)\n                 \
    \                         (else\n                                            (let\
    \ ((f (lambda (n)\n                                                      (if (zero?\
    \ n)\n                                                        (return 1)\n   \
    \                                                     (else\n                \
    \                                          (let ((f (lambda (n)\n            \
    \                                                        (if (zero? n)\n     \
    \                                                                 (return 1)\n\
    \                                                                      (else\n\
    \                                                                        (let\
    \ ((f (lambda (n)\n                                                          \
    \                       (if (zero? n)\n                                      \
    \                                              (return 1)\n                  \
    \                                                                  (else\n   \
    \                                                                            \
    \       (let ((f (lambda (n)\n                                               \
    \                                              (if (zero? n)\n               \
    \                                                                            \
    \    (return 1)\n                                                            \
    \                                   (else\n                                  \
    \                                                              (let ((f (lambda\
    \ (n)\n                                                                      \
    \                                (if (zero? n)\n                             \
    \                                                                           (return\
    \ 1)\n                                                                       \
    \                                 (else\n                                    \
    \                                                                      (let ((f\
    \ (lambda (n)\n                                                              \
    \                                                    (if (zero? n)\n         \
    \                                                                            \
    \                               (return 1)\n                                 \
    \                                                                            \
    \       (else\n                                                              \
    \                                                        (let ((f (lambda (n)\n\
    \                                                                            \
    \                                                (if (zero? n)\n             \
    \                                                                            \
    \                                     (return 1)\n                           \
    \                                                                            \
    \                       (else\n                                              \
    \                                                                            \
    \      (let ((f (lambda (n)\n                                                \
    \                                                                            \
    \         (if (zero? n)\n                                                    \
    \                                                                            \
    \        (return 1)\n                                                        \
    \                                                                            \
    \    (else\n                                                                 \
    \                                                                        (let\
    \ ((f (lambda (n)\n                                                          \
    \                                                                            \
    \          ", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n\
    \        (result (f n)))\n    (if (zero? n)\n      result\n      (if (zero? (modulo\
    \ result 2))\n        result\n        (result (+ result (f (- n 1))))))))\n\n\
    ;; prime_fib_list returns a list of n-th numbers that are Fibonacci numbers and\
    \ they're also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)'\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)'\n;; >>> (prime_fib_list 3)\n;; '(5 13)'\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)'\n;; >>> (prime_fib_list 5)\n;; '(89 1379)'", "  (let ((fib\
    \ (lambda (a b) (if (eq? a b) 1 (* a b)))\n         (prime? (lambda (n) (if (eq?\
    \ n 1) 1 (fib (- n 1))))))\n         (prime? (lambda (n) (if (eq? n 1) 1 (fib\
    \ (- n 2))))))\n    (if (eq? n 1) 1 (fib (- n 1))))\n)\n\n;; prime_fib_iter returns\
    \ n-th number that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_iter\
    \ 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n\
    ;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((n1\
    \ (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero? n1)\n      n2\n      (if\
    \ (zero? n2)\n        n1\n        (if (zero? (modulo n1 n2))\n          n2\n \
    \         (prime_fib (+ n2 n1)))))))\n\n;; prime_fib_list returns a list of n-th\
    \ numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2 3 5 13 89)\n;; >>> (prime_fib_list 2)\n;; '(3 5 13 89)\n;; >>> (prime_fib_list\
    \ 3)\n;; '(5 13 89)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list\
    \ 5)\n;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n  \
    \      (prime? (lambda (n) (if (and (not (modulo n 2)) (not (modulo n 3)))\n \
    \                                 (not (modulo n 5)) (not (modulo n 7))\n    \
    \                              (not (modulo n 11)) (not (modulo n 13)))))))\n\
    \  (fib n)))\n\n;; prime_fib_list returns a list of n-th numbers that are Fibonacci\
    \ numbers and they're also prime.\n;; >>> (prime_fib_list 1)\n;; (2)\n;; >>> (prime_fib_list\
    \ 2)\n;; (3 5)\n;; >>> (prime_fib_list 3)\n;; (5 13)\n;; >>> (prime_fib_list 4)\n\
    ;; (13 89)\n;; >>> (prime_fib_list 5)\n;; (89 1389)", "  (let ((fib (lambda (n)\
    \ (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))))\n    (if (zero? n) 1 (if (zero?\
    \ (modulo n 2)) 1 (fib n))))\n)\n\n;; prime_fib_list returns a list of n-th Fibonacci\
    \ numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n\
    \        (n2 (fib (+ n 1))))\n    (if (zero? n1)\n      n2\n      (if (zero? n2)\n\
    \        n1\n        (if (zero? (modulo n1 n2))\n          n2\n          (prime_fib\
    \ (+ n2 n1)))))))\n\n;; prime_fib_list returns a list of n-th numbers that are\
    \ a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))))\n  \
    \  (if (zero? n) 1 (if (zero? (modulo n 2)) 1 (fib n))))\n)\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n        (n2 (fib (+ n\
    \ 1))))\n    (if (even? n)\n      (if (prime? n1)\n        n1\n        (prime_fib\
    \ (+ n 2)))\n      (if (prime? n2)\n        n2\n        (prime_fib (+ n 3))))))\n\
    \n;; prime_fib_list returns a list of n-th numbers that are Fibonacci numbers\
    \ and they're also prime.\n;; >>> (prime_fib_list 1)\n;; '(2 3 5 13 89)\n;; >>>\
    \ (prime_fib_list 2)\n;; '(3 5 13 89)\n;; >>> (prime_fib_list 3)\n;; '(5 13 89)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n        (result\
    \ (lambda (n) (if (zero? n) 1 (f n))))))\n  result n))\n\n;; prime_fib_list returns\
    \ a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n;;\
    \ >>> (prime_fib_list 1)\n;; (2)\n;; >>> (prime_fib_list 2)\n;; (3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; (5 13)\n;; >>> (prime_fib_list 4)\n;; (13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; (89 1389)", "  (let ((f (lambda (n) (if (zero? n) 1 (f\
    \ (- n 1) (+ n 1)))))\n        (p (lambda (n) (if (zero? n) 1 (f (- n 2) (+ n\
    \ 2))))))\n    (f n)))\n\n;; prime_fib_iter returns n-th number that is a Fibonacci\
    \ number and it's also prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter\
    \ 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n\
    ;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((fib (lambda (n) (if (< n 2) 1 (+\
    \ (fib (- n 1)) (fib (- n 2)))))))\n    (if (even? n)\n      (fib n)\n      (+\
    \ (fib (- n 1)) (fib (- n 2))))))\n\n;; prime_fib_iterative returns n-th number\
    \ that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_iterative\
    \ 1)\n;; 2\n;; >>> (prime_fib_iterative 2)\n;; 3\n;; >>> (prime_fib_iterative\
    \ 3)\n;; 5\n;; >>> (prime_fib_iterative 4)\n;; 13\n;; >>> (prime_fib_iterative\
    \ 5)\n;; 89", "  (let ((fib (lambda (n)\n               (if (zero? n)\n      \
    \           1\n                 (fib (- n 1)))))\n       (fib n)))\n)\n\n;; prime_fib_list\
    \ returns a list of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; (2)\n;; >>> (prime_fib_list 2)\n;; (3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; (5 13)\n;; >>> (prime_fib_list 4)\n;; (13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; (89 1389)", "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (-\
    \ n 2)))))))\n    (if (zero? n) 1 (if (zero? (modulo n 2)) (fib n) (fib (add n\
    \ 1)))))\n)\n\n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci\
    \ numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n)))\n\
    \    (if (zero? n1)\n      (return n1)\n      (let ((n2 (fib (+ n1 n1))))\n  \
    \      (if (zero? n2)\n          (return n2)\n          (return (if (even? n)\n\
    \                      (+ n2 n2)\n                      (+ n1 n2))))))))\n\n;;\
    \ prime_fib_list returns a list of n-th numbers that are a Fibonacci numbers and\
    \ it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda\
    \ (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))))\n    (if (zero? n) 1 (if\
    \ (zero? (modulo n 2)) true (false))))\n\n;; prime_fib_list returns a list of\
    \ n-th numbers that are Fibonacci numbers and they're also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n)\n               (if (zero? n)\n         \
    \        1\n                 (if (zero? (sub1 n))\n                     n\n  \
    \                   (fib (- n 1)))))\n             (lambda (n)\n             \
    \  (if (zero? n)\n                 1\n                 (if (zero? (sub1 n))\n\
    \                     n\n                     (fib (- n 1))))))))\n  (fib n)))\n\
    \n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda\
    \ (a b) (+ a b))))\n    (let ((prime? (lambda (n)\n                    (let ((f\
    \ (fib (- n 1))))\n                      (if (zero? n)\n                     \
    \   (f)\n                        (if (zero? (modulo n 2))\n                  \
    \        (fib (divide n 2))\n                          (fib (divide n 3))\n  \
    \                        (fib (divide n 5))\n                          (fib (divide\
    \ n 7))\n                          (fib (divide n 11))\n                     \
    \     (fib (divide n 13))\n                          (fib (divide n 17))\n   \
    \                       (fib (divide n 19))))))))\n    (fib n))))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda (n)\n               (if\
    \ (zero? n)\n                 1\n                 (if (zero? (sub1 n))\n     \
    \                n\n                     (fib (sub1 n)))))\n             (lambda\
    \ (n)\n               (if (zero? n)\n                 1\n                 (if\
    \ (zero? (sub1 n))\n                     n\n                     (fib (sub1 n))))))))\n\
    \  (fib n))\n\n;; prime_fib_list returns a list of n-th Fibonacci numbers that\
    \ are also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda\
    \ (a b) (if (eq? a b) 1 (fib (- a b)))))\n        (prime? (lambda (n) (if (eq?\
    \ n 0) 1 (fib (- n 1))))))\n    (fib (- n 1))))\n\n;; prime_fib_seq returns a\
    \ sequence of prime numbers.\n;; >>> (prime_fib_seq 1)\n;; 2\n;; >>> (prime_fib_seq\
    \ 2)\n;; 2\n;; 3\n;; >>> (prime_fib_seq 3)\n;; 2\n;; 5\n;; 13\n;; 89\n;; >>> (prime_fib_seq\
    \ 4)\n;; 2\n;; 3\n;; 5\n;; 13\n;; 89\n;; >>> (prime_fib_seq 5)\n;; 2\n;; 3\n;;\
    \ 5\n;; 13\n;; 89\n;; >>> (prime_fib_seq 6)\n;; 2\n;; 3\n;; 5\n;; 7\n;; 13\n;;\
    \ 23\n;; 37\n;; 71\n;; 89\n;; >>> (prime_fib_seq 7)\n;; 2\n;; 3\n;; 5\n;; 7\n\
    ;; 13\n;; 23\n;; 37\n;; 71\n;; 89\n;; >>> (prime_fib_seq 8)\n;; 2\n;; 3\n;; 5\n\
    ;; 7\n;; 11\n;; 13\n;; 23\n;; 37\n;; 71\n;; 89\n;; 103\n;; >>> (prime_fib_seq\
    \ 9)\n;; 2\n;; 3\n;; 5\n;; 7\n;; 11\n;; 13\n;; 23\n;; 37\n;; 71\n;; 89\n;; 103\n\
    ;; 1141\n;; >>> (prime_fib_seq 10)\n;; 2\n;; 3\n;; 5\n;; 7\n;; 11\n;; 13\n;; 23\n\
    ;; 37\n;; 71\n;; 89\n;; 103\n;; 1141\n;; 1343\n;; >>> (prime_fib_seq 11)\n;; 2\n\
    ;; 3\n;; 5\n;; 7\n;; 11\n;; 13\n;; 23\n;; 37\n;; 71\n;; 89\n;; 103\n;; 1141\n\
    ;; 1343\n;; 1601\n;; >>> (prime_fib_seq 12)\n;; 2\n;; 3\n;; 5\n;; 7\n;; 11\n;;\
    \ 13\n;; 23\n;; 37\n;;", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (-\
    \ n 1)))))\n        (result (lambda (n) (f n))))\n    (result n)))\n\n;; prime_fib_list\
    \ returns a list of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((p (lambda (n)\n             (if (zero? n)\n             \
    \  (return (+ (fib n) (fib (- n 1))))\n               (return (+ (fib (- n 1))\
    \ (fib (- n 2))))))))\n    (p n)))\n\n;; prime_fib_list returns a list of n-th\
    \ Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda\
    \ (n) (if (not (modulo n 2)) (fib n))))))\n\n;; prime_fib_list returns a list\
    \ of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; (2)\n;; >>> (prime_fib_list 2)\n;; (3 5)\n;; >>> (prime_fib_list 3)\n;; (5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; (13 89)\n;; >>> (prime_fib_list 5)\n;; (89\
    \ 1389)", "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2))))))))\n\
    \  (+ (fib n) (fib (- n 1)) (fib (- n 2)))))\n\n;; prime_fib_seq returns a sequence\
    \ of Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_seq 1)\n;; 2\n\
    ;; >>> (prime_fib_seq 2)\n;; 3\n;; >>> (prime_fib_seq 3)\n;; 5\n;; >>> (prime_fib_seq\
    \ 4)\n;; 13\n;; >>> (prime_fib_seq 5)\n;; 89", "  (let ((f (lambda (n) (if (zero?\
    \ n) 1 (f (- n 1) (+ n 1)))))\n        (prime? (f n)))\n    (+ (f n) (f (- n 1)\
    \ (+ n 1))))\n)\n\n;; prime_fib_list returns a list of n-th Fibonacci numbers\
    \ that are prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda\
    \ (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda (n) (if (zero? n)\
    \ true (fib (modulo n 2))))))\n    (fib n)))\n\n;; prime_fib_list returns a list\
    \ of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))\n    \
    \     (prime? (lambda (n) (if (< n 2) #t (fib (- n 1)))))\n         (prime? (lambda\
    \ (n) (if (< n 2) #f (fib (- n 1)))))\n         (lambda (n) (if (< n 2) #t (fib\
    \ (- n 1)))))\n  (fib n)))\n\n;; prime_fib_seq returns n-th number that is a Fibonacci\
    \ number and it's also prime.\n;; >>> (prime_fib_seq 1)\n;; 2\n;; >>> (prime_fib_seq\
    \ 2)\n;; 3\n;; >>> (prime_fib_seq 3)\n;; 5\n;; >>> (prime_fib_seq 4)\n;; 13\n\
    ;; >>> (prime_fib_seq 5)\n;; 89", "  (let ((f (lambda (n)\n             (if (zero?\
    \ n)\n               1\n               (let ((f (lambda (n)\n                \
    \        (if (zero? n)\n                          1\n                        \
    \  (f (- n 1) (* n (f (- n 1))))))))\n                   (f n))))))\n    (f n)))\n\
    \n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n)\
    \ (if (zero? n) 1 (prime_fib (- n 1)))))\n        (p (lambda (n) (if (zero? n)\
    \ 1 (prime_fib (- n 2)))))\n        (i 0))\n    (+ (f n) (f (- n 1)) (p n) (p\
    \ (- n 2)) (i 1))))\n\n;; prime_fib_list returns a list of n-th Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_list 1)\n;; (2)\n;; >>> (prime_fib_list\
    \ 2)\n;; (3 5)\n;; >>> (prime_fib_list 3)\n;; (5 13)\n;; >>> (prime_fib_list 4)\n\
    ;; (13 89)\n;; >>> (prime_fib_list 5)\n;; (89 1389)", "  (let ((f (lambda (n)\
    \ (if (zero? n) 1 (f (- n 1)))))\n        (p (lambda (n) (if (zero? n) 1 (f (-\
    \ n 1))))))\n    (+ (f n) (p n))))\n\n;; prime_fib_list returns a list of n-th\
    \ Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n        (p (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 2)))))\n        (q (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 3)))))\n        (r (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 4)))))\n        (s (lambda (n) (if (zero? n) 1 (prime_fib (- n 5)))))\n\
    \        (t (lambda (n) (if (zero? n) 1 (prime_fib (- n 6)))))\n        (u (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 7)))))\n        (v (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 8)))))\n        (w (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 9)))))\n        (x (lambda (n) (if (zero? n) 1 (prime_fib (- n 10))))))\n\
    \    (+ (f n) (f (- n 1)) (p n) (q n) (r n) (s n) (t n) (u n) (v n) (w n) (x n))))\n\
    \n;; prime_fib_list returns a list of n-th number that is a Fibonacci number and\
    \ it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (x)\
    \ (if (zero? x) 1 (f (- x 1) (+ x 1))))))\n    (if (zero? n) 1 (f n))))\n\n;;\
    \ prime_fib_list returns a list of n-th Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib\
    \ (- n 1)))))\n        (prime? (lambda (n) (if (modulo n 2) true (fib n))))))\n\
    \n;; prime_fib_iter returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;;\
    \ >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter\
    \ 5)\n;; 89", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n     \
    \   (prime? (lambda (n) (if (and (fib n) (not (modulo n 2))) #t #f))))\n    (fib\
    \ n)))\n\n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci\
    \ numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((p (fib n)))\n\
    \    (if (zero? p)\n      p\n      (if (zero? (modulo p 2))\n        p\n     \
    \   (prime_fib (+ n p)))))\n)\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n)\n               (if (zero? n)\n                 1\n  \
    \               (fib (- n 1)))))\n       (if (zero? n)\n         1\n         (if\
    \ (zero? (modulo n 2))\n           (fib (quotient n 2))\n           (fib (quotient\
    \ (modulo n 2) 2))))))\n\n;; prime_fib_list returns a list of n-th numbers that\
    \ are Fibonacci numbers and they're also prime.\n;; >>> (prime_fib_list 1)\n;;\
    \ '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((p (lambda (n)\n             (if (zero? n)\n                 1\n      \
    \           (if (zero? (modulo n 2))\n                     (+ (prime_fib (- n\
    \ 1)) (prime_fib (- n 2)))\n                     (+ (prime_fib (- n 3)) (* 2 (prime_fib\
    \ (- n 4))))))))))\n  (p n)))\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are Fibonacci numbers and they're also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((result (+ (fib n) 1)))\n    (if (even? result)\n      result\n      (if\
    \ (prime? result)\n        result\n        (prime_fib (+ result result))))))\n\
    \n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci numbers\
    \ and they're also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)'\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)'\n;; >>> (prime_fib_list 3)\n;; '(5 13)'\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)'\n;; >>> (prime_fib_list 5)\n;; '(89 1379)'", "  (let ((n1 (fib\
    \ n))\n        (n2 (fib (+ n 1))))\n    (if (even? n)\n      (if (prime? n1)\n\
    \        n1\n        (prime_fib (+ n 2)))\n      (if (prime? n2)\n        n2\n\
    \        (prime_fib (+ n 3))))))\n\n;; prime_fib_list returns a list of n-th number\
    \ that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((result (make-vector n 0)))\n    (let ((i 0))\n      (while (< i n)\n \
    \       (set! result (vector-set! result i (vector-ref result i) (vector-ref result\
    \ (vector-ref result i) + (vector-ref result i))))\n        (set! i (vector-ref\
    \ result i) (+ i 1))\n        (if (vector-ref result i)\n          (if (not (vector-ref\
    \ result i))\n            (set! i (vector-ref result i) (- i 1))\n           \
    \ (set! result (vector-set! result i (vector-ref result i) (vector-ref result\
    \ i) (vector-ref result i) (vector-ref result i)))))))\n    result))\n\n;; prime_fib\
    \ returns n-th number that is a Fibonacci number and it's also prime.\n;; >>>\
    \ (prime_fib 1)\n;; 2\n;; >>> (prime_fib 2)\n;; 3\n;; >>> (prime_fib 3)\n;; 5\n\
    ;; >>> (prime_fib 4)\n;; 13\n;; >>> (prime_fib 5)\n;; 89", "  (let ((f (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n        (p (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 2)))))\n        (i 0))\n    (if (zero? n)\n      1\n  \
    \    (if (zero? (modulo n 2))\n        (+ (f n) (p n))\n        (+ (f n) (f (-\
    \ n 1)))\n        (+ (p n) (p (- n 2)))))))\n\n;; prime_fib_iter returns n-th\
    \ number that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_iter\
    \ 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n\
    ;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((f\
    \ (lambda (x) (if (zero? x) 1 (prime_fib (- x 1)))))\n        (p (lambda (x) (if\
    \ (zero? x) 1 (prime_fib (- x 1))))))\n    (f n)))\n\n;; prime_fib_iter returns\
    \ n-th number that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_iter\
    \ 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n\
    ;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((n1\
    \ (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero? n2)\n      (+ n1 1)\n\
    \      (if (zero? n1)\n        (+ n2 1)\n        (if (zero? (+ n1 n2))\n     \
    \     (+ n1 n2)\n          (+ n2 prime_fib (+ n1 n2))))))))\n\n;; prime_fib_list\
    \ returns a list of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((f (lambda (x) (if (eq? x 0) 1 (* x (prime_fib (- x 1)))))))\n\
    \    (f n)))\n\n;; prime_fib_iter returns n-th number that is a Fibonacci number\
    \ and it's also prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter\
    \ 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n\
    ;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((result (+ (fib n) 1)))\n    (if (even?\
    \ result)\n      result\n      (if (prime? result)\n        result\n        (prime_fib\
    \ (+ result result))))))\n\n;; prime_fib_list returns a list of n-th numbers that\
    \ are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;;\
    \ '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n        (p (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 2)))))\n        (q (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 3)))))\n        (r (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 4)))))\n        (s (lambda (n) (if (zero? n) 1 (prime_fib (- n 5)))))\n\
    \        (t (lambda (n) (if (zero? n) 1 (prime_fib (- n 6)))))\n        (u (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 7)))))\n        (v (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 8)))))\n        (w (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 9)))))\n        (x (lambda (n) (if (zero? n) 1 (prime_fib (- n 10))))))\n\
    \  (+ (f n) (f (- n 1)) (p n) (q n) (r n) (s n) (t n) (u n) (v n) (w n) (x n))))\n\
    \n;; prime_fib_seq returns a list of Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_seq 1)\n;; '(2 3 5 13 89)\n;; >>> (prime_fib_seq 2)\n;; '(3\
    \ 5 13 89)\n;; >>> (prime_fib_seq 3)\n;; '(5 13 89)\n;; >>> (prime_fib_seq 4)\n\
    ;; '(13 89)\n;; >>> (prime_fib_seq 5)\n;; '(89)", "  (let ((n (if (zero? n) 1\
    \ (prime_fib (- n 1))))\n        (n (+ n (prime_fib (- n 2))))))\n  n)\n\n;; prime_fib_list\
    \ returns a list of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((p (lambda (n)\n             (if (zero? n)\n             \
    \  (return (+ (prime_fib (- n 1)) (prime_fib (- n 2))))\n               (return\
    \ (+ (prime_fib (- n 1)) (prime_fib (- n 2))))))))\n    (p n)))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib\
    \ (- n 1)))))\n        (prime? (lambda (n) (if (< n 2) true (fib (- n 1))))))\n\
    \    (if (prime? n)\n      (+ (fib n) (fib (- n 1))))))\n\n;; prime_fib_seq returns\
    \ a sequence of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_seq\
    \ 1)\n;; 2\n;; >>> (prime_fib_seq 2)\n;; 3\n;; >>> (prime_fib_seq 3)\n;; 5\n;;\
    \ >>> (prime_fib_seq 4)\n;; 13\n;; >>> (prime_fib_seq 5)\n;; 89", "  (let ((n\
    \ (if (< n 0) 0 (+ n 1))))\n    (if (and (even? n) (prime? (modulo n 2)))\n  \
    \      (+ (fib n) (prime_fib (- n 1)))))))\n\n;; prime_fib_list returns a list\
    \ of n-th Fibonacci numbers that are prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda\
    \ (n) (if (not (modulo n 2)) (fib (- n 1))))))\n    (fib n)))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib\
    \ (- n 1)))))\n        (prime? (lambda (n) (if (modulo n 2) true (false))))\n\
    \        (prime? (lambda (n) (if (modulo n 3) true (false))))\n        (prime?\
    \ (lambda (n) (if (modulo n 5) true (false))))\n        (prime? (lambda (n) (if\
    \ (modulo n 7) true (false))))\n        (prime? (lambda (n) (if (modulo n 11)\
    \ true (false))))\n        (prime? (lambda (n) (if (modulo n 13) true (false))))\n\
    \        (prime? (lambda (n) (if (modulo n 17) true (false))))\n        (prime?\
    \ (lambda (n) (if (modulo n 19) true (false))))\n        (prime? (lambda (n) (if\
    \ (modulo n 23) true (false))))\n        (prime? (lambda (n) (if (modulo n 29)\
    \ true (false))))\n        (prime? (lambda (n) (if (modulo n 31) true (false))))\n\
    \        (prime? (lambda (n) (if (modulo n 37) true (false))))\n        (prime?\
    \ (lambda (n) (if (modulo n 41) true (false))))\n        (prime? (lambda (n) (if\
    \ (modulo n 43) true (false))))\n        (prime? (lambda (n) (if (modulo n 47)\
    \ true (false))))\n        (prime? (lambda (n) (if (modulo n 53) true (false))))\n\
    \        (prime? (lambda (n) (if (modulo n 59) true (false))))\n        (prime?\
    \ (lambda (n) (if (modulo n 61) true (false))))\n        (prime? (lambda (n) (if\
    \ (modulo n 67) true (false))))\n        (prime? (lambda (n) (if (modulo n 71)\
    \ true (false))))\n        (prime? (lambda (n) (if (modulo n 73) true (false))))\n\
    \        (prime? (lambda (n) (if (modulo n 79) true (false))))\n        ", " \
    \ (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda\
    \ (n) (if (not (modulo n 2)) (fib (- n 1))))))\n    (fib n)))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib\
    \ (- n 1)) (fib (- n 2)))))\n         (prime? (lambda (n) (if (and (< n 2) (prime?\
    \ (- n 1)))\n                                 (prime? (- n 2)))))))\n    (fib\
    \ n)))\n\n;; prime_fib_list returns a list of n-th numbers that are Fibonacci\
    \ numbers and they're also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>>\
    \ (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>>\
    \ (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let\
    \ ((f (lambda (n) (if (< n 2) 1 (prime_fib (- n 1)))))\n        (p (lambda (n)\
    \ (if (< n 2) 1 (prime_fib (- n 1))))))\n    (f n)))\n\n;; prime_fib_list returns\
    \ a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n;;\
    \ >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((n (if (< n 0) 1 (* (- n 1) (- n 2))\
    \ n)))\n    (if (not (even? n))\n      (if (not (prime? (modulo n 2)))\n     \
    \   (return (+ (prime_fib (- n 1)) (prime_fim (- n 2))))\n        (return (+ (prime_fib\
    \ (- n 2)) (prime_fib (- n 3))))\n        (return (+ (prime_fib (- n 3)) (prime_fib\
    \ (- n 4))))\n        (return (+ (prime_fib (- n 4)) (prime_fib (- n 5))))\n \
    \       (return (+ (prime_fib (- n 5)) (prime_fib (- n 6))))\n        (return\
    \ (+ (prime_fib (- n 6)) (prime_fim (- n 7))))\n        (return (+ (prime_fib\
    \ (- n 7)) (prime_fim (- n 8))))\n        (return (+ (prime_fim (- n 8)) (prime_fim\
    \ (- n 9))))\n        (return (+ (prime_fim (- n 9)) (prime_fim (- n 10))))\n\
    \        (return (+ (prime_fim (- n 10)) (prime_fim (- n 11))))\n        (return\
    \ (+ (prime_fim (- n 11)) (prime_fim (- n 12))))\n        (return (+ (prime_fim\
    \ (- n 12)) (prime_fim (- n 13))))\n        (return (+ (prime_fim (- n 13)) (prime_fim\
    \ (- n 14))))\n        (return (+ (prime_fim (- n 14)) (prime_fim (- n 15))))\n\
    \        (return (+ (prime_fim (- n 15)) (prime_fim (- n 16))))\n        (return\
    \ (+ (prime_fim (- n 16)) (prime_fim (- n 17))))\n        (return (+ (prime_fim\
    \ (- n 17)) (prime_fim (- n 18))))\n        (return (+ (prime_fim (- n 18)) (prime_fim\
    \ (- n 19))))\n        (return (+ (prime_fim (- n 19)) (prime_fim (- n 20))))\n\
    \        (return (+ (prime_fim (- n 20)) (prime_fim (- n 21))))\n        (", " \
    \ (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda\
    \ (n) (if (and (< n 2) (not (modulo n 2)))\n                                 \
    \ (fib (- n 1))\n                                  (fib (- n 2))))))\n    (fib\
    \ n)))\n\n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci\
    \ numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda\
    \ (a b) (if (zero? b) a (fib (- a b) (- b a))))))\n    (let ((fib_n (lambda (n)\
    \ (fib (- n 1) (- 2 n) (- n 3))))))\n    (fib_n n)))\n\n;; prime_fib_list returns\
    \ a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n;;\
    \ >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n        (n2 (fib (+ n\
    \ 1))))\n    (if (zero? n1)\n      n2\n      (if (zero? n2)\n        n1\n    \
    \    (if (zero? (modulo n1 n2))\n          n2\n          (prime_fib (+ n2 n1)))))))\n\
    \n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n)\n\
    \             (if (zero? n)\n               1\n               (let ((f (lambda\
    \ (n)\n                        (if (zero? n)\n                          1\n  \
    \                        (f (- n 1) (* n (f (- n 1))))))))\n                 \
    \  (f n))))))\n    (f n)))\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero? n2)\n      (return\
    \ n1)\n      (if (zero? n1)\n        (return n2)\n        (if (eq? n1 n2)\n  \
    \        (return n1)\n          (return (+ n1 n2)))))))\n\n;; prime_fib_iter returns\
    \ n-th number that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_iter\
    \ 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n\
    ;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((p\
    \ (lambda (x) (if (eq? x 0) 1 (prime_fib (- x 1))))))\n    (let ((f (lambda (x)\
    \ (if (eq? x 0) 1 (f (- x 1))))))\n      (let ((fib (lambda (x) (if (eq? x 0)\
    \ 1 (fib (- x 1))))))\n        (let ((fib2 (lambda (x) (if (eq? x 0) 1 (fib (-\
    \ x 1))))))\n          (let ((fib3 (lambda (x) (if (eq? x 0) 1 (fib (- x 1))))))\n\
    \            (let ((fib4 (lambda (x) (if (eq? x 0) 1 (fib (- x 1))))))\n     \
    \         (let ((fib5 (lambda (x) (if (eq? x 0) 1 (fib (- x 1))))))\n        \
    \        (let ((fib6 (lambda (x) (if (eq? x 0) 1 (fib (- x 1))))))\n         \
    \         (let ((fib7 (lambda (x) (if (eq? x 0) 1 (fib (- x 1))))))\n        \
    \            (let ((fib8 (lambda (x) (if (eq? x 0) 1 (fib (- x 1))))))\n     \
    \                 (let ((fib9 (lambda (x) (if (eq? x 0) 1 (fib (- x 1))))))\n\
    \                        (let ((fib10 (lambda (x) (if (eq? x 0) 1 (fib (- x 1))))))\n\
    \                          (let ((fib11 (lambda (x) (if (eq? x 0) 1 (fib (- x\
    \ 1))))))\n                            (let ((fib12 (lambda (x) (if (eq? x 0)\
    \ 1 (fib (- x 1))))))\n                              (let ((fib13 (lambda (x)\
    \ (if (eq? x 0) 1 (fib (- x 1))))))\n                                (let ((fib14\
    \ (lambda (x) (if (eq? x 0) 1 (fib (- x 1))))))\n                            \
    \      (let ((fib15 (lambda (x) (if (eq? x 0) 1 (fib (- x 1))))))\n          \
    \                          (", "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib\
    \ (- n 1)) (fib (- n 2)))))))\n    (if (zero? n) 1 (if (zero? (modulo n 2)) (fib\
    \ n) (fib (sub1 n)))))\n)\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((n1 (fib n)))\n    (if (zero? n1)\n      (return n1)\n      (let ((n2 (fib\
    \ (- n1 n1))))\n        (if (zero? n2)\n          (return n2)\n          (return\
    \ (prime_fib (+ n1 n2))))))))\n\n;; prime_fib_list returns a list of n-th Fibonacci\
    \ numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89 1379)", "  (let ((fib (lambda\
    \ (a b) (if (eq? a b) 1 (fib (- a b)))))\n        (prime? (lambda (n) (if (eq?\
    \ n 1) true (fib (mod n 2))))))\n    (if (eq? n 1) 1 (fib (mod n 2))))\n\n;; prime_fib_list\
    \ returns a list of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime?\
    \ (lambda (n) (if (< n 2) true (fib (- n 1))))))\n    (if (prime? n)\n      (+\
    \ (fib n) (fib (- n 1))))))\n\n;; prime_fib_list returns a list of n-th Fibonacci\
    \ numbers that are prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda\
    \ (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))))\n    (if (zero? n) 1 (if\
    \ (zero? (modulo n 2)) 1 (fib n))))\n)\n\n;; prime_fib_list returns a list of\
    \ n-th Fibonacci numbers that are also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero? n2)\n      (return\
    \ n1)\n      (if (zero? n1)\n        (return n2)\n        (return (prime_fib (+\
    \ n2 n1)))))\n  )\n)\n\n;; prime_fib_list returns a list of n-th numbers that\
    \ are Fibonacci numbers and they're also prime.\n;; >>> (prime_fib_list 1)\n;;\
    \ '(2 3 5 13 89)\n;; >>> (prime_fib_list 2)\n;; '(3 5 13 89)\n;; >>> (prime_fib_list\
    \ 3)\n;; '(5 13 89)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list\
    \ 5)\n;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n  \
    \      (prime? (lambda (n) (if (modulo n 2) 0 (fib n))))\n        (prime? (lambda\
    \ (n) (if (modulo n 2) 0 (fib n))))\n        (prime? (lambda (n) (if (modulo n\
    \ 2) 0 (fib n))))\n        (prime? (lambda (n) (if (modulo n 2) 0 (fib n))))\n\
    \        (prime? (lambda (n) (if (modulo n 2) 0 (fib n))))\n        (prime? (lambda\
    \ (n) (if (modulo n 2) 0 (fib n))))\n        (prime? (lambda (n) (if (modulo n\
    \ 2) 0 (fib n))))\n        (prime? (lambda (n) (if (modulo n 2) 0 (fib n))))\n\
    \        (prime? (lambda (n) (if (modulo n 2) 0 (fib n))))\n        (prime? (lambda\
    \ (n) (if (modulo n 2) 0 (fib n))))\n        (prime? (lambda (n) (if (modulo n\
    \ 2) 0 (fib n))))\n        (prime? (lambda (n) (if (modulo n 2) 0 (fib n))))\n\
    \        (prime? (lambda (n) (if (modulo n 2) 0 (fib n))))\n        (prime? (lambda\
    \ (n) (if (modulo n 2) 0 (fib n))))\n        (prime? (lambda (n) (if (modulo n\
    \ 2) 0 (fib n))))\n        (prime? (lambda (n) (if (modulo n 2) 0 (fib n))))\n\
    \        (prime? (lambda (n) (if (modulo n 2) 0 (fib n))))\n        (prime? (lambda\
    \ (n) (if (modulo n 2) 0 (fib n))))\n        (prime? (lambda (n) (if (modulo n\
    \ 2) 0 (fib n))))\n        (prime? (lambda (n) (if (modulo n 2) 0 (fib n))))\n\
    \        (prime? (", "  (let ((n1 (fib n))\n        (n2 (fib (sub1 n))))\n   \
    \ (if (zero? n2)\n      (return n1)\n      (return (if (zero? n1)\n          \
    \       (return n2)\n                 (prime_fib (add1 n1)))))))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)'\n;; >>> (prime_fib_list 2)\n;; '(3 5)'\n;;\
    \ >>> (prime_fib_list 3)\n;; '(5 13)'\n;; >>> (prime_fib_list 4)\n;; '(13 89)'\n\
    ;; >>> (prime_fib_list 5)\n;; '(89 1379)'", "  (let ((n-1 (sub1 n)))\n    (if\
    \ (zero? n)\n      1\n      (if (zero? n-1)\n        (error \"Fibonacci number\
    \ is not prime\")\n        (let ((f (fib n-1)))\n          (if (zero? (modulo\
    \ f 2))\n            (error \"Fibonacci number is not prime\")\n            (f))))))\n\
    )\n\n;; prime_fib_iter returns n-th number that is a Fibonacci number and it's\
    \ also prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;;\
    \ 3\n;; >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n;; >>>\
    \ (prime_fib_iter 5)\n;; 89", "  (let ((result (make-vector n 0)))\n    (let ((i\
    \ 0))\n      (while (< i n)\n        (set! result (vector-set! result i (vector-ref\
    \ result i) (vector-ref result (vector-ref result i) + 1))\n          (set! i\
    \ (vector-ref result i) (+ i 1))\n          (if (not (vector-ref result i))\n\
    \              (set! i (vector-ref result i) (vector-ref result i) + 1)\n    \
    \          (if (not (vector-ref result i))\n                  (set! i (vector-ref\
    \ result i) (vector-ref result i) + 1)\n                  (error \"Fibonacci number\
    \ is not prime\"))))))\n    result))\n\n;; prime_fib_list returns a list of n-th\
    \ numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((p (fib n)))\n    (if (zero? p)\n      p\n      (if (zero?\
    \ (modulo p 2))\n        (prime_fib (+ p 1))\n        (prime_fib (+ p 2))))))\n\
    \n;; prime_fib_iter returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;;\
    \ >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter\
    \ 5)\n;; 89", "  (let ((fib (lambda (a b) (if (zero? b) a (fib (- a b) (- b a)))))\n\
    \        (prime? (lambda (n) (if (zero? n) #t (fib (- n 1) (- n 2))))))\n    (if\
    \ (zero? n) #t (fib (- n 1) (- n 2)))))\n\n;; prime_fib_iter returns n-th number\
    \ that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_iter 1)\n\
    ;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n;; >>>\
    \ (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((result\
    \ (+ (fib n) (fib (- n 1))))))\n  (if (even? result)\n    result\n    (if (prime?\
    \ result)\n      result\n      (prime_fib (- result 1))))))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 1)))))\n        (p (lambda (n) (if (zero? n) 1 (prime_fib (- n 2)))))\n\
    \        (q (lambda (n) (if (zero? n) 1 (prime_fib (- n 3)))))\n        (r (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 4)))))\n        (s (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 5)))))\n        (t (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 6)))))\n        (u (lambda (n) (if (zero? n) 1 (prime_fib (- n 7)))))\n\
    \        (v (lambda (n) (if (zero? n) 1 (prime_fib (- n 8)))))\n        (w (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 9)))))\n        (x (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 10))))))\n  (+ (f n) (* (f (- n 1)) (f (- n 2)) (f (- n\
    \ 3)) (f (- n 4)) (f (- n 5))\n         (f (- n 6)) (f (- n 7)) (f (- n 8)) (f\
    \ (- n 9)) (f (- n 10))))\n         (p n) (* (p (- n 2)) (p (- n 3)) (p (- n 4))\
    \ (p (- n 5))\n                (p (- n 6)) (p (- n 7)) (p (- n 8)) (p (- n 9))\n\
    \                (p (- n 10))))\n         (q n) (* (q (- n 3)) (q (- n 4)) (q\
    \ (- n 5)) (q (- n 6))\n                (q (- n 7)) (q (- n 8)) (q (- n 9)) (q\
    \ (- n 10))))\n         (r n) (* (r (- n 4)) (r (- n 5)) (r (- n 6)) (r (- n 7))\n\
    \                (r (- n 8)) (r (- n 9)) (r (-", "  (let ((p (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 1)))))\n        (f (lambda (n) (if (zero? n) 1 (f (- n\
    \ 1)) (f (- n 2))))))\n    (f n)))\n\n;; prime_fib_list returns a list of n-th\
    \ Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda\
    \ (n) (if (modulo n 2) 0 1))))\n    (fib n)))\n\n;; prime_fib_list returns a list\
    \ of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; (2)\n;; >>> (prime_fib_list 2)\n;; (3 5)\n;; >>> (prime_fib_list 3)\n;; (5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; (13 89)\n;; >>> (prime_fib_list 5)\n;; (89\
    \ 1389)", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n   \
    \     (p (lambda (n) (if (zero? n) 1 (prime_fib (- n 2)))))\n        (q (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 3)))))\n        (r (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 4)))))\n        (s (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 5)))))\n        (t (lambda (n) (if (zero? n) 1 (prime_fib (- n 6)))))\n\
    \        (u (lambda (n) (if (zero? n) 1 (prime_fib (- n 7)))))\n        (v (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 8)))))\n        (w (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 9)))))\n        (x (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 10))))))\n  (+ (f n) (f (- n 1)) (p n) (q n) (r n) (s n) (t n) (u n) (v\
    \ n) (w n) (x n))))\n\n;; prime_fib_list returns a list of n-th numbers that are\
    \ a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2\
    \ 3 5 13 89)\n;; >>> (prime_fib_list 2)\n;; '(3 5 13 89)\n;; >>> (prime_fib_list\
    \ 3)\n;; '(5 13 89)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list\
    \ 5)\n;; '(89)", "  (let ((result (+ (fib n) (fib (- n 1))))))\n  (if (even? result)\n\
    \    result\n    (if (prime? result)\n      result\n      (prime_fib (- result\
    \ 1))))))\n\n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci\
    \ numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((p (lambda (n)\n\
    \             (if (zero? n)\n               1\n               (if (zero? (modulo\
    \ n 2))\n                   (prime_fib (quotient n 2))\n                   (prime_fib\
    \ (quotient (modulo n 2) 2))\n                   (prime_fib (quotient (modulo\
    \ n 3) 2))\n                   (prime_fib (quotient (modulo n 5) 2))\n       \
    \            (prime_fib (quotient (modulo n 7) 2))\n                   (prime_fib\
    \ (quotient (modulo n 11) 2))\n                   (prime_fib (quotient (modulo\
    \ n 13) 2))\n                   (prime_fib (quotient (modulo n 17) 2))\n     \
    \              (prime_fib (quotient (modulo n 19) 2))\n                   (prime_fib\
    \ (quotient (modulo n 23) 2))\n                   (prime_fib (quotient (modulo\
    \ n 29) 2))\n                   (prime_fib (quotient (modulo n 31) 2))\n     \
    \              (prime_fib (quotient (modulo n 37) 2))\n                   (prime_fib\
    \ (quotient (modulo n 41) 2))\n                   (prime_fib (quotient (modulo\
    \ n 43) 2))\n                   (prime_fib (quotient (modulo n 47) 2))\n     \
    \              (prime_fib (quotient (modulo n 53) 2))\n                   (prime_fib\
    \ (quotient (modulo n 59) 2))\n                   (prime_fib (quotient (modulo\
    \ n 61) 2))\n                   (prime_fib (quotient (modulo n 67) 2))\n     \
    \              (prime_fib (quotient (modulo n 71) 2))\n                   (prime_fib\
    \ (quotient (modulo n 73) 2))\n                   (prime_fib (quotient (modulo\
    \ n 79) 2))\n                   (prime_fib (quotient (modulo n 83) 2))\n     \
    \              (prime_fib (quotient (modulo n 89) 2))\n                   (prime_fib",
  "  (let ((p (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n        (f (lambda\
    \ (n) (if (zero? n) 1 (f (- n 1)))))\n        (g (lambda (n) (if (zero? n) 1 (g\
    \ (- n 1)))))\n        (h (lambda (n) (if (zero? n) 1 (h (- n 1)))))\n       \
    \ (i (lambda (n) (if (zero? n) 1 (i (- n 1)))))\n        (j (lambda (n) (if (zero?\
    \ n) 1 (j (- n 1)))))\n        (k (lambda (n) (if (zero? n) 1 (k (- n 1)))))\n\
    \        (l (lambda (n) (if (zero? n) 1 (l (- n 1)))))\n        (m (lambda (n)\
    \ (if (zero? n) 1 (m (- n 1)))))\n        (n (lambda (n) (if (zero? n) 1 (n (-\
    \ n 1)))))\n        (o (lambda (n) (if (zero? n) 1 (o (- n 1)))))\n        (p\
    \ (lambda (n) (if (zero? n) 1 (p (- n 1)))))\n        (q (lambda (n) (if (zero?\
    \ n) 1 (q (- n 1)))))\n        (r (lambda (n) (if (zero? n) 1 (r (- n 1)))))\n\
    \        (s (lambda (n) (if (zero? n) 1 (s (- n 1)))))\n        (t (lambda (n)\
    \ (if (zero? n) 1 (t (- n 1)))))\n        (u (lambda (n) (if (zero? n) 1 (u (-\
    \ n 1)))))\n        (v (lambda (n) (if (zero? n) 1 (v (- n 1)))))\n        (w\
    \ (lambda (n) (if (zero? n) 1 (w (- n 1)))))\n        (x (lambda (n) (if (zero?\
    \ n) 1 (x (- n 1)))))\n        (y (lambda (n) (if (zero? n) 1 (y (- n 1)))))\n\
    \        (z", "  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero?\
    \ n1)\n      (return n2)\n      (if (zero? n2)\n        (return n1)\n        (if\
    \ (eq? n1 n2)\n          (return n1)\n          (return (+ n1 n2)))))))\n\n;;\
    \ prime_fib_iter returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;;\
    \ >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter\
    \ 5)\n;; 89", "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (-\
    \ n 2)))))))\n    (if (zero? n) 1 (if (zero? (modulo n 2)) true (false))))\n\n\
    ;; prime_fib_list returns a list of prime numbers.\n;; >>> (prime_fib_list 1)\n\
    ;; 2\n;; >>> (prime_fib_list 2)\n;; 3\n;; >>> (prime_fib_list 3)\n;; 5\n;; >>>\
    \ (prime_fib_list 4)\n;; 13\n;; >>> (prime_fib_list 5)\n;; 89", "  (let ((fib\
    \ (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda (n) (if\
    \ (< n 2) true (fib (- n 1))))))\n    (if (prime? n)\n      (+ (fib n) (fib (-\
    \ n 1)))\n      (+ (fib (- n 1)) (fib n))))\n)\n\n;; prime_fib_list returns a\
    \ list of n-th numbers that are a Fibonacci numbers and it's also prime.\n;; >>>\
    \ (prime_fib_list 1)\n;; (2)\n;; >>> (prime_fib_list 2)\n;; (3 5)\n;; >>> (prime_fib_list\
    \ 3)\n;; (5 13)\n;; >>> (prime_fib_list 4)\n;; (13 89)\n;; >>> (prime_fib_list\
    \ 5)\n;; (89 1389)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n\
    \        (prime? (lambda (n) (if (zero? n) #t (fib (modulo n 2))))))\n    (fib\
    \ n)))\n\n;; prime_fib_list returns a list of n-th number that is a Fibonacci\
    \ number and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n\
    \        (n2 (fib (+ n 1))))\n    (if (zero? n2)\n      (+ n1 1)\n      (if (zero?\
    \ n1)\n        n2\n        (+ n1 (prime_fib (+ n2 n1)))))))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 1))))))\n    (f n)))\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; (2)\n;; >>> (prime_fib_list 2)\n;; (3 5)\n;; >>> (prime_fib_list 3)\n;; (5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; (13 89)\n;; >>> (prime_fib_list 5)\n;; (89\
    \ 1389)", "  (let ((result 0))\n    (while (< n 2)\n      (if (and (modulo result\
    \ 2) (modulo result 3))\n          (return result)\n          (set! result (+\
    \ result result))\n          (set! n (- n 1))))\n    result))\n\n;; prime_fib_list\
    \ returns a list of prime numbers.\n;; >>> (prime_fib_list 1)\n;; '(2)'\n;; >>>\
    \ (prime_fib_list 2)\n;; '(3)'\n;; >>> (prime_fib_list 3)\n;; '(5)'\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13)'\n;; >>> (prime_fib_list 5)\n;; '(89)'", "  (let ((fib (lambda\
    \ (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda (n) (if (modulo\
    \ n 2) 0 1))))\n    (fib n)))\n\n;; prime_fib_list returns a list of n-th Fibonacci\
    \ numbers that are also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n (if (zero?\
    \ n) 1 (prime_fib (- n 1))))\n        (n (+ n (prime_fib (- n 2))))))\n  (if (zero?\
    \ n) 1 (if (zero? n) 1 (prime_fib (- n 3))))))\n\n;; prime_fib_list returns a\
    \ list of all prime numbers that are less than n.\n;; >>> (prime_fib_list 10)\n\
    ;; #(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47)", "  (let ((p (lambda (n)\n   \
    \          (if (zero? n)\n               1\n               (if (zero? (remainder\
    \ n 2))\n                   (prime_fib (quotient n 2))\n                   (prime_fib\
    \ (quotient (remainder n 2) 2))\n                   (prime_fib (quotient (remainder\
    \ (remainder n 2) 2) 2)))))))\n    (p n)))\n\n;; prime_fib_list returns a list\
    \ of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda\
    \ (n) (if (modulo n 2) 0 1))))\n    (fib n)))\n\n;; prime_fib_list returns a list\
    \ of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; (2)\n;; >>> (prime_fib_list 2)\n;; (3 5)\n;; >>> (prime_fib_list 3)\n;; (5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; (13 89)\n;; >>> (prime_fib_list 5)\n;; (89\
    \ 1389)", "  (let ((result (+ (fib n) (fib (- n 1))))))\n  (if (even? result)\n\
    \    result\n    (if (prime? result)\n      result\n      (prime_fib (- result\
    \ 1))))))\n\n;; prime_fib_list returns a list of n-th numbers that are Fibonacci\
    \ numbers and they're also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>>\
    \ (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>>\
    \ (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let\
    \ ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n        (result (f n))))\n\
    \  result)\n\n;; prime_fib_list returns a list of n-th Fibonacci numbers that\
    \ are also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n\
    \        (n2 (fib (+ n 1))))\n    (if (zero? n)\n      n1\n    (else\n      (if\
    \ (zero? (modulo n2 n1))\n        n2\n      (else\n        (prime_fib (+ n 2)))))\n\
    \  )\n)\n\n;; prime_fib_list returns a list of n-th Fibonacci numbers that are\
    \ also prime.\n;; >>> (prime_fib_list 1)\n;; '(2 3 5 13 89)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5 13 89)\n;; >>> (prime_fib_list 3)\n;; '(5 13 89)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((result (+ (fib\
    \ n) (fib (- n 1))))))\n  (if (even? result)\n    result\n    (if (prime? result)\n\
    \      result\n      (prime_fib (+ result (prime_fib (- result 1)))))))\n\n;;\
    \ prime_fib_list returns a list of n-th numbers that are a Fibonacci numbers and\
    \ it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)'\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)'\n;; >>> (prime_fib_list 3)\n;; '(5 13)'\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)'\n;; >>> (prime_fib_list 5)\n;; '(89...)'", "  (let ((n (if\
    \ (< n 0) (fib (- n 1)) n)))\n    (if (not (even? n))\n      (if (not (prime?\
    \ (fib (sub1 n))))\n        (return (fib (sub1 n))))\n      (return (fib (sub1\
    \ n)))))))\n\n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci\
    \ numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n\
    \        (n2 (fib (+ n 1))))\n    (if (zero? n2)\n      (return n1)\n      (return\
    \ (if (zero? n1)\n                  (+ n1 n2)\n                  (+ n2 prime_fib\
    \ (+ n1 n2)))))))\n\n;; prime_fib_list returns a list of n-th number that is a\
    \ Fibonacci number and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero? n1)\n      (return\
    \ n2)\n      (if (zero? n2)\n        (return n1)\n        (if (eq? n1 n2)\n  \
    \        (return n1)\n          (return (+ n1 n2)))))))\n\n;; prime_fib_list returns\
    \ a list of n-th numbers that are Fibonacci numbers and they're also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2 3 5 13 89)\n;; >>> (prime_fib_list 2)\n;; '(3\
    \ 5 13 89)\n;; >>> (prime_fib_list 3)\n;; '(5 13 89)\n;; >>> (prime_fib_list 4)\n\
    ;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n) (if\
    \ (zero? n) 1 (prime_fib (- n 1)))))\n        (i 0))\n    (if (zero? n)\n    \
    \  1\n      (if (zero? (modulo n 2))\n        (+ (f n) (f (- n 1)))\n        (+\
    \ (f n) (f (f (- n 1)))))))\n)\n\n;; prime_fib_list returns a list of prime numbers.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)'\n;; >>> (prime_fib_list 2)\n;; '(3 5)'\n;;\
    \ >>> (prime_fib_list 3)\n;; '(5 13)'\n;; >>> (prime_fib_list 4)\n;; '(13 89)'\n\
    ;; >>> (prime_fib_list 5)\n;; '(89 1379)'", "  (let ((fib (lambda (n)\n      \
    \         (if (zero? n)\n                 1\n                 (fib (- n 1)))))\n\
    \       (if (zero? n)\n           1\n           (if (zero? (modulo n 2))\n   \
    \            (fib (quotient n 2))\n               (fib (quotient (modulo n 2)\
    \ 2)))))\n  fib n))\n\n;; prime_fib_list returns a list of n-th numbers that are\
    \ a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n        (p (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 2)))))\n        (q (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 3)))))\n        (r (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 4)))))\n        (s (lambda (n) (if (zero? n) 1 (prime_fib (- n 5)))))\n\
    \        (t (lambda (n) (if (zero? n) 1 (prime_fib (- n 6)))))\n        (u (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 7)))))\n        (v (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 8)))))\n        (w (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 9)))))\n        (x (lambda (n) (if (zero? n) 1 (prime_fib (- n 10))))))\n\
    \  (+ (f n) (f (- n 1)) (p n) (q n) (r n) (s n) (t n) (u n) (v n) (w n) (x n))))\n\
    \n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2 3 5 13 89)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5 13 89)\n;; >>> (prime_fib_list 3)\n;; '(5 13 89)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda\
    \ (n)\n               (if (zero? n)\n                 1\n                 (fib\
    \ (- n 1)))))\n       (if (zero? n)\n         1\n         (if (zero? (modulo n\
    \ 2))\n           (fib (- n 1))\n           (fib (- n 2)))))\n  fib n))\n\n;;\
    \ prime_fib_list returns a list of n-th numbers that are Fibonacci numbers and\
    \ they're also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n\
    \        (n2 (fib (sub1 n))))\n    (if (zero? n1)\n      n2\n      (if (zero?\
    \ n2)\n        n1\n        (if (zero? (sub1 (add1 n1)))\n          (add1 n2)\n\
    \          (prime_fib (add1 (sub1 n2))))))))\n\n;; prime_fib_list returns a list\
    \ of n-th Fibonacci numbers that are also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((f (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (p (lambda\
    \ (n) (if (< n 2) 1 (f (- n 1) (+ n 1))))))\n    (f n)))\n\n;; prime_fib_iter\
    \ returns n-th number that is a Fibonacci number and it's also prime.\n;; >>>\
    \ (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter\
    \ 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89",
  "  (let ((fib (lambda (n)\n               (if (zero? n)\n                 1\n  \
    \               (if (zero? (sub1 n))\n                     n\n               \
    \      (fib (sub1 n)))))\n           (prime? (fib n))))\n  (fib n)))\n\n;; prime_fib_list\
    \ returns a list of n-th Fibonacci numbers that are prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n)\n               (if (< n 2)\n           \
    \      1\n                 (fib (- n 1)))))\n    (if (fib n)\n      (if (fib (fib\
    \ (- n 1)))\n        (return (+ n (fib (- n 1))))\n        (return n))))\n  (fib\
    \ n)))\n\n;; prime_fib_seq returns n-th number that is a Fibonacci number and\
    \ it's also prime.\n;; >>> (prime_fib_seq 1)\n;; 2\n;; >>> (prime_fib_seq 2)\n\
    ;; 3\n;; >>> (prime_fib_seq 3)\n;; 5\n;; >>> (prime_fib_seq 4)\n;; 13\n;; >>>\
    \ (prime_fib_seq 5)\n;; 89", "  (let ((f (lambda (n) (if (< n 2) 1 (f (- n 1)\
    \ (+ n 1)))))\n        (p (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n \
    \       (q (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (r (lambda\
    \ (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (s (lambda (n) (if (< n 2)\
    \ 1 (f (- n 1) (+ n 1)))))\n        (t (lambda (n) (if (< n 2) 1 (f (- n 1) (+\
    \ n 1)))))\n        (u (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n    \
    \    (v (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (w (lambda (n)\
    \ (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (x (lambda (n) (if (< n 2) 1 (f\
    \ (- n 1) (+ n 1)))))\n        (y (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n\
    \        (z (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (a (lambda\
    \ (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (b (lambda (n) (if (< n 2)\
    \ 1 (f (- n 1) (+ n 1)))))\n        (c (lambda (n) (if (< n 2) 1 (f (- n 1) (+\
    \ n 1)))))\n        (d (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n    \
    \    (e (lambda (n) (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (f (lambda (n)\
    \ (if (< n 2) 1 (f (- n 1) (+ n 1)))))\n        (g (lambda (n) (if (< n 2) 1 (f\
    \ (- n 1) (+ n 1", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n\
    \        (p (lambda (n) (if (zero? n) 1 (prime_fib (- n 2)))))\n        (q (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 3)))))\n        (r (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 4)))))\n        (s (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 5)))))\n        (t (lambda (n) (if (zero? n) 1 (prime_fib (- n 6)))))\n\
    \        (u (lambda (n) (if (zero? n) 1 (prime_fib (- n 7)))))\n        (v (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 8)))))\n        (w (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 9)))))\n        (x (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 10))))))\n    (+ (f n) (f (- n 1)) (p n) (q n) (r n) (s n) (t n) (u n)\
    \ (v n) (w n) (x n))))\n\n;; prime_fib_seq returns a list of Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_seq 1)\n;; '(2 1)'\n;; >>> (prime_fib_seq\
    \ 2)\n;; '(3 2)'\n;; >>> (prime_fib_seq 3)\n;; '(5 3)'\n;; >>> (prime_fib_seq\
    \ 4)\n;; '(13 5)'\n;; >>> (prime_fib_seq 5)\n;; '(89 13)'", "  (let ((n1 (fib\
    \ n))\n        (n2 (fib (+ n 1))))\n    (if (zero? n)\n      n1\n    (if (zero?\
    \ n2)\n      n1\n    (if (zero? (modulo n2 n1))\n      n2\n    (prime_fib (+ n2\
    \ n1))))))\n\n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci\
    \ numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n\
    \        (n2 (fib (+ n 1))))\n    (if (zero? n2)\n      (return n1)\n      (if\
    \ (zero? n1)\n        (return n2)\n        (if (eq? n1 n2)\n          (return\
    \ n1)\n          (return (+ n1 n2))))))\n\n;; prime_fib_list returns a list of\
    \ n-th numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((p (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n  \
    \      (f (lambda (n) (if (zero? n) 1 (f (- n 1)) (f (- n 2))))))\n    (f n)))\n\
    \n;; prime_fib_list returns a list of prime numbers.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)'\n;; >>> (prime_fib_list 2)\n;; '(3 5)'\n;; >>> (prime_fib_list 3)\n;;\
    \ '(5 13)'\n;; >>> (prime_fib_list 4)\n;; '(13 89)'\n;; >>> (prime_fib_list 5)\n\
    ;; '(89 1379)'", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n\
    \        (p (lambda (n) (if (zero? n) 1 (prime_fib (- n 2))))))\n    (f n)))\n\
    \n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n)\
    \ (if (zero? n) 1 (prime_fib (- n 1))))))\n    (f n)))\n\n;; prime_fib_list returns\
    \ a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n;;\
    \ >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n        (n2 (fib (+ n\
    \ 1))))\n    (if (zero? n1)\n      (return n2)\n      (if (zero? n2)\n       \
    \ (return n1)\n        (return (prime_fib (+ n2 n1)))))\n  )\n)\n\n;; prime_fib_list\
    \ returns a list of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n\
    \ 2)))))))\n    (if (zero? n) 1 (if (zero? (modulo n 2)) true (false))))\n\n;;\
    \ prime_fib_list returns a list of n-th Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib\
    \ (- n 1)))))\n        (prime? (lambda (n) (if (modulo n 2) 0 1))))\n    (fib\
    \ n)))\n\n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci\
    \ numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n (if (< n\
    \ 0) 1 (- n 1))))\n    (let ((fib (lambda (n) (if (< n 1) 1 (+ (fib (- n 1)) (fib\
    \ (- n 2)))))))\n      (if (and (fib n) (fib (- n 1))) (fib (- n 2)))\n      \
    \  (+ (fib n) (prime_fib (- n 2)))))))\n\n;; prime_fib_list returns a list of\
    \ n-th numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((p (lambda (n)\n             (if (zero? n)\n             \
    \  (return 1)\n               (else\n                (return (prime_fib (- n 1))\n\
    \                     (+ (prime_fib (- n 2))\n                         (prime_fib\
    \ (- n 3))))))))\n    (p n)))\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda\
    \ (n) (if (< n 2) true (fib (- n 1))))))\n    (if (prime? n)\n      (fib n)\n\
    \      (+ (prime_fib (- n 1)) (prime_fib (- n 2))))))\n\n;; prime_fib_list returns\
    \ a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n;;\
    \ >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n) (if (zero? n) 1 (f (-\
    \ n 1)))))\n        (i (lambda (n) (if (zero? n) 1 (f (- n 2)))))\n        (p\
    \ (lambda (n) (if (zero? n) 1 (f (- n 3)))))\n        (q (lambda (n) (if (zero?\
    \ n) 1 (f (- n 4)))))\n        (r (lambda (n) (if (zero? n) 1 (f (- n 5)))))\n\
    \        (s (lambda (n) (if (zero? n) 1 (f (- n 6)))))\n        (t (lambda (n)\
    \ (if (zero? n) 1 (f (- n 7)))))\n        (u (lambda (n) (if (zero? n) 1 (f (-\
    \ n 8)))))\n        (v (lambda (n) (if (zero? n) 1 (f (- n 9)))))\n        (w\
    \ (lambda (n) (if (zero? n) 1 (f (- n 10))))))\n    (+ (f n) (f (- n 1)) (i n)\
    \ (p n) (q n) (r n) (s n) (t n) (u n) (v n) (w n))))\n\n;; prime_fib_list returns\
    \ a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n;;\
    \ >>> (prime_fib_list 1)\n;; '(2 3 5 13 89)\n;; >>> (prime_fib_list 2)\n;; '(3\
    \ 5 13 89)\n;; >>> (prime_fib_list 3)\n;; '(5 13 89)\n;; >>> (prime_fib_list 4)\n\
    ;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n (if (< n 0) 1 (*\
    \ n (- n 1))))\n        (fib n)\n        (if (modulo? (fib n) n)\n           \
    \ n\n            (prime_fib (- n 1))))))\n\n;; prime_fib_list returns a list of\
    \ n-th Fibonacci numbers that are also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n        (p (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 2)))))\n        (q (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 3)))))\n        (r (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 4)))))\n        (s (lambda (n) (if (zero? n) 1 (prime_fib (- n 5)))))\n\
    \        (t (lambda (n) (if (zero? n) 1 (prime_fib (- n 6)))))\n        (u (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 7)))))\n        (v (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 8)))))\n        (w (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 9)))))\n        (x (lambda (n) (if (zero? n) 1 (prime_fib (- n 10))))))\n\
    \  (+ (f n) (f (- n 1)) (f (- n 2)) (f (- n 3)) (f (- n 4)) (f (- n 5))\n    \
    \   (f (- n 6)) (f (- n 7)) (f (- n 8)) (f (- n 9)) (f (- n 10))))))\n\n;; prime_fib2\
    \ returns n-th number that is a Fibonacci number and it's also prime.\n;; >>>\
    \ (prime_fib2 1)\n;; 2\n;; >>> (prime_fib2 2)\n;; 3\n;; >>> (prime_fib2 3)\n;;\
    \ 5\n;; >>> (prime_fib2 4)\n;; 13\n;; >>> (prime_fib2 5)\n;; 89", "  (let ((p\
    \ (lambda (n)\n             (if (zero? n)\n               (return 1)\n       \
    \        (else\n                (let ((f (lambda (n)\n                       \
    \   (if (zero? n)\n                            (return 1)\n                  \
    \          (else\n                              (let ((f (lambda (n)\n       \
    \                                 (if (zero? n)\n                            \
    \              (return 1)\n                                          (else\n \
    \                                           (let ((f (lambda (n)\n           \
    \                                           (if (zero? n)\n                  \
    \                                      (return 1)\n                          \
    \                              (else\n                                       \
    \                   (let ((f (lambda (n)\n                                   \
    \                                 (if (zero? n)\n                            \
    \                                          (return 1)\n                      \
    \                                                (else\n                     \
    \                                                   (let ((f (lambda (n)\n   \
    \                                                                            \
    \  (if (zero? n)\n                                                           \
    \                         (return 1)\n                                       \
    \                                             (else\n                        \
    \                                                              (let ((f (lambda\
    \ (n)\n                                                                      \
    \                       (if (zero? n)\n                                      \
    \                                                         (return 1)\n       \
    \                                                                            \
    \            (else\n                                                         \
    \                                       (let ((f (lambda (n)\n               \
    \                                                                            \
    \         (if (zero? n)\n                                                    \
    \                                                  (return 1)\n              \
    \                                                                            \
    \            (else\n                                                         \
    \                                               (let ((f (lambda (n)\n       \
    \                                                                            \
    \                           (if (zero? n)\n                                  \
    \                                                                            \
    \  (return 1)\n                                                              \
    \                                                  (else\n                   \
    \                                                                            \
    \                   (let ((f (lambda (n)\n                                   \
    \                                                                            \
    \             (if (zero? n)\n                                                \
    \                                                                            (return\
    \ 1)\n                                                                       \
    \                                                     (else\n                \
    \                                                                            \
    \                                  (let ((f (lambda (n)\n                    \
    \                                                                            \
    \                                   (if (zero? n)\n                          \
    \                                                                            \
    \                               (return 1)\n                                 \
    \                                                                            \
    \                        (else\n                                             \
    \                                                                            \
    \              (let ((f (lambda (n)\n                                        \
    \                                                     ", "  (let ((n1 (fib n))\n\
    \        (n2 (fib (+ n 1))))\n    (if (zero? n1)\n      n2\n      (if (zero? n2)\n\
    \        n1\n        (if (zero? (modulo n1 n2))\n          n2\n          (prime_fib\
    \ (+ n2 n1)))))))\n\n;; prime_fib_list returns a list of n-th Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2 2 3 5 13 89)\n;; >>>\
    \ (prime_fib_list 2)\n;; '(3 5 13 89)\n;; >>> (prime_fib_list 3)\n;; '(5 13 89)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda\
    \ (n) (if (< n 2) true (fib (- n 1))))))\n    (if (prime? n)\n      (+ (fib n)\
    \ (fib (- n 1))))))\n\n;; prime_fib_list returns a list of n-th numbers that are\
    \ a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero? n2)\n      (+\
    \ n1 1)\n      (if (zero? n1)\n        n2\n        (+ n1 n2))))\n\n;; prime_fib_list\
    \ returns a list of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((n (if (< n 0) 0 (+ n 1))))\n    (if (and (even? n) (prime?\
    \ (modulo n 2)))\n        (+ (fib n) (prime_fib (- n 1)))))))\n\n;; prime_fib_list\
    \ returns a list of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime?\
    \ (lambda (n) (if (< n 2) true (fib (- n 1))))))\n    (if (prime? n)\n      (+\
    \ (fib n) (fib (- n 1)))\n      (+ (fib (- n 1)) (fib n))))\n)\n\n;; prime_fib_list\
    \ returns a list of prime numbers.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>>\
    \ (prime_fib_list 2)\n;; '(3)\n;; >>> (prime_fib_list 3)\n;; '(5)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n1 (fib n))\n\
    \        (n2 (fib (+ n 1))))\n    (if (zero? n2)\n      (+ n1 1)\n      (if (zero?\
    \ n1)\n        (+ n2 1)\n        (if (zero? n2)\n          (+ n1 2)\n        \
    \  (+ n2 2)\n          (+ n1 (prime_fib (+ n2 3)))\n          (+ n2 (prime_fib\
    \ (+ n1 4)))))\n      (+ n1 (prime_fib (+ n2 5))))))\n\n;; prime_fib_list returns\
    \ a list of n-th Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2 3 5 13 89)\n;; >>> (prime_fib_list 2)\n;; '(3 5 13 89)\n;; >>> (prime_fib_list\
    \ 3)\n;; '(5 13 89)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list\
    \ 5)\n;; '(89)", "  (let ((fib (lambda (n)\n               (if (zero? n)\n   \
    \              1\n                 (if (zero? (sub1 n))\n                    \
    \ n\n                     (fib (sub1 n)))))\n           (prime? (lambda (n)\n\
    \                    (if (zero? n)\n                        true\n           \
    \             (not (modulo n 2))))))))\n  (fib n))\n\n;; prime_fib_list returns\
    \ a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n;;\
    \ >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda (n)\n               (if\
    \ (< n 2)\n                 1\n                 (fib (- n 1)))))\n    (if (and\
    \ (prime? (fib n))\n            (= (fib n) (fib (- n 1))))\n      (+ n (fib (-\
    \ n 1))))))\n)\n\n;; prime_fib_list returns a list of n-th numbers that are a\
    \ Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((p (lambda (n)\n             (if (zero? n)\n               1\n        \
    \     (else\n               (let ((f (lambda (n)\n                         (if\
    \ (zero? n)\n                           1\n                         (else\n  \
    \                         (let ((f (lambda (n)\n                             \
    \       (if (zero? n)\n                                      1\n             \
    \                       (else\n                                      (let ((f\
    \ (lambda (n)\n                                                (if (zero? n)\n\
    \                                                  1\n                       \
    \                         (else\n                                            \
    \      (let ((f (lambda (n)\n                                                \
    \          (if (zero? n)\n                                                   \
    \        1\n                                                           (else\n\
    \                                                           (let ((f (lambda (n)\n\
    \                                                                    (if (zero?\
    \ n)\n                                                                      1\n\
    \                                                                      (else\n\
    \                                                                      (let ((f\
    \ (lambda (n)\n                                                              \
    \                (if (zero? n)\n                                             \
    \                                   1\n                                      \
    \                                        (else\n                             \
    \                                                   (let ((f (lambda (n)\n   \
    \                                                                            \
    \      (if (zero? n)\n                                                       \
    \                               1\n                                          \
    \                                            (else\n                         \
    \                                                             (let ((f (lambda\
    \ (n)\n                                                                      \
    \                     (if (zero? n)\n                                        \
    \                                                     1\n                    \
    \                                                                         (else\n\
    \                                                                            \
    \                 (let ((f (lambda (n)\n                                     \
    \                                                            (if (zero? n)\n \
    \                                                                            \
    \                     1\n                                                    \
    \                                              (else\n                       \
    \                                                                           (let\
    \ ((f (lambda (n)\n                                                          \
    \                                            (if (zero? n)\n                 \
    \                                                                            \
    \         1\n                                                                \
    \                                      (else\n                               \
    \                                                                       (let ((f\
    \ (lambda (n)\n                                                              \
    \                                            (if (zero? n)\n                 \
    \                                                                            \
    \             1\n                                                            \
    \                                              (else\n                       \
    \                                                                            \
    \       (let ((f (lambda (n)\n                                               \
    \                                                ", "  (let ((f (lambda (n) (if\
    \ (zero? n) 1 (prime_fib (- n 1)))))\n        (i 0))\n    (if (zero? n)\n    \
    \  1\n      (if (zero? (modulo n 2))\n        (+ (f n) (f (modulo n 2)))\n   \
    \     (+ (f (modulo n 3)) (f (modulo n 5)))\n        (+ (f (modulo n 7)) (f (modulo\
    \ n 11))\n          (+ (f (modulo n 13)) (f (modulo n 17))\n            (+ (f\
    \ (modulo n 19)) (f (modulo n 23))\n              (+ (f (modulo n 29)) (f (modulo\
    \ n 31))\n                (+ (f (modulo n 37)) (f (modulo n 41))\n           \
    \       (+ (f (modulo n 43)) (f (modulo n 47))\n                    (+ (f (modulo\
    \ n 53)) (f (modulo n 59))\n                      (+ (f (modulo n 61)) (f (modulo\
    \ n 67))\n                        (+ (f (modulo n 71)) (f (modulo n 73))\n   \
    \                       (+ (f (modulo n 79)) (f (modulo n 83))\n             \
    \               (+ (f (modulo n 89))))))))))))))))))))))))))\n\n;; prime_fib2\
    \ returns n-th number that is a Fibonacci number and it's also prime.\n;; >>>\
    \ (prime_fib2 1)\n;; 2\n;; >>> (prime_fib2 2)\n;; 3\n;; >>> (prime_fib2 3)\n;;\
    \ 5\n;; >>> (prime_fib2 4)\n;; 13\n;; >>> (prime_fib2 5)\n;; 89", "  (let ((result\
    \ (+ (fib n) (fib (- n 1))))\n         (is_prime? (mod result 2)))\n    (if is_prime?\n\
    \      result\n      (prime_fib (- n 1)))))\n\n;; prime_fib_list returns a list\
    \ of n-th numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n)\n               (if (zero? n)\n         \
    \        1\n                 (if (zero? (remainder n 2))\n                   \
    \  (fib (- n 1))\n                     (fib (- n 2))\n                     (fib\
    \ (- n 3))\n                     (fib (- n 4))\n                     (fib (- n\
    \ 5)))))))\n    (fib n)))\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((f (lambda (x) (if (eq? x 0) 1 (* x (prime_fib (- x 1)))))))\n    (f n)))\n\
    \n;; prime_fib_list returns a list of n-th Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((p (lambda (n)\n             (if (zero?\
    \ n)\n               1\n               (let ((f (lambda (n)\n                \
    \        (if (zero? n)\n                          1\n                        \
    \  (f (- n 1)\n                            (f (- n 2)\n                      \
    \        (f (- n 3)\n                                (f (- n 4)\n            \
    \                      (f (- n 5)\n                                    (f (- n\
    \ 6)\n                                      (f (- n 7)\n                     \
    \                   (f (- n 8)\n                                          (f (-\
    \ n 9)\n                                            (f (- n 10)\n            \
    \                                  (f (- n 11)\n                             \
    \                   (f (- n 12)\n                                            \
    \      (f (- n 13)))))))))))))))))))))))\n    (if (zero? n)\n      1\n      (f\
    \ n))))\n  (p n)))\n\n;; prime_fib_iter returns n-th number that is a Fibonacci\
    \ number and it's also prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter\
    \ 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n\
    ;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib\
    \ (- n 1)))))\n        (prime? (lambda (n) (if (zero? n) #t (fib n))))\n     \
    \   (prime? (lambda (n) (if (zero? n) #t (fib (- n 1))))))\n  (fib n)))\n\n;;\
    \ prime_fib_iter returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;;\
    \ >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter\
    \ 5)\n;; 89", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n     \
    \   (prime? (lambda (n) (if (zero? n) true (fib (modulo n 2))))))\n    (fib n)))\n\
    \n;; prime_fib_list returns a list of n-th Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; (2)\n;; >>> (prime_fib_list 2)\n;; (3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; (5 13)\n;; >>> (prime_fib_list 4)\n;; (13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; (89 1389)", "  (let ((result (+ (fib n) 1)))\n    (if\
    \ (even? result)\n      result\n      (if (prime? result)\n        result\n  \
    \      (prime_fib (+ result result))))))\n\n;; prime_fib_list returns a list of\
    \ n-th Fibonacci numbers that are prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((n1 (fib n))\n        (n2 (fib (sub1 n))))\n    (if (zero? n2)\n      (return\
    \ n1)\n      (return (if (zero? n1)\n                  (return n2)\n         \
    \         (prime_fib (add1 n1)))))))\n\n;; prime_fib_list returns a list of n-th\
    \ numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime?\
    \ (lambda (n) (if (not (modulo n 2)) true (false))))\n        (fib n))\n  )\n\
    )\n\n;; prime_fib_list returns a list of n-th numbers that are Fibonacci numbers\
    \ and they're also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n)\
    \ (if (zero? n) 1 (prime_fib (- n 1)))))\n        (result (lambda (n) (f n))))\n\
    \    (result n)))\n\n;; prime_fib_list returns a list of n-th Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda\
    \ (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda (n) (if (modulo\
    \ n 2) 0 1))))\n    (fib n)))\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are Fibonacci numbers and they're also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda\
    \ (n) (if (< n 2) true (fib (- n 1))))))\n    (if (prime? n)\n      (+ (fib n)\
    \ (fib (- n 1))))))\n\n;; prime_fib_list returns a list of n-th numbers that are\
    \ a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))))\n  \
    \  (if (not (even? n))\n      (return (fib n))\n      (return (fib (+ n 1)))))\n\
    )\n\n;; prime_fib_list returns a list of n-th numbers that are a Fibonacci numbers\
    \ and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((f (lambda (n)\n\
    \             (if (zero? n)\n               1\n               (let ((f (lambda\
    \ (n)\n                        (if (zero? n)\n                          1\n  \
    \                        (f (- n 1) (* n (f (- n 1))))))))\n                 \
    \  (f n))))))\n    (f n)))\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((p (lambda (n)\n             (if (zero? n)\n               1\n        \
    \       (if (zero? (modulo n 2))\n                   (prime_fib (quotient n 2))\n\
    \                   (prime_fib (quotient (modulo n 2) 2))\n                  \
    \ (prime_fib (quotient (modulo n 3) 2))\n                   (prime_fib (quotient\
    \ (modulo n 5) 2))\n                   (prime_fib (quotient (modulo n 7) 2))\n\
    \                   (prime_fib (quotient (modulo n 11) 2))\n                 \
    \  (prime_fib (quotient (modulo n 13) 2))\n                   (prime_fib (quotient\
    \ (modulo n 17) 2))\n                   (prime_fib (quotient (modulo n 19) 2))\n\
    \                   (prime_fib (quotient (modulo n 23) 2))\n                 \
    \  (prime_fib (quotient (modulo n 29) 2))\n                   (prime_fib (quotient\
    \ (modulo n 31) 2))\n                   (prime_fib (quotient (modulo n 37) 2))\n\
    \                   (prime_fib (quotient (modulo n 41) 2))\n                 \
    \  (prime_fib (quotient (modulo n 43) 2))\n                   (prime_fib (quotient\
    \ (modulo n 47) 2))\n                   (prime_fib (quotient (modulo n 53) 2))\n\
    \                   (prime_fib (quotient (modulo n 59) 2))\n                 \
    \  (prime_fib (quotient (modulo n 61) 2))\n                   (prime_fib (quotient\
    \ (modulo n 67) 2))\n                   (prime_fib (quotient (modulo n 71) 2))\n\
    \                   (prime_fib (quotient (modulo n 73) 2))\n                 \
    \  (prime_fib (quotient (modulo n 79) 2))\n                   (prime_fib (quotient\
    \ (modulo n 83) 2))\n                   (prime_fib (quotient (modulo n 89) 2))))\n\
    \             (if (zero?", "  (let ((fib (lambda (n)\n               (if (< n\
    \ 2)\n                 1\n                 (fib (- n 1)))))\n       (if (not (even?\
    \ n))\n         (return (fib n)))\n       (return (fib (+ n 1))))))\n\n;; prime_fib_list\
    \ returns a list of prime numbers.\n;; >>> (prime_fib_list 1)\n;; '(2)'\n;; >>>\
    \ (prime_fib_list 2)\n;; '(3)'\n;; >>> (prime_fib_list 3)\n;; '(5)'\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13)'\n;; >>> (prime_fib_list 5)\n;; '(89)'", "  (let ((fib (lambda\
    \ (n)\n               (if (zero? n)\n                 1\n                 (fib\
    \ (- n 1))))))\n    (if (zero? n)\n      1\n      (fib (- n 1)))))\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>>\
    \ (prime_fib_list 5)\n;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib\
    \ (- n 1)))))\n        (prime? (lambda (n) (if (not (modulo n 2)) true (prime?\
    \ (modulo n 2))))))\n    (fib n)))\n\n;; prime_fib_iter returns n-th number that\
    \ is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n\
    ;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter\
    \ 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((fib (lambda (n) (if\
    \ (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda (n) (if (modulo n 2) 0 1))))\n\
    \    (fib n)))\n\n;; prime_fib_list returns a list of all prime numbers that are\
    \ less than n.\n;; >>> (prime_fib_list 10)\n;; #(2 3 5 7 11 13 17 19 23 29 31\
    \ 37 41 43 47)", "  (let ((p (lambda (n)\n             (if (zero? n)\n       \
    \        (return 1)\n               (if (zero? (modulo n 2))\n               \
    \  (return n)\n                 (return (prime_fib (- n 1)))))\n             (if\
    \ (zero? (modulo n 3))\n               (return n)\n               (return (prime_fib\
    \ (- n 2)))))\n             (if (zero? (modulo n 5))\n               (return n)\n\
    \               (return (prime_fib (- n 3)))))\n             (if (zero? (modulo\
    \ n 7))\n               (return n)\n               (return (prime_fib (- n 4)))))\n\
    \             (if (zero? (modulo n 11))\n               (return n)\n         \
    \      (return (prime_fib (- n 5)))))\n             (if (zero? (modulo n 13))\n\
    \               (return n)\n               (return (prime_fib (- n 6)))))\n  \
    \           (if (zero? (modulo n 17))\n               (return n)\n           \
    \    (return (prime_fib (- n 7)))))\n             (if (zero? (modulo n 19))\n\
    \               (return n)\n               (return (prime_fib (- n 8)))))\n  \
    \           (if (zero? (modulo n 23))\n               (return n)\n           \
    \    (return (prime_fib (- n 9)))))\n             (if (zero? (modulo n 29))\n\
    \               (return n)\n               (return (prime_fib (- n 10)))))\n \
    \            (if (zero? (modulo n 31))\n               (return n)\n          \
    \     (return (prime_fib (- n 11)))))\n             (if (zero? (modulo n 37))\n\
    \               (return n)\n               (return (prime_fib (- n 12)))))\n \
    \            (if (zero? (modulo n 41))\n               (return n)\n          \
    \     (return (prime_fib (- n 13)))))\n             (if (zero? (modulo n 43))\n\
    \               (return n)\n               (return (prime_fib (- n 14)))))\n \
    \            (if (zero? (modulo n 47))\n               (return n)\n          \
    \     (return (prime", "  (let ((n1 (fib n)))\n    (if (zero? n1)\n      (return\
    \ n1)\n      (let ((n2 (fib (sub1 n1))))\n        (if (zero? n2)\n          (return\
    \ n2)\n          (return (fib (add1 n1))))))))\n\n;; prime_fib_list returns a\
    \ list of n-th numbers that are a Fibonacci numbers and it's also prime.\n;; >>>\
    \ (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list\
    \ 3)\n;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list\
    \ 5)\n;; '(89)", "  (let ((fib (lambda (n)\n               (if (zero? n)\n   \
    \              1\n                 (if (zero? (sub1 n))\n                    \
    \ n\n                     (fib (- n 1)))))\n            (lambda (n)\n        \
    \       (if (zero? n)\n                 1\n                 (if (zero? (sub1 n))\n\
    \                     n\n                     (fib (- n 1)))))\n            (lambda\
    \ (n)\n               (if (zero? n)\n                 1\n                 (if\
    \ (zero? (sub1 n))\n                     n\n                     (fib (- n 1)))))\n\
    \            (lambda (n)\n               (if (zero? n)\n                 1\n \
    \                (if (zero? (sub1 n))\n                     n\n              \
    \       (fib (- n 1)))))\n            (lambda (n)\n               (if (zero? n)\n\
    \                 1\n                 (if (zero? (sub1 n))\n                 \
    \    n\n                     (fib (- n 1)))))\n            (lambda (n)\n     \
    \          (if (zero? n)\n                 1\n                 (if (zero? (sub1\
    \ n))\n                     n\n                     (fib (- n 1)))))\n       \
    \     (lambda (n)\n               (if (zero? n)\n                 1\n        \
    \         (if (zero? (sub1 n))\n                     n\n                     (fib\
    \ (- n 1)))))\n            (lambda (n)\n               (if (zero? n)\n       \
    \          1\n                 (if (zero? (sub1 n))\n                     n\n\
    \                     (fib (- n 1)))))\n            (lambda (n)\n            \
    \   (if (zero? n)\n                 1\n                 (if (zero? (sub1 n))\n\
    \                     n\n                     (fib (- n 1)))))\n            (lambda\
    \ (n)\n               (if (zero? n)\n                 1\n                 (if\
    \ (zero? (sub1 n))\n                     n\n                     (fib (- n 1)))))\n\
    \            (lambda (n)\n               (if (zero? n)\n                 1\n \
    \                (if (zero? (sub1 n))\n                     n\n              \
    \       (fib (- n 1)))))\n            (lambda (n)\n               (if (zero? n)\n\
    \                 1\n                 (if (", "  (let ((fib (lambda (n) (if (<\
    \ n 2) 1 (fib (- n 1)))))\n        (prime? (lambda (n) (if (modulo n 2) 0 1))))\n\
    \    (fib n)))\n\n;; prime_fib_list returns a list of n-th numbers that are a\
    \ Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n;; '(2)\n\
    ;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5 13)\n\
    ;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((n (if (< n 0) (fib (- n 1)) n)))\n    (if (not (even? n))\n      (if (not\
    \ (prime? (fib n)))\n        (return (+ (fib (sub1 n)) (prime_fib (- n 1))))\n\
    \      (return (fib n))))))\n\n;; prime_fib_list returns a list of prime numbers.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3)\n;; >>>\
    \ (prime_fib_list 3)\n;; '(5)\n;; >>> (prime_fib_list 4)\n;; '(13)\n;; >>> (prime_fib_list\
    \ 5)\n;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib\
    \ (- n 2)))))))\n    (if (not (even? n))\n      (return (fib n))\n      (return\
    \ (fib (add n 1)))))\n)\n\n;; prime_fib_list returns a list of prime numbers.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2)'\n;; >>> (prime_fib_list 2)\n;; '(3, 5)'\n\
    ;; >>> (prime_fib_list 3)\n;; '(5, 13, 89)'\n;; >>> (prime_fib_list 4)\n;; '(13,\
    \ 89, 1389)'\n;; >>> (prime_fib_list 5)\n;; '(89, 1389, 13897, 138979, 1389791,\
    \ 13897913, 13897919, 13897919, 138979197, 1389791913, 1389791917, 1389791917,\
    \ 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917,\
    \ 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917,\
    \ 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917,\
    \ 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917,\
    \ 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917,\
    \ 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917, 1389791917,\
    \ 1389791917, 1389791917, 1389791917, 1389791917, 13", "  (let ((f (lambda (n)\
    \ (if (zero? n) 1 (prime_fib (- n 1)))))\n        (p (lambda (n) (if (zero? n)\
    \ 1 (prime_fib (- n 2)))))\n        (g (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 3)))))\n        (h (lambda (n) (if (zero? n) 1 (prime_fib (- n 4)))))\n\
    \        (i (lambda (n) (if (zero? n) 1 (prime_fib (- n 5)))))\n        (j (lambda\
    \ (n) (if (zero? n) 1 (prime_fib (- n 6)))))\n        (k (lambda (n) (if (zero?\
    \ n) 1 (prime_fib (- n 7)))))\n        (l (lambda (n) (if (zero? n) 1 (prime_fib\
    \ (- n 8)))))\n        (m (lambda (n) (if (zero? n) 1 (prime_fib (- n 9)))))\n\
    \        (n (lambda (n) (if (zero? n) 1 (prime_fib (- n 10))))))\n  (+ (f n) (f\
    \ (- n 1)) (p n) (g n) (h n) (i n) (j n) (k n) (l n) (m n) (n n)))\n)\n\n;; prime_fib_list\
    \ returns a list of n-th numbers that are a Fibonacci numbers and it's also prime.\n\
    ;; >>> (prime_fib_list 1)\n;; '(2 3 5 13 89)\n;; >>> (prime_fib_list 2)\n;; '(3\
    \ 5 13 89)\n;; >>> (prime_fib_list 3)\n;; '(5 13 89)\n;; >>> (prime_fib_list 4)\n\
    ;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)", "  (let ((n (if (zero? n) 1\
    \ (prime_fib (- n 1)))))\n    (if (zero? n)\n      1\n      (if (zero? (modulo\
    \ n 2))\n        (+ (prime_fib (- n 1)) (prime_fib (- n 2)))\n        (+ (prime_fib\
    \ (- n 1)) (prime_fib (- n 3)))\n        (+ (prime_fib (- n 2)) (prime_fib (-\
    \ n 4)))\n        (+ (prime_fib (- n 3)) (prime_fib (- n 5)))\n        (+ (prime_fib\
    \ (- n 4)) (prime_fib (- n 6)))\n        (+ (prime_fib (- n 5)) (prime_fib (-\
    \ n 7)))\n        (+ (prime_fib (- n 6)) (prime_fib (- n 8)))\n        (+ (prime_fib\
    \ (- n 7)) (prime_fib (- n 9)))\n        (+ (prime_fib (- n 8)) (prime_fib (-\
    \ n 10)))\n        (+ (prime_fib (- n 9)) (prime_fib (- n 11)))\n        (+ (prime_fib\
    \ (- n 10)) (prime_fib (- n 12)))\n        (+ (prime_fib (- n 11)) (prime_fib\
    \ (- n 13)))\n        (+ (prime_fib (- n 12)) (prime_fib (- n 14)))\n        (+\
    \ (prime_fib (- n 13)) (prime_fib (- n 15)))\n        (+ (prime_fib (- n 14))\
    \ (prime_fib (- n 16)))\n        (+ (prime_fib (- n 15)) (prime_fib (- n 17)))\n\
    \        (+ (prime_fib (- n 16)) (prime_fib (- n 18)))\n        (+ (prime_fib\
    \ (- n 17)) (prime_fib (- n 19)))\n        (+ (prime_fib (- n 18)) (prime_fib\
    \ (- n 20)))\n        (+ (prime_fib (- n 19)) (prime_fib (- n 21)))\n        (+\
    \ (prime_fib (- n 20)) (prime_fib (- n 22)))\n        ", "  (let ((result (+ (fib\
    \ n) (fib (- n 1))))\n         (is_prime? (mod result 2)))\n    (if is_prime?\n\
    \      result\n      (prime_fib (- n 1)))))\n\n;; prime_fib_list returns a list\
    \ of n-th numbers that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list\
    \ 1)\n;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n\
    ;; '(5 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n\
    ;; '(89)", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime?\
    \ (lambda (n) (if (< n 2) true (fib (- n 1))))))\n    (if (prime? n)\n      (+\
    \ (fib n) (fib (- n 1))))))\n\n;; prime_fib_list returns a list of n-th numbers\
    \ that are a Fibonacci numbers and it's also prime.\n;; >>> (prime_fib_list 1)\n\
    ;; '(2)\n;; >>> (prime_fib_list 2)\n;; '(3 5)\n;; >>> (prime_fib_list 3)\n;; '(5\
    \ 13)\n;; >>> (prime_fib_list 4)\n;; '(13 89)\n;; >>> (prime_fib_list 5)\n;; '(89)",
  "  (let ((n1 (fib n))\n        (n2 (fib (+ n 1))))\n    (if (zero? n2)\n      (return\
    \ n1)\n      (if (zero? n1)\n        (return n2)\n        (if (eq? n1 n2)\n  \
    \        (return n1)\n          (return (+ n1 n2)))))))\n\n;; prime_fib_list returns\
    \ a list of prime numbers.\n;; >>> (prime_fib_list 1)\n;; '(2)'\n;; >>> (prime_fib_list\
    \ 2)\n;; '(3 5)'\n;; >>> (prime_fib_list 3)\n;; '(5 13)'\n;; >>> (prime_fib_list\
    \ 4)\n;; '(13 89)'\n;; >>> (prime_fib_list 5)\n;; '(89 1361)'", "  (let ((n (if\
    \ (zero? n) 1 (prime_fib (- n 1)))))\n    (if (zero? n)\n      1\n      (if (zero?\
    \ (modulo n 2))\n        (+ (prime_fib (- n 1)) (prime_fib (- n 2)))\n       \
    \ (+ (prime_fib (- n 1)) (prime_fib (- n 3)))\n        (+ (prime_fib (- n 1))\
    \ (prime_fib (- n 4)))\n        (+ (prime_fib (- n 1)) (prime_fib (- n 5)))))))\n\
    \n;; prime_fib_iter returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n;; >>> (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;;\
    \ >>> (prime_fib_iter 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter\
    \ 5)\n;; 89", "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n     \
    \   (prime? (lambda (n) (if (not (modulo n 2)) (fib n))))))\n\n;; prime_fib_iter\
    \ returns n-th number that is a Fibonacci number and it's also prime.\n;; >>>\
    \ (prime_fib_iter 1)\n;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter\
    \ 3)\n;; 5\n;; >>> (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89",
  "  (let ((fib (lambda (n) (if (< n 2) 1 (fib (- n 1)))))\n        (prime? (lambda\
    \ (n) (if (not (modulo n 2)) (fib n))))))\n\n;; prime_fib_iter returns n-th number\
    \ that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_iter 1)\n\
    ;; 2\n;; >>> (prime_fib_iter 2)\n;; 3\n;; >>> (prime_fib_iter 3)\n;; 5\n;; >>>\
    \ (prime_fib_iter 4)\n;; 13\n;; >>> (prime_fib_iter 5)\n;; 89", "  (let ((fib\
    \ (lambda (n)\n               (if (zero? n)\n                 1\n            \
    \     (if (zero? (sub1 n))\n                     n\n                     (fib\
    \ (- n 1)))))\n           (prime? (lambda (n)\n                    (if (zero?\
    \ n)\n                       true\n                       (not (modulo n 2)))))\n\
    \           (lambda (n)\n             (if (zero? n)\n                 1\n    \
    \             (if (zero? (sub1 n))\n                     n\n                 \
    \    (fib (- n 1)))))))\n  (fib n)))\n\n;; prime_fib_iterative returns n-th number\
    \ that is a Fibonacci number and it's also prime.\n;; >>> (prime_fib_iterative\
    \ 1)\n;; 2\n;; >>> (prime_fib_iterative 2)\n;; 3\n;; >>> (prime_fib_iterative\
    \ 3)\n;; 5\n;; >>> (prime_fib_iterative 4)\n;; 13\n;; >>> (prime_fib_iterative\
    \ 5)\n;; 89", "  (let ((f (lambda (n) (if (zero? n) 1 (prime_fib (- n 1)))))\n\
    \        (p (lambda (n) (if (zero? n) 1 (prime_fib (- n 2)))))\n        (i 0))\n\
    \    (if (zero? n)\n      1\n      (begin\n        (set! i (+ i 1))\n        (if\
    \ (zero? i)\n          (begin\n            (set! i (+ i 1))\n            (if (zero?\
    \ i)\n              1\n              (begin\n                (set! i (+ i 1))\n\
    \                (if (zero? i)\n                  1\n                  (begin\n\
    \                    (set! i (+ i 1))\n                    (if (zero? i)\n   \
    \                   1\n                      (begin\n                        (set!\
    \ i (+ i 1))\n                        (if (zero? i)\n                        \
    \  1\n                          (begin\n                            (set! i (+\
    \ i 1))\n                            (if (zero? i)\n                         \
    \     1\n                              (begin\n                              \
    \  (set! i (+ i 1))\n                                (if (zero? i)\n         \
    \                         1\n                                  (begin\n      \
    \                              (set! i (+ i 1))\n                            \
    \        (if (zero? i)\n                                      1\n            \
    \                          (begin\n                                        (set!\
    \ i (+ i 1))\n                                        (if (zero? i)\n        \
    \                                  1\n                                       \
    \   (begin\n                                            (set! i (+ i 1))\n   \
    \                                         (if (zero? i)\n                    \
    \                          1\n                                              (begin\n\
    \                                                (set! i (+ i 1))\n          \
    \                                      (if (zero? i)\n                       \
    \                           1\n                                              \
    \    (begin\n                                                   (set! i (+ i 1))\n\
    \                                                   (if (zero? i)\n          \
    \                                           1\n                              \
    \                       (begin\n                                             \
    \          (set! i (+ i 1))\n                                                \
    \       (if (zero? i)\n                                                      \
    \   1\n                                                         (begin\n     \
    \                              "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
