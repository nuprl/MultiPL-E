{
  "name": "HumanEval_16_count_distinct_characters",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4\n(define (count_distinct_characters string)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_distinct_characters))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abcde\") 5)\n    (check-equal? (candidate \"abcdecadeCADE\") 5)\n    (check-equal? (candidate \"aaaaAAAAaaaa\") 1)\n    (check-equal? (candidate \"Jerry jERRY JeRRRY\") 5)\n))\n\n(test-humaneval)",
  "completions": [
    "  (let ((counts (map (lambda (c) (string-ci=? c string))) (string-ci=? #\\space #\\space)))\n    (reduce (lambda (a b) (+ a b)) 0 counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (hashtable-set! counts (string-ref string i) 1)\n        )\n      )\n    (hashtable-size counts)\n    )\n  )\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setq counts (hashtable-ref counts i)\n          (hashtable-put counts (string-downcase i) (hashtable-ref counts (string-downcase i))))\n        (setq i (string-next i))))\n    (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (length counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))\n      (values counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))))\n  counts)\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (1 + i))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c)))))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-ref string i)) + 1)\n        (set! i (1+ i)))))\n  (number (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (if (hashtable-has-key? counts string/:i)\n          (set! counts (hashtable-ref counts string/:i))\n          (hashtable-put! counts string/:i 1)))))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (1+ i))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) 1))))\n    (hashtable-keys counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) (hashtable-ref counts c)))\n          (setf i (1+ i)))\n        (hashtable-keys counts)))\n    (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (hashtable-size counts)\n  ))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (string-split string \"\")\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      (hash-table-count counts)))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set-hash-table-contents counts string/1 i)\n        (set-hash-table-contents counts (string/1 i) i)\n        (set-hash-table-contents counts (string/2 i) i)\n        (set-hash-table-contents counts (string/3 i) i)\n        (set-hash-table-contents counts (string/4 i) i)\n        (set-hash-table-contents counts (string/5 i) i)\n        (set-hash-table-contents counts (string/6 i) i)\n        (set-hash-table-contents counts (string/7 i) i)\n        (set-hash-table-contents counts (string/8 i) i)\n        (set-hash-table-contents counts (string/9 i) i)\n        (set-hash-table-contents counts (string/10 i) i)\n        (set-hash-table-contents counts (string/11 i) i)\n        (set-hash-table-contents counts (string/12 i) i)\n        (set-hash-table-contents counts (string/13 i) i)\n        (set-hash-table-contents counts (string/14 i) i)\n        (set-hash-table-contents counts (string/15 i) i)\n        (set-hash-table-contents counts (string/16 i) i)\n        (set-hash-table-contents counts (string/17 i) i)\n        (set-hash-table-contents counts (string/18 i) i)\n        (set-hash-table-contents counts (string/19 i) i)\n        (set-hash-table-contents counts (string/20 i) i)\n        (set-hash-table-contents counts (string/21 i) i)\n        (set-hash-table-contents counts (string/22 i) i)\n        (set-hash-table-contents counts (string/23 i) i)\n",
    "  (let ((counts (make-hash-table)))\n    (for-each (lambda (character)\n                (hash-set! counts character (hash-get counts character #f)))\n      string))\n  (hash-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (hashtable-set! counts (string-ref string i) 1)\n      )\n    )\n    (hashtable-size counts)\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                (string-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 1)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 1)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 2)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 2)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 3)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 3)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 4)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 4)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 5)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 5)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 6)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 6)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 7)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 7)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 8)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 8)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 9)))\n        (set-hash-table-contents counts (string-upcase (string-",
    "  (let ((counts (make-hash-table #:test equal))\n         (i 0))\n    (while (< i string-length)\n      (set! i (+ i 1))\n      (hash-set! counts string-ref string i))\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      (hash-table-count counts))\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setq counts (hashtable-put counts i (hashtable-get counts i))))\n      (hashtable-size counts)))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents! counts i\n          (string-set! i (string-downcase (string-ref i 0))))\n        (set-hash-table-contents! counts (string-upcase (string-ref i 0)))))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                (string-char-to-integer (string-ref i 0))))\n      (hash-table-contents counts #f)))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))\n      (hashtable-size counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (not (string=? string \"\"))\n        (set! i (+ 1 i))\n        (hash-set! counts (string-downcase (string-ref string i)) i)))\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each string string (hashtable-set! counts string)))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (string-for-each\n      (lambda (character)\n        (hashtable-put! counts character)\n      )\n      string))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (hashtable-set! counts (string-ref string i) 1)\n      )\n    )\n    (hashtable-size counts)\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (i + 1))\n        (if (hashtable-has-key? counts string/1 string/i)\n          (set! counts (hashtable-ref counts string/1 string/i))\n          (hashtable-put! counts string/1 string/i 1)))))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (string-for-each (lambda (character)\n                      (hash-set! counts character (hash-ref counts character 0)))\n      string)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))))\n  counts)\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (get hash counts i)\n          (if (null? (get hash i))\n            (setf (get hash i) 1)\n            (setf (get hash i)\n              (getf (get hash i)\n                (+ (getf (get hash i) 1)\n                  (getf (get hash i) 2)\n                  (getf (get hash i) 3))))))))))\n  (get counts string)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (string-for-each (lambda (character)\n                      (hash-table-put! counts character))\n      string)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (map (lambda (c) (string-ci=? c string))))\n         (result 0))\n    (for-each (lambda (c) (set! result (+ result (counts c))))\n           (string-ci=? c string)))\n  result)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (if (hashtable-has-key? counts string-ref string i)\n          (set! counts (hashtable-remove counts string-ref string i)))\n          (hashtable-put counts string-ref string i)))\n    (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))\n      (hash-table-size counts)\n      ))\n  )\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      (hash-table-count counts)))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))\n      (hashtable-size counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      (counts)))\n  (counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (gethash i (first i))\n          (if (null? (first (cdr i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (length counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (hash-set! counts char-downcase (char-downcase string[i])))))\n  (hash-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      (counts)))\n  (counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (map (lambda (c) (string-ci=? c string)) '#:a)))\n    (reduce (lambda (a b) (string-ci=? a b)) '#:a counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set! (hashtable-ref counts i) (hashtable-ref counts (string-upcase i)))\n        (set! i (string-next i))))\n    (hashtable-size counts)\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) (hashtable-get counts c)))\n          (setf i (+ i 1))))\n    (hashtable-size counts)\n  ))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (gethash i (first i)) (gethash (first i) (second i)) (setf counts (gethash counts (first i) (second i)) (setf counts (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (setf counts (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (setf counts (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (setf counts (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (setf counts (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (setf counts (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i) (second i)) (gethash counts (first i)",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))\n      (hashtable-size counts)\n      ))\n  )\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (length counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))))\n  counts)\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) 1)))))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (aref counts i)\n          (aref (aref counts i) (string-upper-case (string-ref i 1)))))))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (if (hashtable-has-key? counts c)\n            (setf (hashtable-ref counts c) (hashtable-ref counts c) + 1)\n            (hashtable-put counts c 1)))\n        (setf i (i + 1)))\n      (hashtable-keys counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                  (string-set-ci i (string-ci i)))\n        (set-hash-table-contents counts (string-ci i))\n        (string-set-ci i (string-ci i) #\\0)))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-ref string i)))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (reduce (lambda (a b) (hashtable-ref a b)) counts string-length)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (i + 1))\n        (let ((c (string-ref string i)))\n          (hash-set! counts c c))))\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (not (null? string))\n        (set! i (+ 1 i))\n        (set-hash-table! counts string i)\n        (set! string (cdr string))))\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (1 + i))\n        (hashtable-set! counts (string-ref string i) (hashtable-ref counts (string-ref string i)))))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each string string\n      (hashtable-put! counts string)))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (if (hashtable-has-key? counts string/1 i)\n          (set! counts (hashtable-ref counts string/1 i))\n          (hashtable-put! counts string/1 i 1)))\n      (hashtable-size counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each string string\n      (hashtable-set! counts (string-downcase (string-upcase string)) 1)))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (if (hashtable-has-key? counts string/1 i)\n          (set! counts (hashtable-ref counts string/1 i))\n          (hashtable-set! counts string/1 i 1)))))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (for-each (lambda (character)\n                (hash-set! counts character (hash-get counts character #f)))\n      string))\n  (hash-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setq counts (hash-set! counts i (hash-get counts i))))\n      (hash-size counts)))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (1+ i))\n        (let ((c (string-ref string i)))\n          (if (not (hashtable-has-key? counts c))\n              (hashtable-put! counts c 1)\n              (hashtable-ref counts c)\n              (hashtable-put! counts c (hashtable-ref counts c) + 1)))))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) (hashtable-ref counts c)))\n          (setf i (+ i 1)))\n        (hashtable-keys counts))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))\n      (counts)))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (if (hashtable-has-key? counts string/1 i)\n          (set! counts (hashtable-ref counts string/1 i))\n          (hashtable-put! counts string/1 i 1)))\n      (hashtable-size counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (length counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (not (string=? string \"\"))\n        (set! i (+ i 1))\n        (hash-set! counts (char-code (string-ref string i)) 1))\n      (hash-size counts)))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i))\n             (if (not (string-ci=? (string-ref string i)))\n               (set! (aref counts (string-ref string i)) 1)\n               (set! (aref counts (string-ref string i))\n                    (aref counts (string-ref string i)) + 1))))\n        (set! i (i + 1))))\n  (reduce (lambda (counts) (hash-table-count counts)) counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each (lambda (character)\n                (hashtable-put! counts character)\n              (string-to-list character))\n      string))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table #:test equal))\n         (chars (string->list string)))\n    (for-each (lambda (char)\n                (hash-set! counts char (hash-get counts char)))\n      chars)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (if (hashtable-has-key? counts string/:i)\n          (set! counts (hashtable-ref counts string/:i))\n          (hashtable-put counts string/:i 1)))\n      (hashtable-size counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1+ (aref counts (string-ref string i))))\n        (set! i (1+ i)))\n      (values counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each string string\n      (hashtable-set! counts (string-downcase string) 1)))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))\n      (hashtable-size counts)\n      ))\n  )\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      (counts)))\n  (counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (if (hash-table-contains? counts string/1 string/i)\n          (set-hash-table-contains! counts string/1 string/i #t)\n          (set-hash-table-contains! counts string/1 #f string/i))))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-ref counts c)))\n        (setf i (1+ i)))\n      (hashtable-size counts)))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      (hash-table-count counts)))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (hashtable-set! counts (string-ref string i) 1)\n      )\n    )\n    (hashtable-size counts)\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set! (hashtable-ref counts i)\n           (hashtable-ref counts (string-upcase i)))\n        (set! i (string-next i)))\n      (hashtable-ref counts #\\NIL))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setq counts (hashtable-ref counts i)\n          (setq i (string-ci (next i)))))))\n    (hashtable-size counts)\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (i + 1))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) 1))))\n    (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hashtable! counts (string-ci-upcase i))\n        (set-hashtable! counts (string-ci-downcase i))\n        (set-hashtable! counts (string-ci-titlecase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-ci-upcase i))\n        (set-hashtable! counts (string-ci-downcase i))\n        (set-hashtable! counts (string-ci-titlecase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-ci-upcase i))\n        (set-hashtable! counts (string-ci-downcase i))\n        (set-hashtable! counts (string-ci-titlecase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-ci-upcase i))\n        (set-hashtable! counts (string-ci-downcase i))\n        (set-hashtable! counts (string-ci-titlecase i))\n        (set-hashtable!",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (string? string)\n        (set! i (+ i 1))\n        (hashtable-set! counts (char->string (string-ref string i)) 1))\n      (hashtable-size counts)))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (gethash i (first i))\n          (if (null? (first (cdr i)))\n            (setf (gethash (first i) (first (first i))) (cons 1 (gethash (first i) (first (first i)))))))\n          (setf (gethash (first i) (first (first i))) (cons 1 (gethash (first i) (first (first i)))))))\n      (hashtable-size counts)\n    )\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (string-for-each (lambda (character)\n                      (hashtable-put! counts character))\n       string)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                (string-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-downcase (string-ref i 0))))\n        (set-hash-table-contents counts (string-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents! counts i\n                                  (hash-table-ref counts i))\n        (set-hash-table-contents! counts (string-upcase i))\n        (set-hash-table-contents! counts (string-downcase i))\n        (set-hash-table-contents! counts (string-capitalize i))\n        (set-hash-table-contents! counts (string-titlecase i))\n        (set-hash-table-contents! counts (string-swapcase i))\n        (set-hash-table-contents! counts (string-upcase i))\n        (set-hash-table-contents! counts (string-downcase i))\n        (set-hash-table-contents! counts (string-capitalize i))\n        (set-hash-table-contents! counts (string-titlecase i))\n        (set-hash-table-contents! counts (string-swapcase i))\n        (set-hash-table-contents! counts (string-upcase i))\n        (set-hash-table-contents! counts (string-downcase i))\n        (set-hash-table-contents! counts (string-capitalize i))\n        (set-hash-table-contents! counts (string-titlecase i))\n        (set-hash-table-contents! counts (string-swapcase i))\n        (set-hash-table-contents! counts (string-upcase i))\n        (set-hash-table-contents! counts (string-downcase i))\n        (set-hash-table-contents! counts (string-capitalize i))\n        (set-hash-table-contents! counts (string-titlecase i))\n        (set-hash-table-contents! counts (string-swapcase i))\n        (set-hash-table-contents! counts (string-upcase i))\n        (set-hash-table-contents! counts (string-downcase i))\n        (set-hash-table",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (if (hashtable-has-key? counts c)\n            (setf (hashtable-ref counts c) (hashtable-ref counts c) + 1)\n            (hashtable-put counts c 1)))\n        (setf i (i + 1)))\n      (hashtable-keys counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (length counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each (lambda (character)\n                (hashtable-put! counts character)\n              (string))\n      '#:case-folded))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                  (string-set-ci i #\\space #\\space))\n        (set-hash-table-contents counts (string-ci i) #\\space)\n        (set-hash-table-contents counts (string-ci (string-upcase i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-downcase i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-titlecase i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-capitalize i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-capitalize-first i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-capitalize-each i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-downcase-first i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-downcase-each i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-titlecase-first i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-titlecase-each i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-capitalize-first i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-capitalize-each i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-downcase-first i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-downcase-each i)) #\\space)\n        (set-hash-table-contents counts (string-ci (string-titlecase-first i)) #\\space",
    "  (let ((counts (make-hashtable)))\n    (string-for-each (lambda (character)\n                      (hashtable-put! counts character))\n       string)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (if (hashtable-has-key? counts c)\n            (setf (hashtable-ref counts c) (hashtable-ref counts c) + 1)\n            (hashtable-put counts c 1)))\n        (setf i (i + 1)))\n      (hashtable-keys counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i))\n          (string-ref string i))\n        (set! i (1+ i)))\n      counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-set! counts c (hash-",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1+ (aref counts (string-ref string i))))\n        (set! i (1+ i)))))\n  counts)\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-ref string i)))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (reduce (lambda (x y) (+ x y)) (string-length string) 0)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (i + 1))\n        (hashtable-set! counts (string-ref string i) 1)\n      )\n    )\n    (hashtable-size counts)\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (hash-table-put! counts c (hash-table-ref counts c)))\n        (setf i (1+ i)))\n      (hash-table-size counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (let ((c (string-ref string i)))\n          (hash-table-put! counts c (hash-table-ref counts c)))\n        )\n      )\n    (hash-table-size counts)\n    )\n  )\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hashtable! counts (string-downcase i) 1)\n        (set-hashtable! counts (string-upcase i) 1)\n        (set-hashtable! counts (string-titlecase i) 1)\n        (set-hashtable! counts (string-capitalize i) 1)\n        (set-hashtable! counts (string-capitalize-word i) 1)\n        (set-hashtable! counts (string-capitalize-sentence i) 1)\n        (set-hashtable! counts (string-capitalize-title i) 1)\n        (set-hashtable! counts (string-downcase i) 1)\n        (set-hashtable! counts (string-upcase i) 1)\n        (set-hashtable! counts (string-titlecase i) 1)\n        (set-hashtable! counts (string-capitalize i) 1)\n        (set-hashtable! counts (string-capitalize-word i) 1)\n        (set-hashtable! counts (string-capitalize-sentence i) 1)\n        (set-hashtable! counts (string-capitalize-title i) 1)\n        (set-hashtable! counts (string-downcase i) 1)\n        (set-hashtable! counts (string-upcase i) 1)\n        (set-hashtable! counts (string-titlecase i) 1)\n        (set-hashtable! counts (string-capitalize i) 1)\n        (set-hashtable! counts (string-capitalize-word i) 1)\n        (set-hashtable! counts (string-capitalize-sentence i) 1)\n        (set-hashtable! counts (string-capitalize-title i) 1)\n        (set-hashtable! counts (string-downcase i) 1)\n        (set-hashtable! counts (string-upcase i) 1)\n        (set-hashtable! counts (string-titlecase i) 1)\n        (set-hashtable! counts (string-capitalize i) 1)\n        (set-hashtable! counts",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1+ (aref counts (string-ref string i))))\n        (set! i (1+ i)))\n      (values counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))))\n  (number (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                  (string-ref i 0))\n        (set-hash-table-contents counts (string-upcase i)\n                                  (string-ref i 1))))\n    (hash-table-size counts)\n  ))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (string-for-each\n      (lambda (character)\n        (hashtable-put! counts character)\n      )\n      string))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (i + 1))\n        (hash-set! counts (string-ref string i) 1)))\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                  (string-set-ci i #\\space\n                                    (string-set-ci i #\\newline\n                                      (string-set-ci i #\\tab))))\n        (set-hash-table-contents counts (string-ci i))))\n    (hash-table-size counts)\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hashtable! counts (string-ci-upcase i))\n        (set-hashtable! counts (string-ci-downcase i))\n        (set-hashtable! counts (string-ci-titlecase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-upcase (string-ci-downcase i)))\n        (set-hashtable! counts (string-downcase (string-ci-upcase i)))\n        (set-hashtable! counts (string-titlecase (string-ci-titlecase i)))\n        (set-hashtable! counts (string-ci-titlecase (string-ci-downcase i)))\n        (set-hashtable! counts (string-ci-titlecase (string-ci-upcase i)))\n        (set-hashtable! counts (string-ci-downcase (string-ci-upcase i)))\n        (set-hashtable! counts (string-ci-downcase (string-ci-titlecase i)))\n        (set-hashtable! counts (string-ci-upcase (string-ci-titlecase i)))\n        (set-hashtable! counts (string-ci-upcase (string-ci-downcase i)))\n        (set-hashtable! counts (string-ci-downcase (string-ci-downcase i)))\n        (set-hashtable! counts (string-ci-upcase (string-ci-downcase i)))\n        (set-hashtable! counts (string-ci-downcase (string-ci-downcase i)))\n        (set-hashtable! counts (string-ci-upcase (string-ci-downcase i)))\n        (set-hashtable! counts (string-ci-downcase (string-ci-downcase i)))\n        (set-hashtable! counts (string-ci-upcase (string-ci-downcase i)))\n        (set-hashtable! counts",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1+ (aref counts (string-ref string i))))\n        (set! i (1+ i)))\n      (values counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c c))))\n    (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (1 + i))\n        (hash-set! counts (string-ref string i) 1)\n        )\n      )\n    (hash-table-count counts)\n    )\n  )\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (aref counts i)\n          (if (null? (aref counts i))\n            (setf (aref counts i) 1)\n            (aref counts i)\n            )))\n        (setf i (cdr i)))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (hashtable-set! counts (string-ref string i) 1)\n      )\n    )\n    (hashtable-size counts)\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i))\n          (string-ref string i))\n        (set! i (1+ i)))\n      (hash-table-count counts))\n    counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                  (string-set! i (string-downcase i)))\n        (set-hash-table-contents counts (string-upcase i))\n        (string-set! i (string-downcase i))))\n    (hash-table-count counts))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                (string-set-at i counts))\n        (set-hash-table-contents counts #\\\\space\n                                (string-set-at i #\\\\space counts))\n        (set-hash-table-contents counts #\\\\newline\n                                (string-set-at i #\\\\newline counts))\n        (set-hash-table-contents counts #\\\\return\n                                (string-set-at i #\\\\return counts))\n        (set-hash-table-contents counts #\\\\tab\n                                (string-set-at i #\\\\tab counts))\n        (set-hash-table-contents counts #\\\\space\n                                (string-set-at i #\\\\space counts))\n        (set-hash-table-contents counts #\\\\newline\n                                (string-set-at i #\\\\newline counts))\n        (set-hash-table-contents counts #\\\\return\n                                (string-set-at i #\\\\return counts))\n        (set-hash-table-contents counts #\\\\tab\n                                (string-set-at i #\\\\tab counts))\n        (set-hash-table-contents counts #\\\\space\n                                (string-set-at i #\\\\space counts))\n        (set-hash-table-contents counts #\\\\newline\n                                (string-set-at i #\\\\newline counts))\n        (set-hash-table-contents counts #\\\\return\n                                (string-set-at i #\\\\return counts))\n        (set-hash-table-contents counts #\\\\tab\n                                (string-set-at i #\\\\tab counts))\n        (set-hash-table-contents counts #\\\\space\n                                (string-set-at i #\\\\space counts))\n        (set-hash-table-contents counts #\\\\newline\n                                (string-set-at i #\\\\newline counts))\n        (set-hash-table-contents counts #\\\\return\n                                (string-set-at i #\\\\return counts))\n        (set-hash-table-contents counts",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-ref string i)) + 1)\n        (set! i (1 + i)))))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                (string-set-at i counts))\n        (set-hash-table-contents counts #\\\\space\n                                (string-set-at i #\\\\space counts))\n        (set-hash-table-contents counts #\\\\newline\n                                (string-set-at i #\\\\newline counts))\n        (set-hash-table-contents counts #\\\\return\n                                (string-set-at i #\\\\return counts))\n        (set-hash-table-contents counts #\\\\tab\n                                (string-set-at i #\\\\tab counts))\n        (set-hash-table-contents counts #\\\\space\n                                (string-set-at i #\\\\space counts))\n        (set-hash-table-contents counts #\\\\newline\n                                (string-set-at i #\\\\newline counts))\n        (set-hash-table-contents counts #\\\\return\n                                (string-set-at i #\\\\return counts))\n        (set-hash-table-contents counts #\\\\tab\n                                (string-set-at i #\\\\tab counts))\n        (set-hash-table-contents counts #\\\\space\n                                (string-set-at i #\\\\space counts))\n        (set-hash-table-contents counts #\\\\newline\n                                (string-set-at i #\\\\newline counts))\n        (set-hash-table-contents counts #\\\\return\n                                (string-set-at i #\\\\return counts))\n        (set-hash-table-contents counts #\\\\tab\n                                (string-set-at i #\\\\tab counts))\n        (set-hash-table-contents counts #\\\\space\n                                (string-set-at i #\\\\space counts))\n        (set-hash-table-contents counts #\\\\newline\n                                (string-set-at i #\\\\newline counts))\n        (set-hash-table-contents counts #\\\\return\n                                (string-set-at i #\\\\return counts))\n        (set-hash-table-contents counts",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (hashtable-size counts)\n  ))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      (hashtable-size counts)\n      ))\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (gethash i (first i))\n          (if (null? (first (cdr i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (first i)))\n            (setf (gethash (first i) (first (first i))) (car (",
    "  (let ((counts (make-hashtable)))\n    (for-each (lambda (character)\n                (hashtable-put! counts character)\n              (string-ref character))\n      string))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-ref string i)))\n        (set! (aref counts (string-ref string i)) 1)\n        (set! i (1 + i)))\n      (hashtable-size counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))))\n  counts)\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (string-split string \"\")\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (string-for-each\n      (lambda (character)\n        (hash-table-put! counts character #t))\n      string))\n  (hash-table-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))\n      (counts)))\n  (counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (if (hashtable-has-key? counts c)\n            (setf (hashtable-ref counts c) (hashtable-ref counts c) + 1)\n            (hashtable-put counts c 1)))\n        (setf i (i + 1)))\n      (hashtable-keys counts)))\n)\n\n;; Given a string, find out how many distinct words (regardless of case) does it consist of\n;; >>> (count_distinct_words \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_words \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-ref string i)))\n        (set! (aref counts (string-upcase (string-ref string i))) (aref counts (string-upcase (string-ref string i))))\n        (set! (aref counts (string-downcase (string-ref string i))) (aref counts (string-downcase (string-ref string i))))\n        (set! (aref counts (string-capitalize (string-ref string i))) (aref counts (string-capitalize (string-ref string i))))\n        (set! i (1+ i)))\n      (return (hashtable-size counts))))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) 1)))))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i))\n          (string-ref string i))\n        (set! i (1+ i)))\n      counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                (string-ci-less? (string-ref i 0) (string-ref i 1)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 1) (string-ref i 2)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 2) (string-ref i 3)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 3) (string-ref i 4)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 4) (string-ref i 5)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 5) (string-ref i 6)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 6) (string-ref i 7)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 7) (string-ref i 8)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 8) (string-ref i 9)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 9) (string-ref i 10)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 10) (string-ref i 11)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 11) (string-ref i 12)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 12) (string-ref i 13)))\n        (set-hash-table-contents counts (string-ci-less? (string-ref i 13) (string-ref i 14)))\n        (set-hash-table-contents counts (string",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (aref counts i)\n          (aref (aref counts i) (string-downcase (string-upcase i)))))))\n  counts)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (i + 1))\n        (if (hashtable-has-key? counts string/1 string/i)\n          (set! counts (hashtable-ref counts string/1 string/i))\n          (hashtable-put! counts string/1 string/i 1)))\n      (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))))\n  (number (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) (hashtable-ref counts c)))\n          (setf i (1+ i)))\n        (hashtable-keys counts)))\n    (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (not (string=? string \"\"))\n        (set-hash-table-contents counts (string-ref string i))\n        (set-hash-table-contents counts (string-upcase (string-ref string i)))\n        (set-hash-table-contents counts (string-downcase (string-ref string i)))\n        (set-hash-table-contents counts (string-capitalize (string-ref string i)))\n        (set-hash-table-contents counts (string-append (string-ref string i) \"-\"))\n        (set-hash-table-contents counts (string-append (string-upcase (string-ref string i)) \"-\"))\n        (set-hash-table-contents counts (string-append (string-downcase (string-ref string i)) \"-\"))\n        (set-hash-table-contents counts (string-append (string-capitalize (string-ref string i)) \"-\"))\n        (set-hash-table-contents counts (string-append (string-ref string i) \"-\"))\n        (set-hash-table-contents counts (string-append (string-upcase (string-ref string i)) \"-\"))\n        (set-hash-table-contents counts (string-append (string-downcase (string-ref string i)) \"-\"))\n        (set-hash-table-contents counts (string-append (string-capitalize (string-ref string i)) \"-\"))\n        (set-hash-table-contents counts (string-append (string-ref string i) \"-\"))\n        (set-hash-table-contents counts (string-append (string-upcase (string-ref string i)) \"-\"))\n        (set-hash-table-contents counts (string-append (string-downcase (string-ref string i)) \"-\"))\n        (set-hash-table-contents counts (string-append (string-capitalize (string-ref string i)) \"-\"))\n        (set-hash-table-contents counts (string-append (string-ref string i) \"-\"))\n        (",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (hash-set! counts (string-ref string i) 1)\n      )\n    )\n    (hash-table-count counts)\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (string? string)\n        (string:= (first string)\n          (hashtable-set! counts (string:= (string:= string #\\space) i)\n            (string:= (string:= string #\\newline) i)\n            (string:= (string:= string #\\return) i)\n            (string:= (string:= string #\\tab) i)\n            (string:= (string:= string #\\newpage) i)\n            (string:= (string:= string #\\pagebreak) i)\n            (string:= (string:= string #\\vpage) i)\n            (string:= (string:= string #\\vspace) i)\n            (string:= (string:= string #\\vfill) i)\n            (string:= (string:= string #\\vrule) i)\n            (string:= (string:= string #\\vbox) i)\n            (string:= (string:= string #\\vboxrule) i)\n            (string:= (string:= string #\\vboxfill) i)\n            (string:= (string:= string #\\vboxfillrule) i)\n            (string:= (string:= string #\\vline) i)\n            (string:= (string:= string #\\vrule) i)\n            (string:= (string:= string #\\vrulefill) i)\n            (string:= (string:= string #\\vrulefillrule) i)\n            (string:= (string:= string #\\vline) i)\n            (string:= (string:= string #\\vlinefill) i)\n            (string:= (string:= string #\\vlinefillrule) i)\n            (string:= (string:= string #\\vlinefill) i)\n            (string:= (string:= string #\\vlinefillrule) i)\n            (string:= (string:= string #\\vlinefill) i)\n            (string:= (string:= string #\\vlinefillrule) i)\n            ",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (1+ i))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) 1)))))\n  (hashtable-size counts)\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      (counts)))\n  (counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (reduce (lambda (a b) (hash-set! a b)) counts string-length)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) 1)))))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))\n      (hashtable-size counts)\n      )))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each\n      (lambda (character)\n        (hashtable-put! counts character)\n      )\n      string\n    )\n    (hashtable-size counts)\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each (lambda (character)\n                (hashtable-put! counts character)\n                )\n          string)\n    (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (not (string=? string \"\"))\n        (set! i (+ i 1))\n        (hashtable-set! counts (char->string (string-char string i)) 1)\n        (string-set! string i (string-next string i))))\n    (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                  (string-ci-upcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 0)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 1)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 2)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 3)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 4)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 5)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 6)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 7)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 8)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 9)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 10)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 11)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 12)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 13)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 14)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 15)))\n        (set-hash-table-contents counts (string-ci-downcase (string-ref i 16)))\n        (set-hash",
    "  (let ((counts (make-hashtable)))\n    (for-each (lambda (character)\n                (hashtable-put! counts character)\n              (string-ref character))\n      string))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (for-each (lambda (character)\n                (hash-set! counts character (hash-get counts character #f)))\n      string))\n  (hash-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i))\n             (if (not (aref counts (string-ref string i)))\n                   (set! (aref counts (string-ref string i)) 1)\n                   (+ 1 (aref counts (string-ref string i))))))\n        (set! i (+ 1 i))))\n    (+ (hash-table-size counts) 1)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (aref counts (string-upcase (string-ref string i))))\n        (set! i (1+ i)))\n      (hashtable-size counts)))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i (string-length string))\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      (counts)))\n  (counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (gethash i (first i)) (gethash (first i) (second i)) (setf counts (gethash counts (first i) (second i)) (plus counts 1)))\n        (setf i (cdr i)))\n      (hash-table-count counts)))\n  (counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (string? string)\n        (set! i (i + 1))\n        (hashtable-set! counts (string-ref string i) (hashtable-ref counts (string-upcase string i)))))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (0)))\n      (while (not (string=? string \"\"))\n        (set! i (+ 1 i))\n        (hash-set! counts (char-code (string-ref string i)) 1)\n        (string-set! string i (string-next string i))))\n    (hash-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (1+ i))\n        (hashtable-set! counts (string-ref string i) (hashtable-ref counts (string-ref string i)))))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (aref counts i)\n          (if (null? (aref counts i))\n            (setf (aref counts i) 1)\n            (aref counts i)\n          )\n        )\n        (setf i (cdr i))\n      )\n      (counts)\n    )\n  )\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table #:test equal))\n         (i 0))\n    (while (< i string-length)\n      (set! i (string-index-of string i counts))\n      (hash-set! counts (string-downcase string i) (hash-set! counts (string-upcase string i) (hash-set! counts (string-titlecase string i) 1))))\n    (hash-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (1+ i))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) 1))))\n    (hashtable-keys counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i)))\n      counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (i + 1))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) (hashtable-get counts c) :value))))\n    (hashtable-size counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each (lambda (character)\n                (hashtable-put! counts character)\n              (string))\n      '#:case-folded))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (setf (aref counts i)\n          (if (null? (aref counts i))\n            (setf (aref counts i) 1)\n            (setf (aref counts i) (aref counts i) + 1))))))\n  (+ (hashtable-size counts) (string-length string)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (i + 1))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) 1)))\n      (hashtable-keys counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))\n        (set-hashtable! counts (string-titlecase i))\n        (set-hashtable! counts (string-capitalize i))\n        (set-hashtable! counts (string-downcase i))\n        (set-hashtable! counts (string-upcase i))",
    "  (let ((counts (make-hash-table #:test equal))\n         (i 0))\n    (set! i (string-length string))\n    (while (< i 0)\n      (set! i (- i 1))\n      (if (hash-table-contains! counts string/1 i)\n        (set-hash-table! counts string/1 i (- (hash-table-count counts) 1)))\n      (set-hash-table! counts string/1 i 1)))\n  (hash-table-count counts)\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each string string (hashtable-set! counts string)))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (i + 1))\n        (let ((c (string-ref string i)))\n          (hashtable-put! counts c (hashtable-get counts c) 1)))\n      (hashtable-keys counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (string-map! counts string)\n    (hash-table-count counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (map (lambda (c) (string-ci=? c string))) (string)))\n    (reduce (lambda (a b) (string-ci=? a b)) #t counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (let ((c (string-ref string i)))\n          (if (not (hashtable-has-key? counts c))\n            (hashtable-put counts c 1)\n            (hashtable-put counts c (hashtable-get counts c) + 1)))\n          (set! i (+ i 1))))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents counts i\n                                  (string-set-ci i (string-ci i)))\n        (set-hash-table-contents counts (string-ci i))\n        (string-set-ci i (string-ci i) #\\0))\n      (string-set-ci i #\\0)))\n  (hash-table-size counts)\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! (aref counts (string-ref string i)) (1 + (aref counts (string-ref string i))))\n        (set! i (1 + i))))\n    (length counts)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hashtable! counts (string-downcase i) (string-upcase i))\n        (set-hashtable! counts (string-downcase (string-upcase i)) i))\n      (hashtable-size counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (0)))\n      (while (< i string-length)\n        (set! i (+ i 1))\n        (if (hashtable-has-key? counts string/1 i)\n          (set! counts (hashtable-ref counts string/1 i))\n          (hashtable-put! counts string/1 i 1)))\n      (hashtable-size counts)))\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set! (hashtable-ref counts i)\n             (hashtable-ref counts (string-upcase i)))\n        (set! i (string-next i)))\n      (hashtable-ref counts #\\NIL))))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (string-for-each (lambda (character)\n                      (hashtable-put! counts character))\n       string)))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hash-table)))\n    (let ((i (string)))\n      (while (not (null? i))\n        (set-hash-table-contents! counts i\n          (string-set! i (string-downcase (string-ref i 0)))))))\n  (hash-table-size counts)\n)\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4",
    "  (let ((counts (make-hashtable)))\n    (for-each (lambda (character)\n                (hashtable-put! counts character))\n      string))\n  (hashtable-size counts))\n\n;; Given a string, find out how many distinct characters (regardless of case) does it consist of\n;; >>> (count_distinct_characters \"xyzXYZ\")\n;; 3\n;; >>> (count_distinct_characters \"Jerry\")\n;; 4"
  ],
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ]
}