{
  "name": "HumanEval_13_greatest_common_divisor",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n      (/ a b)\n      )\n    )\n  )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpim0l1lyl.rkt:28:4\nactual:     3/7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpim0l1lyl.rkt:29:4\nactual:     2/3\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpim0l1lyl.rkt:30:4\nactual:     7/2\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpim0l1lyl.rkt:31:4\nactual:     12/5\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if (negative? a)\n          (- gcd)\n          gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (negative? a) (- gcd)\n          (if (negative? b) (- gcd)\n            gcd))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error \"greatest_common_divisor: arguments must be positive integers\")\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:24:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:25:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:26:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:27:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if (negative? a)\n          (- gcd)\n          gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(a = b) a]\n    [(a < b) b]\n    [(b < a) a]\n    [(a = b) b]\n    [(b = a) b]\n    [(a > b) a]\n    [(b > a) b]\n    [(a > b) b]\n    [(b > a) a]\n    [(a = b) a]\n    [(b = a) b]\n    [(a < b) a]\n    [(b < a) b]\n    [(a < b) b]\n    [(b < a) a]\n    [(a > b) a]\n    [(b > a) b]\n    [(a > b) b]\n    [(b > a) a]\n    [(a = b) b]\n    [(b = a) a]\n    [(a < b) a]\n    [(b < a) b]\n    [(a < b) b]\n    [(b < a) a]\n    [(a > b) a]\n    [(b > a) b]\n    [(a > b) b]\n    [(b > a) a]\n    [(a = b) b]\n    [(b = a) a]\n    [(a < b) a]\n    [(b < a) b]\n    [(a < b) b]\n    [(b < a) a]\n    [(a > b) a]\n    [(b > a) b]\n    [(a > b) b]\n    [(b > a) a]\n    [(a = b) b]\n    [(b = a) a]\n    [(a < b) a]\n    [(b < a) b]\n    [(a < b) b]\n    [(b\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293345,
      "stdout": "",
      "stderr": "/tmp/tmpt7ikpzuk.rkt:60:5: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 61\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (greatest_common_divisor (- a b)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:25:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:26:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:27:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:28:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:24:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:25:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:26:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be non-zero\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be non-zero\")]\n    [else (modulo (modulo a b))]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq583kznk.rkt:26:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq583kznk.rkt:27:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq583kznk.rkt:28:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq583kznk.rkt:29:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if (zero? (modulo gcd a))\n          gcd\n          (greatest_common_divisor (modulo a gcd) (modulo b gcd)))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:28:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:29:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:30:4\nactual:     0\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:31:4\nactual:     0\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (let ((gcd (greatest_common_divisor (quotient a b))))\n            (if (> (abs a) (abs b))\n                (greatest_common_divisor (quotient gcd a) b)\n                (greatest_common_divisor a (quotient gcd b)))))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpon3kibx_.rkt:29:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpon3kibx_.rkt:30:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpon3kibx_.rkt:31:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpon3kibx_.rkt:32:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a)\n      gcd\n      (if (zero? b)\n        gcd\n        (greatest_common_divisor (- a) b))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmp9nhrmupj.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 21\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmphb99vf53.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 19\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n      (gcd a b))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        ((> a b) (greatest_common_divisor (- a) b))\n        (else (greatest_common_divisor a (- b))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if (zero? (modulo gcd a))\n            gcd\n            (greatest_common_divisor (modulo a gcd) (modulo b gcd)))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp48m04cx2.rkt:28:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp48m04cx2.rkt:29:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp48m04cx2.rkt:30:4\nactual:     0\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp48m04cx2.rkt:31:4\nactual:     0\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (/ a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzb2nd_si.rkt:26:4\nactual:     3/7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzb2nd_si.rkt:27:4\nactual:     2/3\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzb2nd_si.rkt:28:4\nactual:     7/2\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzb2nd_si.rkt:29:4\nactual:     12/5\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:26:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:27:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:28:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:29:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (/ a b)\n          (greatest_common_divisor (- a) b)\n          )\n        )\n  )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) a)\n        (else\n          (let ((gcd (gcd a b)))\n            (if (> gcd a)\n                (greatest_common_divisor (- a b) gcd)\n                gcd))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmplo6wvnmt.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 22\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(= a b) b]\n    [else (greatest_common_divisor (div a b) (modulo a b))]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmp_c4_n4t3.rkt:15:36: div: unbound identifier\n  in: div\n  location...:\n   /tmp/tmp_c4_n4t3.rkt:15:36\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? gcd)\n      (error \"Greatest common divisor of zero\")\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (> a b) gcd\n           (if (< a b) gcd\n              (if (= a b) 1\n                 (greatest_common_divisor (- a) (- b)))))\n         (greatest_common_divisor (- a) (- b))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpi5yekmbd.rkt:11:6: if: bad syntax\n  in: (if (zero? b) gcd (if (> a b) gcd (if (< a b) gcd (if (= a b) 1 (greatest_common_divisor (- a) (- b))))) (greatest_common_divisor (- a) (- b)))\n  location...:\n   /tmp/tmpi5yekmbd.rkt:11:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if (negative? a)\n          (- gcd)\n          gcd)))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (negative? a) (- gcd)\n          (if (negative? b) (- gcd)\n            gcd))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (/ a b)\n      )\n    )\n  )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:28:4\nactual:     3/7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:29:4\nactual:     2/3\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:30:4\nactual:     7/2\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:31:4\nactual:     12/5\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (/ a b)\n      )\n    )\n  )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:28:4\nactual:     3/7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:29:4\nactual:     2/3\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:30:4\nactual:     7/2\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:31:4\nactual:     12/5\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (greatest_common_divisor (- a) b)\n          )\n        )\n  )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (let ((gcd (gcd a b)))\n            (if (> gcd a) gcd)\n              (if (> gcd b) gcd)\n                (gcd))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmpxmebad88.rkt:15:25: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error \"Greatest common divisor of \" a \" and \" b \" is not positive\")))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpr9zbvlps.rkt:10:4: if: missing an \"else\" expression\n  in: (if (<= 0 gcd) (error \"Greatest common divisor of \" a \" and \" b \" is not positive\"))\n  location...:\n   /tmp/tmpr9zbvlps.rkt:10:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if (zero? (modulo gcd a))\n          gcd\n          (greatest_common_divisor (modulo a gcd) (modulo b gcd)))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:28:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:29:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:30:4\nactual:     0\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:31:4\nactual:     0\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error 'greatest_common_divisor \"divisor is zero\")]\n    [(zero? b) (error 'greatest_common_divisor \"divisor is zero\")]\n    [(zero? (abs a)) (error 'greatest_common_divisor \"divisor is zero\")]\n    [(zero? (abs b)) (error 'greatest_common_divisor \"divisor is zero\")]\n    [(zero? (abs (gcd a b))) (error 'greatest_common_divisor \"divisor is zero\")]\n    [else (gcd a b)]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (negative? a) (- gcd)\n          (if (negative? b) (- gcd)\n            gcd))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (greatest_common_divisor (quotient a b)\n        (greatest_common_divisor (remainder a b))))))\n\n;; Return a list of all the prime numbers less than or equal to n\n;; >>> (primes 0)\n;; []\n;; >>> (primes 10)\n;; [2, 3, 5, 7]\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixrgx3rj.rkt:26:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixrgx3rj.rkt:27:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixrgx3rj.rkt:28:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpixrgx3rj.rkt:29:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error \"greatest_common_divisor: arguments must be positive integers\")\n      gcd)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpls0snj90.rkt:19:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpls0snj90.rkt:20:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpls0snj90.rkt:21:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpls0snj90.rkt:22:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:24:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:25:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:26:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (let ((gcd (gcd a b)))\n            (if (> gcd a) gcd)\n              (if (> gcd b) gcd)\n                (gcd))))\n  )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 375\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmptmsfit9d.rkt:13:12: if: missing an \"else\" expression\n  in: (if (> gcd a) gcd)\n  location...:\n   /tmp/tmptmsfit9d.rkt:13:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (let ((gcd (greatest_common_divisor (modulo a b) b)))\n            (if (>= gcd a) gcd)\n            (gcd a b))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "/tmp/tmp9__9us1o.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 21\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) a)\n        (else\n          (let ((gcd (greatest_common_divisor (quotient a b))))\n            (if (> (abs a) (abs b))\n                (greatest_common_divisor (quotient gcd a) b)\n                (greatest_common_divisor a (quotient gcd b)))))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzoxm88x.rkt:29:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzoxm88x.rkt:30:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzoxm88x.rkt:31:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnzoxm88x.rkt:32:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (greatest_common_divisor (- a) b)\n          )))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmphb99vf53.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 19\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (/ a b)\n      )\n    )\n  )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:28:4\nactual:     3/7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:29:4\nactual:     2/3\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:30:4\nactual:     7/2\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wy5mv23.rkt:31:4\nactual:     12/5\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (greatest_common_divisor (- a b) (* a b)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? gcd)\n      1\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:24:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:25:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:26:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if (negative? a)\n          (- gcd)\n          gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error \"Greatest common divisor of \" a \" and \" b \" is \" gcd)\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjr937xdq.rkt:24:4\n\nGreatest common divisor of  3 \" and \" 7 \" is \" 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjr937xdq.rkt:25:4\n\nGreatest common divisor of  10 \" and \" 15 \" is \" 5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjr937xdq.rkt:26:4\n\nGreatest common divisor of  49 \" and \" 14 \" is \" 7\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjr937xdq.rkt:27:4\n\nGreatest common divisor of  144 \" and \" 60 \" is \" 12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? gcd)\n      1\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (let ((gcd (greatest_common_divisor (modulo a b) b)))\n            (if (zero? (modulo a b))\n                gcd\n                (greatest_common_divisor (modulo a b) (modulo a b)))))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:26:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:27:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:28:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:29:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:26:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:27:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:28:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:29:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:24:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:25:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq1ea6vyp.rkt:26:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (greatest_common_divisor (- a) (- b)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error \"Greatest common divisor of \" a \" and \" b \" is not positive\")\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1s80qea1.rkt:24:4\n\nGreatest common divisor of  3 \" and \" 7 \" is not positive\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1s80qea1.rkt:25:4\n\nGreatest common divisor of  10 \" and \" 15 \" is not positive\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1s80qea1.rkt:26:4\n\nGreatest common divisor of  49 \" and \" 14 \" is not positive\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1s80qea1.rkt:27:4\n\nGreatest common divisor of  144 \" and \" 60 \" is not positive\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b) (gcd a b)]\n    [(> b a) (gcd b a)]\n    [(> a b) (gcd b a)]\n    [(> b a) (gcd a b)]\n    [(< a b) (gcd a b)]\n    [(< b a) (gcd b a)]\n    [(< a b) (gcd b a)]\n    [(< b a) (gcd a b)]\n    [(= a b) a]\n    [(= b a) b]\n    [(= a b) b]\n    [(= b a) a]\n    [else (gcd a b)]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (let ((gcd (gcd a b)))\n            (if (> gcd a)\n                (let ((x (quotient a gcd)))\n                  (let ((y (quotient b gcd)))\n                    (greatest_common_divisor x y)))\n                (greatest_common_divisor b a))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (greatest_common_divisor (- a b)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:25:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:26:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:27:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:28:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (> a b) gcd\n           (if (< a b) gcd\n              (if (= a b) gcd 1)\n               (greatest_common_divisor (- a) (- b)))))\n      (greatest_common_divisor (- a) (- b))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpt_24orne.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 23\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n      (gcd a b))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? gcd)\n      1\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpy7xwm6kq.rkt:9:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 61\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error \"greatest_common_divisor: arguments must be positive integers\")\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:24:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:25:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:26:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:27:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) b)\n    ((zero? b) a)\n    (else\n      (gcd a b))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [else (gcd a b)]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) b)\n        (else\n          (/ a b)\n          (greatest_common_divisor (- a) b)\n          )\n        )\n  )\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293362,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n       ((= a b) a)\n       ((> a b) (greatest_common_divisor b a))\n       (else (greatest_common_divisor a (modulo b a))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0wjihj97.rkt:25:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0wjihj97.rkt:26:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0wjihj97.rkt:27:4\nactual:     0\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0wjihj97.rkt:28:4\nactual:     0\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b) (gcd a b)]\n    [(> b a) (gcd b a)]\n    [(<= a b) (gcd a b)]\n    [(<= b a) (gcd b a)]\n    [(= a b) a]\n    [(= b a) b]\n    [else (gcd a b)]\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be non-zero and have same sign\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be non-zero and have same sign\")]\n    [else (modulo (gcd a b))]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg3owfs0.rkt:26:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg3owfs0.rkt:27:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg3owfs0.rkt:28:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprg3owfs0.rkt:29:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if (zero? (modulo gcd a))\n            gcd\n            (greatest_common_divisor (modulo a gcd) (modulo b gcd)))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp48m04cx2.rkt:28:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp48m04cx2.rkt:29:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp48m04cx2.rkt:30:4\nactual:     0\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp48m04cx2.rkt:31:4\nactual:     0\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqa21i1uf.rkt:21:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqa21i1uf.rkt:22:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqa21i1uf.rkt:23:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqa21i1uf.rkt:24:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:26:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:27:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:28:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:29:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error \"greatest_common_divisor: arguments must be positive integers\")\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:24:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:25:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:26:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm3tntmpe.rkt:27:4\n\ngreatest_common_divisor: arguments must be positive integers\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b) (* a b)]\n    [(> b a) (* a b)]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(> a b) b]\n    [(> b a) b]\n    [(>\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpdt575f0y.rkt:60:5: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 61\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 375\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp76su6v3z.rkt:26:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp76su6v3z.rkt:27:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp76su6v3z.rkt:28:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp76su6v3z.rkt:29:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b) (gcd a b)]\n    [(> b a) (gcd b a)]\n    [(< a b) (gcd b a)]\n    [(< b a) (gcd a b)]\n    [(= a b) a]\n    [(= b a) b]\n    [(< a b) a]\n    [(< b a) b]\n    [(> a b) b]\n    [(> b a) a]\n    [(= a b) b]\n    [(= b a) a]\n    [(< a b) b]\n    [(< b a) a]\n    [(> a b) a]\n    [(> b a) b]\n    [(= a b) a]\n    [(= b a) b]\n    [(< a b) b]\n    [(< b a) a]\n    [(> a b) b]\n    [(> b a) a]\n    [(= a b) b]\n    [(= b a) a]\n    [(< a b) b]\n    [(< b a) a]\n    [(> a b) a]\n    [(> b a) b]\n    [(= a b) b]\n    [(= b a) a]\n    [(< a b) b]\n    [(< b a) a]\n    [(> a b) b]\n    [(> b a) a]\n    [(= a b) b]\n    [(= b a) a]\n    [(< a b) b]\n    [(< b a) a]\n    [(> a b) a]\n    [(> b a) b]\n    [(= a b) b]\n    [(= b a) a]\n    [(< a b) b]\n    [(< b a) a]\n    [(> a b) b]\n    [\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "/tmp/tmpem45x1jn.rkt:59:4: read-syntax: expected a `]` to close `[`\n  possible cause: indentation suggests a missing `]` before line 60\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n    [(> a b) a]\n    [(> b a) b]\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "/tmp/tmpy7xwm6kq.rkt:9:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 61\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293346,
      "stdout": "",
      "stderr": "/tmp/tmphb99vf53.rkt:8:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 19\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= b 0) 0)\n        (else\n          (/ a b)))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuapwqgjc.rkt:25:4\nactual:     3/7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuapwqgjc.rkt:26:4\nactual:     2/3\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuapwqgjc.rkt:27:4\nactual:     7/2\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuapwqgjc.rkt:28:4\nactual:     12/5\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [else (gcd a b)]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? gcd)\n      1\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? gcd)\n      1\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293348,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:26:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:27:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:28:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:29:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [else (modulo (gcd a b))]))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:26:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:27:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:28:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz694klop.rkt:29:4\n\nmodulo: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (> a b) gcd\n           (if (>= a b) gcd\n              (if (<= a b) gcd\n                 (if (< a b) gcd\n                    (if (>= a b) gcd\n                       (if (<= a b) gcd\n                          (if (> a b) gcd\n                             (if (< a b) gcd\n                                (if (>= a b) gcd\n                                  (if (<= a b) gcd\n                                    (if (> a b) gcd\n                                       (if (<= a b) gcd\n                                        (if (> a b) gcd\n                                          (if (<= a b) gcd\n                                            (if (> a b) gcd\n                                              (if (<= a b) gcd\n                                                (if (> a b) gcd\n                                                  (if (<= a b) gcd\n                                                    (if (> a b) gcd\n                                                      (if (<= a b) gcd\n                                                        (if (> a b) gcd\n                                                          (if (<= a b) gcd\n                                                            (if (> a b) gcd\n                                                              (if (<= a b) gcd\n                                                                (if (> a b) gcd\n                                                                  (if (<= a b) gcd\n                                                                    (if (> a b) gcd\n                                                                      (if (<= a b) gcd\n                                                                        (if (> a b) gcd\n                                                                          (if (<= a b) gcd\n                                                                            (if (> a b) gcd\n                                                                              (if (<= a b) gcd\n                                                                                (if (> a b) gcd\n                                                                                  (if (<= a b) gcd\n                                                                                    (if (> a b) gcd\n                                                                                      (if (<= a b\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "/tmp/tmp4ac5sygt.rkt:47:90: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 48\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      0\n      (if (<= gcd 1)\n        1\n        gcd)))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= gcd 0)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= b 0) 0)\n        (else\n          (/ a b)))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuapwqgjc.rkt:25:4\nactual:     3/7\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuapwqgjc.rkt:26:4\nactual:     2/3\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuapwqgjc.rkt:27:4\nactual:     7/2\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuapwqgjc.rkt:28:4\nactual:     12/5\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (let ((gcd (gcd a b)))\n        (if (zero? (modulo gcd a))\n          gcd\n          (greatest_common_divisor (modulo a gcd) (modulo b gcd)))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:28:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:29:4\nactual:     0\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:30:4\nactual:     0\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzrv7moxk.rkt:31:4\nactual:     0\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (> a b) gcd\n           (if (< a b) gcd\n              (if (= a 0) gcd\n                 (if (= b 0) gcd\n                    1))))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n    [(> b a) (abs a)]\n    [(> a b) (abs b)]\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "/tmp/tmpmc0ua40z.rkt:9:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 54\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      (error \"Greatest common divisor is not positive\")\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp27vt_3oz.rkt:24:4\n\nGreatest common divisor is not positive\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp27vt_3oz.rkt:25:4\n\nGreatest common divisor is not positive\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp27vt_3oz.rkt:26:4\n\nGreatest common divisor is not positive\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp27vt_3oz.rkt:27:4\n\nGreatest common divisor is not positive\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293363,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) a]\n    [(zero? b) b]\n    [(zero? a) b]\n    [(zero? b) a]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n    [(> b a) (abs b)]\n    [(> a b) (abs a)]\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "/tmp/tmpk0gfytbq.rkt:9:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 54\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= a 0)\n    b\n    (if (= b 0)\n      a\n      (greatest_common_divisor (- a b)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:25:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:26:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:27:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqg_gyjqw.rkt:28:4\n\ngreatest_common_divisor: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= a b) a)\n        (else\n          (let ((gcd (greatest_common_divisor (modulo a b) (abs a))))\n            (if (>= gcd a)\n                gcd\n                (greatest_common_divisor (abs a) (abs b)))))\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293364,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzai3gdb1.rkt:29:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzai3gdb1.rkt:30:4\nactual:     10\nexpected:   5\n--------------------\n",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (negative? a) (- gcd)\n          (if (negative? b) (- gcd)\n            gcd))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo a b))) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo b a))) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo (modulo a b)))) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo (modulo b a)))) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo (modulo (modulo a b))))) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo (modulo (modulo b a))))) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo (modulo (modulo (modulo a b))))) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo (modulo (modulo (modulo b a))))) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo (modulo (modulo (modulo (modulo a b))))) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo (modulo (modulo (modulo (modulo (modulo (modulo a b)))))))) (error \"greatest_common_divis\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293349,
      "stdout": "",
      "stderr": "/tmp/tmplyme3swi.rkt:20:122: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (negative? a)\n          (- gcd (- a b))\n          (if (negative? b)\n            (- gcd (- a b))\n            (gcd a b)))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 175\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpws5vz0ge.rkt:28:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpws5vz0ge.rkt:29:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpws5vz0ge.rkt:30:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 7\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpws5vz0ge.rkt:31:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond ((= a 0) 0)\n        ((= b 0) a)\n        (else (gcd a b))\n  ))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd))))\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(zero? a) (error \"greatest_common_divisor: first argument must be non-zero\")]\n    [(zero? b) (error \"greatest_common_divisor: second argument must be non-zero\")]\n    [(zero? (modulo a b)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(zero? (modulo b a)) (error \"greatest_common_divisor: arguments must be positive\")]\n    [(not (zero? (modulo a b))) (modulo a b)]\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7fu5u3p.rkt:28:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7fu5u3p.rkt:29:4\nactual:     10\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7fu5u3p.rkt:31:4\nactual:     24\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (<= 0 gcd)\n      1\n      gcd)))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293350,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmporhvenqd.rkt:25:4\nactual:     1\nexpected:   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmporhvenqd.rkt:26:4\nactual:     1\nexpected:   7\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmporhvenqd.rkt:27:4\nactual:     1\nexpected:   12\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1) gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (zero? a) gcd\n      (if (zero? b) gcd\n        (if (negative? a) (- gcd)\n          (if (negative? b) (- gcd)\n            gcd))))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (let ((gcd (gcd a b)))\n    (if (= gcd 1)\n      gcd\n      (greatest_common_divisor (- a gcd) (- b gcd)))))\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293360,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Return a greatest common divisor of two integers a and b\n;; >>> (greatest_common_divisor 3 5)\n;; 1\n;; >>> (greatest_common_divisor 25 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    ((zero? a) a)\n    ((zero? b) b)\n    (else\n      (gcd a b)\n    )\n  )\n)\n\n;; Return a least common multiple of two integers a and b\n;; >>> (least_common_multiple 3 5)\n;; 15\n;; >>> (least_common_multiple 25 15)\n;; 75\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)",
      "timestamp": 1664293347,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}