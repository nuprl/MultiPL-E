name: HumanEval_69_search
language: rkt
prompt: "#lang racket\n\n;; You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n;; zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n;; The frequency of an integer\
  \ is the number of times it appears in the list.\n;; If no such a value exist, return\
  \ -1.\n;; Examples:\n;; >>> (search (list 4 1 2 2 3 1))\n;; 2\n;; >>> (search (list\
  \ 1 2 2 3 3 3 4 4 4))\n;; 3\n;; >>> (search (list 5 5 4 4 4))\n;; -1\n(define (search\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n\
  \    (check-equal? (candidate (list 5 5 5 5 1)) 1)\n    (check-equal? (candidate\
  \ (list 4 1 4 1 4 4)) 4)\n    (check-equal? (candidate (list 3 3)) -1)\n    (check-equal?\
  \ (candidate (list 8 8 8 8 8 8 8 8)) 8)\n    (check-equal? (candidate (list 2 3\
  \ 3 2 2)) 2)\n    (check-equal? (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6\
  \ 7 1 7 4 10 8 1)) 1)\n    (check-equal? (candidate (list 3 2 8 2)) 2)\n    (check-equal?\
  \ (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1)\n    (check-equal? (candidate (list\
  \ 8 8 3 6 5 6 4)) -1)\n    (check-equal? (candidate (list 6 9 6 7 1 4 7 1 8 8 9\
  \ 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1)\n    (check-equal? (candidate (list 1 9 10\
  \ 1 3)) 1)\n    (check-equal? (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10\
  \ 2 8 6 5 4 9 5 3 10)) 5)\n    (check-equal? (candidate (list 1)) 1)\n    (check-equal?\
  \ (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4)\n    (check-equal?\
  \ (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2)\n    (check-equal?\
  \ (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1)\n    (check-equal? (candidate\
  \ (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4)\n \
  \   (check-equal? (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10\
  \ 7)) 4)\n    (check-equal? (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2\
  \ 3 1)) 2)\n    (check-equal? (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4\
  \ 10 7 7 10 8)) -1)\n    (check-equal? (candidate (list 10)) -1)\n    (check-equal?\
  \ (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2)\n    (check-equal? (candidate\
  \ (list 5 4 10 2 1 1 10 3 6 1 8)) 1)\n    (check-equal? (candidate (list 7 9 9 9\
  \ 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1)\n    (check-equal? (candidate (list\
  \ 3 10 10 9 2)) -1)\n))\n\n(test-humaneval)"
completions: ["  (let ((counts (map (lambda (x) (count x)) lst)))\n    (let ((max-count\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n      (if (not max-count)\n\
    \        (return -1)\n        (return (max-count (counts max-count)))))))\n",
  "  (let ((freq (make-map lst)))\n    (let ((max-freq 0))\n      (for-each (lambda\
    \ (x) (if (>= x 0) (incf freq x) ()))\n        (if (> max-freq freq) (max-freq\
    \ freq) max-freq)))\n    max-freq))\n", "  (let ((freq (make-map)))\n    (for-each\
    \ (lambda (x) (set! freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get\
    \ freq x) (set! freq (- freq x)))))\n    (if (empty? freq) -1\n      (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (+ freq x)))))\n      (max freq)))\n",
  "  (let ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (filter (>=\
    \ 0 (car counts)) (cdr counts))))\n    greatest))\n", "  (let ((counts (map (lambda\
    \ (x) (count x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if (> a b)\
    \ a b)) 0 counts)))\n      (if (not max-count)\n        (-1)\n        (reduce\
    \ (lambda (a b) (if (> a b) a b)) max-count counts))))\n)\n", "  (let ((counts\
    \ (map (lambda (x) (counts x)) lst)))\n    (let ((max-count (reduce (lambda (a\
    \ b) (if (> a b) a b)) 0 counts)))\n      (if (max-count >= lst)\n        (reduce\
    \ (lambda (a b) (if (> a b) a b)) max-count counts)\n        (reduce (lambda (a\
    \ b) (if (> a b) a b)) -1 counts))))\n)", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst))\n        (greatest (filter (>= 0 (car counts)) (cdr counts))))\n \
    \   greatest))\n", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n    (let\
    \ ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n      (if (>\
    \ max-count lst)\n          (let ((max-count (reduce (lambda (a b) (if (> a b)\
    \ a b)) 0 counts)))\n            (if (> max-count lst)\n                (-1)\n\
    \                (max-count))))))))\n", "  (let ((freq (make-map)))\n    (for-each\
    \ (lambda (x) (set! freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get\
    \ freq x) (> (get freq x) 0) (set! freq (-1) x))) lst)\n    (if (get freq 0) (-1)\
    \ (get freq 0)))\n)", "  (cond\n    [(null? lst) -1]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)", "  (let\
    \ ((counts (map (lambda (x) (counts x)) lst)))\n    (let ((max-count (reduce (lambda\
    \ (a b) (if (> a b) a b)) 0 counts)))\n      (if (max-count >= lst)\n        \
    \  (reduce (lambda (a b) (if (> a b) a b)) lst max-count)\n          (-1)))\n\
    \    )\n  )\n)\n", "  (let ((count (make-hashtable)))\n    (for-each (lambda (x)\
    \ (hashtable-put! count x)) lst)\n    (let ((max (make-hashtable)))\n      (for-each\
    \ (lambda (x) (hashtable-put! max x)) count)\n      (if (hashtable-size! max)\n\
    \        (let ((max-val (hashtable-get! max)))\n          (if (hashtable-size!\
    \ count)\n            (let ((count-val (hashtable-get! count)))\n            \
    \  (if (hashtable-size! count-val)\n                (let ((max-val (hashtable-get!\
    \ count-val)))\n                  (if (hashtable-size! count-val)\n          \
    \          (let ((max-val (hashtable-get! count-val)))\n                     \
    \ (if (hashtable-size! count-val)\n                        (let ((max-val (hashtable-get!\
    \ count-val)))\n                          (if (hashtable-size! count-val)\n  \
    \                          (let ((max-val (hashtable-get! count-val)))\n     \
    \                         (if (hashtable-size! count-val)\n                  \
    \              (let ((max-val (hashtable-get! count-val)))\n                 \
    \                 (if (hashtable-size! count-val)\n                          \
    \          (let ((max-val (hashtable-get! count-val)))\n                     \
    \                 (if (hashtable-size! count-val)\n                          \
    \              (let ((max-val (hashtable-get! count-val)))\n                 \
    \                         (if (hashtable-size! count-val)\n                  \
    \                          (let ((max-val (hashtable-get! count-val)))\n     \
    \                                         (if (hashtable-size! count-val)\n  \
    \                                              (let ((max-val (hashtable-get!\
    \ count-val)))\n                                                  (if (hashtable-size!\
    \ count-val)\n                                                    (let ((max-val\
    \ (hashtable-get! count-val)))\n                                             \
    \         (if (hashtable-size! count-val)\n                                  \
    \                      (let ((max-val (hashtable-get", "  (let ((freq (make-map)))\n\
    \    (for-each (lambda (x) (assoc x freq)) lst)\n    (if (empty? freq)\n     \
    \ (-1)\n      (let ((max (max (map (lambda (x) (car x)) freq)))))\n    )\n  )\n\
    )\n", "  (let ((count (make-hashtable)))\n    (for-each (lambda (x) (hashtable-put!\
    \ count x)) lst)\n    (let ((result (-1)))\n      (for-each (lambda (x) (if (hashtable-contains?\
    \ count x)\n                                 (hashtable-get! count x)\n      \
    \                           result)))\n      (hashtable-remove! count result)))\n\
    )\n", "  (cond\n    [(null? lst) -1]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)", "  (let ((counts (map\
    \ (lambda (x) (counts x)) lst))\n        (greatest (filter (> 0 (car counts))\
    \ (cdr counts))))\n    greatest))\n", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst))\n        (greatest (filter (>= 0 (car counts)) (cdr counts))))\n \
    \   greatest))\n", "  (let ((counts (map (lambda (x) (counts x)) lst))\n     \
    \   (greatest (filter (>= 0 (car counts)) (cdr counts))))\n    greatest))\n",
  "  (let ((counts (map (lambda (x) (counts x)) lst)))\n    (let ((greatest (reduce\
    \ (lambda (a b) (if (> a b) a b)) 0 counts)))\n      (if (not (empty? counts))\n\
    \        (if (> greatest counts)\n          greatest\n          (let ((greatest\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n            (if (not (empty?\
    \ counts))\n              (if (> greatest counts)\n                greatest\n\
    \                (let ((greatest (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \                  (if (not (empty? counts))\n                    (if (> greatest\
    \ counts)\n                      greatest\n                      (let ((greatest\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                      \
    \  (if (not (empty? counts))\n                          (if (> greatest counts)\n\
    \                            greatest\n                            (let ((greatest\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                      \
    \        (if (not (empty? counts))\n                                (if (> greatest\
    \ counts)\n                                  greatest\n                      \
    \            (let ((greatest (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \                                    (if (not (empty? counts))\n             \
    \                         (if (> greatest counts)\n                          \
    \              greatest\n                                        (let ((greatest\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                      \
    \                    (if (not (empty? counts))\n                             \
    \               (if (> greatest counts)\n                                    \
    \          greatest))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))",
  "  (cond\n    [(null? lst) -1]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car\
    \ lst) 0) (car lst)]\n  )\n)\n", "  (let ((counts (map (lambda (x) (counts x))\
    \ lst)))\n    (let ((max-count (reduce (lambda (a b) (if (>= a b) a b)) 0 counts)))\n\
    \      (if (not (empty? counts))\n        (if (> max-count (car counts))\n   \
    \       (car counts)\n          (search lst)))))\n)\n", "  (cond\n    ((null?\
    \ lst) -1)\n    ((>= (car lst) 0) (car lst))\n    (else (search (cdr lst))))\n\
    )\n", "  (let ((result -1)\n        (count 0))\n    (for-each (lambda (x)\n  \
    \              (if (>= x lst)\n                    (set! result x)\n         \
    \           (set! count (+ 1 count))))\n      lst))\n)\n", "  (let ((freq (make-map)))\n\
    \    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n \
    \   (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n \
    \   (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))", "  (let\
    \ ((result -1)\n        (i 0)\n        (lst-size (length lst)))\n    (while (<\
    \ i lst-size)\n      (if (> (car lst) 0)\n        (set! result (car lst))\n  \
    \      (set! lst (cdr lst)))\n      (set! i (+ i 1)))\n    result))\n", "  (let\
    \ ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (filter (> 0\
    \ (car counts)) (cdr counts))))\n    greatest))\n", "  (let ((counts (map (lambda\
    \ (x) (counts x)) lst)))\n    (reduce (lambda (a b) (if (>= b a) b a))\n     \
    \ (reduce (lambda (a b) (if (>= a b) a b))\n        0 counts))))\n", "  (let ((result\
    \ (-1)))\n    (for-each (lambda (x)\n                (if (>= (count x) x)\n  \
    \                  (set! result (+ x (count x)))\n                    ()))\n \
    \              lst))\n  result)\n", "  (let ((freq (make-hash)))\n    (for-each\
    \ (lambda (x) (hash-set! freq x)) lst)\n    (for-each (lambda (x) (hash-get freq\
    \ x)) lst)\n    (for-each (lambda (x) (if (hash-get freq x) (hash-set! freq x)\
    \ (hash-set! freq (- x)))) lst)\n    (hash-for-each (lambda (x) (if (hash-get\
    \ freq x) (hash-set! freq x) (hash-set! freq (- x)))) lst)\n    (hash-for-each\
    \ (lambda (x) (if (hash-get freq x) (hash-set! freq x) (hash-set! freq (- x))))\
    \ lst)\n    (hash-for-each (lambda (x) (if (hash-get freq x) (hash-set! freq x)\
    \ (hash-set! freq (- x)))) lst)\n    (hash-for-each (lambda (x) (if (hash-get\
    \ freq x) (hash-set! freq x) (hash-set! freq (- x)))) lst)\n    (hash-for-each\
    \ (lambda (x) (if (hash-get freq x) (hash-set! freq x) (hash-set! freq (- x))))\
    \ lst)\n    (hash-for-each (lambda (x) (if (hash-get freq x) (hash-set! freq x)\
    \ (hash-set! freq (- x)))) lst)\n    (hash-for-each (lambda (x) (if (hash-get\
    \ freq x) (hash-set! freq x) (hash-set! freq (- x)))) lst)\n    (hash-for-each\
    \ (lambda (x) (if (hash-get freq x) (hash-set! freq x) (hash-set! freq (- x))))\
    \ lst)\n    (hash-for-each (lambda (x) (if (hash-get freq x) (hash-set! freq x)\
    \ (hash-set! freq (- x)))) lst)\n    (hash-for-each", "  (let ((count (make-hashtable)))\n\
    \    (for-each (lambda (x) (hashtable-put! count x)) lst)\n    (let ((max (make-hashtable)))\n\
    \      (for-each (lambda (x) (hashtable-put! max x)) count)\n      (if (hashtable-size\
    \ max)\n        (let ((max-value (hashtable-get! max)))\n          (if (hashtable-size\
    \ count)\n            (let ((count-value (hashtable-get! count)))\n          \
    \    (if (max-value > count-value)\n                max-value\n              \
    \  count-value))))\n        max-value))))\n", "  (cond\n    [(null? lst) -1]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst)", "  (let ((counts (map (lambda (x) (count x lst)))))\n  \
    \  (reduce (lambda (a b) (if (>= b a) b a)) 0 counts)))\n", "  (let ((counts (map\
    \ (lambda (x) (count x)) lst))\n        (max-count (lambda (x) (if (> x 0) (counts\
    \ x) -1))))\n    max-count))\n", "  (let ((counts (map (lambda (x) (count x lst)))))\n\
    \    (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n  \
    \    (if (not max-count) (-1)\n        (let ((max-count (reduce (lambda (a b)\
    \ (if (> a b) a b)) 0 counts)))\n          (if (not max-count) (-1)\n        \
    \    (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n  \
    \            (if (not max-count) (-1)\n                (let ((max-count (reduce\
    \ (lambda (a b) (if (> a b) a b)) 0 counts)))\n                  (if (not max-count)\
    \ (-1)\n                    (let ((max-count (reduce (lambda (a b) (if (> a b)\
    \ a b)) 0 counts)))\n                      (if (not max-count) (-1)\n        \
    \                (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \                          (if (not max-count) (-1)\n                        \
    \    (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n  \
    \                            (if (not max-count) (-1)\n                      \
    \          (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \                                  (if (not max-count) (-1)\n                \
    \                    (let ((max-count (reduce (lambda (a b) (if (> a b) a b))\
    \ 0 counts)))\n                                      (if (not max-count) (-1)\n\
    \                                        (let ((max-count (reduce (lambda (a b)\
    \ (if (> a b) a b)) 0 counts)))\n                                          (if\
    \ (not max-count) (-1)\n                                            (let ((max-count\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                      \
    \                        (if (not max-count) (-1)\n                          \
    \                      (let ((max-count (", "  (cond\n    ((null? lst) -1)\n \
    \   ((>= (car lst) 0) (car lst))\n    (else (search (cdr lst))))\n)\n", "  (let\
    \ ((counts (map (lambda (x) (counts x)) lst)))\n    (let ((max-count (reduce (lambda\
    \ (a b) (if (> a b) a b)) 0 counts)))\n      (if (> max-count lst)\n         \
    \ (begin (display \"No such value\") (display max-count))\n          max-count))))\n",
  "  (let ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (filter (>\
    \ 0 (car counts)) (cdr counts))))\n    greatest))\n", "  (let ((result -1)\n \
    \       (count 0))\n    (while (< count lst)\n      (if (>= (car lst) result)\n\
    \        (set! result (car lst))\n        (set! count (+ count 1))))\n    result))\n",
  "  (cond\n    [(not (empty? lst))\n      (let ((max (car lst)))\n        (if (>\
    \ (car lst) 0)\n            (if (> (car lst) (car max)) max)\n            (search\
    \ (cdr lst))))\n      (return -1)])\n  )\n", "  (let ((counts (map (lambda (x)\
    \ (counts x)) lst))\n        (greatest (map (lambda (x) (if (> x 0) (car counts)\
    \ -1))))))\n)\n", "  (let* ([max (reduce (lambda (a b) (+ a b)) 0)])\n    (if\
    \ (empty? lst)\n      (-1)\n      (let* ([count (reduce (lambda (a b) (+ a b))\
    \ 0)])\n        (if (>= count max)\n          (max)\n          (let* ([i (reduce\
    \ (lambda (a b) (if (<= b count) (b) (b + 1))) 0])\n            (if (<= i count)\n\
    \              (i)\n              (-1))))))))\n", "  (let ((counts (map (lambda\
    \ (x) (counts x)) lst)))\n    (let ((max (reduce (lambda (a b) (if (> a b) a b))\
    \ 0 counts)))\n      (if (not max) -1\n          (let ((max (reduce (lambda (a\
    \ b) (if (> a b) a b)) 0 counts)))\n            (if (not max) -1\n           \
    \     (let ((max (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n       \
    \           (if (not max) -1\n                      (let ((max (reduce (lambda\
    \ (a b) (if (> a b) a b)) 0 counts)))\n                        (if (not max) -1\n\
    \                            (let ((max (reduce (lambda (a b) (if (> a b) a b))\
    \ 0 counts)))\n                              (if (not max) -1\n              \
    \                    (let ((max (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \                                    (if (not max) -1\n                      \
    \                  (let ((max (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \                                          (if (not max) -1\n                \
    \                              (let ((max (reduce (lambda (a b) (if (> a b) a\
    \ b)) 0 counts)))\n                                                (if (not max)\
    \ -1\n                                                   (let ((max (reduce (lambda\
    \ (a b) (if (> a b) a b)) 0 counts)))\n                                      \
    \                (if (not max) -1\n                                          \
    \               (let ((max (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \                                                           (if (not max) -1\n\
    \                                                              (let ((max (reduce\
    \ (lambda (a b) (if (> a b) a b)) 0 counts)))\n                              \
    \                                  (if (not max) -1\n                        \
    \                                            (let ((max (reduce (lambda (a b)\
    \ (if (> a b) a b)) 0 counts)))\n                                            \
    \                          (if (", "  (let ((counts (map (lambda (x) (counts x))\
    \ lst))\n        (greatest (filter (lambda (x) (x > 0) (counts x)) lst))))\n",
  "  (let ((freq (make-map)))\n    (for-each (lambda (x) (assoc x freq)) lst)\n  \
    \  (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n \
    \   (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n \
    \   (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq))", "  (cond\n    ((null? lst) -1)\n    (else\n      (let\
    \ ((count (make-hashtable)))\n        (for-each (lambda (x) (hashtable-put! count\
    \ x)) lst)\n        (let ((max (make-hashtable)))\n          (for-each (lambda\
    \ (x) (hashtable-put! max x)) count)\n          (let ((result (hashtable-get!\
    \ max)))\n            (if (positive? result)\n              result\n         \
    \     (let ((result (hashtable-get! max)))\n                (if (positive? result)\n\
    \                  result\n                  (let ((result (hashtable-get! max)))\n\
    \                    (if (positive? result)\n                      result\n  \
    \                    (let ((result (hashtable-get! max)))\n                  \
    \      (if (positive? result)\n                          result\n            \
    \              (let ((result (hashtable-get! max)))\n                        \
    \    (if (positive? result)\n                              result\n          \
    \                    (let ((result (hashtable-get! max)))\n                  \
    \              (if (positive? result)\n                                  result\n\
    \                                  (let ((result (hashtable-get! max)))\n    \
    \                                (if (positive? result)\n                    \
    \                  result\n                                      (let ((result\
    \ (hashtable-get! max)))\n                                        (if (positive?\
    \ result)\n                                          result\n                \
    \                          (let ((result (hashtable-get! max)))\n            \
    \                                (if (positive? result)\n                    \
    \                          result\n                                          \
    \    (let ((result (hashtable-get! max)))\n                                  \
    \              (if (positive? result)\n                                      \
    \            result\n                                                  (let ((result\
    \ (hashtable-get! max)))\n                                                   \
    \ (if (positive? result)\n                                                   \
    \   result\n                                                      (let ((result\
    \ (hashtable-get! max)))\n                                                   \
    \     (if (positive? result)\n                                               \
    \           result\n                                                         \
    \ (let ((result (hashtable-get! max)))\n                                     \
    \                       (if (positive? result)\n                             \
    \  ", "  (cond\n    ((null? lst) -1)\n    ((>= (car lst) 0) (car lst))\n    (else\
    \ (search (cdr lst))))\n)\n", "  (cond\n    [(null? lst) -1]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)",
  "  (let ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (filter (>\
    \ 0 (car counts)) (cdr counts))))\n    greatest))\n", "  (let ((counts (map (lambda\
    \ (x) (counts x)) lst))\n        (greatest (filter (>= 0 (car counts)) (cdr counts))))\n\
    \    greatest))\n", "  (cond\n    [(null? lst) -1]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)", "  (let\
    \ ((count (make-hashtable)))\n    (for-each (lambda (x) (hashtable-put! count\
    \ x)) lst)\n    (for-each (lambda (x) (hashtable-get! count x)) lst)\n    (for-each\
    \ (lambda (x) (hashtable-remove! count x)) lst)\n    (for-each (lambda (x) (hashtable-count\
    \ count x)) lst)\n    (for-each (lambda (x) (hashtable-for-each count x)) lst)\n\
    \    (for-each (lambda (x) (hashtable-keys count)) lst)\n    (for-each (lambda\
    \ (x) (hashtable-values count)) lst)\n    (for-each (lambda (x) (hashtable-remove-all\
    \ count x)) lst)\n    (for-each (lambda (x) (hashtable-remove-if (lambda (y) (eq\
    \ x y)) count)) lst)\n    (for-each (lambda (x) (hashtable-remove-if (lambda (y)\
    \ (eq x y)) count)) lst)\n    (for-each (lambda (x) (hashtable-remove-if (lambda\
    \ (y) (eq x y)) count)) lst)\n    (for-each (lambda (x) (hashtable-remove-if (lambda\
    \ (y) (eq x y)) count)) lst)\n    (for-each (lambda (x) (hashtable-remove-if (lambda\
    \ (y) (eq x y)) count)) lst)\n    (for-each (lambda (x) (hashtable-remove-if (lambda\
    \ (y) (eq x y)) count)) lst)\n    (for-each (lambda (x) (hashtable-remove-if (lambda\
    \ (y) (eq x y)) count)) lst)\n    (for-each (lambda (x) (hashtable-remove-if (lambda\
    \ (y) (eq x y)) count)) lst)\n    (for-each (lambda (x) (hashtable-remove-if (lambda\
    \ (y) (eq x y)) count)) lst)\n    (for-each (lambda (x) (hashtable-remove-if (lambda\
    \ (y)", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n    (let ((max-count\
    \ (reduce (lambda (a b) (if (> b a) b a)) 0 counts)))\n      (if (> max-count\
    \ lst)\n          (let ((max-count-index (reduce (lambda (a b) (if (> b a) b a))\
    \ 0 counts)))\n            (let ((max-count-value (lst[max-count-index]))\n  \
    \                (if (> max-count-value lst)\n                      (let ((max-count-value-index\
    \ (reduce (lambda (a b) (if (> b a) b a)) 0 counts)))\n                      \
    \  (lst[max-count-value-index]))\n                        (lst[max-count-index]))))))))))\n",
  "  (let ((counts (map (lambda (x) (counts x)) lst)))\n    (let ((max-count (reduce\
    \ (lambda (x y) (if (> y x) x y)) 0 counts)))\n      (if (not max-count)\n   \
    \     (-1)\n        (reduce (lambda (x y) (if (> y x) x y)) max-count counts))))\n\
    )\n", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n    (let ((max-count\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n      (if (> max-count\
    \ lst)\n          (let ((max-count-index (reduce (lambda (a b) (if (> a b) a b))\
    \ 0 counts)))\n            (let ((max-count-value (lst[max-count-index]))\n  \
    \                (max-count-value (if (> max-count-value max-count) max-count-value)))\n\
    \              (max-count-value)))))))\n", "  (let ((result -1)\n        (count\
    \ 0)\n        (i lst)))\n  (while (< count lst)\n    (if (> (car lst) 0)\n   \
    \   (set! result (car lst))\n      (set! count (1 + count)))\n    (set! lst (cdr\
    \ lst)))\n  result)\n", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n\
    \    (reduce (lambda (a b) (if (> b 0) a b)) 0 counts)))\n", "  (let ((freq (make-map)))\n\
    \    (for-each (lambda (x) (set! freq (get freq x))) lst)\n    (for-each (lambda\
    \ (x) (if (get freq x) (> (get freq x) 0) (set! freq (-1) x))) lst)\n    (if (get\
    \ freq 0) (-1) (get freq 0))\n  )\n)", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \      (if (not (empty? counts))\n        (let ((max-value (reduce (lambda (a\
    \ b) (if (> a b) a b)) 0 counts)))\n          (if (> max-count max-value)\n  \
    \          max-value\n            max-count))))))\n", "  (let ((result -1)\n \
    \       (count 0))\n    (while (not (null? lst))\n      (if (zero? (car lst))\n\
    \        (return result)\n        (set! count (+ count (car lst)))\n        (set!\
    \ result (if (>= count (car lst)) (car lst) result))\n        (set! lst (cdr lst))))\n\
    \    result))\n", "  (let ((freq (make-map)))\n    (for-each (lambda (x) (set!\
    \ freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ (get freq x)) (set! freq 0))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq (get freq x)) (set! freq 0))) lst)\n    (for-each (lambda (x)\
    \ (if (get freq x) (set! freq (get freq x)) (set! freq 0))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (get freq x)) (set! freq 0))) lst)\n\
    \    (for-each (lambda (x) (if (get freq x) (set! freq (get freq x)) (set! freq\
    \ 0))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (get freq x))\
    \ (set! freq 0))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ (get freq x)) (set! freq 0))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq (get freq x)) (set! freq 0))) lst)\n    (for-each (lambda (x)\
    \ (if (get freq x) (set! freq (get freq x)) (set! freq 0))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (get freq x)) (set! freq 0))) lst)\n\
    \    (for-each (lambda (x) (if (get freq x) (set! freq (get freq x)) (set! freq\
    \ 0))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (get freq x))\
    \ (set! freq 0", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n    (reduce\
    \ (lambda (a b) (if (> b 0) a b)) 0 counts)))\n", "  (cond\n    [(null? lst) -1]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst)", "  (let ((count (make-hashtable)))\n    (for-each (lambda\
    \ (x) (hashtable-put! count x)) lst)\n    (for-each (lambda (x) (hashtable-get!\
    \ count x)) lst)\n    (for-each (lambda (x) (hashtable-remove! count x)) lst)\n\
    \    (for-each (lambda (x) (hashtable-count count x)) lst)\n    (for-each (lambda\
    \ (x) (hashtable-for-each (lambda (y) (if (hashtable-get! count y) (hashtable-remove!\
    \ count y) 0)) x)) lst)\n    (for-each (lambda (x) (hashtable-for-each (lambda\
    \ (y) (if (hashtable-get! count y) (hashtable-remove! count y) 0)) x)) lst)\n\
    \    (for-each (lambda (x) (hashtable-for-each (lambda (y) (if (hashtable-get!\
    \ count y) (hashtable-remove! count y) 0)) x)) lst)\n    (for-each (lambda (x)\
    \ (hashtable-for-each (lambda (y) (if (hashtable-get! count y) (hashtable-remove!\
    \ count y) 0)) x)) lst)\n    (for-each (lambda (x) (hashtable-for-each (lambda\
    \ (y) (if (hashtable-get! count y) (hashtable-remove! count y) 0)) x)) lst)\n\
    \    (for-each (lambda (x) (hashtable-for-each (lambda (y) (if (hashtable-get!\
    \ count y) (hashtable-remove! count y) 0)) x)) lst)\n    (for-each (lambda (x)\
    \ (hashtable-for-each (lambda (y) (if (hashtable-get! count y) (hashtable-remove!\
    \ count y) 0)) x)) lst)\n    (for-each (lambda (x) (hashtable-for-each (lambda\
    \ (y) (if (hashtable-get! count y) (hashtable-remove! count y) 0)) x)) lst)\n\
    \    (for-each (lambda (x", "  (cond\n    ((null? lst) -1)\n    (else\n      (let\
    \ ((freq (make-map)))\n        (for-each (lambda (x) (assoc x freq)) lst)\n  \
    \      (if (> freq (car lst)) (car lst) (search lst))))))\n", "  (cond\n    ((null?\
    \ lst) -1)\n    (else\n      (let ((freq (make-hashtable)))\n        (for-each\
    \ (lambda (x) (hashtable-put freq x)) lst)\n        (let ((max-freq (make-hashtable)))\n\
    \          (for-each (lambda (x) (hashtable-put max-freq x)) freq)\n         \
    \ (let ((max-freq-val (hashtable-get max-freq)))\n            (if (not (null?\
    \ max-freq-val))\n              (let ((max-freq-val-freq (hashtable-get max-freq-val)))\n\
    \                (if (not (null? max-freq-val-freq))\n                  (let ((max-freq-val-freq-val\
    \ (hashtable-get max-freq-val-freq)))\n                    (if (> max-freq-val-freq-val\
    \ max-freq-val-freq)\n                      (hashtable-remove max-freq-val-freq)\n\
    \                      (hashtable-remove max-freq-val-freq-val)\n            \
    \          (hashtable-remove max-freq-val)\n                      (hashtable-remove\
    \ max-freq)\n                      (hashtable-remove max-freq-val-freq)\n    \
    \                  (hashtable-remove max-freq-val)\n                      (hashtable-remove\
    \ max-freq)\n                      (hashtable-remove max-freq-val-freq)\n    \
    \                  (hashtable-remove max-freq-val)\n                      (hashtable-remove\
    \ max-freq)\n                      (hashtable-remove max-freq-val-freq)\n    \
    \                  (hashtable-remove max-freq-val)\n                      (hashtable-remove\
    \ max-freq)\n                      (hashtable-remove max-freq-val-freq)\n    \
    \                  (hashtable-remove max-freq-val)\n                      (hashtable-remove\
    \ max-freq)\n                      (hashtable-remove max-freq-val-freq)\n    \
    \                  (hashtable-remove max-freq-val)\n                      (hashtable-remove\
    \ max-freq)\n                      ", "  (let ((counts (map (lambda (x) (count\
    \ x lst)))))\n    (reduce (lambda (a b) (if (>= b a) b a)) 0 counts)))\n", " \
    \ (let ((freq (make-map)))\n    (for-each (lambda (x) (set! freq (get freq x)))\
    \ lst)\n    (for-each (lambda (x) (if (get freq x) (> (get freq x) 0) (set! freq\
    \ (-1) x))) lst)\n    (if (get freq (-1)) (-1) (get freq (-1))))\n", "  (let ((counts\
    \ (map (lambda (x) (count x)) lst))\n        (greatest (filter (lambda (x) (x\
    \ > 0) (counts x)) lst))))\n", "  (let* ([\n    counts (map (lambda (x) (make-count\
    \ x)) lst)\n    max-count (max (map (lambda (x) (counts x)) counts))\n    max-value\
    \ (max (map (lambda (x) (counts x)) counts))\n    max-value-index (index (map\
    \ (lambda (x) (counts x)) counts))\n    max-value-count (counts (max-value-index))\n\
    \    max-value-value (counts (max-value-index))\n    max-value-value-index (index\
    \ (counts (max-value-index)))\n    max-value-value-count (counts (max-value-index))\n\
    \    max-value-value-value (counts (max-value-index))\n    max-value-value-value-index\
    \ (index (counts (max-value-index)))\n    max-value-value-value-count (counts\
    \ (max-value-index))\n    max-value-value-value-value (counts (max-value-index))\n\
    \    max-value-value-value-value-index (index (counts (max-value-index)))\n  \
    \  max-value-value-value-value-count (counts (max-value-index))\n    max-value-value-value-value-value\
    \ (counts (max-value-index))\n    max-value-value-value-value-value-index (index\
    \ (counts (max-value-index)))\n    max-value-value-value-value-value-count (counts\
    \ (max-value-index))\n    max-value-value-value-value-value-value (counts (max-value-index))\n\
    \    max-value-value-value-value-value-value-index (index (counts (max-value-index)))\n\
    \    max-value-value-value-value-value-value-count (counts (max-value-index))\n\
    \    max-value-value-value-value-value-value-value (counts (max-value-index))\n\
    \    max-value-value-value-value-value-value-value-index (index (counts (max-value-index)))\n\
    \    ", "  (cond\n    [(null? lst) -1]\n    [(null? (car lst)) -1]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car lst) (car lst)]\n    [(car\
    \ lst) (car lst)]\n    ", "  (let ((freq (make-map)))\n    (for-each (lambda (x)\
    \ (set! freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (>\
    \ (get freq x) 0) (set! freq (-1) x))) lst)\n    (if (get freq -1) (-1) (get freq\
    \ 0)))\n)", "  (let ((count (make-hashtable)))\n    (for-each (lambda (x) (hashtable-put!\
    \ count x)) lst)\n    (let ((max (make-hashtable)))\n      (for-each (lambda (x)\
    \ (hashtable-put! max x)) count)\n      (let ((result (hashtable-get! max)))\n\
    \        (if (not result)\n            (hashtable-remove! max)\n            result))))\n",
  "  (let* ([\n    counts (map (lambda (x) (counts x)) lst)\n    max-count (max (map\
    \ (lambda (x) (counts x)) lst))\n    max-count-index (max-count)\n    max-count-value\
    \ (max-count-index)\n    max-count-value-index (max-count-value)\n    max-count-value-value\
    \ (max-count-value-index)\n    max-count-value-value-index (max-count-value-value)\n\
    \    max-count-value-value-value (max-count-value-value-index)\n    max-count-value-value-value-index\
    \ (max-count-value-value-value)\n    max-count-value-value-value-value (max-count-value-value-value-index)\n\
    \    max-count-value-value-value-value-index (max-count-value-value-value-value)\n\
    \    max-count-value-value-value-value-value (max-count-value-value-value-value-index)\n\
    \    max-count-value-value-value-value-value-index (max-count-value-value-value-value-value)\n\
    \    max-count-value-value-value-value-value-value-index (max-count-value-value-value-value-value-value)\n\
    \    max-count-value-value-value-value-value-value-value-index (max-count-value-value-value-value-value-value-value)\n\
    \    max-count-value-value-value-value-value-value-value-value-index (max-count-value-value-value-value-value-value-value-value)\n\
    \    max-count-value-value-value-value-value-value-value-value-value-index (max-count-value-value-value-value-value-value-value-value-value)\n\
    \    max-count-value-value-value-value-value-value-value-value-value-value-index\
    \ (max-count-value-value-value-value-value-value-value-value-value-value)\n  \
    \  max-", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n    (let ((max\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n      (if (not max) -1\n\
    \        (let ((max (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n    \
    \      (if (not max) -1\n            (let ((max (reduce (lambda (a b) (if (> a\
    \ b) a b)) 0 counts)))\n              (if (not max) -1\n                (let ((max\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                  (if (not\
    \ max) -1\n                    (let ((max (reduce (lambda (a b) (if (> a b) a\
    \ b)) 0 counts)))\n                      (if (not max) -1\n                  \
    \      (let ((max (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n      \
    \                    (if (not max) -1\n                            (let ((max\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                      \
    \        (if (not max) -1\n                                (let ((max (reduce\
    \ (lambda (a b) (if (> a b) a b)) 0 counts)))\n                              \
    \    (if (not max) -1\n                                    (let ((max (reduce\
    \ (lambda (a b) (if (> a b) a b)) 0 counts)))\n                              \
    \        (if (not max) -1\n                                        (let ((max\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                      \
    \                    (if (not max) -1\n                                      \
    \      (let ((max (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n      \
    \                                        (if (not max) -1\n                  \
    \                              (let ((max (reduce (lambda (a b) (if (> a b) a\
    \ b)) 0 counts)))\n                                                  (if (not\
    \ max) -1\n                                                    (let ((max (reduce\
    \ (lambda (a b) (if (> a", "  (let ((result -1)\n        (count 0))\n    (while\
    \ (< count lst)\n      (if (> (car lst) result)\n        (set! result (car lst))\n\
    \        (set! count (+ 1 count)))\n      (set! lst (cdr lst))))\n  result)\n",
  "  (let ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (filter (lambda\
    \ (x) (>= (counts x) x)) counts))))\n)\n", "  (cond\n    [(null? lst) -1]\n  \
    \  [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n  )\n)\n",
  "  (let ((freq (make-map lst)))\n    (let ((result -1))\n      (for-each (lambda\
    \ (x) (if (> x 0) (set! result x) (set! freq (- x 1)))) lst)\n      (if (not empty?\
    \ freq) (max result freq)))\n  )\n)\n", "  (let ((counts (map (lambda (x) (count\
    \ x lst))))\n        (max-count (lambda (x) (counts x))))\n    (if (empty? lst)\
    \ -1\n      (if (>= (car lst) 0)\n          (car lst)\n          (search (cdr\
    \ lst))))))\n", "  (let ((result -1)\n        (i 0))\n    (while (< i (length\
    \ lst))\n      (if (> (car lst) 0)\n        (set! result (car lst))\n        (set!\
    \ i (cdr lst)))\n      (set! lst (cdr lst))))\n  result)\n", "  (let ((counts\
    \ (map (lambda (x) (counts x)) lst))\n        (greatest (for-each (lambda (x)\
    \ (if (> x 0) (cons x (cdr counts)) ())) counts)))\n    greatest))\n", "  (let\
    \ ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (filter (> 0\
    \ (car counts)) (cdr counts))))\n    greatest))\n", "  (let ((freq (make-map)))\n\
    \    (for-each (lambda (x) (assoc x freq)) lst)\n    (if (empty? freq) -1\n  \
    \    (let ((max-freq (max (map (lambda (x) (freq x)) freq))))\n        (if (not\
    \ (empty? freq))\n            (let ((max-freq (max (map (lambda (x) (freq x))\
    \ freq))))\n              (if (not (empty? freq))\n                  (let ((max-freq\
    \ (max (map (lambda (x) (freq x)) freq))))\n                    (if (not (empty?\
    \ freq))\n                        (let ((max-freq (max (map (lambda (x) (freq\
    \ x)) freq))))\n                          (if (not (empty? freq))\n          \
    \                    (let ((max-freq (max (map (lambda (x) (freq x)) freq))))\n\
    \                                (if (not (empty? freq))\n                   \
    \                 (let ((max-freq (max (map (lambda (x) (freq x)) freq))))\n \
    \                                     (if (not (empty? freq))\n              \
    \                            (let ((max-freq (max (map (lambda (x) (freq x)) freq))))\n\
    \                                            (if (not (empty? freq))\n       \
    \                                        (let ((max-freq (max (map (lambda (x)\
    \ (freq x)) freq))))\n                                                (if (not\
    \ (empty? freq))\n                                                   (let ((max-freq\
    \ (max (map (lambda (x) (freq x)) freq))))\n                                 \
    \                    (if (not (empty? freq))\n                               \
    \                          (let ((max-freq (max (map (lambda (x) (freq x)) freq))))\n\
    \                                                           (if (not (empty? freq))\n\
    \                                                              (let ((max-freq\
    \ (max (map (lambda (x) (freq x)) freq))))\n                                 \
    \                               (if (not (empty? freq))\n                    \
    \                                           ", "  (cond\n    [(not (empty? lst))\n\
    \      (let ((freq (make-map lst)))\n        (let ((max-freq (make-map lst)))\n\
    \          (let ((max-freq-val (make-map lst)))\n            (let ((max-freq-val-val\
    \ (make-map lst)))\n              (for-each\n                (lambda (x)\n   \
    \               (if (not (empty? x))\n                    (let ((freq-val (freq\
    \ x)))\n                      (if (not (empty? freq-val))\n                  \
    \      (let ((max-freq-val-val-val (freq-val)))\n                          (if\
    \ (> max-freq-val-val-val freq-val)\n                            (set! max-freq-val-val-val\
    \ freq-val)\n                          )\n                        )\n        \
    \              )\n                    )\n                  )\n               \
    \ lst\n              )\n            )\n          )\n        )\n      )\n    ]\n\
    \    [else\n      (-1)\n    ]\n  )\n)\n", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \      (if (> max-count lst)\n          (-1)\n          (max-count))))\n)", " \
    \ (let ((result -1)\n         (count 0))\n    (while (< count lst)\n      (if\
    \ (> (car lst) result)\n        (set! result (car lst))\n        (set! count (+\
    \ 1 count)))\n      (set! lst (cdr lst))))\n  result)\n", "  (let ((counts (map\
    \ (lambda (x) (counts x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if\
    \ (> a b) a b)) 0 counts)))\n      (if (> max-count lst)\n          (let ((max-count\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n            (if (> max-count\
    \ lst)\n                (-1)\n                (max-count)))))))\n", "  (let ((counts\
    \ (map (lambda (x) (counts x)) lst))\n        (greatest (filter (>= 0 (car counts))\
    \ (cdr counts))))\n    greatest))\n", "  (let ((freq (make-map)))\n    (for-each\
    \ (lambda (x) (set! freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get\
    \ freq x) (set! freq (- freq x)))))\n    (for-each (lambda (x) (if (get freq x)\
    \ (set! freq (- freq x))) (set! freq x)))\n    (for-each (lambda (x) (if (get\
    \ freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each (lambda (x) (if\
    \ (get freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each (lambda\
    \ (x) (if (get freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (- freq x))) (set! freq x)))\n    (for-each\
    \ (lambda (x) (if (", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n \
    \   (reduce (lambda (a b) (if (> a b) b a)) 0 counts)))\n", "  (cond\n    [(null?\
    \ lst) -1]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst)", "  (let ((freq (make-map)))\n    (for-each (lambda\
    \ (x) (set! freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq (-1) x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set!\
    \ freq x) (set! freq (-1) x))) lst)\n    (for-each (lambda (x) (if (get freq x)\
    \ (set! freq x) (set! freq (-1) x))) lst)\n    (for-each (lambda (x) (if (get\
    \ freq x) (set! freq x) (set! freq (-1) x))) lst)\n    (for-each (lambda (x) (if\
    \ (get freq x) (set! freq x) (set! freq (-1) x))) lst)\n    (for-each (lambda\
    \ (x) (if (get freq x) (set! freq x) (set! freq (-1) x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x) (set! freq (-1) x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x) (set! freq (-1) x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x) (set! freq (-1) x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x) (set! freq (-1) x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x) (set! freq (-1) x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x) (set! freq (-1) x))) lst)\n    (for-each\
    \ (lambda (x) (if (get", "  (let ((counts (map (lambda (x) (count x)) lst)))\n\
    \    (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n  \
    \    (if (not max-count) (-1)\n        (let ((max-count-index (reduce (lambda\
    \ (a b) (if (> a b) a b)) 0 counts)))\n          (let ((max-count-value (lst[max-count-index]))\n\
    \                (max-count-value-index (index max-count-value counts)))\n   \
    \         (if (> max-count-value-index)\n              (let ((max-count-value-index-value\
    \ (lst[max-count-value-index]))\n                    (max-count-value-index-value-index\
    \ (index max-count-value-index-value counts)))\n                (if (> max-count-value-index-value)\n\
    \                  (let ((max-count-value-index-value-index-value (lst[max-count-value-index-value]))\n\
    \                         (max-count-value-index-value-index-value-index (index\
    \ max-count-value-index-value-index-value counts)))\n                    (if (>\
    \ max-count-value-index-value-index-value)\n                      (let ((max-count-value-index-value-index-value-index-value\
    \ (lst[max-count-value-index-value-index-value]))\n                          \
    \   (max-count-value-index-value-index-value-index-value-index (index max-count-value-index-value-index-value-index-value\
    \ counts)))\n                        (if (> max-count-value-index-value-index-value-index-value)\n\
    \                          (let ((max-count-value-index-value-index-value-index-value-index-value\
    \ (lst[max-count-value-index-value-index-value-index-value]))\n              \
    \                  (max-count-value-index-value-index-value-index-value-index-value-index\
    \ (index max-count-value-index-value-index-value-index-value-index-value counts)))\n\
    \                          (", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n\
    \    (reduce (lambda (a b) (if (> a b) b a)) 0 counts)))\n", "  (let ((counts\
    \ (map (lambda (x) (counts x)) lst))\n        (greatest (filter (lambda (x) (x\
    \ > 0) (counts x)) lst))))\n", "  (cond\n    [(null? lst) -1]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n  )\n)", "  (let ((counts (map\
    \ (lambda (x) (counts x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if\
    \ (>= a b) a b)) 0 counts)))\n      (if (> max-count lst)\n          (let ((max-count\
    \ (reduce (lambda (a b) (if (>= a b) a b)) 0 counts)))\n            (if (> max-count\
    \ lst)\n                (let ((max-count (reduce (lambda (a b) (if (>= a b) a\
    \ b)) 0 counts)))\n                  (if (> max-count lst)\n                 \
    \     (let ((max-count (reduce (lambda (a b) (if (>= a b) a b)) 0 counts)))\n\
    \                        (if (> max-count lst)\n                            (let\
    \ ((max-count (reduce (lambda (a b) (if (>= a b) a b)) 0 counts)))\n         \
    \                      (if (> max-count lst)\n                               \
    \    (let ((max-count (reduce (lambda (a b) (if (>= a b) a b)) 0 counts)))\n \
    \                                     (if (> max-count lst)\n                \
    \                          (let ((max-count (reduce (lambda (a b) (if (>= a b)\
    \ a b)) 0 counts)))\n                                              (if (> max-count\
    \ lst)\n                                                  (let ((max-count (reduce\
    \ (lambda (a b) (if (>= a b) a b)) 0 counts)))\n                             \
    \                         (if (> max-count lst)\n                            \
    \                              (let ((max-count (reduce (lambda (a b) (if (>=\
    \ a b) a b)) 0 counts)))\n                                                   \
    \          (if (> max-count lst)\n                                           \
    \                     (let ((max-count (reduce (lambda (a b) (if (>= a b) a b))\
    \ 0 counts)))\n                                                              \
    \      (if (> max-count lst)\n                                               \
    \                         (let ((max-count (reduce (lambda (a b) (if (>= a b)\
    \ a b)) 0 counts)))\n                                                        \
    \      ", "  (cond\n    [(null? lst) -1]\n    [(>= (car lst) 0) (car lst)]\n \
    \   [(>= (car lst) 0) (car lst)]\n  )\n)\n", "  (let ((counts (map (lambda (x)\
    \ (count x lst)))))\n    (let ((max-count (reduce (lambda (a b) (if (> a b) a\
    \ b)) 0 counts)))\n      (if (max-count >= lst)\n        (reduce (lambda (a b)\
    \ (if (> a b) a b)) lst max-count)\n        -1))))\n", "  (let ((counts (map (lambda\
    \ (x) (count x)) lst))\n        (greatest (map (lambda (x) (if (> x 0) (car counts)\
    \ -1))))))\n)\n", "  (let ((result -1)\n        (count 0))\n    (while (< count\
    \ lst)\n      (if (>= (car lst) result)\n        (set! result (car lst))\n   \
    \     (set! count (+ count (car lst))))\n      (set! count 0))\n    result))\n",
  "  (let ((freq (make-map)))\n    (for-each (lambda (x) (assoc x freq)) lst)\n  \
    \  (for-each (lambda (x) (if (assoc x freq) (car freq) -1)) lst)\n  )\n)\n", " \
    \ (let ((result -1)\n        (count 0))\n    (while (< count lst)\n      (if (>\
    \ (car lst) 0)\n        (set! result (car lst))\n        (set! count (+ 1 count)))))\n\
    \  result)\n", "  (let ((freq (make-map)))\n    (for-each (lambda (x) (set! freq\
    \ (get freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (> (get freq\
    \ x) 0) (set! freq (-1) x))) lst)\n    (if (get freq 0) (-1) (get freq 0)))\n)",
  "  (let ((freq (make-map)))\n    (for-each (lambda (x) (assoc x freq)) lst)\n  \
    \  (for-each (lambda (x) (if (>= x (car freq)) (cdr freq) (set! freq (assoc x\
    \ (car freq) + 1)))) freq)\n    (max (map (lambda (x) (car x)) freq))\n  )\n)\n",
  "  (let ((result -1)\n        (count 0))\n    (while (< count lst)\n      (if (>=\
    \ (car lst) result)\n        (set! result (car lst))\n        (set! count (+ 1\
    \ count)))))\n  result)\n", "  (let ((counts (map (lambda (x) (counts x)) lst))\n\
    \        (greatest (filter (> 0 (car counts)) (cdr counts))))\n    greatest))\n",
  "  (let ((freq (make-map)))\n    (for-each (lambda (x) (set! freq (get freq x)))\
    \ lst)\n    (for-each (lambda (x) (if (get freq x) (> (get freq x) 0) (set! freq\
    \ (-1) x))) lst)\n    (if (get freq 0) (-1) (get freq 0))\n  )\n)", "  (let ((freq\
    \ (make-map)))\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (if (empty?\
    \ freq)\n      (-1)\n      (let ((max (max (map (lambda (x) (car x)) freq)))))\n\
    \    )\n  )\n)\n", "  (let ((freq (make-map)))\n    (for-each (lambda (x) (set!\
    \ freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ (get freq x)) (set! freq (get freq (- x 1)))) lst)\n      (lambda (x) (if (get\
    \ freq x) (set! freq (get freq x)) (set! freq (get freq (- x 1)))))))\n  (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (get freq x)) (set! freq (get freq (-\
    \ x 1)))) lst)\n    (lambda (x) (if (get freq x) (set! freq (get freq x)) (set!\
    \ freq (get freq (- x 1)))))))\n)", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \      (if (not max-count) (-1)\n        (let ((max-value (reduce (lambda (a b)\
    \ (if (> a b) a b)) 0 counts)))\n          (if (> max-count max-value) max-value\
    \ max-count))))))\n", "  (let ((counts (map (lambda (x) (counts x)) lst))\n  \
    \      (max-count (lambda (x) (counts x))))\n    (if (null? counts)\n      (-1)\n\
    \      (max-count (lambda (x) (+ x (counts x)))))))\n", "  (let ((counts (map\
    \ (lambda (x) (counts x)) lst))\n        (greatest (filter (> 0 (car counts))\
    \ (cdr counts))))\n    greatest))\n", "  (let ((count (make-hashtable)))\n   \
    \ (for-each (lambda (x) (hashtable-put! count x)) lst)\n    (let ((max (make-hashtable)))\n\
    \      (for-each (lambda (x) (hashtable-put! max x)) count)\n      (if (hashtable-size\
    \ max)\n        (let ((max-value (hashtable-get! max)))\n          (if (hashtable-size\
    \ count)\n            (let ((count-value (hashtable-get! count)))\n          \
    \    (if (>= count-value max-value) max-value count-value))))))))\n", "  (let\
    \ ((counts (map (lambda (x) (count x lst)))))\n    (let ((max-count (reduce (lambda\
    \ (a b) (if (> a b) a b)) 0 counts)))\n      (if (not max-count) (-1)\n      \
    \  (let ((max-count-index (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \          (if (not max-count-index) (-1)\n            (let ((max-count-index-value\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n              (if (not\
    \ max-count-index-value) (-1)\n                (let ((max-count-index-value-value\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                  (if (>\
    \ max-count-index-value-value)\n                    (let ((max-count-index-value-value-value\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                      (if\
    \ (> max-count-index-value-value-value)\n                        (let ((max-count-index-value-value-value-value\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                      \
    \    (if (> max-count-index-value-value-value-value)\n                       \
    \     (let ((max-count-index-value-value-value-value-value (reduce (lambda (a\
    \ b) (if (> a b) a b)) 0 counts)))\n                              (if (> max-count-index-value-value-value-value-value)\n\
    \                                (let ((max-count-index-value-value-value-value-value-value\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                      \
    \            (if (> max-count-index-value-value-value-value-value-value)\n   \
    \                                 (let ((max-count-index-value-value-value-value-value-value-value\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n                      \
    \                (if (> max-count-index-value", "  (cond\n    ((null? lst) -1)\n\
    \    ((>= (car lst) 0) (car lst))\n    (else (search (cdr lst))))\n)\n", "  (let\
    \ ((lst-len (length lst)))\n    (let ((lst-index (0)))\n      (let ((lst-freq\
    \ (0)))\n        (while (< lst-index lst-len)\n          (if (> (car lst) 0)\n\
    \            (set! lst-freq (+ 1 lst-freq))\n            (set! lst-index (+ 1\
    \ lst-index)))\n          (set! lst-index (- 1 lst-index)))\n        (if (> lst-freq\
    \ (car lst))\n          (return lst-freq)\n          (set! lst-index (- 1 lst-index)))\n\
    \        (set! lst-index (+ 1 lst-index)))))))\n", "  (cond\n    [(null? lst)\
    \ -1]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n  \
    \  [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car\
    \ lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0)\
    \ (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst)", "  (cond\n    [(null? lst) -1]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)", "  (let\
    \ ((freq (make-map)))\n    (for-each (lambda (x) (set! freq (get freq x))) lst)\n\
    \    (for-each (lambda (x) (if (get freq x) (set! freq (get freq x)) (set! freq\
    \ (make-map)))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (get\
    \ freq x)) (set! freq (make-map)))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq (get freq x)) (set! freq (make-map)))) lst)\n    (for-each (lambda\
    \ (x) (if (get freq x) (set! freq (get freq x)) (set! freq (make-map)))) lst)\n\
    \    (for-each (lambda (x) (if (get freq x) (set! freq (get freq x)) (set! freq\
    \ (make-map)))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (get\
    \ freq x)) (set! freq (make-map)))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq (get freq x)) (set! freq (make-map)))) lst)\n    (for-each (lambda\
    \ (x) (if (get freq x) (set! freq (get freq x)) (set! freq (make-map)))) lst)\n\
    \    (for-each (lambda (x) (if (get freq x) (set! freq (get freq x)) (set! freq\
    \ (make-map)))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (get\
    \ freq x)) (set! freq (make-map)))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq (get freq x)) (set! freq (make-map)))) lst)\n    (", "  (let ((count\
    \ (make-hashtable)))\n    (for-each (lambda (x) (hashtable-put! count x)) lst)\n\
    \    (for-each (lambda (x) (hashtable-get! count x)) lst)\n    (let ((max (make-hashtable)))\n\
    \      (for-each (lambda (x) (hashtable-put! max x)) lst)\n      (for-each (lambda\
    \ (x) (hashtable-get! max x)) lst)\n      (if (hashtable-size max)\n        (hashtable-keys\
    \ max)\n        (hashtable-size count)\n        (-1)))\n  )\n)\n", "  (let ((counts\
    \ (map (lambda (x) (count x)) lst)))\n    (let ((max-count (reduce (lambda (a\
    \ b) (if (> a b) a b)) 0 counts)))\n      (if (not max-count)\n        (-1)\n\
    \        (let ((max-value (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \          (if (> max-value max-count)\n            max-value\n            max-count))))))",
  "  (cond\n    [(not (empty? lst))\n      (let ((count (make-vector (length lst)\
    \ #f)))\n        (for-each (lambda (x) (setf count (vector-set! count x count)))\
    \ lst))\n      (let ((max (vector-max count)))\n        (if (vector-length count)\n\
    \            (vector-ref max)\n            (-1)))\n    ]\n    [()]))\n", "  (let\
    \ ((lst-size (length lst)))\n    (if (null? lst)\n      (-1)\n      (let ((i 0))\n\
    \        (while (< i lst-size)\n          (if (> (car lst) 0)\n            (set!\
    \ i (i + 1))\n            (set! lst (cdr lst))))\n        (car lst))))\n", " \
    \ (let ((counts (map (lambda (x) (counts x)) lst))\n        (max-count (lambda\
    \ (x) (if (> x 0) (counts x) -1))))\n    max-count))\n", "  (cond\n    [(null?\
    \ lst) -1]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \  )\n)\n", "  (let ((freq (make-map)))\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n \
    \   (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n \
    \   (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n \
    \   (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq))", "  (let ((counts (map (lambda (x) (counts x))\
    \ lst))\n        (max-count (lambda (x) (if (>= x 0) (counts x) -1))))\n    max-count))\n",
  "  (let ((freq (make-map)))\n    (for-each (lambda (x) (set! freq (get freq x)))\
    \ lst)\n    (for-each (lambda (x) (if (get freq x) (> (get freq x) 0) (return\
    \ -1))) lst)\n    (get freq 0)))\n", "  (cond\n    ((null? lst) -1)\n    (else\n\
    \      (let ((count (count lst)))\n        (if (>= count lst)\n            (car\
    \ lst)\n            (search (cdr lst)))))))\n", "  (cond\n    [(not (empty? lst))\n\
    \      (let ((freq (make-map)))\n        (for-each (lambda (x) (assoc x freq))\
    \ lst))\n      (let ((max (make-map)))\n        (for-each (lambda (x) (assoc x\
    \ max)) freq)\n        (for-each (lambda (x) (assoc x max)) lst)\n        (max)))\n\
    \  (lambda (x) (-1)))\n", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n\
    \    (let ((max-count (reduce (lambda (a b) (if (> b a) a b)) 0 counts)))\n  \
    \    (if (max-count >= lst)\n          (reduce (lambda (a b) (if (> b a) a b))\
    \ max-count counts)\n          (-1))))\n)", "  (let ((counts (map (lambda (x)\
    \ (counts x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if (> a b) a\
    \ b)) 0 counts)))\n      (if (> max-count lst)\n          (begin (display \"No\
    \ such value\") (display max-count))\n          (display max-count))))\n)", " \
    \ (let ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (filter\
    \ (lambda (x) (x > 0) (counts x)) lst))))\n", "  (let ((counts (map (lambda (x)\
    \ (counts x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if (> a b) a\
    \ b)) 0 counts)))\n      (if (> max-count lst)\n          (-1)\n          (reduce\
    \ (lambda (a b) (if (> a b) a b)) max-count counts))))\n)\n", "  (let* ([\n  \
    \  (counts (map (lambda (x) (counts x)) lst))\n    (max-count (lambda (x) (if\
    \ (>= x 0) (counts x) -1)))\n    (max-count-index (lambda (x) (if (>= x 0) (counts\
    \ x) -1)))\n    (max-count-indexes (lambda (x) (if (>= x 0) (counts x) -1)))\n\
    \  ]\n  (if (>= (counts 0) 0)\n    (if (>= (counts (counts 0)) 0)\n      (if (>=\
    \ (counts (counts (counts 0))) 0)\n        (if (>= (counts (counts (counts (counts\
    \ 0)))) 0)\n          (if (>= (counts (counts (counts (counts (counts 0))))))\n\
    \            (if (>= (counts (counts (counts (counts (counts (counts 0)))))))\n\
    \              (if (>= (counts (counts (counts (counts (counts (counts (counts\
    \ 0))))))))\n                (if (>= (counts (counts (counts (counts (counts (counts\
    \ (counts (counts 0))))))))))\n                (if (>= (counts (counts (counts\
    \ (counts (counts (counts (counts (counts (counts 0))))))))))\n              \
    \    (if (>= (counts (counts (counts (counts (counts (counts (counts (counts (counts\
    \ (counts 0))))))))))))))\n                (if (>= (counts (counts (counts (counts\
    \ (counts (counts (counts (counts (counts (counts (counts (counts 0))))))))))))))\n\
    \                  (if (>= (counts (counts (counts (counts (counts (counts (counts\
    \ (counts (counts (counts (counts (counts (counts (counts 0))))))))))))))))))\n\
    \                (if (>= (counts (counts (counts (counts (counts (counts (counts\
    \ (counts (counts (counts (", "  (let ((freq (make-map)))\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n \
    \   (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n \
    \   (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda\
    \ (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n \
    \   (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc\
    \ x freq)) lst)\n    (for-each (lambda (x) (assoc x freq)) lst)\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (assoc x freq))\
    \ lst)\n    (for-each (lambda (x) (assoc x freq))", "  (cond\n    ((null? lst)\
    \ -1)\n    ((>= (car lst) 0) (car lst))\n    (else (search (cdr lst))))\n)\n",
  "  (cond\n    [(null? lst) -1]\n    [(> (car lst) 0) (car lst)]\n    [(> (car lst)\
    \ 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n\
    \    [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car\
    \ lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car\
    \ lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n  \
    \  [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car\
    \ lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car\
    \ lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n  \
    \  [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car\
    \ lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car\
    \ lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n  \
    \  [(> (car lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n    [(> (car\
    \ lst) 0) (car lst)]\n    [(> (car lst) 0) (car lst)]\n    [(", "  (let ((counts\
    \ (map (lambda (x) (counts x)) lst))\n        (greatest (filter (> 0 (car counts))\
    \ (cdr counts))))\n    greatest))\n", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \      (if (max-count >= lst)\n        (reduce (lambda (a b) (if (> a b) a b))\
    \ lst max-count)\n        (reduce (lambda (a b) (if (> a b) a b)) -1))))\n", " \
    \ (let ((counts (map (lambda (x) (counts x)) lst)))\n    (let ((max (max (map\
    \ (lambda (x) (car x)) counts)) (car counts)))\n      (if (not (null? max))\n\
    \        (car max)\n        (-1))))\n)", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if (>= a b) a b)) 0\
    \ counts)))\n      (if (not (empty? counts))\n        (let ((max-value (reduce\
    \ (lambda (a b) (if (>= a b) a b)) 0 counts)))\n          (if (> max-count max-value)\n\
    \            max-value\n            max-count))))))", "  (let* ([\n    (lst-size\
    \ lst)\n    (lst-max-freq lst)\n    (lst-max-freq-val (car lst-max-freq))\n  \
    \  (lst-max-freq-freq (car lst-max-freq))\n    (lst-max-freq-freq-val (car lst-max-freq-freq))\n\
    \    (lst-max-freq-freq-freq (car lst-max-freq-freq))\n    (lst-max-freq-freq-freq-val\
    \ (car lst-max-freq-freq-freq))\n    (lst-max-freq-freq-freq-freq (car lst-max-freq-freq-freq-freq))\n\
    \    (lst-max-freq-freq-freq-freq-val (car lst-max-freq-freq-freq-freq-freq))\n\
    \    (lst-max-freq-freq-freq-freq-freq (car lst-max-freq-freq-freq-freq-freq-freq))\n\
    \    (lst-max-freq-freq-freq-freq-freq-val (car lst-max-freq-freq-freq-freq-freq-freq-freq))\n\
    \    (lst-max-freq-freq-freq-freq-freq-freq (car lst-max-freq-freq-freq-freq-freq-freq-freq-freq))\n\
    \    (lst-max-freq-freq-freq-freq-freq-freq-val (car lst-max-freq-freq-freq-freq-freq-freq-freq-freq))\n\
    \    (lst-max-freq-freq-freq-freq-freq-freq-freq (car lst-max-freq-freq-freq-freq-freq-freq-fre",
  "  (let ((counts (map (lambda (x) (counts x)) lst)))\n    (let ((greatest (reduce\
    \ (lambda (x y) (if (> x y) x y)) 0 counts)))\n      (if (not (empty? counts))\n\
    \        greatest\n        (-1))))\n)", "  (let ((count (make-hashtable)))\n \
    \   (let ((result -1))\n      (let ((i (car lst)))\n        (hashtable-set! count\
    \ i (hashtable-ref count i) 1)\n        (while (not (null? lst))\n          (if\
    \ (hashtable-ref count i)\n            (if (not (hashtable-ref result count i))\n\
    \              (set! result (hashtable-ref count i))\n              (set! count\
    \ (hashtable-ref count i) (hashtable-ref count i) - 1))\n            (set! i (cdr\
    \ i)))\n          (set! lst (cdr lst))))\n    result))\n", "  (let ((result -1)\n\
    \        (i 0)\n        (lst-len (length lst)))\n    (while (< i lst-len)\n  \
    \    (if (> (car lst) 0)\n        (set! result (car lst))\n        (set! i (i\
    \ + 1)))\n      (set! i (i + 1)))\n    result))\n", "  (let ((counts (map (lambda\
    \ (x) (counts x)) lst))\n        (greatest (filter (>= 0 (car counts)) (cdr counts))))\n\
    \    greatest))\n", "  (let ((count (make-map)))\n    (for-each (lambda (x) (count/c\
    \ (count x) (count x))) lst)\n    (for-each (lambda (x) (if (not (empty? count))\
    \ (if (count/c x) (count x) -1))) lst)\n    (if (empty? count) -1 (count/c (count\
    \ lst) lst)))\n)", "  (let ((counts (map (lambda (x) (counts x)) lst))\n     \
    \   (greatest (filter (lambda (x) (x > 0) (cdr x)) counts)))\n    greatest))\n",
  "  (cond\n    [(not (empty? lst))\n      (let ((count (make-vector (length lst)\
    \ #f)))\n        (for-each (lambda (x) (setf count (vector-ref count x) (vector-set!\
    \ count x (vector-ref lst x)))) count))\n      (let ((max (make-vector (length\
    \ lst) #f)))\n        (for-each (lambda (x) (setf max (vector-ref max x) (vector-ref\
    \ lst x))) max))\n      (if (vector-ref max 0) (-1) (vector-ref max))]\n    [()\
    \ -1])\n)\n", "  (let ((result -1)\n        (count 0))\n    (while (< count lst)\n\
    \      (if (>= (car lst) result)\n          (set! result (car lst))\n        (set!\
    \ count (+ count 1)))))\n  result)\n", "  (let ((result -1)\n        (count 0))\n\
    \    (while (< count lst)\n      (if (>= (car lst) result)\n        (set! result\
    \ (car lst))\n        (set! count (+ count 1))))\n    result))\n", "  (let ((counts\
    \ (map (lambda (x) (counts x)) lst))\n        (greatest (filter (> 0 (car counts))\
    \ (cdr counts))))\n    greatest))\n", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst)))\n    (let ((max (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \      (if (> max 0)\n          (reduce (lambda (a b) (if (> a b) a b)) max counts)\n\
    \          (-1)))))\n", "  (let ((result -1)\n        (i 0)\n        (lst-len\
    \ (length lst)))\n    (while (< i lst-len)\n      (if (> (car lst) 0)\n      \
    \  (set! result (car lst))\n        (set! i (i + 1)))\n      (set! i (i + 1)))\n\
    \    result))\n", "  (let ((freq (make-hash)))\n    (for-each (lambda (x) (hash-set!\
    \ freq x)) lst)\n    (for-each (lambda (x) (hash-get freq x)) lst)\n    (if (hash-size\
    \ freq)\n      (hash-for-each (lambda (x) (if (> x 0) (hash-remove freq x))) lst)\n\
    \      (-1)))\n", "  (cond\n    ((null? lst) -1)\n    ((> (car lst) 0) (car lst))\n\
    \    (else (search (cdr lst))))\n)\n", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst))\n        (greatest (map (lambda (x) (if (> x 0) (car counts) -1))))))\n\
    )\n", "  (let ((freq (make-map)))\n    (for-each (lambda (x) (set! freq (get freq\
    \ x))) lst)\n    (for-each (lambda (x) (if (get freq x) (> (get freq x) 0) (set!\
    \ freq (-1) x))) lst)\n    (if (get freq 0) (-1) (get freq 0)))\n)\n", "  (cond\n\
    \    [(not (empty? lst))\n      (let ((freq (make-map lst)))\n        (let ((max\
    \ (make-vector 1)))\n          (let ((i (0)))\n            (while (< i (vector-length\
    \ lst))\n              (if (> (vector-ref lst i) 0)\n                  (set! max\
    \ (vector-ref max (vector-ref lst i)))\n                  (set! i (vector-inc\
    \ i)))\n                (set! i (vector-inc i))))\n            (vector-ref max))))\n\
    \    (else\n      (-1)))\n", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n\
    \    (let ((max-count (reduce (lambda (a b) (if (>= a b) a b)) 0 counts)))\n \
    \     (if (max-count >= lst)\n        (reduce (lambda (a b) (if (>= a b) a b))\
    \ max-count counts)\n        (reduce (lambda (a b) (if (>= a b) a b)) -1 counts))))\n",
  "  (let ((freq (make-map)))\n    (for-each (lambda (x) (set! freq (get freq x)))\
    \ lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (- (get freq x)\
    \ 1)))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (- (get freq\
    \ x) 1)))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (- (get\
    \ freq x) 1)))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (-\
    \ (get freq x) 1)))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ (- (get freq x) 1)))) lst)\n    (for-each (lambda (x) (if (get freq x) (set!\
    \ freq (- (get freq x) 1)))) lst)\n    (for-each (lambda (x) (if (get freq x)\
    \ (set! freq (- (get freq x) 1)))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq (- (get freq x) 1)))) lst)\n    (for-each (lambda (x) (if (get\
    \ freq x) (set! freq (- (get freq x) 1)))) lst)\n    (for-each (lambda (x) (if\
    \ (get freq x) (set! freq (- (get freq x) 1)))) lst)\n    (for-each (lambda (x)\
    \ (if (get freq x) (set! freq (- (get freq x) 1)))) lst)\n    (for-each (lambda\
    \ (x) (if (get freq x) (set! freq (- (get freq x) 1)))) lst)\n    (for-each (lambda\
    \ (x) (if (get freq x) (set! freq (- (get freq x) 1)))) lst)\n    (for-each (lambda",
  "  (let ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (for-each\
    \ (lambda (x) (if (> x 0) (cons x (counts x)) ())) counts)))\n    greatest))\n",
  "  (let ((counts (map (lambda (x) (count x)) lst))\n        (max-count (lambda (x)\
    \ (if (> x 0) (counts x) -1))))\n    max-count))\n", "  (let ((freq (make-map)))\n\
    \    (for-each (lambda (x) (set! freq (get freq x))) lst)\n    (for-each (lambda\
    \ (x) (if (get freq x) (> (get freq x) 0) (set! freq (-1)))) lst)\n    (if (get\
    \ freq 0) (-1) (get freq 0)))\n)\n", "  (let ((freq (make-map)))\n    (for-each\
    \ (lambda (x) (assoc x freq)) lst)\n    (for-each (lambda (x) (if (> x 0) (assoc\
    \ x freq) (assoc -1 freq))) lst)\n    (max (map (lambda (x) (if (> x 0) (assoc\
    \ x freq) (assoc -1 freq))) lst)))\n", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst))\n        (max-count (lambda (x) (if (> x 0) (counts x) -1))))\n  \
    \  (if (empty? lst) -1\n      (if (> max-count lst) max-count\n        (if (>\
    \ max-count counts (car lst)) max-count (search (cdr lst)))))))\n", "  (let ((counts\
    \ (map (lambda (x) (counts x)) lst))\n        (greatest (filter (lambda (x) (x\
    \ > 0) (counts x)) lst))))\n", "  (let ((freq (make-map)))\n    (for-each (lambda\
    \ (x) (set! freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq (- freq x)))))\n    (if (not (empty? freq))\n      (let ((max-freq\
    \ (max freq)))\n        (if (get max-freq)\n          (return max-freq)\n    \
    \      (return -1))))))", "  (let ((counts (map (lambda (x) (counts x)) lst))\n\
    \        (greatest (filter (>= 0 (car counts)) (cdr counts))))\n    greatest))\n",
  "  (let ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (filter (lambda\
    \ (x) (x > 0) (counts x)) lst))))\n", "  (let ((freq (make-map)))\n    (for-each\
    \ (lambda (x) (set! freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get\
    \ freq x) (set! freq (- 1 x))) freq))\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n\
    \    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x))) lst)\n    (for-each (lambda (x)\
    \ (if (get freq x) (set! freq x))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n\
    \    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x))) lst)\n    (for-each (lambda (x)\
    \ (if (get freq x) (set! freq x))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n\
    \    (for-each (lambda (x", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n\
    \    (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n  \
    \    (if (not (empty? counts))\n        (let ((max-count (reduce (lambda (a b)\
    \ (if (> a b) a b)) 0 counts)))\n          (if (not (empty? counts))\n       \
    \     (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n \
    \             (if (not (empty? counts))\n                (let ((max-count (reduce\
    \ (lambda (a b) (if (> a b) a b)) 0 counts)))\n                  (if (not (empty?\
    \ counts))\n                    (let ((max-count (reduce (lambda (a b) (if (>\
    \ a b) a b)) 0 counts)))\n                      (if (> max-count lst)\n      \
    \                  max-count\n                        (-1))))))))))))))))))\n",
  "  (cond\n    ((null? lst) -1)\n    ((> (car lst) 0) (car lst))\n    (else (search\
    \ (cdr lst))))\n)\n", "  (let ((freq (make-map)))\n    (for-each (lambda (x) (set!\
    \ freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ (-1) x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n\
    \    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x))) lst)\n    (for-each (lambda (x)\
    \ (if (get freq x) (set! freq x))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n\
    \    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x))) lst)\n    (for-each (lambda (x)\
    \ (if (get freq x) (set! freq x))) lst)\n    (for-each (lambda (x) (if (get freq\
    \ x) (set! freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n\
    \    (for-each (lambda (x) (if (get freq x) (set! freq x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq x))) lst)\n    (for-each (lambda (",
  "  (let ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (filter (>\
    \ 0 (car counts)) (cdr counts))))\n    greatest))\n", "  (let ((result -1)\n \
    \        (count 0))\n    (while (< count lst)\n      (if (> (car lst) 0)\n   \
    \     (set! result (car lst))\n        (set! count (+ 1 (car lst))))\n      (set!\
    \ lst (cdr lst))))\n", "  (let ((freq (make-map)))\n    (for-each (lambda (x)\
    \ (set! freq (get freq x))) lst)\n    (for-each (lambda (x) (if (get freq x) (>\
    \ (get freq x) 0) (set! freq (-1) x))) lst)\n    (if (get freq 0) (-1) (get freq\
    \ 0)))\n)", "  (let ((counts (map (lambda (x) (counts x)) lst))\n        (max-count\
    \ (lambda (x) (if (>= x 0) (counts x) -1))))\n    max-count))\n", "  (let ((result\
    \ -1)\n         (i 0))\n    (while (< i (length lst))\n      (if (> (car lst)\
    \ 0)\n        (set! result (car lst))\n        (set! lst (cdr lst)))\n      (set!\
    \ i (1 + i))))\n  result)\n", "  (let ((lst (lst)))\n    (if (null? lst)\n   \
    \   (-1)\n      (let ((freq (make-hashtable)))\n        (for-each (lambda (x)\
    \ (hashtable-put freq x)) lst)\n        (let ((max (make-hashtable)))\n      \
    \    (for-each (lambda (x) (hashtable-put max x)) freq)\n          (let ((max-freq\
    \ (hashtable-get max)))\n            (if (not (null? max-freq))\n            \
    \  (let ((max-freq-freq (hashtable-get max-freq)))\n                (if (not (null?\
    \ max-freq-freq))\n                  (let ((max-freq-freq-freq (hashtable-get\
    \ max-freq-freq)))\n                    (if (not (null? max-freq-freq-freq))\n\
    \                      (let ((max-freq-freq-freq-freq (hashtable-get max-freq-freq-freq)))\n\
    \                        (if (> max-freq-freq-freq-freq max-freq)\n          \
    \                (set! max-freq max-freq-freq-freq-freq)\n                   \
    \       max-freq)\n                      )\n                    )\n          \
    \        )\n                )\n              )\n            )\n          )\n \
    \       )\n      )\n    )\n  )\n)", "  (let ((count (make-hashtable)))\n    (for-each\
    \ (lambda (x) (hashtable-put! count x)) lst)\n    (let ((result (hashtable-get!\
    \ count lst)))\n      (if (not result)\n        (hashtable-remove! count lst)\n\
    \        result))))\n", "  (let ((result -1)\n        (count 0))\n    (while (<\
    \ count lst)\n      (if (>= (car lst) result)\n        (set! result (car lst))\n\
    \        (set! count (+ 1 count)))))\n  result)\n", "  (let ((freq (make-map)))\n\
    \    (for-each (lambda (x) (set! freq (get freq x))) lst)\n    (for-each (lambda\
    \ (x) (if (get freq x) (set! freq (-1) x))) lst)\n    (for-each (lambda (x) (if\
    \ (get freq x) (set! freq (if (get freq x) (-1) x))) lst)\n    (for-each (lambda\
    \ (x) (if (get freq x) (set! freq (if (get freq x) (-1) x))) lst)\n    (for-each\
    \ (lambda (x) (if (get freq x) (set! freq (if (get freq x) (-1) x))) lst)\n  \
    \  (for-each (lambda (x) (if (get freq x) (set! freq (if (get freq x) (-1) x)))\
    \ lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (if (get freq x)\
    \ (-1) x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq (if (get\
    \ freq x) (-1) x))) lst)\n    (for-each (lambda (x) (if (get freq x) (set! freq\
    \ (if (get freq x) (-1) x))) lst)\n    (for-each (lambda (x) (if (get freq x)\
    \ (set! freq (if (get freq x) (-1) x))) lst)\n    (for-each (lambda (x) (if (get\
    \ freq x) (set! freq (if (get freq x) (-1) x))) lst)\n    (for-each (lambda (x)\
    \ (if (get freq x) (set! freq (if (get freq x) (-1) x))) lst)\n    (for-each (lambda\
    \ (x) (if (get freq x) (set! freq (if (get freq x) (-1) x))) lst)\n    (for",
  "  (let ((counts (map (lambda (x) (counts x)) lst)))\n    (let ((max-count (reduce\
    \ (lambda (a b) (if (> a b) a b)) 0 counts)))\n      (if (not (empty? counts))\n\
    \        (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \          (if (> max-count lst)\n            (return max-count)\n           \
    \ (return -1))))))))\n", "  (let ((counts (map (lambda (x) (counts x)) lst)))\n\
    \    (let ((max (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n      (if\
    \ (max > 0)\n        (reduce (lambda (a b) (if (> a b) a b)) max counts)\n   \
    \     (-1))))\n)", "  (cond\n    [(null? lst) -1]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)", "  (let\
    \ ((counts (map (lambda (x) (counts x)) lst))\n        (greatest (filter (lambda\
    \ (x) (x > 0) (counts x)) lst))))\n", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst))\n        (greatest (filter (> 0 (car counts)) (cdr counts))))\n  \
    \  greatest))\n", "  (let ((freq (make-hash)))\n    (for-each (lambda (x) (hash-set!\
    \ freq x)) lst)\n    (for-each (lambda (x) (hash-get freq x)) lst)\n    (if (hash-size\
    \ freq)\n      (hash-for-each (lambda (x) (if (> x 0) (hash-remove freq x))) lst)\n\
    \      (-1)))\n", "  (cond\n    [(null? lst) -1]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n\
    \    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>=\
    \ (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)\
    \ 0) (car lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst) 0) (car\
    \ lst)]\n    [(>= (car lst) 0) (car lst)]\n    [(>= (car lst)", "  (let ((count\
    \ (make-hashtable)))\n    (for-each (lambda (x) (hashtable-put! count x)) lst)\n\
    \    (for-each (lambda (x) (hashtable-get count x)) lst)\n    (let ((max (make-hashtable)))\n\
    \      (for-each (lambda (x) (hashtable-put! max x)) lst)\n      (for-each (lambda\
    \ (x) (hashtable-get max x)) lst)\n      (if (hashtable-size max) (hashtable-get\
    \ max max) -1)))\n", "  (cond\n    ((null? lst) -1)\n    (else\n      (let ((i\
    \ (car lst)))\n        (if (> i 0)\n            (if (> (car lst) i)\n        \
    \        (car lst)\n                (search (cdr lst))))\n          (-1)))\n \
    \ )\n)\n", "  (cond\n    ((null? lst) -1)\n    ((>= (car lst) 0) (car lst))\n\
    \    (else (search (cdr lst))))\n)\n", "  (let ((counts (map (lambda (x) (count\
    \ x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n\
    \      (if (> max-count lst)\n          (begin (display \"No such a value\") (display\
    \ max-count))\n          (display max-count))))\n)", "  (let ((counts (map (lambda\
    \ (x) (counts x)) lst)))\n    (let ((max-count (reduce (lambda (a b) (if (> a\
    \ b) a b)) 0 counts)))\n      (if (not max-count) (-1)\n        (let ((max-value\
    \ (reduce (lambda (a b) (if (> a b) a b)) 0 counts)))\n          (if (not max-value)\
    \ (-1)\n            (max-value))))))))\n", "  (let ((result -1)\n        (count\
    \ 0)\n        (i lst))\n    (while (not (null? i))\n      (if (not (null? (cdr\
    \ i)))\n        (if (not (null? (cdr (cdr i))))\n          (if (> (car i) (car\
    \ (cdr i)))\n            (set! result (car i))\n            (set! count (+ count\
    \ 1))\n            (set! i (cdr i)))\n          (set! i (cdr i)))\n        (set!\
    \ i (cdr i)))\n      (set! i (cdr i)))\n    (set! i lst)\n    (set! count 0)\n\
    \    (set! result -1))\n  result)\n)\n", "  (let ((counts (map (lambda (x) (counts\
    \ x)) lst))\n        (greatest (filter (lambda (x) (x > 0) (counts x)) counts))))\n\
    )\n", "  (let ((result -1)\n        (count 0))\n    (while (< count lst)\n   \
    \   (if (> (car lst) 0)\n        (set! result (car lst))\n        (set! count\
    \ (+ 1 count)))\n      (set! lst (cdr lst))))\n  result)\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
