name: HumanEval_72_will_it_fly
language: rkt
prompt: "#lang racket\n\n;; Write a function that returns #t if the object q will\
  \ fly, and #f otherwise.\n;; The object q will fly if it's balanced (it is a palindromic\
  \ list) and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n;; Example:\n;; >>> (will_it_fly (list 1 2) 5)\n;; #f\n;; # 1+2 is less than\
  \ the maximum possible weight, but it's unbalanced.\n;; >>> (will_it_fly (list 3\
  \ 2 3) 1)\n;; #f\n;; # it's balanced, but 3+2+3 is more than the maximum possible\
  \ weight.\n;; >>> (will_it_fly (list 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less than the\
  \ maximum possible weight, and it's balanced.\n;; >>> (will_it_fly (list 3) 5)\n\
  ;; #t\n;; # 3 is less than the maximum possible weight, and it's balanced.\n(define\
  \ (will_it_fly q w)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate will_it_fly))\n\
  \    (check-equal? (candidate (list 3 2 3) 9) #t)\n    (check-equal? (candidate\
  \ (list 1 2) 5) #f)\n    (check-equal? (candidate (list 3) 5) #t)\n    (check-equal?\
  \ (candidate (list 3 2 3) 1) #f)\n    (check-equal? (candidate (list 1 2 3) 6) #f)\n\
  \    (check-equal? (candidate (list 5) 5) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(<= w (+ (car q) (car q))) #f]\n    [(= (car q) (car\
    \ q)) #t]\n    [(<= w (+ (car q) (cdr q))) #f]\n    [(= (car q) (cdr q)) #t]\n\
    \    [#f #t]\n  )\n)\n", "  (cond\n    [(list? q)\n      (equal? (length q) (length\
    \ (reverse q)))\n      (not (equal? q (reverse q)))\n      (lesser-or-equal? (sum\
    \ q) w)]\n    [else\n      #f]))\n", "  (cond\n    [(and (balanced? q) (less-or-equal?\
    \ (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(<= w (+ (car q) (car q)))\
    \ #t]\n    [(= (car q) (car q)) #f]\n    [(<= w (+ (car q) (cdr q))) #t]\n   \
    \ [(= (car q) (cdr q)) #f]\n    [#f]\n  )\n)\n", "  (cond\n    [(list? q)\n  \
    \    (let ((sum (reduce (+ (car q) (cdr q))))\n            (less-or-equal? sum\
    \ w))\n        (not (equal? sum w)))\n      ]\n    [(string? q)\n      (let ((sum\
    \ (reduce (+ (string-to-number q) (string-to-number (string-append q \"0\"))))))\n\
    \        (less-or-equal? sum w))\n      ]\n    [else\n      #t\n      ]\n  )\n\
    )\n", "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n    [(= (car q) (car q))\
    \ #f]\n    [(<= w (+ (car q) (cdr q))) #t]\n    [(= (car q) (cdr q)) #f]\n   \
    \ [#f]))\n\n;; Write a function that returns the sum of the elements of the list\
    \ q.\n;; Example:\n;; >>> (sum (list 1 2 3))\n;; # 3\n;; >>> (sum (list 1 2 3\
    \ 4))\n;; # 7\n;; >>> (sum (list 1 2 3 4 5))\n;; # 12\n;; >>> (sum (list 1 2 3\
    \ 4 5 6))\n;; # 17\n;; >>> (sum (list 1 2 3 4 5 6 7))\n;; # 24\n;; >>> (sum (list\
    \ 1 2 3 4 5 6 7 8))\n;; # 31\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9))\n;; # 38\n\
    ;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10))\n;; # 45\n;; >>> (sum (list 1 2 3 4 5\
    \ 6 7 8 9 10 11))\n;; # 52\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;;\
    \ # 59\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; # 66\n;; >>> (sum\
    \ (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n;; # 73\n;; >>> (sum (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13 14 15))\n;; # 80\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9\
    \ 10 11 12 13 14 15 16))\n;; # 87\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17))\n;; # 94\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18))\n;; # 101\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19))\n;; # 108\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10", "  (cond\n\
    \    [(list? q)\n      (let ((sum (reduce (lambda (a b) (+ a b)) 0) (car q)))\n\
    \        (lesser-or-equal? sum w))]\n    [(string? q)\n      (let ((sum (reduce\
    \ (lambda (a b) (+ a b)) 0) (string-length q)))\n        (lesser-or-equal? sum\
    \ w))]\n    [else\n      #f]))\n", "  (cond\n    [(= w 0) #t]\n    [(<= (sum q)\
    \ w) #t]\n    [(< (sum q)) #f]\n    [(not (equal? (reverse q) q)) #f]\n    [#f]\n\
    \  )\n)\n", "  (cond\n    [(= (length q) (string-length q))\n      (string-equal?\
    \ q (string-reverse q))\n      (<= (sum q) w)]\n    [(<= (sum q) w)]\n    [#t]))\n",
  "  (cond\n    [(equal? (length q) (length q))\n      (equal? q (reverse q))\n  \
    \    (less? (sum q) w)]\n    [#t]\n    [#f]))\n", "  (cond\n    [(<= w (+ (car\
    \ q) (car q))) #f]\n    [(= (car q) (car q)) #t]\n    [(<= w (+ (car q) (cdr q)))\
    \ #f]\n    [(= (car q) (cdr q)) #t]\n    [#f]\n  )\n)\n", "  (cond\n    [(equal?\
    \ (length q) (length q))\n      (equal? (string-append (map (lambda (x) (string-append\
    \ x \" \")) q) (string-reverse q)) (string-reverse q))\n      (lesser-or-equal?\
    \ (sum q) w)\n      (true)]\n    [false]))\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (string-equal? q (string-reverse q))\n      (<= (sum q) w)]\n   \
    \ [(<= (sum q) w)]\n    [#t]))\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (equal? q (string-reverse q))]\n    [(<= w (+ (map (lambda (x) (*\
    \ x x)) q)) 0)]\n    [#f]))\n\n;; >>> (will_it_fly (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\
    \ 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62\
    \ 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88\
    \ 89 90 91 92 93 94 95 96 97 98 99 100)) 5)\n;; #f\n;; >>> (will_it_fly (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\
    \ 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\
    \ 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\
    \ 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100) 100))\n;; #t\n;;\
    \ >>> (will_it_fly (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\
    \ 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\
    \ 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73\
    \ 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\
    \ 100) 100)\n;; #t\n;; >>> (will_it_fly (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40\
    \ 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66\
    \ 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85", "  (cond\n    [(<=\
    \ w (+ (car q) (car q))) #t]\n    [(= (car q) (car q)) #f]\n    [(<= w (+ (car\
    \ q) (cdr q))) #t]\n    [(= (car q) (cdr q)) #f]\n    [#f]\n  )\n)\n", "  (cond\n\
    \    [(= (length q) (string-length q))\n      (equal?\n        (string-join \"\
    \ \" (map (lambda (x) (string-join \" \" x)) q))\n        (string-join \" \" q))]\n\
    \    [(<= (sum q) w)\n      (true)]\n    [false]))\n", "  (cond\n    [(and (balanced?\
    \ q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(= (length\
    \ q) (string-length q))\n      (string-equal? q (string-reverse q))\n      (<=\
    \ w (+ (map (lambda (x) (string-length x)) q) (string-length q)))\n      (true)]\n\
    \    [false]))\n", "  (cond\n    [(equal? (length q) (length q))\n      (equal?\
    \ q (reverse q))]\n    [(<= w (+ (car q) (car q)))\n      (not (equal? q (reverse\
    \ q)))]\n    [#f]))\n", "  (cond\n    [(list? q)\n      (let ((sum (reduce (lambda\
    \ (x y) (+ x y)) 0) (car q)))\n        (lesser-or-equal? sum w))]\n    [(not (equal?\
    \ (length q) (length q)))\n      (let ((sum (reduce (lambda (x y) (+ x y)) 0)\
    \ (cdr q)))\n        (lesser-or-equal? sum w)))\n    (t)])\n", "  (cond\n    [(and\
    \ (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n\
    \    [(equal? (length q) (string-length q))\n      (not (string-equal? q (reverse\
    \ q)))\n      (lesser-or-equal? (sum q) w)]\n    [true]))\n", "  (cond\n    [(and\
    \ (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n\n;; #lang scheme\n\
    ;; (define (will-it-fly q w)\n;;   (cond\n;;     [(and (balanced? q) (less-or-equal?\
    \ (sum q) w)) #t]\n;;     [#f]\n;;   ))\n;; (will-it-fly (list 1 2) 5)\n;; #f\n\
    ;; # 1+2 is less than the maximum possible weight, but it's unbalanced.\n;; (will-it-fly\
    \ (list 3 2 3) 1)\n;; #f\n;; # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n;; (will-it-fly (list 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n;; (will-it-fly (list\
    \ 3) 5)\n;; #t\n;; # 3 is less than the maximum possible weight, and it's balanced.\n\
    ;; #lang lisp\n;; (defun will-it-fly (q w)\n;;   (cond\n;;     [(and (balanced?\
    \ q) (less-or-equal? (sum q) w)) #t]\n;;     [#f]\n;;   ))\n;; (will-it-fly (list\
    \ 1 2) 5)\n;; #f\n;; # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n;; (will-it-fly (list 3 2 3) 1)\n;; #f\n;; # it's balanced, but\
    \ 3+2+3 is more than the maximum possible weight.\n;; (will-it-fly (list 3 2 3)\
    \ 9)\n;; #t\n;; # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\
    ;; (will-it-fly (list 3) 5)\n;; #t\n;; # 3 is less than the maximum possible weight,\
    \ and it's balanced.\n;; #lang scheme\n;; (define (will-it-fly q w)\n;;   (cond\n\
    ;;     [(and (balanced? q) (less-", "  (cond\n    ((null? q) #t)\n    ((null?\
    \ (cdr q)) #f)\n    (else\n      (let ((sum (sum (map (lambda (x) (+ (* x x) w))\
    \ q))))\n        (cond\n          ((<= sum w) #t)\n          ((< sum w) #f)\n\
    \          (else #t)))))))\n\n;; #lang scheme\n\n;; Write a function that returns\
    \ #t if the object q will fly, and #f otherwise.\n;; The object q will fly if\
    \ it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n;; Example:\n;; >>> (will_it_fly\
    \ (list 1 2) 5)\n;; #f\n;; # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n;; >>> (will_it_fly (list 3 2 3) 1)\n;; #f\n;; # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n;; >>> (will_it_fly (list\
    \ 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n;; >>> (will_it_fly (list 3) 5)\n;; #t\n;; # 3 is less than the maximum\
    \ possible weight, and it's balanced.", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (string-equal? q (reverse q))\n      (<= w (+ (map (lambda (x) (string-length\
    \ x)) q) (string-length q)))\n      (true)]\n    [false]))\n", "  (cond\n    [(and\
    \ (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n\
    \    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", " \
    \ (cond\n    [(= (length q) (string-length q))\n      (string-equal? q (reverse\
    \ q))]\n    [(<= w (+ (reduce (lambda (x y) (+ x y)) 0) (reduce (lambda (x y)\
    \ (+ x y)) 0) (reduce (lambda (x y) (+ x y)) 0)))\n      (true)]\n    [(false)]))\n",
  "  (cond\n    [(= (length q) (string-length q))\n      (string-equal? q (string-reverse\
    \ q))]\n    [(<= (sum q) w)\n      (true)]\n    [false]))\n", "  (cond\n    [(<=\
    \ w (+ (car q) (car q))) #t]\n    [(= (car q) (car q)) #f]\n    [(<= w (+ (car\
    \ q) (cdr q))) #t]\n    [(= (car q) (cdr q)) #f]\n    [#f]\n  )\n)\n", "  (cond\n\
    \    [(null? q) #t]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [", "  (cond\n    [(<= w (+ (car\
    \ q) (car q))) #f]\n    [(= (car q) (car q)) #t]\n    [(<= w (+ (car q) (cdr q)))\
    \ #f]\n    [(= (car q) (cdr q)) #t]\n    [#f #t]\n  )\n)\n", "  (cond\n    [(=\
    \ (length q) (string-length q))\n      (string-equal? q (reverse q))]\n    [(<=\
    \ (sum q) w)\n      (true)]\n    [false]))\n", "  (cond\n    [(<= w (+ (car q)\
    \ (car q))) #t]\n    [(<= w (+ (car q) (car q))) #f]\n    [(= (car q) (car q))\
    \ #t]\n    [(= (car q) (car q)) #f]\n  )\n)\n", "  (cond\n    [(equal? (length\
    \ q) (length q))\n      (equal? q (reverse q))]\n    [(<= w (+ (car q) (car q)))\n\
    \      (not (equal? q (reverse q)))]\n    [#t]))\n\n;; Write a function that returns\
    \ the sum of the elements of the object q.\n;; Example:\n;; >>> (sum (list 1 2\
    \ 3))\n;; # 3\n;; >>> (sum (list 1 2 3 4))\n;; # 7\n;; >>> (sum (list 1 2 3 4\
    \ 5))\n;; # 12\n;; >>> (sum (list 1 2 3 4 5 6))\n;; # 17\n;; >>> (sum (list 1\
    \ 2 3 4 5 6 7))\n;; # 24\n;; >>> (sum (list 1 2 3 4 5 6 7 8))\n;; # 31\n;; >>>\
    \ (sum (list 1 2 3 4 5 6 7 8 9))\n;; # 38\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9\
    \ 10))\n;; # 45\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11))\n;; # 52\n;; >>>\
    \ (sum (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; # 59\n;; >>> (sum (list 1 2 3 4\
    \ 5 6 7 8 9 10 11 12 13))\n;; # 66\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11\
    \ 12 13 14))\n;; # 73\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n\
    ;; # 80\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n;; # 87\n\
    ;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n;; # 94\n;; >>>\
    \ (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;; # 101\n;; >>>\
    \ (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n;; # 108\n;; >>>\
    \ (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n;; # 115\n\
    ;; >>>", "  (cond\n    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n \
    \   [#f]\n  ))\n", "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n    [(= (car\
    \ q) (car q)) #f]\n    [(<= w (+ (car q) (cdr q))) #t]\n    [(= (car q) (cdr q))\
    \ #f]\n    [#f]\n  )\n)\n", "  (cond\n    [(equal? (length q) (string-length q))\n\
    \      (equal? q (string-reverse q))]\n    [(<= w (+ (car q) (cdr q)))\n     \
    \ (equal? q (list (string-join \" \" (map (car) q) (cdr q))))]\n    [#f]))\n",
  "  (cond\n    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n",
  "  (cond\n    [(equal? (length q) (string-length q))\n      (equal? q (string-reverse\
    \ q))]\n    [(<= w (+ (map (lambda (x) (* x x)) q)) 0)]\n    [#t]))\n\n;; Write\
    \ a function that returns the maximum weight that can be carried by a balanced\
    \ object q.\n;; Example:\n;; >>> (max_weight (list 1 2))\n;; #f\n;; # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n;; >>> (max_weight (list\
    \ 3 2 3))\n;; # 9\n;; # 3+2+3 is more than the maximum possible weight.\n;; >>>\
    \ (max_weight (list 3 2 3))\n;; # 9\n;; # 3+2+3 is more than the maximum possible\
    \ weight.\n;; >>> (max_weight (list 3))\n;; # 3\n;; # 3 is less than the maximum\
    \ possible weight, and it's balanced.", "  (cond\n    [(and (balanced? q) (less-or-equal?\
    \ (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (string-equal? q (reverse q))]\n    [(<= w (+ (map (lambda (x) (*\
    \ x x)) q)) 0)]\n    [#f]))\n", "  (cond\n    [(= (length q) (string-length q))\n\
    \      (string-equal? q (string-reverse q))\n      (<= w (+ (string-join \" \"\
    \ q) (string-join \" \" (string-reverse q))))\n      (<= w (+ (string-join \"\
    \ \" q) (string-join \" \" (string-reverse q))))]\n    [#t #f]))\n", "  (cond\n\
    \    ((null? q) #t)\n    ((null? (cdr q)) #f)\n    (else\n      (let ((sum (sum\
    \ (map (lambda (x) (+ (* x x) w))) q))))\n        (cond\n          ((<= sum w)\
    \ #t)\n          ((< sum w) #f)\n          (else #t))))))\n\n;; #lang scheme\n",
  "  (cond\n    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n",
  "  (cond\n    [(null? q) #t]\n    [(null? (cdr q)) #f]\n    [(null? (cdr (cdr q)))\
    \ #f]\n    [(null? (cdr (cdr (cdr q)))) #t]\n    [(+ (car q) (car (cdr q))) <=\
    \ w]\n    [(+ (car q) (car (cdr (cdr q)))) <= w]\n    [(+ (car (cdr q)) (car (cdr\
    \ (cdr q)))) <= w]\n    [(+ (car (cdr (cdr q))) (car (cdr (cdr (cdr q))))) <=\
    \ w]\n    [(+ (car (cdr (cdr (cdr q)))) (car (cdr (cdr (cdr (cdr q)))))) <= w]\n\
    \    [(+ (car (cdr (cdr (cdr (cdr q)))))) <= w]\n    [(+ (car (cdr (cdr (cdr (cdr\
    \ (cdr q)))))) (car (cdr (cdr (cdr (cdr (cdr q)))))))) <= w]\n    [(+ (car (cdr\
    \ (cdr (cdr (cdr (cdr (cdr q)))))))) <= w]\n    [(+ (car (cdr (cdr (cdr (cdr (cdr\
    \ (cdr (cdr q)))))))) (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr q)))))))))) <= w]\n\
    \    [(+ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr q)))))))))) <= w]\n    [(+\
    \ (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr q)))))))))) (car (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr q)))))))))))) <= w]\n    [(+ (car (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr", "  (cond\n    [(null? q) #t]\n    [(string?\
    \ q) #f]\n    [(list? q)\n      (let ((sum (reduce (+ (car q) (cdr q))))\n   \
    \         (less-or-equal? sum w))\n        (if (less-or-equal? sum w)\n      \
    \      (let ((max-weight (reduce (+ (car q) (cdr q))))\n                  (less-or-equal?\
    \ max-weight w))\n              (if (less-or-equal? sum w)\n                 \
    \ #t\n                  #f))\n          #f))]\n    #f)\n\n;; >>> (will_it_fly\
    \ (list 1 2) 5)\n;; #f\n;; >>> (will_it_fly (list 3 2 3) 1)\n;; #f\n;; >>> (will_it_fly\
    \ (list 3 2 3) 9)\n;; #t\n;; >>> (will_it_fly (list 3) 5)\n;; #t\n;; >>> (will_it_fly\
    \ (list \"abc\") 5)\n;; #f\n;; >>> (will_it_fly (list \"abc\") \"abc\")\n;; #t\n\
    ;; >>> (will_it_fly (list \"abc\") \"abcd\")\n;; #f\n;; >>> (will_it_fly (list\
    \ \"abc\") \"abcd\")\n;; #t\n;; >>> (will_it_fly (list \"abc\") \"abcd\")\n;;\
    \ #t\n;; >>> (will_it_fly (list \"abc\") \"abcd\")\n;; #t\n;; >>> (will_it_fly\
    \ (list \"abc\") \"abcd\")\n;; #t\n;; >>> (will_it_fly (list \"abc\") \"abcd\"\
    )\n;; #t\n;; >>> (will_it_fly (list \"abc\") \"abcd\")\n;; #t\n;; >>> (will_it_fly\
    \ (list \"abc\") \"abcd\")\n;; #t\n;; >>> (will_it_fly (list \"abc\") \"abcd\"\
    )\n;; #t\n;; >>> (will_it_fly (list \"abc\") \"abcd\")\n;; #t\n;; >>> (will_it_fly\
    \ (list \"abc\") \"abcd\")\n;; #t", "  (cond\n    [(equal? (length q) (string-length\
    \ q))\n      (equal? q (string-reverse q))]\n    [(<= w (+ (car q) (car q)))\n\
    \      (equal? (car q) (cdr q))]\n    [#f]))\n", "  (cond\n    [(list? q)\n  \
    \    (let ((sum (reduce (lambda (x y) (+ x y)) 0) (car q)))\n        (lesser-or-equal?\
    \ sum w))]\n    [(not (list? q))\n      (lesser-or-equal? (reduce (lambda (x y)\
    \ (+ x y)) 0) w))]\n    [#t]))\n", "  (cond\n    [(and (balanced? q) (less-or-equal?\
    \ (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(<= w (+ (car q) (car q)))\
    \ (equal? (car q) (cdr q)) #t]\n    [#f]\n  ))\n\n;; Write a function that returns\
    \ #t if the object q will fly, and #f otherwise.\n;; The object q will fly if\
    \ it's balanced (it is a palindromic list) and the sum of its elements is less\
    \ than or equal the maximum possible weight w.\n;; Example:\n;; >>> (will_it_fly\
    \ (list 1 2) 5)\n;; #f\n;; # 1+2 is less than the maximum possible weight, but\
    \ it's unbalanced.\n;; >>> (will_it_fly (list 3 2 3) 1)\n;; #f\n;; # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n;; >>> (will_it_fly (list\
    \ 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n;; >>> (will_it_fly (list 3) 5)\n;; #t\n;; # 3 is less than the maximum\
    \ possible weight, and it's balanced.", "  (cond\n    [(list? q)\n      (let ((sum\
    \ (reduce (+ (car q) (cdr q))))\n            (and\n              (= sum w)\n \
    \             (= sum (cdr q))\n              (= sum (car q))\n              (=\
    \ sum (car (cdr q)))\n              (= sum (car (cdr (cdr q))))\n            \
    \  (= sum (car (cdr (cdr (cdr q))))))))\n      #t]\n    [else\n      #f]))\n",
  "  (cond\n    [(equal? (length q) (string-length q))\n      (equal? q (string-reverse\
    \ q))]\n    [(<= w (+ (reduce (lambda (a b) (+ a b)) 0) (reduce (lambda (a b)\
    \ (+ a b)) 0)))\n      (not (equal? (reduce (lambda (a b) (+ a b)) 0) 0))]\n \
    \   [#f]))\n", "  (cond\n    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n\
    \    [#f]\n  ))\n", "  (cond\n    [(list? q)\n      (let ((sum (reduce (lambda\
    \ (x y) (+ x y)) 0) (car q)))\n        (lesser-or-equal? sum w))]\n    [(not (string?\
    \ q))\n      (let ((sum (reduce (lambda (x y) (+ x y)) 0) (string-length q)))\n\
    \        (lesser-or-equal? sum w))]\n    [#t]\n  ))\n", "  (cond\n    [(<= w (+\
    \ (car q) (car q))) #t]\n    [(= (car q) (car q)) #f]\n    [(<= w (+ (car q) (cdr\
    \ q))) #t]\n    [(= (car q) (cdr q)) #f]\n    [#f]\n  )\n)\n", "  (cond\n    [(<=\
    \ w (+ (car q) (car q))) #f]\n    [(= (car q) (car q)) #t]\n    [(<= w (+ (car\
    \ q) (cdr q))) #f]\n    [(= (car q) (cdr q)) #t]\n    [#f #t]\n  )\n)\n", "  (cond\n\
    \    [(list? q)\n      (let ((l (length q)))\n        (and\n          (= (sum\
    \ l) w)\n          (= (length l) (1+l))\n          (= (string-equal-ci (reverse\
    \ l) (reverse l)) #t)))]\n    [else\n      #f]))\n", "  (cond\n    [(equal? (length\
    \ q) (string-length q))\n      (equal? q (string-reverse q))]\n    [(<= w (+ (reduce\
    \ (lambda (x y) (+ x y)) 0) (reduce (lambda (x y) (+ x y)) 0) (reduce (lambda\
    \ (x y) (+ x y)) 0)))\n      (not (string-match \"^[0-9]+$\" (string-join \" \"\
    \ q)))\n      (not (string-match \"^[0-9]+$\" (string-join \" \" (string-reverse\
    \ q))))]\n    [#t]))\n", "  (cond\n    [(and (balanced? q) (less-or-equal? (sum\
    \ q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n\
    \    [(<= w (+ (car q) (cdr q))) #t]\n    [(not (equal? (car q) (cdr q))) #f]\n\
    \    [#f]\n  )\n)\n", "  (cond\n    [(= (length q) (string-length q))\n      (and\n\
    \        (string-equal? q \"\")\n        (= (sum q) w))]\n    [(< (sum q) w)\n\
    \      (false)]\n    [true]))\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (string-equal? q (string-reverse q))]\n    [(<= (sum q) w)\n    \
    \  (true)]\n    [false]))\n", "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n\
    \    [(<= w (+ (car q) (cdr q))) #t]\n    [#f]\n  )\n)\n", "  (cond\n    [(<=\
    \ w (+ (car q) (car q))) #t]\n    [(<= w (+ (car q) (car q))) #f]\n    [(= (car\
    \ q) (car q)) #f]\n    [(<= w (+ (car q) (car q))) #t]\n    [(<= w (+ (car q)\
    \ (car q))) #f]\n    [(= (car q) (car q)) #t]\n    [#f]\n  )\n)\n", "  (cond\n\
    \    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", " \
    \ (cond\n    [(= (length q) (string-length q))\n      (string-equal? q (string-reverse\
    \ q))]\n    [(<= (sum q) w)\n      (true)]\n    [false]))\n", "  (cond\n    [(list?\
    \ q)\n      (let ((sum (reduce (lambda (x y) (+ x y)) 0) (car q)))\n        (lesser-or-equal?\
    \ sum w))]\n    [(not (equal? (length q) (length (reverse q))))\n      (let ((sum\
    \ (reduce (lambda (x y) (+ x y)) 0) (reduce (lambda (x y) (+ x y)) 0) (car q)))\n\
    \        (lesser-or-equal? sum w)))\n    (else #t)]))\n", "  (cond\n    [(list?\
    \ q)\n      (let ((sum (reduce (lambda (x y) (+ x y)) 0) (car q)))\n        (lesser-or-equal?\
    \ sum w))]\n    [(string? q)\n      (let ((sum (reduce (lambda (x y) (+ x y))\
    \ 0) (string-length q)))\n        (lesser-or-equal? sum w))]\n    [else\n    \
    \  #t]))\n", "  (cond\n    [(= (length q) (string-length q))\n      (string-equal?\
    \ q (reverse q))]\n    [(<= w (+ (map (lambda (x) (* x x)) q)) 0)]\n    [#f]))\n",
  "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n    [(<= w (+ (car q) (car q) (car\
    \ q) (car q))) #t]\n    [(<= w (+ (car q) (car q) (car q) (car q) (car q))) #t]\n\
    \    [(<= w (+ (car q) (car q) (car q) (car q) (car q) (car q))) #t]\n    [#f]\n\
    \  )\n)\n", "  (cond\n    [(list? q)\n      (equal? (length q) (length (reverse\
    \ q)))\n      (not (equal? (sum q) w))]\n    [(string? q)\n      (equal? (string-length\
    \ q) (string-length (reverse q)))\n      (not (string-length q) (string-length\
    \ (reverse q)))]\n    [#t]))\n\n;; Write a function that returns the maximum weight\
    \ that can be carried by a balanced object q.\n;; Example:\n;; >>> (max_weight\
    \ (list 1 2))\n;; #f\n;; # 1+2 is more than the maximum weight, but it's balanced.\n\
    ;; >>> (max_weight (list 3 2 3))\n;; # 9\n;; # 3+2+3 is more than the maximum\
    \ weight, and it's balanced.", "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n\
    \    [(<= w (+ (car q) (cdr q))) #t]\n    [#f]\n  )\n)\n", "  (cond\n    [(and\
    \ (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n\
    \    [(list? q)\n      (let ((sum (reduce (lambda (a b) (+ a b)) 0) (car q)))\n\
    \        (lesser-or-equal? sum w))]\n    [(string? q)\n      (let ((sum (reduce\
    \ (lambda (a b) (+ a b)) 0) (string-length q)))\n        (lesser-or-equal? sum\
    \ w))]\n    [else\n      #f]))\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (equal? q (string-reverse q))]\n    [(<= w (+ (reduce (lambda (x\
    \ y) (+ x y)) 0) (reduce (lambda (x y) (+ x y)) 0) (length q)))\n      (true)]\n\
    \    [false]))\n", "  (cond\n    [(and (balanced? q) (less-or-equal? (sum q) w))\
    \ #t]\n    [#f]\n  ))\n", "  (cond\n    [(and (balanced? q) (less-or-equal? (sum\
    \ q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(equal? (length q) (length q))\n\
    \      (equal? q (reverse q))]\n    [(<= w (+ (car q) (car q)))\n      (not (equal?\
    \ q (reverse q)))]\n    [#f]))\n", "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n\
    \    [(= (car q) (car q)) #f]\n    [(<= w (+ (car q) (cdr q))) #t]\n    [(= (car\
    \ q) (cdr q)) #f]\n    [#f]\n  )\n)\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (equal? q (string-reverse q))]\n    [(<= w (+ (map (lambda (x) (*\
    \ x x)) q)) 0)]\n    [#f]))\n\n;; >>> (will_it_fly (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\
    \ 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62\
    \ 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88\
    \ 89 90 91 92 93 94 95 96 97 98 99 100) 100) 5)\n;; #f\n;; >>> (will_it_fly (list\
    \ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\
    \ 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55\
    \ 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81\
    \ 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 100) 100) 5)\n;; #f\n\
    ;; >>> (will_it_fly (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\
    \ 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\
    \ 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73\
    \ 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\
    \ 100 100 100) 100) 5)\n;; #t\n;; >>> (will_it_fly (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\
    \ 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62\
    \ 63 64 65 66 67 68 69 70 71 72 73 74 75 76", "  (cond\n    [(equal? (length q)\
    \ (length q))\n      (equal? q (reverse q))]\n    [(<= w (+ (car q) (car q)))\n\
    \      (not (equal? q (reverse q)))]\n    [#f]))\n", "  (cond\n    [(<= w (+ (car\
    \ q) (car q))) #f]\n    [(= (car q) (car q)) #t]\n    [(<= w (+ (car q) (cdr q)))\
    \ #f]\n    [(= (car q) (cdr q)) #t]\n    [#t #f]\n  )\n)\n", "  (cond\n    [(and\
    \ (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n\
    \    [(= (length q) (string-length q))\n      (string-equal? q (reverse q))\n\
    \      (<= w (+ (map (lambda (x) (string-length x)) q) (string-length q)))\n \
    \     (true)]\n    [false]))\n", "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n\
    \    [(not (balanced? q)) #f]\n    [#t]))\n", "  (cond\n    [(null? q) #t]\n \
    \   [(null? (cdr q)) #f]\n    [(null? (car q)) #f]\n    [(car q) = (cdr q)]\n\
    \    [(car q) < w]\n    [(car q) + (cdr q) <= w]\n    [#f]\n  )\n)\n", "  (cond\n\
    \    [(equal? (length q) (string-length q))\n      (string-equal? q (reverse q))]\n\
    \    [(<= w (+ (car q) (car q)))\n      (equal? (cdr q) (cdr q))]\n    [#f]))\n",
  "  (cond\n    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n\
    \n;; #lang scheme\n;; (define (will-it-fly q w)\n;;   (cond\n;;     [(and (balanced?\
    \ q) (less-or-equal? (sum q) w)) #t]\n;;     [#f]\n;;   ))\n\n;; #lang lisp\n\
    ;; (defun will-it-fly (q w)\n;;   (cond\n;;     [(and (balanced? q) (less-or-equal?\
    \ (sum q) w)) #t]\n;;     [#f]\n;;   ))\n\n;; #lang scheme\n;; (define (will-it-fly\
    \ q w)\n;;   (cond\n;;     [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n\
    ;;     [#f]\n;;   ))\n\n;; #lang lisp\n;; (defun will-it-fly (q w)\n;;   (cond\n\
    ;;     [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n;;     [#f]\n;;  \
    \ ))\n\n;; #lang scheme\n;; (define (will-it-fly q w)\n;;   (cond\n;;     [(and\
    \ (balanced? q) (less-or-equal? (sum q) w)) #t]\n;;     [#f]\n;;   ))\n\n;; #lang\
    \ lisp\n;; (defun will-it-fly (q w)\n;;   (cond\n;;     [(and (balanced? q) (less-or-equal?\
    \ (sum q) w)) #t]\n;;     [#f]\n;;   ))\n\n;; #lang scheme\n;; (define (will-it-fly\
    \ q w)\n;;   (cond\n;;     [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n\
    ;;     [#f]\n;;   ))\n\n;; #lang lisp\n;; (defun will-it-fly (q w)\n;;   (cond\n\
    ;;     [(and (balanced", "  (cond\n    [(and (list-balanced? q) (less-or-equal?\
    \ (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(equal? (length q) (length\
    \ q))\n      (equal? q (reverse q))\n      (lesser-or-equal? (sum q) w)]\n   \
    \ [#f]\n    [#t]))\n", "  (cond\n    [(list? q)\n      (let ((p (car q)))\n  \
    \      (if (null? p)\n            #t\n            (let ((s (sum p)))\n       \
    \       (if (<= s w)\n                #t\n                #f))))]\n    [else\n\
    \      #f]))\n", "  (cond\n    [(list? q)\n      (let ((sum (reduce (+ (car q)\
    \ (cdr q))))\n            (if (<= sum w)\n              #t\n              #f)))]\n\
    \    [else\n      #f]))\n", "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n  \
    \  [(= (car q) (car q)) #f]\n    [(<= w (+ (car q) (cdr q))) #t]\n    [(= (car\
    \ q) (cdr q)) #f]\n    [#f]\n  )\n)\n", "  (cond\n    [(<= w (+ (car q) (car q)))\
    \ #f]\n    [(= (car q) (car q)) #t]\n    [(<= w (+ (car q) (cdr q))) #f]\n   \
    \ [(= (car q) (cdr q)) #t]\n    [#f #t]\n  )\n)\n", "  (cond\n    [(null? q) #t]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [", "  (cond\n    [(= (length q) (string-length q))\n\
    \      (string-equal? q (string-reverse q))]\n    [(<= (reduce + q) w)\n     \
    \ (true)]\n    [false]))\n", "  (cond\n    [(= (length q) (string-length q))\n\
    \      (string-equal? q (reverse q))]\n    [(<= (sum q) w)\n      (true)]\n  \
    \  [false]))\n", "  (cond\n    [(<= w (+ (car q) (car q))) #f]\n    [(= (car q)\
    \ (car q)) #t]\n    [(<= w (+ (car q) (cdr q))) #f]\n    [(= (car q) (cdr q))\
    \ #t]\n    [#f #t]\n  )\n)\n", "  (cond\n    [(= (length q) (string-length q))\n\
    \      (string-equal? q (reverse q))]\n    [(<= (sum q) w)\n      (true)]\n  \
    \  [false]))\n", "  (cond\n    [(= (length q) (string-length q))\n      (string-equal?\
    \ q (string-reverse q))]\n    [(<= w (+ (reduce (lambda (a b) (+ a b)) 0) (reduce\
    \ (lambda (a b) (+ a b)) 0) (reduce (lambda (a b) (+ a b)) 0)))\n      (string-equal?\
    \ q (string-reverse q))]\n    [#f]))\n", "  (cond\n    [(list? q)\n      (let\
    \ ((sum (reduce (lambda (x y) (+ x y)) 0) (car q)))\n        (lesser-or-equal?\
    \ sum w))]\n    [(string? q)\n      (let ((sum (reduce (lambda (x y) (+ x y))\
    \ 0) (string-length q)))\n        (lesser-or-equal? sum w))]\n    [else\n    \
    \  #t]))\n\n;; Test it out.", "  (cond\n    [(= (length q) (string-length q))\n\
    \      (string-equal? q (string-reverse q))]\n    [(<= w (+ (car q) (car q)))\n\
    \      (not (null? (cdr q)))]\n    [#f]))\n", "  (cond\n    [(<= w (+ (car q)\
    \ (car q))) #t]\n    [(<= w (+ (car q) (cdr q))) #t]\n    [(<= w (+ (cdr q) (car\
    \ q))) #t]\n    [(<= w (+ (cdr q) (cdr q))) #t]\n    [#f]\n  )\n)\n", "  (cond\n\
    \    [(equal? (length q) (string-length q))\n      (equal? q (string-reverse q))]\n\
    \    [(<= w (+ (reduce (lambda (x y) (+ x y)) 0) (reduce (lambda (x y) (+ x y))\
    \ 0) (reduce (lambda (x y) (+ x y)) 0)))\n      (true)]\n    [false]))\n", " \
    \ (cond\n    [(equal? (length q) (string-length q))\n      (equal? q (string-reverse\
    \ q))]\n    [(<= w (+ (map (lambda (x) (string-length x)) q)) 0)]\n    [#t]))\n",
  "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n    [(<= w (+ (car q) (car q) (cdr\
    \ q))) #t]\n    [#f]\n  )\n)\n", "  (cond\n    [(= (length q) (string-length q))\n\
    \      (string-equal? q (string-reverse q))\n      (<= w (+ (map (lambda (x) (string-length\
    \ x)) q) (string-length q)))\n      (true)]\n    [false]))\n", "  (cond\n    [(and\
    \ (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n\
    \    [(<= w (+ (car q) (car q))) #t]\n    [(= (car q) (car q)) #f]\n    [(<= w\
    \ (+ (car q) (cdr q))) #t]\n    [(= (car q) (cdr q)) #f]\n    [#f]\n  )\n)\n",
  "  (cond\n    [(= (length q) (string-length q))\n      (equal? q (string-reverse\
    \ q))]\n    [(<= w (+ (reduce (lambda (x y) (+ x y)) (map (lambda (x) (* x w))\
    \ q)) 0))\n      #t]\n    [#f]))\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (string-equal? q (reverse q))]\n    [(<= (sum q) w)\n      (true)]\n\
    \    [false]))\n", "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n    [(= (car\
    \ q) (car q)) #f]\n    [(<= w (+ (car q) (cdr q))) #t]\n    [(= (car q) (cdr q))\
    \ #f]\n    [#f #f]\n  )\n)\n", "  (cond\n    [(list? q)\n      (let ((sum (reduce\
    \ (lambda (x y) (+ x y)) 0) (car q)))\n        (lesser-or-equal? sum w))]\n  \
    \  [(not (equal? (length q) (length (reverse q))))\n      (let ((sum (reduce (lambda\
    \ (x y) (+ x y)) 0) (cdr q)))\n        (lesser-or-equal? sum w)))\n    (t)])\n",
  "  (cond\n    [(= (length q) (string-length q))\n      (and\n        (string-equal?\
    \ q \"\")\n        (= (sum q) w))]\n    [(< (sum q) w)\n      (false)]\n    [true]))\n",
  "  (cond\n    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n",
  "  (cond\n    [(= (length q) (string-length q))\n      (equal? q (string-reverse\
    \ q))]\n    [(<= (sum q) w)\n      (true)]\n    [false]))\n", "  (cond\n    [(and\
    \ (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n\
    \    [(= (length q) (string-length q))\n      (and\n        (string-equal? q \"\
    \")\n        (= (sum q) w))]\n    [(< (sum q) w)\n      (false)]\n    [true]))\n",
  "  (cond\n    [(= (length q) (string-length q))\n      (equal? q (string-reverse\
    \ q))]\n    [(<= (sum q) w)\n      (true)]\n    [false]))\n", "  (cond\n    [(<=\
    \ w (+ (car q) (car q))) #f]\n    [(= (car q) (car q)) #t]\n    [(<= w (+ (car\
    \ q) (cdr q))) #f]\n    [(= (car q) (cdr q)) #t]\n    [#f #t]\n  )\n)\n", "  (cond\n\
    \    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", " \
    \ (cond\n    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n \
    \ ))\n", "  (cond\n    [(list? q)\n      (let ((sum (reduce (+ (car q) (cdr q))))\n\
    \            (if (<= w sum)\n              #t\n              #f)))]\n    [else\n\
    \      #f]))\n", "  (cond\n    [(= (length q) (string-length q))\n      (string-equal?\
    \ q (reverse q))]\n    [(<= (reduce (+ (car q) (cdr q))) w)\n      (string-equal?\
    \ (string-join \" \" (map (car q) (cdr q))) (string-join \" \" (map (car q) (cdr\
    \ q))))]\n    [#f #t]\n  )\n)\n", "  (cond\n    [(equal? (length q) (string-length\
    \ q))\n      (equal? q (string-reverse q))]\n    [(<= w (+ (reduce (lambda (x\
    \ y) (+ x y)) 0) (reduce (lambda (x y) (+ x y)) 0) (length q)))\n      (true)]\n\
    \    [false]))\n", "  (cond\n    [(equal? (length q) (length q))\n      (equal?\
    \ q (reverse q))]\n    [(<= w (+ (car q) (car q)))\n      (not (equal? q (reverse\
    \ q)))]\n    [#f]))\n", "  (cond\n    [(null? q) #t]\n    [(null? (cdr q)) #f]\n\
    \    [(car q) >= w]\n    [(equal? (car q) (cdr q)) #t]\n    [(cons (car q) (will_it_fly\
    \ (cdr q) (car q))) #t]\n    [#f]\n  )\n)\n", "  (cond\n    [(<= w (+ (car q)\
    \ (car q))) #t]\n    [(<= w (+ (car q) (car q) (cdr q))) #t]\n    [#f]\n  )\n\
    )\n", "  (cond\n    [(= (length q) (string-length q))\n      (string-equal? q\
    \ (string-reverse q))]\n    [(<= w (+ (reduce (lambda (x y) (+ x y)) 0) (reduce\
    \ (lambda (x y) (+ x y)) 0) (length q)))\n      (string-equal? (string-join \"\
    \ \" q) (string-join \" \" (string-reverse q)))]\n    [#f]))\n", "  (cond\n  \
    \  [(list? q)\n      (let ((sum (reduce (lambda (x y) (+ x y)) 0) (car q)))\n\
    \        (lesser-or-equal? sum w))]\n    [(string? q)\n      (let ((sum (reduce\
    \ (lambda (x y) (+ x y)) 0) (string-length q)))\n        (lesser-or-equal? sum\
    \ w))]\n    [else\n      #f]))\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (string-equal? q (string-reverse q))\n      (<= w (+ (map (lambda\
    \ (x) (string-length x)) q) (string-length q)))\n      (true)]\n    [false]))\n",
  "  (cond\n    [(= (length q) (string-length q))\n      (string-equal? q (string-reverse\
    \ q))\n      (<= w (+ (map (lambda (x) (string-length x)) q) (string-length q)))\n\
    \      (true)]\n    [false]))\n", "  (cond\n    [(null? q) #t]\n    [(null? q)\
    \ #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null?\
    \ q) #f]\n    [", "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n    [(<= w (+\
    \ (car q) (cdr q))) #t]\n    [(not (equal? (car q) (cdr q))) #f]\n    [#f]\n \
    \ )\n)\n", "  (cond\n    [(= (length q) (string-length q))\n      (string-equal?\
    \ q (string-reverse q))\n      (<= w (+ (map (lambda (x) (string-length x)) q)\
    \ (string-length q)))\n      (true)]\n    [false]))\n", "  (cond\n    [(and (balanced?\
    \ q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(<= w\
    \ (+ (car q) (car q))) #f]\n    [(= (length q) (string-length q)) #t]\n    [#f]\n\
    \  )\n)\n", "  (cond\n    [(null? q) #t]\n    [(null? (cdr q)) #f]\n    [(car\
    \ q) < w]\n    [(cons (car q) (will_it_fly (cdr q) w))]\n  )\n)\n", "  (cond\n\
    \    [(<= w (+ (car q) (car q))) #f]\n    [(= (car q) (car q)) #t]\n    [(<= w\
    \ (+ (car q) (cdr q))) #f]\n    [(= (car q) (cdr q)) #t]\n    [#f #t]\n  )\n)\n",
  "  (cond\n    [(= (length q) (string-length q))\n      (string-equal? q (string-reverse\
    \ q))]\n    [(<= w (+ (map (lambda (x) (* x x)) q)) 0)]\n    [#f]))\n\n;; Write\
    \ a function that returns #t if the object q will fly, and #f otherwise.\n;; The\
    \ object q will fly if it's balanced (it is a palindromic list) and the sum of\
    \ its elements is less than or equal the maximum possible weight w.\n;; Example:\n\
    ;; >>> (will_it_fly (list 1 2) 5)\n;; #f\n;; # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n;; >>> (will_it_fly (list 3 2 3) 1)\n;; #f\n;;\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n;; >>>\
    \ (will_it_fly (list 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less than the maximum possible\
    \ weight, and it's balanced.\n;; >>> (will_it_fly (list 3) 5)\n;; #t\n;; # 3 is\
    \ less than the maximum possible weight, and it's balanced.", "  (cond\n    [(<=\
    \ w (+ (car q) (car q))) #f]\n    [(= (car q) (car q)) #t]\n    [(<= w (+ (car\
    \ q) (cdr q))) #f]\n    [(= (car q) (cdr q)) #t]\n    [#f #t]\n  )\n)\n", "  (cond\n\
    \    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", " \
    \ (cond\n    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n \
    \ ))\n\n;; Write a function that returns #t if the object q will fly, and #f otherwise.\n\
    ;; The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n;; Example:\n\
    ;; >>> (will_it_fly (list 1 2) 5)\n;; #f\n;; # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n;; >>> (will_it_fly (list 3 2 3) 1)\n;; #f\n;;\
    \ # it's balanced, but 3+2+3 is more than the maximum possible weight.\n;; >>>\
    \ (will_it_fly (list 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less than the maximum possible\
    \ weight, and it's balanced.\n;; >>> (will_it_fly (list 3) 5)\n;; #t\n;; # 3 is\
    \ less than the maximum possible weight, and it's balanced.", "  (cond\n    [(=\
    \ (length q) (string-length q))\n      (string-equal? q (reverse q))]\n    [(<=\
    \ (reduce + q) w)\n      #t]\n    [#f]))\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (string-equal? q (string-reverse q))]\n    [(<= w (+ (map (lambda\
    \ (x) (* x x)) q)) 0)]\n    [#f]))\n", "  (cond\n    [(<= w (+ (car q) (car q)))\
    \ #t]\n    [(<= w (+ (car q) (car q) (cdr q))) #t]\n    [#f]\n  )\n)\n", "  (cond\n\
    \    [(equal? (length q) (string-length q))\n      (not (string-equal? q (reverse\
    \ q)))\n      (lesser-or-equal? (sum q) w)]\n    [(not (balanced? q))\n      (lesser-or-equal?\
    \ (sum q) w)]\n    [true]))\n\n;; Write a function that returns the maximum weight\
    \ that can be carried by a balanced object q.\n;; Example:\n;; >>> (max_weight\
    \ (list 1 2))\n;; #f\n;; # 1+2 is less than the maximum possible weight, but it's\
    \ unbalanced.\n;; >>> (max_weight (list 3 2 3))\n;; # 9\n;; # 3+2+3 is more than\
    \ the maximum possible weight.\n;; >>> (max_weight (list 3 2 3))\n;; # 9\n;; #\
    \ 3+2+3 is more than the maximum possible weight.\n;; >>> (max_weight (list 3))\n\
    ;; # 5\n;; # 3 is less than the maximum possible weight, and it's balanced.",
  "  (cond\n    [(and (balanced? q) (leq? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n\
    \    [(null? q) #t]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [", "  (cond\n    [(= (length q)\
    \ (string-length q))\n      (string-equal? q (reverse q))]\n    [(<= w (+ (reduce\
    \ (lambda (x y) (+ x y)) 0) (reduce (lambda (x y) (+ x y)) 0) (reduce (lambda\
    \ (x y) (+ x y)) 0)))\n      (true)]\n    [(false)]))\n", "  (cond\n    [(null?\
    \ q) #t]\n    [(null? (cdr q)) #f]\n    [(string? q) #f]\n    [(number? q) #f]\n\
    \    [(list? q)\n      (\n        (string? (car q))\n        (\n          (string?\
    \ (car (cdr q)))\n          (\n            (string? (car (cdr (cdr q))))\n   \
    \         (\n              (string? (car (cdr (cdr (cdr q))))))\n            \
    \  (\n                (string? (car (cdr (cdr (cdr (cdr q))))))))))\n        \
    \  (\n            (string? (car (cdr (cdr (cdr (cdr (cdr q))))))))))\n       \
    \ (\n          (number? (car (cdr (cdr (cdr (cdr (cdr q)))))))\n          (\n\
    \            (number? (car (cdr (cdr (cdr (cdr (cdr (cdr q))))))))))\n       \
    \   (\n            (number? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr q))))))))))\n\
    \            (\n              (number? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr q))))))))))))))\n        (\n          (number? (car (cdr (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr q))))))))))))\n          (\n            (number? (car\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr q))))))))))))))\n        \
    \  (\n            (number? (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr\
    \ (cdr q))))))))))))))\n            (\n              (number? (car (cdr (cdr (cdr\
    \ (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr q))))))))))))))))))\n        (\n\
    \          (number? (car (c", "  (cond\n    [(and (balanced? q) (less-or-equal?\
    \ (sum q) w)) #t]\n    [#f]\n  ))\n\n;; Test it out.", "  (cond\n    [(and (list-balanced?\
    \ q) (list-weight q <= w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(= (length q)\
    \ (string-length q))\n      (string-equal? q (string-reverse q))]\n    [(<= (sum\
    \ q) w)\n      (true)]\n    [false]))\n", "  (cond\n    [(list? q)\n      (let\
    \ ((sum (reduce (+ (car q) (cdr q))))\n            (if (<= sum w)\n          \
    \    #t\n              #f)))]\n    [else\n      #f]))\n", "  (cond\n    [(= (length\
    \ q) (string-length q))\n      (equal? q (string-reverse q))]\n    [(<= w (+ (map\
    \ (lambda (x) (* x x)) q)) 0)]\n    [#t]))\n", "  (cond\n    [(equal? (length\
    \ q) (length q))\n      (equal? q (reverse q))\n      (<= w (+ (car q) (car q)))\n\
    \      (not (equal? q (reverse q)))\n      #t]\n    [#f]))\n", "  (cond\n    [(equal?\
    \ (length q) (length q))\n      (equal? q (reverse q))\n      (less? (sum q) w)]\n\
    \    [#t]\n    [#f]))\n", "  (cond\n    [(<= w (+ (car q) (car q))) #f]\n    [(=\
    \ (length q) (string-length q)) #t]\n    [#f]\n  )\n)\n", "  (cond\n    [(and\
    \ (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n\
    \    [(<= w (+ (car q) (car q))) #t]\n    [(<= w (+ (car q) (car q) (cdr q)))\
    \ #t]\n    [(<= w (+ (car q) (car q) (cdr q) (cdr q))) #t]\n    [#f]\n  )\n)\n",
  "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n    [(= (car q) (car q)) #f]\n  \
    \  [(<= w (+ (car q) (cdr q))) #t]\n    [(= (car q) (cdr q)) #f]\n    [#f]\n \
    \ )\n)\n", "  (cond\n    [(<= w (+ (car q) (car q))) (equal? (cdr q) (cdr q))\
    \ #t]\n    [(<= w (+ (car q) (car q))) (equal? (cdr q) (cdr q)) #f]\n    [(<=\
    \ w (+ (car q) (car q))) (equal? (cdr q) (cdr q)) #t]\n    [(<= w (+ (car q) (car\
    \ q))) (equal? (cdr q) (cdr q)) #f]\n    [#f #f]\n  )\n)\n", "  (cond\n    [(<=\
    \ w (+ (car q) (car q))) (equal? (car q) (cdr q)) #t]\n    [(<= w (+ (car q) (car\
    \ q))) (equal? (car q) (cdr q)) #f]\n    [(<= w (+ (car q) (car q))) (equal? (car\
    \ q) (cdr q)) #t]\n    [#f]\n  )\n)\n", "  (cond\n    [(<= w (+ (car q) (car q)))\
    \ #f]\n    [(= (car q) (car q)) #t]\n    [(<= w (+ (car q) (cdr q))) #f]\n   \
    \ [(= (car q) (cdr q)) #t]\n    [#t #f]\n  )\n)\n", "  (cond\n    [(list? q)\n\
    \      (let ((sum (reduce (lambda (x y) (+ x y)) 0) (car q)))\n        (lesser-or-equal?\
    \ sum w))]\n    [(not (list? q))\n      #f]\n    [#t]\n  )\n)\n", "  (cond\n \
    \   [(= (length q) (string-length q))\n      (string-equal? q (string-reverse\
    \ q))]\n    [(<= (sum q) w)\n      (true)]\n    [false]))\n", "  (cond\n    [(equal?\
    \ (length q) (string-length q))\n      (equal? q (string-reverse q))]\n    [(<=\
    \ w (+ (map (lambda (x) (string-length x)) q)) 0)]\n    [#t]))\n", "  (cond\n\
    \    [(equal? (length q) (string-length q))\n      (equal? q (string-reverse q))]\n\
    \    [(<= w (+ (reduce (lambda (x y) (+ x y)) 0) (reduce (lambda (x y) (+ x y))\
    \ 0) (length q)))\n      (true)]\n    [false]))\n", "  (cond\n    [(equal? (length\
    \ q) (string-length q))\n      (equal? q (string-reverse q))]\n    [(<= w (+ (map\
    \ (lambda (x) (* x x))) (map (lambda (x) (* x x)) q)))\n      #t]\n    [#f]))\n",
  "  (cond\n    [(<= w (+ (car q) (car q))) #f]\n    [(= (length q) (string-length\
    \ q)) #t]\n    [(<= w (+ (car q) (car q) (cdr q) (cdr q))) #f]\n    [#t]\n  )\n\
    )\n", "  (cond\n    [(<= w (+ (car q) (car q))) #f]\n    [(= (car q) (car q))\
    \ #t]\n    [(<= w (+ (car q) (cdr q))) #f]\n    [(= (car q) (cdr q)) #t]\n   \
    \ [#f #t]\n  )\n)\n\n;; #lang racket\n;; (will_it_fly (list 1 2) 5)\n;; #f\n;;\
    \ # 1+2 is less than the maximum possible weight, but it's unbalanced.\n;; (will_it_fly\
    \ (list 3 2 3) 1)\n;; #f\n;; # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n;; (will_it_fly (list 3 2 3) 9)\n;; #t\n;; # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n;; (will_it_fly (list\
    \ 3) 5)\n;; #t\n;; # 3 is less than the maximum possible weight, and it's balanced.",
  "  (cond\n    [(and (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n",
  "  (cond\n    [(null? q) #t]\n    [(null? (cdr q)) #f]\n    [(car q) < (car (cdr\
    \ q))]\n    [(car q) <= (car (cdr q))]\n    [(car q) > (car (cdr q))]\n    [(car\
    \ q) >= (car (cdr q))]\n    [#f]\n  )\n)\n", "  (cond\n    [(and (balanced? q)\
    \ (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(list? q)\n\
    \      (let ((sum (reduce (+ (car q) (cdr q))))\n            (if (<= sum w)\n\
    \              #t\n              #f)))]\n    [else\n      #f]))\n", "  (cond\n\
    \    [(<= w (+ (car q) (car q))) #t]\n    [(= (car q) (car q)) #f]\n    [(<= w\
    \ (+ (car q) (cdr q))) #t]\n    [(= (car q) (cdr q)) #f]\n    [#f]\n  )\n)\n",
  "  (cond\n    [(<= w (+ (car q) (car q))) #f]\n    [(= (car q) (car q)) #t]\n  \
    \  [(<= w (+ (car q) (cdr q))) #f]\n    [(= (car q) (cdr q)) #t]\n    [#f #t]\n\
    \  )\n)\n", "  (cond\n    [(= (length q) (string-length q))\n      (string-equal?\
    \ q (string-reverse q))\n      (<= (sum q) w)]\n    [(<= (sum q) w)]\n    [#t]))\n\
    \n;; Write a function that returns the sum of the elements of the object q.\n\
    ;; Example:\n;; >>> (sum (list 1 2 3))\n;; # 3\n;; >>> (sum (list 1 2 3 4))\n\
    ;; # 7\n;; >>> (sum (list 1 2 3 4 5))\n;; # 12\n;; >>> (sum (list 1 2 3 4 5 6))\n\
    ;; # 17\n;; >>> (sum (list 1 2 3 4 5 6 7))\n;; # 24\n;; >>> (sum (list 1 2 3 4\
    \ 5 6 7 8))\n;; # 31\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9))\n;; # 38\n;; >>> (sum\
    \ (list 1 2 3 4 5 6 7 8 9 10))\n;; # 45\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10\
    \ 11))\n;; # 52\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12))\n;; # 59\n;; >>>\
    \ (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13))\n;; # 66\n;; >>> (sum (list 1 2 3\
    \ 4 5 6 7 8 9 10 11 12 13 14))\n;; # 73\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15))\n;; # 80\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14\
    \ 15 16))\n;; # 87\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n\
    ;; # 94\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n;;\
    \ # 101\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n\
    ;; # 108\n;; >>> (sum (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n\
    ;; # 115\n;; >>> (sum", "  (cond\n    [(list? q)\n      (let ((sum (sum-list q)))\n\
    \        (if (<= sum w)\n          #t\n          #f))]\n    [(string? q)\n   \
    \   (let ((sum (sum-string q)))\n        (if (<= sum w)\n          #t\n      \
    \    #f))]\n    [(number? q)\n      (let ((sum (sum-number q)))\n        (if (<=\
    \ sum w)\n          #t\n          #f))]\n    [(boolean? q)\n      (let ((sum (sum-boolean\
    \ q)))\n        (if (<= sum w)\n          #t\n          #f))]\n    [(symbol? q)\n\
    \      (let ((sum (sum-symbol q)))\n        (if (<= sum w)\n          #t\n   \
    \       #f))]\n    [(null? q)\n      #t]\n    [(undefined? q)\n      #t]\n   \
    \ [(error? q)\n      #t]\n    [else\n      #f]))\n", "  (cond\n    [(= (length\
    \ q) (string-length q))\n      (string-equal? q (reverse q))\n      (<= w (+ (map\
    \ (lambda (x) (string-length x)) q) (string-length q)))\n      (true)]\n    [false]))\n",
  "  (cond\n    [(<= w (+ (car q) (car q))) #t]\n    [(= (car q) (car q)) #f]\n  \
    \  [(<= w (+ (car q) (cdr q))) #t]\n    [(= (car q) (cdr q)) #f]\n    [#f]\n \
    \ )\n)\n", "  (cond\n    [(and (list-balanced? q) (list-weight q <= w)) #t]\n\
    \    [#f]\n  ))\n", "  (cond\n    [(and (balanced? q) (less-or-equal? (sum q)\
    \ w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(<= w (+ (car q) (car q))) #f]\n\
    \    [(= (car q) (car q)) #t]\n    [(<= w (+ (car q) (cdr q))) #f]\n    [(= (car\
    \ q) (cdr q)) #t]\n    [#f #t]\n  )\n)\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (and\n        (string-equal? q (string-reverse q))\n        (<= w\
    \ (+ (string-join \" \" q)))\n      )]\n    [(<= w (+ (string-join \" \" q)))\n\
    \      (and\n        (string-equal? q (string-reverse q))\n        (<= w (+ (string-join\
    \ \" \" q)))\n      )]\n    [#f]\n  )\n)\n", "  (cond\n    [(and (balanced? q)\
    \ (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n    [(= (length\
    \ q) (string-length q))\n      (string-equal? q (string-reverse q))\n      (<=\
    \ w (+ (string-join \" \" q) (string-join \" \" (string-reverse q))))\n      (<=\
    \ w (string-join \" \" q))]\n    [false]))\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (string-equal? q (string-reverse q))]\n    [(<= (sum q) w)\n    \
    \  (true)]\n    [false]))\n", "  (cond\n    [(list? q)\n      (let ((p (car q)))\n\
    \        (if (null? p)\n            #t\n            (let ((s (sum p)))\n     \
    \         (if (<= s w)\n                #t\n                #f))))]\n    [else\n\
    \      #f]))\n", "  (cond\n    [(= (length q) (string-length q))\n      (string-equal?\
    \ q (reverse q))\n      (<= w (+ (map (lambda (x) (string-length x)) q) (string-length\
    \ q)))\n      (true)]\n    [false]))\n", "  (cond\n    [(= (length q) (string-length\
    \ q))\n      (string-equal? q (reverse q))]\n    [(<= w (+ (reduce (lambda (x\
    \ y) (+ x y)) 0) (reduce (lambda (x y) (+ x y)) 0) (reduce (lambda (x y) (+ x\
    \ y)) 0)))\n      (true)]\n    [(false)]))\n", "  (cond\n    [(null? q) #t]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n    [(null? q) #f]\n\
    \    [(null? q) #f]\n    [", "  (cond\n    [(and (balanced? q) (less-or-equal?\
    \ (sum q) w)) #t]\n    [#f]\n  ))\n\n;; Test the function.", "  (cond\n    [(and\
    \ (balanced? q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n", "  (cond\n\
    \    [(<= w (+ (car q) (car q))) #t]\n    [(<= w (+ (car q) (car q))) #f]\n  \
    \  [(= (car q) (car q)) #f]\n    [(= (car q) (car q)) #t]\n    [(= (car q) (car\
    \ q)) #f]\n    [(= (car q) (car q)) #t]\n    [(= (car q) (car q)) #f]\n    [(=\
    \ (car q) (car q)) #t]\n    [(= (car q) (car q)) #f]\n    [(= (car q) (car q))\
    \ #t]\n    [(= (car q) (car q)) #f]\n    [(= (car q) (car q)) #t]\n    [(= (car\
    \ q) (car q)) #f]\n    [(= (car q) (car q)) #t]\n    [(= (car q) (car q)) #f]\n\
    \    [(= (car q) (car q)) #t]\n    [(= (car q) (car q)) #f]\n    [(= (car q) (car\
    \ q)) #t]\n    [(= (car q) (car q)) #f]\n    [(= (car q) (car q)) #t]\n    [(=\
    \ (car q) (car q)) #f]\n    [(= (car q) (car q)) #t]\n    [(= (car q) (car q))\
    \ #f]\n    [(= (car q) (car q)) #t]\n    [(= (car q) (car q)) #f]\n    [(= (car\
    \ q) (car q)) #t]\n    [(= (car q) (car q)) #f]\n    [(= (car q) (car q)) #t]\n\
    \    [(= (car q) (car q)) #f]\n    [(= (car q) (car q)) #t]\n    [(= (car q) (car\
    \ q)) #f]\n    [(= (car", "  (cond\n    [(= (length q) (string-length q))\n  \
    \    (string-equal? q (string-reverse q))\n      (<= w (+ (reduce (lambda (x y)\
    \ (+ x y)) 0) (reduce (lambda (x y) (+ x y)) 0) (reduce (lambda (x y) (+ x y))\
    \ 0)))\n      (true)]\n    [false]))\n", "  (cond\n    [(<= w (+ (car q) (car\
    \ q))) #f]\n    [(= (car q) (car q)) #t]\n    [(<= w (+ (car q) (cdr q))) #f]\n\
    \    [(= (car q) (cdr q)) #t]\n    [#f #t]\n  )\n)\n", "  (cond\n    [(and (balanced?\
    \ q) (less-or-equal? (sum q) w)) #t]\n    [#f]\n  ))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
