name: HumanEval_151_double_the_difference
language: javascript
results:
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] >= 0){\n            sum += lst[i] * lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(typeof\
    \ lst[i] == \"number\" && lst[i] % 2 == 1){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 ==\
    \ 1){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = double_the_difference;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0, 4.0]),25);\n\
    \  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] >= 0){\n            sum += lst[i] * lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ > 0 && lst[i] % 2 != 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0.14\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpiu02i__j.js:25:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpiu02i__j.js:32:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0.14,\\\
    n  expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]*lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] >= 0){\n            sum += lst[i] * lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += Math.pow(lst[i], 2);\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] >= 0){\n            sum += lst[i] * lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += Math.pow(lst[i], 2);\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += Math.pow(lst[i], 2);\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += Math.pow(lst[i], 2);\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 ==\
    \ 1 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 !==\
    \ 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ > 0 && lst[i] % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0.14\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp35_c07yb.js:25:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp35_c07yb.js:32:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0.14,\\\
    n  expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    if(lst.length === 0){\n        return 0;\n    }\n    var sum = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && lst[i] > 0){\n\
    \            sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0.14\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpbbpf1d9n.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpbbpf1d9n.js:35:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0.14,\\\
    n  expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] % 2 ==\
    \ 1 && lst[i] > 0){\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([5.0,\
    \ 4.0]),25);\n  assert.deepEqual(candidate([0.1, 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0,\
    \ -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0, -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2,\
    \ 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] >= 0){\n            sum += lst[i] * lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && lst[i] % 1 == 0){\n            sum += lst[i] * lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1){\n            sum += lst[i] * lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 == 1 && lst[i] > 0){\n            sum += lst[i] * lst[i];\n        }\n \
    \   }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 !== 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a list of numbers, return the sum of squares of the numbers\n\
    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
    // double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1,\
    \ -2, 0]) == 0\n// double_the_difference([9, -2]) == 81\n// double_the_difference([0])\
    \ == 0  \n// If the input list is empty, return 0.\nfunction double_the_difference(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){\n            sum += lst[i]\
    \ * lst[i];\n        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
    \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
    \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
