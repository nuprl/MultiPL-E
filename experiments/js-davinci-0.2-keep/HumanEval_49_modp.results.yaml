name: HumanEval_49_modp
language: javascript
results:
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2,\
    \ p) % p;\n\t}\n\treturn modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp8qxrb55c.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp8qxrb55c.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp4sasyhle.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp4sasyhle.js:13:5)\\n    at modp\
    \ (/tmp/tmp4sasyhle.js:17:16)\\n    at modp (/tmp/tmp4sasyhle.js:20:31)\\n   \
    \ at modp (/tmp/tmp4sasyhle.js:17:16)\\n    at modp (/tmp/tmp4sasyhle.js:20:31)\\\
    n    at modp (/tmp/tmp4sasyhle.js:17:16)\\n    at modp (/tmp/tmp4sasyhle.js:20:31)\\\
    n    at modp (/tmp/tmp4sasyhle.js:17:16)\\n    at modp (/tmp/tmp4sasyhle.js:20:31)\\\
    n    at modp (/tmp/tmp4sasyhle.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\
    \t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * modp(n, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpz9ftdxb3.js:13\\n    if(n === 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpz9ftdxb3.js:13:5)\\n    at modp\
    \ (/tmp/tmpz9ftdxb3.js:19:13)\\n    at modp (/tmp/tmpz9ftdxb3.js:19:28)\\n   \
    \ at modp (/tmp/tmpz9ftdxb3.js:19:28)\\n    at modp (/tmp/tmpz9ftdxb3.js:19:28)\\\
    n    at modp (/tmp/tmpz9ftdxb3.js:19:28)\\n    at modp (/tmp/tmpz9ftdxb3.js:19:28)\\\
    n    at modp (/tmp/tmpz9ftdxb3.js:19:28)\\n    at modp (/tmp/tmpz9ftdxb3.js:19:28)\\\
    n    at modp (/tmp/tmpz9ftdxb3.js:19:28)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) {\n    var x = modp(n/2, p);\n    return (x * x) % p;\n\
    \  } else {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n\t} else {\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    return n * modp(n-1, p) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpao6sx8u8.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpao6sx8u8.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var i;\n    for (i = 0; i < n; i++){\n        result = (result * 2) % p;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2 % p;\n    }\n    var\
    \ half = modp(Math.floor(n/2), p);\n    if(n % 2 == 0){\n        return (half\
    \ * half) % p;\n    }\n    else{\n        return (2 * half * half) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp5ggwexs5.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp5ggwexs5.js:13:5)\\n    at modp\
    \ (/tmp/tmp5ggwexs5.js:17:16)\\n    at modp (/tmp/tmp5ggwexs5.js:19:27)\\n   \
    \ at modp (/tmp/tmp5ggwexs5.js:17:16)\\n    at modp (/tmp/tmp5ggwexs5.js:19:27)\\\
    n    at modp (/tmp/tmp5ggwexs5.js:17:16)\\n    at modp (/tmp/tmp5ggwexs5.js:19:27)\\\
    n    at modp (/tmp/tmp5ggwexs5.js:17:16)\\n    at modp (/tmp/tmp5ggwexs5.js:19:27)\\\
    n    at modp (/tmp/tmp5ggwexs5.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n === 0) return\
    \ 1;\n  if (n % 2 === 0) {\n    var m = modp(n/2, p);\n    return (m*m) % p;\n\
    \  } else {\n    return (modp(n-1, p) * n) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpz0pn_eg2.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpz0pn_eg2.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p)**2) % p;\n    }\n    else{\n        return\
    \ (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn (t*t) % p;\n\t}\n\treturn\
    \ (2*modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ var x = 2;\n  var power = n;\n  while (power > 0) {\n    var leastSignificantBit\
    \ = power % 2;\n    power = Math.floor(power / 2);\n    if (leastSignificantBit\
    \ == 1) {\n      result = result * x;\n      result = result % p;\n    }\n   \
    \ x = x * x;\n    x = x % p;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n == 0) return\
    \ 1;\n    if (n == 1) return n % p;\n    if (n % 2 == 0) return (modp(n/2, p)\
    \ ** 2) % p;\n    return (modp(n-1, p) * n) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpzlwf3kc0.js:25:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpzlwf3kc0.js:33:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        var t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    } else {\n        return (modp(n-1, p) * n) % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpow5fetue.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpow5fetue.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpv__p5ckm.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpv__p5ckm.js:13:5)\\n    at modp\
    \ (/tmp/tmpv__p5ckm.js:17:16)\\n    at modp (/tmp/tmpv__p5ckm.js:19:27)\\n   \
    \ at modp (/tmp/tmpv__p5ckm.js:17:16)\\n    at modp (/tmp/tmpv__p5ckm.js:19:27)\\\
    n    at modp (/tmp/tmpv__p5ckm.js:17:16)\\n    at modp (/tmp/tmpv__p5ckm.js:19:27)\\\
    n    at modp (/tmp/tmpv__p5ckm.js:17:16)\\n    at modp (/tmp/tmpv__p5ckm.js:19:27)\\\
    n    at modp (/tmp/tmpv__p5ckm.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n%2 == 0){\n\t\tvar r = modp(n/2, p);\n\t\treturn (r*r)%p;\n\t}\n\treturn\
    \ (2*modp(n-1, p))%p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * modp(n, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp1l2jjnel.js:13\\n    if(n === 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp1l2jjnel.js:13:5)\\n    at modp\
    \ (/tmp/tmp1l2jjnel.js:19:13)\\n    at modp (/tmp/tmp1l2jjnel.js:19:28)\\n   \
    \ at modp (/tmp/tmp1l2jjnel.js:19:28)\\n    at modp (/tmp/tmp1l2jjnel.js:19:28)\\\
    n    at modp (/tmp/tmp1l2jjnel.js:19:28)\\n    at modp (/tmp/tmp1l2jjnel.js:19:28)\\\
    n    at modp (/tmp/tmp1l2jjnel.js:19:28)\\n    at modp (/tmp/tmp1l2jjnel.js:19:28)\\\
    n    at modp (/tmp/tmp1l2jjnel.js:19:28)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return (modp(n-1, p) * modp(n+1, p)) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpuycwtm02.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpuycwtm02.js:13:5)\\n    at modp\
    \ (/tmp/tmpuycwtm02.js:17:16)\\n    at modp (/tmp/tmpuycwtm02.js:19:28)\\n   \
    \ at modp (/tmp/tmpuycwtm02.js:17:16)\\n    at modp (/tmp/tmpuycwtm02.js:19:28)\\\
    n    at modp (/tmp/tmpuycwtm02.js:17:16)\\n    at modp (/tmp/tmpuycwtm02.js:19:28)\\\
    n    at modp (/tmp/tmpuycwtm02.js:17:16)\\n    at modp (/tmp/tmpuycwtm02.js:19:28)\\\
    n    at modp (/tmp/tmpuycwtm02.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    var b = n;\n\twhile (b > 0){\n\t\tif (b % 2 == 1){\n\t\t\tresult = (result * n)\
    \ % p;\n\t\t}\n\t\tb = Math.floor(b / 2);\n\t\tn = (n * n) % p;\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmp_wu41qn2.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp_wu41qn2.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n == 1){\n        return n;\n    }\n    else\
    \ if(n % 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n   \
    \     return modp(n-1, p) * n % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpskdm71c5.js:33:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpskdm71c5.js:41:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return (modp(n-1, p) * modp(n+1, p)) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp5s8dq4y_.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp5s8dq4y_.js:13:5)\\n    at modp\
    \ (/tmp/tmp5s8dq4y_.js:17:16)\\n    at modp (/tmp/tmp5s8dq4y_.js:19:28)\\n   \
    \ at modp (/tmp/tmp5s8dq4y_.js:17:16)\\n    at modp (/tmp/tmp5s8dq4y_.js:19:28)\\\
    n    at modp (/tmp/tmp5s8dq4y_.js:17:16)\\n    at modp (/tmp/tmp5s8dq4y_.js:19:28)\\\
    n    at modp (/tmp/tmp5s8dq4y_.js:17:16)\\n    at modp (/tmp/tmp5s8dq4y_.js:19:28)\\\
    n    at modp (/tmp/tmp5s8dq4y_.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp4fz0odyf.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp4fz0odyf.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var x = n % p;\n    while (n > 0){\n        if (n % 2 == 1){\n          \
    \  result = (result * x) % p;\n        }\n        n = Math.floor(n / 2);\n   \
    \     x = (x * x) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpd8w0jghy.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpd8w0jghy.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n - 1, p) * 2 % p;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n / 2, p) * modp(n / 2, p)) % p;\n    }\n   \
    \ else{\n        return (2 * modp(n - 1, p)) % p;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n    }\n    else{\n        return (modp(n-1, p) * modp(n+1, p)) % p;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpmt9k0sd0.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpmt9k0sd0.js:13:5)\\n    at modp\
    \ (/tmp/tmpmt9k0sd0.js:17:17)\\n    at modp (/tmp/tmpmt9k0sd0.js:20:32)\\n   \
    \ at modp (/tmp/tmpmt9k0sd0.js:17:17)\\n    at modp (/tmp/tmpmt9k0sd0.js:20:32)\\\
    n    at modp (/tmp/tmpmt9k0sd0.js:17:17)\\n    at modp (/tmp/tmpmt9k0sd0.js:20:32)\\\
    n    at modp (/tmp/tmpmt9k0sd0.js:17:17)\\n    at modp (/tmp/tmpmt9k0sd0.js:20:32)\\\
    n    at modp (/tmp/tmpmt9k0sd0.js:17:17)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0)\n\t\treturn\
    \ 1;\n\tif(n%2 == 0)\n\t\treturn modp(n/2, p) * modp(n/2, p) % p;\n\telse\n\t\t\
    return modp(n/2, p) * modp(n/2, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpn7j499rb.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpn7j499rb.js:13:5)\\n    at modp\
    \ (/tmp/tmpn7j499rb.js:17:16)\\n    at modp (/tmp/tmpn7j499rb.js:20:31)\\n   \
    \ at modp (/tmp/tmpn7j499rb.js:17:16)\\n    at modp (/tmp/tmpn7j499rb.js:20:31)\\\
    n    at modp (/tmp/tmpn7j499rb.js:17:16)\\n    at modp (/tmp/tmpn7j499rb.js:20:31)\\\
    n    at modp (/tmp/tmpn7j499rb.js:17:16)\\n    at modp (/tmp/tmpn7j499rb.js:20:31)\\\
    n    at modp (/tmp/tmpn7j499rb.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpam3eq4dz.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpam3eq4dz.js:13:5)\\n    at modp\
    \ (/tmp/tmpam3eq4dz.js:17:16)\\n    at modp (/tmp/tmpam3eq4dz.js:20:31)\\n   \
    \ at modp (/tmp/tmpam3eq4dz.js:17:16)\\n    at modp (/tmp/tmpam3eq4dz.js:20:31)\\\
    n    at modp (/tmp/tmpam3eq4dz.js:17:16)\\n    at modp (/tmp/tmpam3eq4dz.js:20:31)\\\
    n    at modp (/tmp/tmpam3eq4dz.js:17:16)\\n    at modp (/tmp/tmpam3eq4dz.js:20:31)\\\
    n    at modp (/tmp/tmpam3eq4dz.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\
    \t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var x = n % p;\n    while (n > 0){\n        if (n % 2 == 1){\n          \
    \  result = (result * x) % p;\n        }\n        n = Math.floor(n / 2);\n   \
    \     x = (x * x) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpatu5p8fn.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpatu5p8fn.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n === 1){\n        return n;\n    }\n    if(n\
    \ % 2 === 0){\n        return Math.pow(modp(n/2, p), 2) % p;\n    }\n    else{\n\
    \        return (n * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpebxzrbts.js:33:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpebxzrbts.js:41:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var res = 1;\n  \
    \  while (n > 0){\n        if (n % 2 == 1){\n            res = (res * 2) % p;\n\
    \        }\n        n = Math.floor(n / 2);\n        if (n > 0){\n            res\
    \ = (res * res) % p;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n10\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp9sov1owq.js:32:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp9sov1owq.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 10,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p) * modp(n/2, p) % p;\n  }\n\
    \  else{\n    return modp(n-1, p) * modp(n, p) % p;\n  }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp5w85a2es.js:13\\n  if(n == 0){\\n  ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp5w85a2es.js:13:3)\\n    at modp\
    \ (/tmp/tmp5w85a2es.js:20:12)\\n    at modp (/tmp/tmp5w85a2es.js:20:27)\\n   \
    \ at modp (/tmp/tmp5w85a2es.js:20:27)\\n    at modp (/tmp/tmp5w85a2es.js:20:27)\\\
    n    at modp (/tmp/tmp5w85a2es.js:20:27)\\n    at modp (/tmp/tmp5w85a2es.js:20:27)\\\
    n    at modp (/tmp/tmp5w85a2es.js:20:27)\\n    at modp (/tmp/tmp5w85a2es.js:20:27)\\\
    n    at modp (/tmp/tmp5w85a2es.js:20:27)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return (modp(n-1, p) * modp(n+1, p)) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpi02q2_1j.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpi02q2_1j.js:13:5)\\n    at modp\
    \ (/tmp/tmpi02q2_1j.js:17:16)\\n    at modp (/tmp/tmpi02q2_1j.js:20:32)\\n   \
    \ at modp (/tmp/tmpi02q2_1j.js:17:16)\\n    at modp (/tmp/tmpi02q2_1j.js:20:32)\\\
    n    at modp (/tmp/tmpi02q2_1j.js:17:16)\\n    at modp (/tmp/tmpi02q2_1j.js:20:32)\\\
    n    at modp (/tmp/tmpi02q2_1j.js:17:16)\\n    at modp (/tmp/tmpi02q2_1j.js:20:32)\\\
    n    at modp (/tmp/tmpi02q2_1j.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar r = modp(n/2, p);\n\t\treturn (r*r) % p;\n\t}\n\telse{\n\
    \t\tvar r = modp((n-1)/2, p);\n\t\treturn (2*r*r) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    var i = 0;\n\tvar two = 2;\n\tvar n_bin = n.toString(2);\n\tvar n_bin_len = n_bin.length;\n\
    \tfor(i = 0; i < n_bin_len; i++){\n\t\tif(n_bin[i] == 1){\n\t\t\tresult = (result\
    \ * two) % p;\n\t\t}\n\t\ttwo = (two * two) % p;\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n10\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpj3dtg7yi.js:33:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpj3dtg7yi.js:41:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 10,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ for (var i = 0; i < n; i++) {\n    result = (result * 2) % p;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ (modp(n-1, p) * 2) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++){\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpdbcwxsci.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpdbcwxsci.js:13:5)\\n    at modp\
    \ (/tmp/tmpdbcwxsci.js:17:16)\\n    at modp (/tmp/tmpdbcwxsci.js:20:31)\\n   \
    \ at modp (/tmp/tmpdbcwxsci.js:17:16)\\n    at modp (/tmp/tmpdbcwxsci.js:20:31)\\\
    n    at modp (/tmp/tmpdbcwxsci.js:17:16)\\n    at modp (/tmp/tmpdbcwxsci.js:20:31)\\\
    n    at modp (/tmp/tmpdbcwxsci.js:17:16)\\n    at modp (/tmp/tmpdbcwxsci.js:20:31)\\\
    n    at modp (/tmp/tmpdbcwxsci.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\twhile(n\
    \ > 0){\n\t\tif(n % 2 == 1){\n\t\t\tres = (res * 2) % p;\n\t\t}\n\t\tn = Math.floor(n\
    \ / 2);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n4\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpv2z5c7y7.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpv2z5c7y7.js:37:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 4,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n == 1){\n    return 2;\n  }\n  if(n % 2 == 0){\n    var x = modp(n/2,\
    \ p);\n    return (x*x) % p;\n  }\n  else{\n    var x = modp((n-1)/2, p);\n  \
    \  return (2*x*x) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var res = 1;\n  \
    \  while (n > 0){\n        if (n % 2 == 1){\n            res = (res * 2) % p;\n\
    \        }\n        n = Math.floor(n / 2);\n        if (n > 0){\n            res\
    \ = (res * res) % p;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n10\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmps_1a0nv3.js:32:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmps_1a0nv3.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 10,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return\
    \ modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return\
    \ modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp8yf67uvc.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp8yf67uvc.js:13:5)\\n    at modp\
    \ (/tmp/tmp8yf67uvc.js:17:16)\\n    at modp (/tmp/tmp8yf67uvc.js:19:27)\\n   \
    \ at modp (/tmp/tmp8yf67uvc.js:17:16)\\n    at modp (/tmp/tmp8yf67uvc.js:19:27)\\\
    n    at modp (/tmp/tmp8yf67uvc.js:17:16)\\n    at modp (/tmp/tmp8yf67uvc.js:19:27)\\\
    n    at modp (/tmp/tmp8yf67uvc.js:17:16)\\n    at modp (/tmp/tmp8yf67uvc.js:19:27)\\\
    n    at modp (/tmp/tmp8yf67uvc.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    var half\
    \ = modp(Math.floor(n/2), p);\n    if(n % 2 == 0){\n        return (half * half)\
    \ % p;\n    }\n    else{\n        return (2 * half * half) % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    var\
    \ b = n;\n    while (p > 0) {\n        if (p & 1) {\n            r = (r * b) %\
    \ mod;\n        }\n        p = p >> 1;\n        b = (b * b) % mod;\n    }\n  \
    \  return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpz6sv_p02.js:17\\n            r = (r * b) % mod;\\n          \
    \                ^\\n\\nReferenceError: mod is not defined\\n    at modp (/tmp/tmpz6sv_p02.js:17:27)\\\
    n    at test (/tmp/tmpz6sv_p02.js:30:20)\\n    at Object.<anonymous> (/tmp/tmpz6sv_p02.js:39:1)\\\
    n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\\n    at Module.load (node:internal/modules/cjs/loader:998:32)\\\
    n    at Module._load (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\\
    n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: ReferenceError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * 2) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * 2) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n        return\
    \ 2 * modp(n-1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp1iq6cfv1.js:13\\n    if(n === 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp1iq6cfv1.js:13:5)\\n    at modp\
    \ (/tmp/tmp1iq6cfv1.js:17:16)\\n    at modp (/tmp/tmp1iq6cfv1.js:20:31)\\n   \
    \ at modp (/tmp/tmp1iq6cfv1.js:17:16)\\n    at modp (/tmp/tmp1iq6cfv1.js:20:31)\\\
    n    at modp (/tmp/tmp1iq6cfv1.js:17:16)\\n    at modp (/tmp/tmp1iq6cfv1.js:20:31)\\\
    n    at modp (/tmp/tmp1iq6cfv1.js:17:16)\\n    at modp (/tmp/tmp1iq6cfv1.js:20:31)\\\
    n    at modp (/tmp/tmp1iq6cfv1.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return (modp(n/2, p) ** 2 % p) * n % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmphp2bgkly.js:29:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmphp2bgkly.js:38:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p)**2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn Math.pow(modp(n/2, p), 2)\
    \ % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpczrpacju.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpczrpacju.js:13:5)\\n    at modp\
    \ (/tmp/tmpczrpacju.js:17:16)\\n    at modp (/tmp/tmpczrpacju.js:20:31)\\n   \
    \ at modp (/tmp/tmpczrpacju.js:17:16)\\n    at modp (/tmp/tmpczrpacju.js:20:31)\\\
    n    at modp (/tmp/tmpczrpacju.js:17:16)\\n    at modp (/tmp/tmpczrpacju.js:20:31)\\\
    n    at modp (/tmp/tmpczrpacju.js:17:16)\\n    at modp (/tmp/tmpczrpacju.js:20:31)\\\
    n    at modp (/tmp/tmpczrpacju.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n    }\n    return (modp(n/2, p) * modp(n/2, p) * 2) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n===0){\n    \
    \    return 1;\n    }\n    if(n%2===0){\n        return modp(n/2, p)**2 % p;\n\
    \    }\n    else{\n        return (modp(n-1, p) * modp(n+1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmptys4xls4.js:13\\n    if(n===0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmptys4xls4.js:13:5)\\n    at modp\
    \ (/tmp/tmptys4xls4.js:17:16)\\n    at modp (/tmp/tmptys4xls4.js:20:32)\\n   \
    \ at modp (/tmp/tmptys4xls4.js:17:16)\\n    at modp (/tmp/tmptys4xls4.js:20:32)\\\
    n    at modp (/tmp/tmptys4xls4.js:17:16)\\n    at modp (/tmp/tmptys4xls4.js:20:32)\\\
    n    at modp (/tmp/tmptys4xls4.js:17:16)\\n    at modp (/tmp/tmptys4xls4.js:20:32)\\\
    n    at modp (/tmp/tmptys4xls4.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n % 2 == 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var x = n % p;\n    while (n > 0){\n        if (n % 2 == 1){\n          \
    \  result = (result * x) % p;\n        }\n        n = Math.floor(n / 2);\n   \
    \     x = (x * x) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpnev__94x.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpnev__94x.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpoysogsex.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpoysogsex.js:13:5)\\n    at modp\
    \ (/tmp/tmpoysogsex.js:17:16)\\n    at modp (/tmp/tmpoysogsex.js:20:31)\\n   \
    \ at modp (/tmp/tmpoysogsex.js:17:16)\\n    at modp (/tmp/tmpoysogsex.js:20:31)\\\
    n    at modp (/tmp/tmpoysogsex.js:17:16)\\n    at modp (/tmp/tmpoysogsex.js:20:31)\\\
    n    at modp (/tmp/tmpoysogsex.js:17:16)\\n    at modp (/tmp/tmpoysogsex.js:20:31)\\\
    n    at modp (/tmp/tmpoysogsex.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n === 0) return\
    \ 1;\n  if (n % 2 === 0) {\n    var x = modp(n/2, p);\n    return (x * x) % p;\n\
    \  } else {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp3hkvba61.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp3hkvba61.js:13:5)\\n    at modp\
    \ (/tmp/tmp3hkvba61.js:17:16)\\n    at modp (/tmp/tmp3hkvba61.js:20:31)\\n   \
    \ at modp (/tmp/tmp3hkvba61.js:17:16)\\n    at modp (/tmp/tmp3hkvba61.js:20:31)\\\
    n    at modp (/tmp/tmp3hkvba61.js:17:16)\\n    at modp (/tmp/tmp3hkvba61.js:20:31)\\\
    n    at modp (/tmp/tmp3hkvba61.js:17:16)\\n    at modp (/tmp/tmp3hkvba61.js:20:31)\\\
    n    at modp (/tmp/tmp3hkvba61.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n    }\n    else{\n        return (modp(n/2, p) * modp(n/2, p) * 2)\
    \ % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n == 1) return n;\n  if (n % 2 == 0) return modp(n/2, p)**2 % p;\n\
    \  return modp(n-1, p) * n % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpk62wc8cp.js:25:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpk62wc8cp.js:33:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * modp(1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpht7c2li4.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpht7c2li4.js:13:5)\\n    at modp\
    \ (/tmp/tmpht7c2li4.js:19:13)\\n    at modp (/tmp/tmpht7c2li4.js:19:28)\\n   \
    \ at modp (/tmp/tmpht7c2li4.js:19:28)\\n    at modp (/tmp/tmpht7c2li4.js:19:28)\\\
    n    at modp (/tmp/tmpht7c2li4.js:19:28)\\n    at modp (/tmp/tmpht7c2li4.js:19:28)\\\
    n    at modp (/tmp/tmpht7c2li4.js:19:28)\\n    at modp (/tmp/tmpht7c2li4.js:19:28)\\\
    n    at modp (/tmp/tmpht7c2li4.js:19:28)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpuxpc_ie3.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpuxpc_ie3.js:13:5)\\n    at modp\
    \ (/tmp/tmpuxpc_ie3.js:17:16)\\n    at modp (/tmp/tmpuxpc_ie3.js:20:31)\\n   \
    \ at modp (/tmp/tmpuxpc_ie3.js:17:16)\\n    at modp (/tmp/tmpuxpc_ie3.js:20:31)\\\
    n    at modp (/tmp/tmpuxpc_ie3.js:17:16)\\n    at modp (/tmp/tmpuxpc_ie3.js:20:31)\\\
    n    at modp (/tmp/tmpuxpc_ie3.js:17:16)\\n    at modp (/tmp/tmpuxpc_ie3.js:20:31)\\\
    n    at modp (/tmp/tmpuxpc_ie3.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return modp(n/2, p) * modp(n/2, p) * 2 %\
    \ p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ for (var i = 0; i < n; i++) {\n    result = (result * 2) % p;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var res = 1;\n  \
    \  while (n > 0){\n        if (n % 2 == 1){\n            res = (res * 2) % p;\n\
    \        }\n        n = Math.floor(n / 2);\n        if (n > 0){\n            res\
    \ = (res * res) % p;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n10\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp6xjejib3.js:32:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp6xjejib3.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 10,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\tfor(var\
    \ i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\treturn res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(p == 1) return\
    \ 0;\n    if(n == 0) return 1;\n    if(n == 1) return n;\n    if(n % 2 == 0){\n\
    \        return modp(n/2, p) ** 2 % p;\n    }\n    else{\n        return modp(n-1,\
    \ p) * modp(n, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp34n2hqk4.js:12\\nfunction modp(n, p){\\n             ^\\n\\nRangeError:\
    \ Maximum call stack size exceeded\\n    at modp (/tmp/tmp34n2hqk4.js:12:14)\\\
    n    at modp (/tmp/tmp34n2hqk4.js:17:16)\\n    at modp (/tmp/tmp34n2hqk4.js:20:16)\\\
    n    at modp (/tmp/tmp34n2hqk4.js:20:31)\\n    at modp (/tmp/tmp34n2hqk4.js:20:31)\\\
    n    at modp (/tmp/tmp34n2hqk4.js:20:31)\\n    at modp (/tmp/tmp34n2hqk4.js:20:31)\\\
    n    at modp (/tmp/tmp34n2hqk4.js:20:31)\\n    at modp (/tmp/tmp34n2hqk4.js:20:31)\\\
    n    at modp (/tmp/tmp34n2hqk4.js:20:31)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (n % p) * modp(n-1, p) % p;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmppf49jsvw.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmppf49jsvw.js:38:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpg4mudg2v.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpg4mudg2v.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpmt8vy8wx.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpmt8vy8wx.js:13:5)\\n    at modp\
    \ (/tmp/tmpmt8vy8wx.js:17:16)\\n    at modp (/tmp/tmpmt8vy8wx.js:20:31)\\n   \
    \ at modp (/tmp/tmpmt8vy8wx.js:17:16)\\n    at modp (/tmp/tmpmt8vy8wx.js:20:31)\\\
    n    at modp (/tmp/tmpmt8vy8wx.js:17:16)\\n    at modp (/tmp/tmpmt8vy8wx.js:20:31)\\\
    n    at modp (/tmp/tmpmt8vy8wx.js:17:16)\\n    at modp (/tmp/tmpmt8vy8wx.js:20:31)\\\
    n    at modp (/tmp/tmpmt8vy8wx.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (n % p) * modp((n-1)/2, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n75\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp5y9cq9k4.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp5y9cq9k4.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 75,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n%2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x)%p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n)%p;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpi7agtipq.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpi7agtipq.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p)**2) % p;\n    }\n    else{\n        return\
    \ (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpksyl7mlr.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpksyl7mlr.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpnuwpu1wl.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpnuwpu1wl.js:13:5)\\n    at modp\
    \ (/tmp/tmpnuwpu1wl.js:17:16)\\n    at modp (/tmp/tmpnuwpu1wl.js:19:27)\\n   \
    \ at modp (/tmp/tmpnuwpu1wl.js:17:16)\\n    at modp (/tmp/tmpnuwpu1wl.js:19:27)\\\
    n    at modp (/tmp/tmpnuwpu1wl.js:17:16)\\n    at modp (/tmp/tmpnuwpu1wl.js:19:27)\\\
    n    at modp (/tmp/tmpnuwpu1wl.js:17:16)\\n    at modp (/tmp/tmpnuwpu1wl.js:19:27)\\\
    n    at modp (/tmp/tmpnuwpu1wl.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar half = modp(n/2, p);\n\t\treturn (half * half) % p;\n\
    \t}\n\telse{\n\t\tvar half = modp((n-1)/2, p);\n\t\treturn (half * half * n) %\
    \ p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp59nyp07c.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp59nyp07c.js:38:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) return modp(n/2, p) * modp(n/2, p) % p;\n  return modp(n-1,\
    \ p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return 2 * modp(n-1, p) % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n, p) % p;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp9qje6fs0.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp9qje6fs0.js:13:5)\\n    at modp\
    \ (/tmp/tmp9qje6fs0.js:20:16)\\n    at modp (/tmp/tmp9qje6fs0.js:20:31)\\n   \
    \ at modp (/tmp/tmp9qje6fs0.js:20:31)\\n    at modp (/tmp/tmp9qje6fs0.js:20:31)\\\
    n    at modp (/tmp/tmp9qje6fs0.js:20:31)\\n    at modp (/tmp/tmp9qje6fs0.js:20:31)\\\
    n    at modp (/tmp/tmp9qje6fs0.js:20:31)\\n    at modp (/tmp/tmp9qje6fs0.js:20:31)\\\
    n    at modp (/tmp/tmp9qje6fs0.js:20:31)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n == 1) return 2;\n  if (n % 2 == 0) return modp(n/2, p)**2 % p;\n\
    \  return 2 * modp(n-1, p) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn (x * x) % p;\n\t}\n\t\
    else{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2 * x * x) % p;\n\t}\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpy_q15u90.js:13\\n    if(n === 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpy_q15u90.js:13:5)\\n    at modp\
    \ (/tmp/tmpy_q15u90.js:17:16)\\n    at modp (/tmp/tmpy_q15u90.js:19:27)\\n   \
    \ at modp (/tmp/tmpy_q15u90.js:17:16)\\n    at modp (/tmp/tmpy_q15u90.js:19:27)\\\
    n    at modp (/tmp/tmpy_q15u90.js:17:16)\\n    at modp (/tmp/tmpy_q15u90.js:19:27)\\\
    n    at modp (/tmp/tmpy_q15u90.js:17:16)\\n    at modp (/tmp/tmpy_q15u90.js:19:27)\\\
    n    at modp (/tmp/tmpy_q15u90.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    return 2 * modp(n-1,\
    \ p) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn (t*t) % p;\n\t}\n\treturn\
    \ (2*modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n / 2, p) ** 2) % p;\n    }\n    else{\n    \
    \    return (2 * modp(n - 1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    var x = n % p;\n\twhile (n > 0){\n\t\tif (n % 2 == 1){\n\t\t\tresult = (result\
    \ * x) % p;\n\t\t}\n\t\tn = Math.floor(n / 2);\n\t\tx = (x * x) % p;\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmp359ic8tq.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp359ic8tq.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var power = n % (p - 1);\n    var base = 2;\n    while (power > 0) {\n  \
    \      if (power % 2 == 1) {\n            result = (result * base) % p;\n    \
    \    }\n        base = (base * base) % p;\n        power = power / 2;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpjr258lr8.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpjr258lr8.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ for (var i = 0; i < n; i++) {\n    result = (result * 2) % p;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\tvar\
    \ b = n;\n\twhile(b > 0){\n\t\tif(b % 2 == 1){\n\t\t\tres = (res * n) % p;\n\t\
    \t}\n\t\tb = Math.floor(b / 2);\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpgs729g9m.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpgs729g9m.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2, p) % p;\n\t}\n\telse{\n\
    \t\treturn modp(n-1, p) * modp(n+1, p) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmptpgxh1oy.js:13\\n\\tif(n == 0) return 1;\\n\\t^\\n\\nRangeError:\
    \ Maximum call stack size exceeded\\n    at modp (/tmp/tmptpgxh1oy.js:13:2)\\\
    n    at modp (/tmp/tmptpgxh1oy.js:15:10)\\n    at modp (/tmp/tmptpgxh1oy.js:18:25)\\\
    n    at modp (/tmp/tmptpgxh1oy.js:15:10)\\n    at modp (/tmp/tmptpgxh1oy.js:18:25)\\\
    n    at modp (/tmp/tmptpgxh1oy.js:15:10)\\n    at modp (/tmp/tmptpgxh1oy.js:18:25)\\\
    n    at modp (/tmp/tmptpgxh1oy.js:15:10)\\n    at modp (/tmp/tmptpgxh1oy.js:18:25)\\\
    n    at modp (/tmp/tmptpgxh1oy.js:15:10)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++){\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n === 0) return\
    \ 1;\n  if (n === 1) return n;\n  if (n % 2 === 0) return (modp(n/2, p) ** 2)\
    \ % p;\n  return (modp(n/2, p) ** 2 * n) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpj76zgqwv.js:24:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpj76zgqwv.js:33:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n === 0) return\
    \ 1;\n  if (n % 2 === 0) {\n    var x = modp(n/2, p);\n    return (x*x) % p;\n\
    \  } else {\n    return (n * modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp231aqdcf.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp231aqdcf.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn Math.pow(modp(n/2, p), 2)\
    \ % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else{\n        var res = modp(Math.floor(n/2), p);\n\
    \        res = (res * res) % p;\n        if(n % 2 == 1){\n            res = (res\
    \ * 2) % p;\n        }\n        return res;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp2gfmb9n6.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp2gfmb9n6.js:13:5)\\n    at modp\
    \ (/tmp/tmp2gfmb9n6.js:17:16)\\n    at modp (/tmp/tmp2gfmb9n6.js:20:31)\\n   \
    \ at modp (/tmp/tmp2gfmb9n6.js:17:16)\\n    at modp (/tmp/tmp2gfmb9n6.js:20:31)\\\
    n    at modp (/tmp/tmp2gfmb9n6.js:17:16)\\n    at modp (/tmp/tmp2gfmb9n6.js:20:31)\\\
    n    at modp (/tmp/tmp2gfmb9n6.js:17:16)\\n    at modp (/tmp/tmp2gfmb9n6.js:20:31)\\\
    n    at modp (/tmp/tmp2gfmb9n6.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }else if(n == 1){\n        return n;\n    }else{\n      \
    \  var x = modp(n/2, p);\n        if(n % 2 == 0){\n            return (x * x)\
    \ % p;\n        }else{\n            return (x * x * n) % p;\n        }\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpxsh_ecat.js:32:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpxsh_ecat.js:41:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return Math.pow(modp(n/2, p), 2) % p;\n  }\n\
    \  return (n % p) * modp((n-1)/2, p) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n75\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpi_yv0o0n.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpi_yv0o0n.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 75,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpe0wco3ks.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpe0wco3ks.js:13:5)\\n    at modp\
    \ (/tmp/tmpe0wco3ks.js:17:16)\\n    at modp (/tmp/tmpe0wco3ks.js:20:31)\\n   \
    \ at modp (/tmp/tmpe0wco3ks.js:17:16)\\n    at modp (/tmp/tmpe0wco3ks.js:20:31)\\\
    n    at modp (/tmp/tmpe0wco3ks.js:17:16)\\n    at modp (/tmp/tmpe0wco3ks.js:20:31)\\\
    n    at modp (/tmp/tmpe0wco3ks.js:17:16)\\n    at modp (/tmp/tmpe0wco3ks.js:20:31)\\\
    n    at modp (/tmp/tmpe0wco3ks.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n - 1, p) * 2 % p;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n === 0) return\
    \ 1;\n\tif(n === 1) return n % p;\n\tif(n % 2 === 0){\n\t\tvar res = modp(n/2,\
    \ p);\n\t\treturn (res * res) % p;\n\t}\n\telse{\n\t\tvar res = modp((n-1)/2,\
    \ p);\n\t\treturn (res * res * n) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpp23wnic1.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpp23wnic1.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    var res = 1;\n    var b = n;\n    while(b > 0){\n\
    \        if(b % 2 == 1){\n            res = (res * n) % p;\n        }\n      \
    \  n = (n * n) % p;\n        b = Math.floor(b / 2);\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpulyqizrd.js:33:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpulyqizrd.js:42:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2, p) % p;\n\t}\n\telse{\n\
    \t\treturn modp(n-1, p) * modp(1, p) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpyxaysafg.js:13\\n\\tif(n == 0) return 1;\\n\\t^\\n\\nRangeError:\
    \ Maximum call stack size exceeded\\n    at modp (/tmp/tmpyxaysafg.js:13:2)\\\
    n    at modp (/tmp/tmpyxaysafg.js:18:10)\\n    at modp (/tmp/tmpyxaysafg.js:18:25)\\\
    n    at modp (/tmp/tmpyxaysafg.js:18:25)\\n    at modp (/tmp/tmpyxaysafg.js:18:25)\\\
    n    at modp (/tmp/tmpyxaysafg.js:18:25)\\n    at modp (/tmp/tmpyxaysafg.js:18:25)\\\
    n    at modp (/tmp/tmpyxaysafg.js:18:25)\\n    at modp (/tmp/tmpyxaysafg.js:18:25)\\\
    n    at modp (/tmp/tmpyxaysafg.js:18:25)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var i;\n    for (i = 0; i < n; i++){\n        result = (result * 2) % p;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmppcbcrtka.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmppcbcrtka.js:13:5)\\n    at modp\
    \ (/tmp/tmppcbcrtka.js:17:16)\\n    at modp (/tmp/tmppcbcrtka.js:20:31)\\n   \
    \ at modp (/tmp/tmppcbcrtka.js:17:16)\\n    at modp (/tmp/tmppcbcrtka.js:20:31)\\\
    n    at modp (/tmp/tmppcbcrtka.js:17:16)\\n    at modp (/tmp/tmppcbcrtka.js:20:31)\\\
    n    at modp (/tmp/tmppcbcrtka.js:17:16)\\n    at modp (/tmp/tmppcbcrtka.js:20:31)\\\
    n    at modp (/tmp/tmppcbcrtka.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2,\
    \ p) % p;\n\t}\n\treturn modp(n-1, p) * n % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmplrkr9syy.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmplrkr9syy.js:35:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmply6ddvu_.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmply6ddvu_.js:13:5)\\n    at modp\
    \ (/tmp/tmply6ddvu_.js:17:16)\\n    at modp (/tmp/tmply6ddvu_.js:19:27)\\n   \
    \ at modp (/tmp/tmply6ddvu_.js:17:16)\\n    at modp (/tmp/tmply6ddvu_.js:19:27)\\\
    n    at modp (/tmp/tmply6ddvu_.js:17:16)\\n    at modp (/tmp/tmply6ddvu_.js:19:27)\\\
    n    at modp (/tmp/tmply6ddvu_.js:17:16)\\n    at modp (/tmp/tmply6ddvu_.js:19:27)\\\
    n    at modp (/tmp/tmply6ddvu_.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p)**2) % p;\n    }\n    else{\n        return\
    \ (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n === 0) return\
    \ 1;\n\tif(n === 1) return n;\n\tif(n % 2 === 0){\n\t\treturn modp(n/2, p) * modp(n/2,\
    \ p) % p;\n\t}\n\treturn modp(n-1, p) * n % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpkwvl4c7d.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpkwvl4c7d.js:35:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return modp(n/2, p) * modp(n/2, p) * 2 %\
    \ p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    var\
    \ b = n;\n    while (p > 0) {\n        if (p & 1 == 1) {\n            r = (r *\
    \ b) % mod;\n        }\n        p >>= 1;\n        b = (b * b) % mod;\n    }\n\
    \    return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpy5svh6rt.js:17\\n            r = (r * b) % mod;\\n          \
    \                ^\\n\\nReferenceError: mod is not defined\\n    at modp (/tmp/tmpy5svh6rt.js:17:27)\\\
    n    at test (/tmp/tmpy5svh6rt.js:30:20)\\n    at Object.<anonymous> (/tmp/tmpy5svh6rt.js:39:1)\\\
    n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\\n    at Module.load (node:internal/modules/cjs/loader:998:32)\\\
    n    at Module._load (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\\
    n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: ReferenceError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2 % p;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\t\
    return (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n == 1){\n        return n;\n    }\n    else{\n\
    \        if(n % 2 == 0){\n            return (modp(n/2, p) * modp(n/2, p)) % p;\n\
    \        }\n        else{\n            return (modp(n/2, p) * modp(n/2, p) * n)\
    \ % p;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n        return\
    \ 2 * modp(n-1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpteqtgrpp.js:13\\n    if(n === 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpteqtgrpp.js:13:5)\\n    at modp\
    \ (/tmp/tmpteqtgrpp.js:17:16)\\n    at modp (/tmp/tmpteqtgrpp.js:20:31)\\n   \
    \ at modp (/tmp/tmpteqtgrpp.js:17:16)\\n    at modp (/tmp/tmpteqtgrpp.js:20:31)\\\
    n    at modp (/tmp/tmpteqtgrpp.js:17:16)\\n    at modp (/tmp/tmpteqtgrpp.js:20:31)\\\
    n    at modp (/tmp/tmpteqtgrpp.js:17:16)\\n    at modp (/tmp/tmpteqtgrpp.js:20:31)\\\
    n    at modp (/tmp/tmpteqtgrpp.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n === 0) return\
    \ 1;\n\tif(n === 1) return n;\n\tif(n % 2 === 0){\n\t\treturn Math.pow(modp(n/2,\
    \ p), 2) % p;\n\t} else {\n\t\treturn (n * modp(n-1, p)) % p;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpi_6itwfu.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpi_6itwfu.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2,\
    \ p) % p;\n\t}\n\telse{\n\t\treturn 2 * modp(n-1, p) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return\
    \ modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p)**2 % p;\n  }\n  return modp(n-1,\
    \ p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\
    \t\treturn (2*modp(n-1, p)) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    return\
    \ (2 * modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n == 1){\n        return n % p;\n    }\n \
    \   else{\n        var half = modp(n/2, p);\n        if(n % 2 == 0){\n       \
    \     return (half * half) % p;\n        }\n        else{\n            return\
    \ (half * half * n) % p;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpbcld57_d.js:35:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpbcld57_d.js:44:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar r = modp(n/2, p);\n\t\treturn (r*r) % p;\n\t}\n\telse{\n\
    \t\tvar r = modp((n-1)/2, p);\n\t\treturn (2*r*r) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2,\
    \ p) % p;\n\t}\n\treturn modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp66hxogqw.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp66hxogqw.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp3zxmcso4.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp3zxmcso4.js:13:5)\\n    at modp\
    \ (/tmp/tmp3zxmcso4.js:17:16)\\n    at modp (/tmp/tmp3zxmcso4.js:20:31)\\n   \
    \ at modp (/tmp/tmp3zxmcso4.js:17:16)\\n    at modp (/tmp/tmp3zxmcso4.js:20:31)\\\
    n    at modp (/tmp/tmp3zxmcso4.js:17:16)\\n    at modp (/tmp/tmp3zxmcso4.js:20:31)\\\
    n    at modp (/tmp/tmp3zxmcso4.js:17:16)\\n    at modp (/tmp/tmp3zxmcso4.js:20:31)\\\
    n    at modp (/tmp/tmp3zxmcso4.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\
    \t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * modp(n, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpmfbn7nqx.js:13\\n    if(n === 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpmfbn7nqx.js:13:5)\\n    at modp\
    \ (/tmp/tmpmfbn7nqx.js:19:13)\\n    at modp (/tmp/tmpmfbn7nqx.js:19:28)\\n   \
    \ at modp (/tmp/tmpmfbn7nqx.js:19:28)\\n    at modp (/tmp/tmpmfbn7nqx.js:19:28)\\\
    n    at modp (/tmp/tmpmfbn7nqx.js:19:28)\\n    at modp (/tmp/tmpmfbn7nqx.js:19:28)\\\
    n    at modp (/tmp/tmpmfbn7nqx.js:19:28)\\n    at modp (/tmp/tmpmfbn7nqx.js:19:28)\\\
    n    at modp (/tmp/tmpmfbn7nqx.js:19:28)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) {\n    var x = modp(n/2, p);\n    return (x * x) % p;\n\
    \  } else {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n\t} else {\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    return n * modp(n-1, p) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp8qra299e.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp8qra299e.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var i;\n    for (i = 0; i < n; i++){\n        result = (result * 2) % p;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2 % p;\n    }\n    var\
    \ half = modp(Math.floor(n/2), p);\n    if(n % 2 == 0){\n        return (half\
    \ * half) % p;\n    }\n    else{\n        return (2 * half * half) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpjoaljozi.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpjoaljozi.js:13:5)\\n    at modp\
    \ (/tmp/tmpjoaljozi.js:17:16)\\n    at modp (/tmp/tmpjoaljozi.js:19:27)\\n   \
    \ at modp (/tmp/tmpjoaljozi.js:17:16)\\n    at modp (/tmp/tmpjoaljozi.js:19:27)\\\
    n    at modp (/tmp/tmpjoaljozi.js:17:16)\\n    at modp (/tmp/tmpjoaljozi.js:19:27)\\\
    n    at modp (/tmp/tmpjoaljozi.js:17:16)\\n    at modp (/tmp/tmpjoaljozi.js:19:27)\\\
    n    at modp (/tmp/tmpjoaljozi.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n === 0) return\
    \ 1;\n  if (n % 2 === 0) {\n    var m = modp(n/2, p);\n    return (m*m) % p;\n\
    \  } else {\n    return (modp(n-1, p) * n) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp07njx1ev.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp07njx1ev.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p)**2) % p;\n    }\n    else{\n        return\
    \ (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn (t*t) % p;\n\t}\n\treturn\
    \ (2*modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ var x = 2;\n  var power = n;\n  while (power > 0) {\n    var leastSignificantBit\
    \ = power % 2;\n    power = Math.floor(power / 2);\n    if (leastSignificantBit\
    \ == 1) {\n      result = result * x;\n      result = result % p;\n    }\n   \
    \ x = x * x;\n    x = x % p;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n == 0) return\
    \ 1;\n    if (n == 1) return n % p;\n    if (n % 2 == 0) return (modp(n/2, p)\
    \ ** 2) % p;\n    return (modp(n-1, p) * n) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmptd1du4b5.js:25:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmptd1du4b5.js:33:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        var t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    } else {\n        return (modp(n-1, p) * n) % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp8w8c31u3.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp8w8c31u3.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmphnz304_f.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmphnz304_f.js:13:5)\\n    at modp\
    \ (/tmp/tmphnz304_f.js:17:16)\\n    at modp (/tmp/tmphnz304_f.js:19:27)\\n   \
    \ at modp (/tmp/tmphnz304_f.js:17:16)\\n    at modp (/tmp/tmphnz304_f.js:19:27)\\\
    n    at modp (/tmp/tmphnz304_f.js:17:16)\\n    at modp (/tmp/tmphnz304_f.js:19:27)\\\
    n    at modp (/tmp/tmphnz304_f.js:17:16)\\n    at modp (/tmp/tmphnz304_f.js:19:27)\\\
    n    at modp (/tmp/tmphnz304_f.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n%2 == 0){\n\t\tvar r = modp(n/2, p);\n\t\treturn (r*r)%p;\n\t}\n\treturn\
    \ (2*modp(n-1, p))%p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * modp(n, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpufavyqdx.js:13\\n    if(n === 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpufavyqdx.js:13:5)\\n    at modp\
    \ (/tmp/tmpufavyqdx.js:19:13)\\n    at modp (/tmp/tmpufavyqdx.js:19:28)\\n   \
    \ at modp (/tmp/tmpufavyqdx.js:19:28)\\n    at modp (/tmp/tmpufavyqdx.js:19:28)\\\
    n    at modp (/tmp/tmpufavyqdx.js:19:28)\\n    at modp (/tmp/tmpufavyqdx.js:19:28)\\\
    n    at modp (/tmp/tmpufavyqdx.js:19:28)\\n    at modp (/tmp/tmpufavyqdx.js:19:28)\\\
    n    at modp (/tmp/tmpufavyqdx.js:19:28)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return (modp(n-1, p) * modp(n+1, p)) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpmzjowat5.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpmzjowat5.js:13:5)\\n    at modp\
    \ (/tmp/tmpmzjowat5.js:17:16)\\n    at modp (/tmp/tmpmzjowat5.js:19:28)\\n   \
    \ at modp (/tmp/tmpmzjowat5.js:17:16)\\n    at modp (/tmp/tmpmzjowat5.js:19:28)\\\
    n    at modp (/tmp/tmpmzjowat5.js:17:16)\\n    at modp (/tmp/tmpmzjowat5.js:19:28)\\\
    n    at modp (/tmp/tmpmzjowat5.js:17:16)\\n    at modp (/tmp/tmpmzjowat5.js:19:28)\\\
    n    at modp (/tmp/tmpmzjowat5.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    var b = n;\n\twhile (b > 0){\n\t\tif (b % 2 == 1){\n\t\t\tresult = (result * n)\
    \ % p;\n\t\t}\n\t\tb = Math.floor(b / 2);\n\t\tn = (n * n) % p;\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpt9ljczc2.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpt9ljczc2.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n == 1){\n        return n;\n    }\n    else\
    \ if(n % 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n   \
    \     return modp(n-1, p) * n % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp6my6_o7a.js:33:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp6my6_o7a.js:41:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return (modp(n-1, p) * modp(n+1, p)) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp444bfs8h.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp444bfs8h.js:13:5)\\n    at modp\
    \ (/tmp/tmp444bfs8h.js:17:16)\\n    at modp (/tmp/tmp444bfs8h.js:19:28)\\n   \
    \ at modp (/tmp/tmp444bfs8h.js:17:16)\\n    at modp (/tmp/tmp444bfs8h.js:19:28)\\\
    n    at modp (/tmp/tmp444bfs8h.js:17:16)\\n    at modp (/tmp/tmp444bfs8h.js:19:28)\\\
    n    at modp (/tmp/tmp444bfs8h.js:17:16)\\n    at modp (/tmp/tmp444bfs8h.js:19:28)\\\
    n    at modp (/tmp/tmp444bfs8h.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpe1m68yc4.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpe1m68yc4.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var x = n % p;\n    while (n > 0){\n        if (n % 2 == 1){\n          \
    \  result = (result * x) % p;\n        }\n        n = Math.floor(n / 2);\n   \
    \     x = (x * x) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmp4w8ilvkn.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp4w8ilvkn.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n - 1, p) * 2 % p;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n / 2, p) * modp(n / 2, p)) % p;\n    }\n   \
    \ else{\n        return (2 * modp(n - 1, p)) % p;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n    }\n    else{\n        return (modp(n-1, p) * modp(n+1, p)) % p;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpt6xa4756.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpt6xa4756.js:13:5)\\n    at modp\
    \ (/tmp/tmpt6xa4756.js:17:17)\\n    at modp (/tmp/tmpt6xa4756.js:20:32)\\n   \
    \ at modp (/tmp/tmpt6xa4756.js:17:17)\\n    at modp (/tmp/tmpt6xa4756.js:20:32)\\\
    n    at modp (/tmp/tmpt6xa4756.js:17:17)\\n    at modp (/tmp/tmpt6xa4756.js:20:32)\\\
    n    at modp (/tmp/tmpt6xa4756.js:17:17)\\n    at modp (/tmp/tmpt6xa4756.js:20:32)\\\
    n    at modp (/tmp/tmpt6xa4756.js:17:17)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0)\n\t\treturn\
    \ 1;\n\tif(n%2 == 0)\n\t\treturn modp(n/2, p) * modp(n/2, p) % p;\n\telse\n\t\t\
    return modp(n/2, p) * modp(n/2, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpio29xng4.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpio29xng4.js:13:5)\\n    at modp\
    \ (/tmp/tmpio29xng4.js:17:16)\\n    at modp (/tmp/tmpio29xng4.js:20:31)\\n   \
    \ at modp (/tmp/tmpio29xng4.js:17:16)\\n    at modp (/tmp/tmpio29xng4.js:20:31)\\\
    n    at modp (/tmp/tmpio29xng4.js:17:16)\\n    at modp (/tmp/tmpio29xng4.js:20:31)\\\
    n    at modp (/tmp/tmpio29xng4.js:17:16)\\n    at modp (/tmp/tmpio29xng4.js:20:31)\\\
    n    at modp (/tmp/tmpio29xng4.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpw0bjk8_w.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpw0bjk8_w.js:13:5)\\n    at modp\
    \ (/tmp/tmpw0bjk8_w.js:17:16)\\n    at modp (/tmp/tmpw0bjk8_w.js:20:31)\\n   \
    \ at modp (/tmp/tmpw0bjk8_w.js:17:16)\\n    at modp (/tmp/tmpw0bjk8_w.js:20:31)\\\
    n    at modp (/tmp/tmpw0bjk8_w.js:17:16)\\n    at modp (/tmp/tmpw0bjk8_w.js:20:31)\\\
    n    at modp (/tmp/tmpw0bjk8_w.js:17:16)\\n    at modp (/tmp/tmpw0bjk8_w.js:20:31)\\\
    n    at modp (/tmp/tmpw0bjk8_w.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn (x*x) % p;\n\t}\n\telse{\n\
    \t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var x = n % p;\n    while (n > 0){\n        if (n % 2 == 1){\n          \
    \  result = (result * x) % p;\n        }\n        n = Math.floor(n / 2);\n   \
    \     x = (x * x) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpy3v0atii.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpy3v0atii.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n === 1){\n        return n;\n    }\n    if(n\
    \ % 2 === 0){\n        return Math.pow(modp(n/2, p), 2) % p;\n    }\n    else{\n\
    \        return (n * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp9nd8gtcy.js:33:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp9nd8gtcy.js:41:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var res = 1;\n  \
    \  while (n > 0){\n        if (n % 2 == 1){\n            res = (res * 2) % p;\n\
    \        }\n        n = Math.floor(n / 2);\n        if (n > 0){\n            res\
    \ = (res * res) % p;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n10\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpx_a0011t.js:32:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpx_a0011t.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 10,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p) * modp(n/2, p) % p;\n  }\n\
    \  else{\n    return modp(n-1, p) * modp(n, p) % p;\n  }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpt_m33vi_.js:13\\n  if(n == 0){\\n  ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpt_m33vi_.js:13:3)\\n    at modp\
    \ (/tmp/tmpt_m33vi_.js:20:12)\\n    at modp (/tmp/tmpt_m33vi_.js:20:27)\\n   \
    \ at modp (/tmp/tmpt_m33vi_.js:20:27)\\n    at modp (/tmp/tmpt_m33vi_.js:20:27)\\\
    n    at modp (/tmp/tmpt_m33vi_.js:20:27)\\n    at modp (/tmp/tmpt_m33vi_.js:20:27)\\\
    n    at modp (/tmp/tmpt_m33vi_.js:20:27)\\n    at modp (/tmp/tmpt_m33vi_.js:20:27)\\\
    n    at modp (/tmp/tmpt_m33vi_.js:20:27)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return (modp(n-1, p) * modp(n+1, p)) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmphzujhaxw.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmphzujhaxw.js:13:5)\\n    at modp\
    \ (/tmp/tmphzujhaxw.js:17:16)\\n    at modp (/tmp/tmphzujhaxw.js:20:32)\\n   \
    \ at modp (/tmp/tmphzujhaxw.js:17:16)\\n    at modp (/tmp/tmphzujhaxw.js:20:32)\\\
    n    at modp (/tmp/tmphzujhaxw.js:17:16)\\n    at modp (/tmp/tmphzujhaxw.js:20:32)\\\
    n    at modp (/tmp/tmphzujhaxw.js:17:16)\\n    at modp (/tmp/tmphzujhaxw.js:20:32)\\\
    n    at modp (/tmp/tmphzujhaxw.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar r = modp(n/2, p);\n\t\treturn (r*r) % p;\n\t}\n\telse{\n\
    \t\tvar r = modp((n-1)/2, p);\n\t\treturn (2*r*r) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    var i = 0;\n\tvar two = 2;\n\tvar n_bin = n.toString(2);\n\tvar n_bin_len = n_bin.length;\n\
    \tfor(i = 0; i < n_bin_len; i++){\n\t\tif(n_bin[i] == 1){\n\t\t\tresult = (result\
    \ * two) % p;\n\t\t}\n\t\ttwo = (two * two) % p;\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n10\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpjaw91e3t.js:33:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpjaw91e3t.js:41:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 10,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ for (var i = 0; i < n; i++) {\n    result = (result * 2) % p;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ (modp(n-1, p) * 2) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++){\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp4graap61.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp4graap61.js:13:5)\\n    at modp\
    \ (/tmp/tmp4graap61.js:17:16)\\n    at modp (/tmp/tmp4graap61.js:20:31)\\n   \
    \ at modp (/tmp/tmp4graap61.js:17:16)\\n    at modp (/tmp/tmp4graap61.js:20:31)\\\
    n    at modp (/tmp/tmp4graap61.js:17:16)\\n    at modp (/tmp/tmp4graap61.js:20:31)\\\
    n    at modp (/tmp/tmp4graap61.js:17:16)\\n    at modp (/tmp/tmp4graap61.js:20:31)\\\
    n    at modp (/tmp/tmp4graap61.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\twhile(n\
    \ > 0){\n\t\tif(n % 2 == 1){\n\t\t\tres = (res * 2) % p;\n\t\t}\n\t\tn = Math.floor(n\
    \ / 2);\n\t}\n\treturn res;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n4\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmp74f8fded.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp74f8fded.js:37:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 4,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n == 1){\n    return 2;\n  }\n  if(n % 2 == 0){\n    var x = modp(n/2,\
    \ p);\n    return (x*x) % p;\n  }\n  else{\n    var x = modp((n-1)/2, p);\n  \
    \  return (2*x*x) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var res = 1;\n  \
    \  while (n > 0){\n        if (n % 2 == 1){\n            res = (res * 2) % p;\n\
    \        }\n        n = Math.floor(n / 2);\n        if (n > 0){\n            res\
    \ = (res * res) % p;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n10\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp_wmdeqhm.js:32:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp_wmdeqhm.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 10,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p) ** 2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return\
    \ modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return\
    \ modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpbg5qmfg2.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpbg5qmfg2.js:13:5)\\n    at modp\
    \ (/tmp/tmpbg5qmfg2.js:17:16)\\n    at modp (/tmp/tmpbg5qmfg2.js:19:27)\\n   \
    \ at modp (/tmp/tmpbg5qmfg2.js:17:16)\\n    at modp (/tmp/tmpbg5qmfg2.js:19:27)\\\
    n    at modp (/tmp/tmpbg5qmfg2.js:17:16)\\n    at modp (/tmp/tmpbg5qmfg2.js:19:27)\\\
    n    at modp (/tmp/tmpbg5qmfg2.js:17:16)\\n    at modp (/tmp/tmpbg5qmfg2.js:19:27)\\\
    n    at modp (/tmp/tmpbg5qmfg2.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    var half\
    \ = modp(Math.floor(n/2), p);\n    if(n % 2 == 0){\n        return (half * half)\
    \ % p;\n    }\n    else{\n        return (2 * half * half) % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    var\
    \ b = n;\n    while (p > 0) {\n        if (p & 1) {\n            r = (r * b) %\
    \ mod;\n        }\n        p = p >> 1;\n        b = (b * b) % mod;\n    }\n  \
    \  return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpiae44bh_.js:17\\n            r = (r * b) % mod;\\n          \
    \                ^\\n\\nReferenceError: mod is not defined\\n    at modp (/tmp/tmpiae44bh_.js:17:27)\\\
    n    at test (/tmp/tmpiae44bh_.js:30:20)\\n    at Object.<anonymous> (/tmp/tmpiae44bh_.js:39:1)\\\
    n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\\n    at Module.load (node:internal/modules/cjs/loader:998:32)\\\
    n    at Module._load (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\\
    n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: ReferenceError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * 2) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * 2) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n        return\
    \ 2 * modp(n-1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpfx42kek4.js:13\\n    if(n === 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpfx42kek4.js:13:5)\\n    at modp\
    \ (/tmp/tmpfx42kek4.js:17:16)\\n    at modp (/tmp/tmpfx42kek4.js:20:31)\\n   \
    \ at modp (/tmp/tmpfx42kek4.js:17:16)\\n    at modp (/tmp/tmpfx42kek4.js:20:31)\\\
    n    at modp (/tmp/tmpfx42kek4.js:17:16)\\n    at modp (/tmp/tmpfx42kek4.js:20:31)\\\
    n    at modp (/tmp/tmpfx42kek4.js:17:16)\\n    at modp (/tmp/tmpfx42kek4.js:20:31)\\\
    n    at modp (/tmp/tmpfx42kek4.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return (modp(n/2, p) ** 2 % p) * n % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpqnugm2e9.js:29:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpqnugm2e9.js:38:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n/2, p)**2 % p;\n  }\n  return\
    \ modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn Math.pow(modp(n/2, p), 2)\
    \ % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpnxdos862.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpnxdos862.js:13:5)\\n    at modp\
    \ (/tmp/tmpnxdos862.js:17:16)\\n    at modp (/tmp/tmpnxdos862.js:20:31)\\n   \
    \ at modp (/tmp/tmpnxdos862.js:17:16)\\n    at modp (/tmp/tmpnxdos862.js:20:31)\\\
    n    at modp (/tmp/tmpnxdos862.js:17:16)\\n    at modp (/tmp/tmpnxdos862.js:20:31)\\\
    n    at modp (/tmp/tmpnxdos862.js:17:16)\\n    at modp (/tmp/tmpnxdos862.js:20:31)\\\
    n    at modp (/tmp/tmpnxdos862.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n    }\n    return (modp(n/2, p) * modp(n/2, p) * 2) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n===0){\n    \
    \    return 1;\n    }\n    if(n%2===0){\n        return modp(n/2, p)**2 % p;\n\
    \    }\n    else{\n        return (modp(n-1, p) * modp(n+1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp2dywn5mo.js:13\\n    if(n===0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp2dywn5mo.js:13:5)\\n    at modp\
    \ (/tmp/tmp2dywn5mo.js:17:16)\\n    at modp (/tmp/tmp2dywn5mo.js:20:32)\\n   \
    \ at modp (/tmp/tmp2dywn5mo.js:17:16)\\n    at modp (/tmp/tmp2dywn5mo.js:20:32)\\\
    n    at modp (/tmp/tmp2dywn5mo.js:17:16)\\n    at modp (/tmp/tmp2dywn5mo.js:20:32)\\\
    n    at modp (/tmp/tmp2dywn5mo.js:17:16)\\n    at modp (/tmp/tmp2dywn5mo.js:20:32)\\\
    n    at modp (/tmp/tmp2dywn5mo.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n % 2 == 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var x = n % p;\n    while (n > 0){\n        if (n % 2 == 1){\n          \
    \  result = (result * x) % p;\n        }\n        n = Math.floor(n / 2);\n   \
    \     x = (x * x) % p;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmp4rosrsrs.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp4rosrsrs.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp8a68dgju.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp8a68dgju.js:13:5)\\n    at modp\
    \ (/tmp/tmp8a68dgju.js:17:16)\\n    at modp (/tmp/tmp8a68dgju.js:20:31)\\n   \
    \ at modp (/tmp/tmp8a68dgju.js:17:16)\\n    at modp (/tmp/tmp8a68dgju.js:20:31)\\\
    n    at modp (/tmp/tmp8a68dgju.js:17:16)\\n    at modp (/tmp/tmp8a68dgju.js:20:31)\\\
    n    at modp (/tmp/tmp8a68dgju.js:17:16)\\n    at modp (/tmp/tmp8a68dgju.js:20:31)\\\
    n    at modp (/tmp/tmp8a68dgju.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n === 0) return\
    \ 1;\n  if (n % 2 === 0) {\n    var x = modp(n/2, p);\n    return (x * x) % p;\n\
    \  } else {\n    return (2 * modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmprtomp0j7.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmprtomp0j7.js:13:5)\\n    at modp\
    \ (/tmp/tmprtomp0j7.js:17:16)\\n    at modp (/tmp/tmprtomp0j7.js:20:31)\\n   \
    \ at modp (/tmp/tmprtomp0j7.js:17:16)\\n    at modp (/tmp/tmprtomp0j7.js:20:31)\\\
    n    at modp (/tmp/tmprtomp0j7.js:17:16)\\n    at modp (/tmp/tmprtomp0j7.js:20:31)\\\
    n    at modp (/tmp/tmprtomp0j7.js:17:16)\\n    at modp (/tmp/tmprtomp0j7.js:20:31)\\\
    n    at modp (/tmp/tmprtomp0j7.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n    }\n    else{\n        return (modp(n/2, p) * modp(n/2, p) * 2)\
    \ % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n == 1) return n;\n  if (n % 2 == 0) return modp(n/2, p)**2 % p;\n\
    \  return modp(n-1, p) * n % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpqhu1uuzq.js:25:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpqhu1uuzq.js:33:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (modp(n-1, p) * modp(1, p)) % p;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpt5t6l_p4.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpt5t6l_p4.js:13:5)\\n    at modp\
    \ (/tmp/tmpt5t6l_p4.js:19:13)\\n    at modp (/tmp/tmpt5t6l_p4.js:19:28)\\n   \
    \ at modp (/tmp/tmpt5t6l_p4.js:19:28)\\n    at modp (/tmp/tmpt5t6l_p4.js:19:28)\\\
    n    at modp (/tmp/tmpt5t6l_p4.js:19:28)\\n    at modp (/tmp/tmpt5t6l_p4.js:19:28)\\\
    n    at modp (/tmp/tmpt5t6l_p4.js:19:28)\\n    at modp (/tmp/tmpt5t6l_p4.js:19:28)\\\
    n    at modp (/tmp/tmpt5t6l_p4.js:19:28)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpwsofxlsr.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpwsofxlsr.js:13:5)\\n    at modp\
    \ (/tmp/tmpwsofxlsr.js:17:16)\\n    at modp (/tmp/tmpwsofxlsr.js:20:31)\\n   \
    \ at modp (/tmp/tmpwsofxlsr.js:17:16)\\n    at modp (/tmp/tmpwsofxlsr.js:20:31)\\\
    n    at modp (/tmp/tmpwsofxlsr.js:17:16)\\n    at modp (/tmp/tmpwsofxlsr.js:20:31)\\\
    n    at modp (/tmp/tmpwsofxlsr.js:17:16)\\n    at modp (/tmp/tmpwsofxlsr.js:20:31)\\\
    n    at modp (/tmp/tmpwsofxlsr.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return modp(n/2, p) * modp(n/2, p) * 2 %\
    \ p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ for (var i = 0; i < n; i++) {\n    result = (result * 2) % p;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var res = 1;\n  \
    \  while (n > 0){\n        if (n % 2 == 1){\n            res = (res * 2) % p;\n\
    \        }\n        n = Math.floor(n / 2);\n        if (n > 0){\n            res\
    \ = (res * res) % p;\n        }\n    }\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n10\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp0e81wgvv.js:32:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp0e81wgvv.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 10,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\tfor(var\
    \ i = 0; i < n; i++){\n\t\tres = (res * 2) % p;\n\t}\n\treturn res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(p == 1) return\
    \ 0;\n    if(n == 0) return 1;\n    if(n == 1) return n;\n    if(n % 2 == 0){\n\
    \        return modp(n/2, p) ** 2 % p;\n    }\n    else{\n        return modp(n-1,\
    \ p) * modp(n, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp1ztpe8ys.js:12\\nfunction modp(n, p){\\n             ^\\n\\nRangeError:\
    \ Maximum call stack size exceeded\\n    at modp (/tmp/tmp1ztpe8ys.js:12:14)\\\
    n    at modp (/tmp/tmp1ztpe8ys.js:17:16)\\n    at modp (/tmp/tmp1ztpe8ys.js:20:16)\\\
    n    at modp (/tmp/tmp1ztpe8ys.js:20:31)\\n    at modp (/tmp/tmp1ztpe8ys.js:20:31)\\\
    n    at modp (/tmp/tmp1ztpe8ys.js:20:31)\\n    at modp (/tmp/tmp1ztpe8ys.js:20:31)\\\
    n    at modp (/tmp/tmp1ztpe8ys.js:20:31)\\n    at modp (/tmp/tmp1ztpe8ys.js:20:31)\\\
    n    at modp (/tmp/tmp1ztpe8ys.js:20:31)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (n % p) * modp(n-1, p) % p;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpl71be1o4.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpl71be1o4.js:38:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpzi25mbln.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpzi25mbln.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpq24do0_w.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpq24do0_w.js:13:5)\\n    at modp\
    \ (/tmp/tmpq24do0_w.js:17:16)\\n    at modp (/tmp/tmpq24do0_w.js:20:31)\\n   \
    \ at modp (/tmp/tmpq24do0_w.js:17:16)\\n    at modp (/tmp/tmpq24do0_w.js:20:31)\\\
    n    at modp (/tmp/tmpq24do0_w.js:17:16)\\n    at modp (/tmp/tmpq24do0_w.js:20:31)\\\
    n    at modp (/tmp/tmpq24do0_w.js:17:16)\\n    at modp (/tmp/tmpq24do0_w.js:20:31)\\\
    n    at modp (/tmp/tmpq24do0_w.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (n % p) * modp((n-1)/2, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n75\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmprfmujzgo.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmprfmujzgo.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 75,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n%2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x)%p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n)%p;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpmrogw0vf.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpmrogw0vf.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p)**2) % p;\n    }\n    else{\n        return\
    \ (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (x*x*n)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp8zbcfzmt.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp8zbcfzmt.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp4rjj42t9.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp4rjj42t9.js:13:5)\\n    at modp\
    \ (/tmp/tmp4rjj42t9.js:17:16)\\n    at modp (/tmp/tmp4rjj42t9.js:19:27)\\n   \
    \ at modp (/tmp/tmp4rjj42t9.js:17:16)\\n    at modp (/tmp/tmp4rjj42t9.js:19:27)\\\
    n    at modp (/tmp/tmp4rjj42t9.js:17:16)\\n    at modp (/tmp/tmp4rjj42t9.js:19:27)\\\
    n    at modp (/tmp/tmp4rjj42t9.js:17:16)\\n    at modp (/tmp/tmp4rjj42t9.js:19:27)\\\
    n    at modp (/tmp/tmp4rjj42t9.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar half = modp(n/2, p);\n\t\treturn (half * half) % p;\n\
    \t}\n\telse{\n\t\tvar half = modp((n-1)/2, p);\n\t\treturn (half * half * n) %\
    \ p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp6md33b1y.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp6md33b1y.js:38:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n % 2 == 0) return modp(n/2, p) * modp(n/2, p) % p;\n  return modp(n-1,\
    \ p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return 2 * modp(n-1, p) % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n, p) % p;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpxbl4gude.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpxbl4gude.js:13:5)\\n    at modp\
    \ (/tmp/tmpxbl4gude.js:20:16)\\n    at modp (/tmp/tmpxbl4gude.js:20:31)\\n   \
    \ at modp (/tmp/tmpxbl4gude.js:20:31)\\n    at modp (/tmp/tmpxbl4gude.js:20:31)\\\
    n    at modp (/tmp/tmpxbl4gude.js:20:31)\\n    at modp (/tmp/tmpxbl4gude.js:20:31)\\\
    n    at modp (/tmp/tmpxbl4gude.js:20:31)\\n    at modp (/tmp/tmpxbl4gude.js:20:31)\\\
    n    at modp (/tmp/tmpxbl4gude.js:20:31)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n == 0) return\
    \ 1;\n  if (n == 1) return 2;\n  if (n % 2 == 0) return modp(n/2, p)**2 % p;\n\
    \  return 2 * modp(n-1, p) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn (x * x) % p;\n\t}\n\t\
    else{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2 * x * x) % p;\n\t}\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp1kokkimy.js:13\\n    if(n === 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp1kokkimy.js:13:5)\\n    at modp\
    \ (/tmp/tmp1kokkimy.js:17:16)\\n    at modp (/tmp/tmp1kokkimy.js:19:27)\\n   \
    \ at modp (/tmp/tmp1kokkimy.js:17:16)\\n    at modp (/tmp/tmp1kokkimy.js:19:27)\\\
    n    at modp (/tmp/tmp1kokkimy.js:17:16)\\n    at modp (/tmp/tmp1kokkimy.js:19:27)\\\
    n    at modp (/tmp/tmp1kokkimy.js:17:16)\\n    at modp (/tmp/tmp1kokkimy.js:19:27)\\\
    n    at modp (/tmp/tmp1kokkimy.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    return 2 * modp(n-1,\
    \ p) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn (t*t) % p;\n\t}\n\treturn\
    \ (2*modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n / 2, p) ** 2) % p;\n    }\n    else{\n    \
    \    return (2 * modp(n - 1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    var x = n % p;\n\twhile (n > 0){\n\t\tif (n % 2 == 1){\n\t\t\tresult = (result\
    \ * x) % p;\n\t\t}\n\t\tn = Math.floor(n / 2);\n\t\tx = (x * x) % p;\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpvx0jswlz.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpvx0jswlz.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var power = n % (p - 1);\n    var base = 2;\n    while (power > 0) {\n  \
    \      if (power % 2 == 1) {\n            result = (result * base) % p;\n    \
    \    }\n        base = (base * base) % p;\n        power = power / 2;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmp7vsf_wut.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp7vsf_wut.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  var result = 1;\n \
    \ for (var i = 0; i < n; i++) {\n    result = (result * 2) % p;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar res = 1;\n\tvar\
    \ b = n;\n\twhile(b > 0){\n\t\tif(b % 2 == 1){\n\t\t\tres = (res * n) % p;\n\t\
    \t}\n\t\tb = Math.floor(b / 2);\n\t\tn = (n * n) % p;\n\t}\n\treturn res;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpheqhg0be.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpheqhg0be.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2, p) % p;\n\t}\n\telse{\n\
    \t\treturn modp(n-1, p) * modp(n+1, p) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpt2susq_4.js:13\\n\\tif(n == 0) return 1;\\n\\t^\\n\\nRangeError:\
    \ Maximum call stack size exceeded\\n    at modp (/tmp/tmpt2susq_4.js:13:2)\\\
    n    at modp (/tmp/tmpt2susq_4.js:15:10)\\n    at modp (/tmp/tmpt2susq_4.js:18:25)\\\
    n    at modp (/tmp/tmpt2susq_4.js:15:10)\\n    at modp (/tmp/tmpt2susq_4.js:18:25)\\\
    n    at modp (/tmp/tmpt2susq_4.js:15:10)\\n    at modp (/tmp/tmpt2susq_4.js:18:25)\\\
    n    at modp (/tmp/tmpt2susq_4.js:15:10)\\n    at modp (/tmp/tmpt2susq_4.js:18:25)\\\
    n    at modp (/tmp/tmpt2susq_4.js:15:10)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn (modp(n/2, p) * modp(n/2,\
    \ p)) % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++){\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n === 0) return\
    \ 1;\n  if (n === 1) return n;\n  if (n % 2 === 0) return (modp(n/2, p) ** 2)\
    \ % p;\n  return (modp(n/2, p) ** 2 * n) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmprxsn7b6s.js:24:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmprxsn7b6s.js:33:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if (n === 0) return\
    \ 1;\n  if (n % 2 === 0) {\n    var x = modp(n/2, p);\n    return (x*x) % p;\n\
    \  } else {\n    return (n * modp(n-1, p)) % p;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpg7fps3nc.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpg7fps3nc.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tvar result = 1;\n\t\
    for(var i = 0; i < n; i++){\n\t\tresult = (result * 2) % p;\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn Math.pow(modp(n/2, p), 2)\
    \ % p;\n\t}\n\telse{\n\t\treturn (2 * modp(n-1, p)) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else{\n        var res = modp(Math.floor(n/2), p);\n\
    \        res = (res * res) % p;\n        if(n % 2 == 1){\n            res = (res\
    \ * 2) % p;\n        }\n        return res;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmprp1j4iqp.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmprp1j4iqp.js:13:5)\\n    at modp\
    \ (/tmp/tmprp1j4iqp.js:17:16)\\n    at modp (/tmp/tmprp1j4iqp.js:20:31)\\n   \
    \ at modp (/tmp/tmprp1j4iqp.js:17:16)\\n    at modp (/tmp/tmprp1j4iqp.js:20:31)\\\
    n    at modp (/tmp/tmprp1j4iqp.js:17:16)\\n    at modp (/tmp/tmprp1j4iqp.js:20:31)\\\
    n    at modp (/tmp/tmprp1j4iqp.js:17:16)\\n    at modp (/tmp/tmprp1j4iqp.js:20:31)\\\
    n    at modp (/tmp/tmprp1j4iqp.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }else if(n == 1){\n        return n;\n    }else{\n      \
    \  var x = modp(n/2, p);\n        if(n % 2 == 0){\n            return (x * x)\
    \ % p;\n        }else{\n            return (x * x * n) % p;\n        }\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmp6sm3v05u.js:32:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp6sm3v05u.js:41:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return Math.pow(modp(n/2, p), 2) % p;\n  }\n\
    \  return (n % p) * modp((n-1)/2, p) % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n75\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmp_0q9c2yi.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp_0q9c2yi.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 75,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp80l26log.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp80l26log.js:13:5)\\n    at modp\
    \ (/tmp/tmp80l26log.js:17:16)\\n    at modp (/tmp/tmp80l26log.js:20:31)\\n   \
    \ at modp (/tmp/tmp80l26log.js:17:16)\\n    at modp (/tmp/tmp80l26log.js:20:31)\\\
    n    at modp (/tmp/tmp80l26log.js:17:16)\\n    at modp (/tmp/tmp80l26log.js:20:31)\\\
    n    at modp (/tmp/tmp80l26log.js:17:16)\\n    at modp (/tmp/tmp80l26log.js:20:31)\\\
    n    at modp (/tmp/tmp80l26log.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    else{\n        return modp(n - 1, p) * 2 % p;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n === 0) return\
    \ 1;\n\tif(n === 1) return n % p;\n\tif(n % 2 === 0){\n\t\tvar res = modp(n/2,\
    \ p);\n\t\treturn (res * res) % p;\n\t}\n\telse{\n\t\tvar res = modp((n-1)/2,\
    \ p);\n\t\treturn (res * res * n) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpyocag80q.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpyocag80q.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    var res = 1;\n    var b = n;\n    while(b > 0){\n\
    \        if(b % 2 == 1){\n            res = (res * n) % p;\n        }\n      \
    \  n = (n * n) % p;\n        b = Math.floor(b / 2);\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n2\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpphtrmgq_.js:33:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpphtrmgq_.js:42:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 2,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2, p) % p;\n\t}\n\telse{\n\
    \t\treturn modp(n-1, p) * modp(1, p) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpf6vca_yi.js:13\\n\\tif(n == 0) return 1;\\n\\t^\\n\\nRangeError:\
    \ Maximum call stack size exceeded\\n    at modp (/tmp/tmpf6vca_yi.js:13:2)\\\
    n    at modp (/tmp/tmpf6vca_yi.js:18:10)\\n    at modp (/tmp/tmpf6vca_yi.js:18:25)\\\
    n    at modp (/tmp/tmpf6vca_yi.js:18:25)\\n    at modp (/tmp/tmpf6vca_yi.js:18:25)\\\
    n    at modp (/tmp/tmpf6vca_yi.js:18:25)\\n    at modp (/tmp/tmpf6vca_yi.js:18:25)\\\
    n    at modp (/tmp/tmpf6vca_yi.js:18:25)\\n    at modp (/tmp/tmpf6vca_yi.js:18:25)\\\
    n    at modp (/tmp/tmpf6vca_yi.js:18:25)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    return (2 * modp(n-1, p)) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    var i;\n    for (i = 0; i < n; i++){\n        result = (result * 2) % p;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpe5qa_9cq.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpe5qa_9cq.js:13:5)\\n    at modp\
    \ (/tmp/tmpe5qa_9cq.js:17:16)\\n    at modp (/tmp/tmpe5qa_9cq.js:20:31)\\n   \
    \ at modp (/tmp/tmpe5qa_9cq.js:17:16)\\n    at modp (/tmp/tmpe5qa_9cq.js:20:31)\\\
    n    at modp (/tmp/tmpe5qa_9cq.js:17:16)\\n    at modp (/tmp/tmpe5qa_9cq.js:20:31)\\\
    n    at modp (/tmp/tmpe5qa_9cq.js:17:16)\\n    at modp (/tmp/tmpe5qa_9cq.js:20:31)\\\
    n    at modp (/tmp/tmpe5qa_9cq.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return n;\n\tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2,\
    \ p) % p;\n\t}\n\treturn modp(n-1, p) * n % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpzju1i4td.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpzju1i4td.js:35:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    return modp(n-1, p) * modp(n+1, p) % p;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp94gm7dtk.js:13\\n    if(n == 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmp94gm7dtk.js:13:5)\\n    at modp\
    \ (/tmp/tmp94gm7dtk.js:17:16)\\n    at modp (/tmp/tmp94gm7dtk.js:19:27)\\n   \
    \ at modp (/tmp/tmp94gm7dtk.js:17:16)\\n    at modp (/tmp/tmp94gm7dtk.js:19:27)\\\
    n    at modp (/tmp/tmp94gm7dtk.js:17:16)\\n    at modp (/tmp/tmp94gm7dtk.js:19:27)\\\
    n    at modp (/tmp/tmp94gm7dtk.js:17:16)\\n    at modp (/tmp/tmp94gm7dtk.js:19:27)\\\
    n    at modp (/tmp/tmp94gm7dtk.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p)**2) % p;\n    }\n    else{\n        return\
    \ (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) ** 2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    else{\n\
    \        return (2 * modp(n-1, p)) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n === 0) return\
    \ 1;\n\tif(n === 1) return n;\n\tif(n % 2 === 0){\n\t\treturn modp(n/2, p) * modp(n/2,\
    \ p) % p;\n\t}\n\treturn modp(n-1, p) * n % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpymknh4a6.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpymknh4a6.js:35:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p) * modp(n/2,\
    \ p) % p;\n    }\n    else{\n        return modp(n/2, p) * modp(n/2, p) * 2 %\
    \ p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var r = 1;\n    var\
    \ b = n;\n    while (p > 0) {\n        if (p & 1 == 1) {\n            r = (r *\
    \ b) % mod;\n        }\n        p >>= 1;\n        b = (b * b) % mod;\n    }\n\
    \    return r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp83nqc4ef.js:17\\n            r = (r * b) % mod;\\n          \
    \                ^\\n\\nReferenceError: mod is not defined\\n    at modp (/tmp/tmp83nqc4ef.js:17:27)\\\
    n    at test (/tmp/tmp83nqc4ef.js:30:20)\\n    at Object.<anonymous> (/tmp/tmp83nqc4ef.js:39:1)\\\
    n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\\n    at Module.load (node:internal/modules/cjs/loader:998:32)\\\
    n    at Module._load (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\\
    n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: ReferenceError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2 % p;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\t\
    return (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n == 1){\n        return n;\n    }\n    else{\n\
    \        if(n % 2 == 0){\n            return (modp(n/2, p) * modp(n/2, p)) % p;\n\
    \        }\n        else{\n            return (modp(n/2, p) * modp(n/2, p) * n)\
    \ % p;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n / 2, p) **\
    \ 2 % p;\n    }\n    return modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return modp(n/2, p)**2 % p;\n    }\n    else{\n        return\
    \ 2 * modp(n-1, p) % p;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p)**2\
    \ % p;\n    }\n    else{\n        return modp(n-1, p) * modp(n+1, p) % p;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmpwucpsyxf.js:13\\n    if(n === 0){\\n    ^\\n\\nRangeError: Maximum\
    \ call stack size exceeded\\n    at modp (/tmp/tmpwucpsyxf.js:13:5)\\n    at modp\
    \ (/tmp/tmpwucpsyxf.js:17:16)\\n    at modp (/tmp/tmpwucpsyxf.js:20:31)\\n   \
    \ at modp (/tmp/tmpwucpsyxf.js:17:16)\\n    at modp (/tmp/tmpwucpsyxf.js:20:31)\\\
    n    at modp (/tmp/tmpwucpsyxf.js:17:16)\\n    at modp (/tmp/tmpwucpsyxf.js:20:31)\\\
    n    at modp (/tmp/tmpwucpsyxf.js:17:16)\\n    at modp (/tmp/tmpwucpsyxf.js:20:31)\\\
    n    at modp (/tmp/tmpwucpsyxf.js:17:16)\\n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: Exception
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n === 0) return\
    \ 1;\n\tif(n === 1) return n;\n\tif(n % 2 === 0){\n\t\treturn Math.pow(modp(n/2,\
    \ p), 2) % p;\n\t} else {\n\t\treturn (n * modp(n-1, p)) % p;\n\t}\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n94\\n\\nshould\
    \ loosely deep-equal\\n\\n2\\n    at test (/tmp/tmpsskkd9u0.js:28:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpsskkd9u0.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 94,\\n\
    \  expected: 2,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\treturn modp(n/2, p) * modp(n/2,\
    \ p) % p;\n\t}\n\telse{\n\t\treturn 2 * modp(n-1, p) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    var result = 1;\n\
    \    for (var i = 0; i < n; i++) {\n        result = (result * 2) % p;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n == 1) return 2;\n\tif(n % 2 == 0){\n\t\tvar x = modp(n/2, p);\n\t\treturn\
    \ (x*x) % p;\n\t}\n\telse{\n\t\tvar x = modp((n-1)/2, p);\n\t\treturn (2*x*x)\
    \ % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return Math.pow(modp(n/2,\
    \ p), 2) % p;\n    }\n    else{\n        return (2 * modp(n-1, p)) % p;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n === 0){\n    return\
    \ 1;\n  }\n  if(n % 2 === 0){\n    return modp(n / 2, p) ** 2 % p;\n  }\n  return\
    \ modp(n - 1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n  if(n == 0){\n    return\
    \ 1;\n  }\n  if(n % 2 == 0){\n    return modp(n/2, p)**2 % p;\n  }\n  return modp(n-1,\
    \ p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101,\
    \ 101),2);\n  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3,\
    \ 11),8);\n  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar t = modp(n/2, p);\n\t\treturn (t*t) % p;\n\t}\n\telse{\n\
    \t\treturn (2*modp(n-1, p)) % p;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n == 1){\n        return 2;\n    }\n    if(n %\
    \ 2 == 0){\n        return (modp(n/2, p) * modp(n/2, p)) % p;\n    }\n    return\
    \ (2 * modp(n-1, p)) % p;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3, 5),3);\n\
    \  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    else if(n == 1){\n        return n % p;\n    }\n \
    \   else{\n        var half = modp(n/2, p);\n        if(n % 2 == 0){\n       \
    \     return (half * half) % p;\n        }\n        else{\n            return\
    \ (half * half * n) % p;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n0\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpkkajxh3z.js:35:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpkkajxh3z.js:44:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 0,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n\tif(n == 0) return 1;\n\
    \tif(n % 2 == 0){\n\t\tvar r = modp(n/2, p);\n\t\treturn (r*r) % p;\n\t}\n\telse{\n\
    \t\tvar r = modp((n-1)/2, p);\n\t\treturn (2*r*r) % p;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n === 0){\n  \
    \      return 1;\n    }\n    if(n % 2 === 0){\n        return modp(n/2, p) **\
    \ 2 % p;\n    }\n    return modp(n-1, p) * 2 % p;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = modp;\n  assert.deepEqual(candidate(3,\
    \ 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n  assert.deepEqual(candidate(0,\
    \ 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n  assert.deepEqual(candidate(100,\
    \ 101),1);\n  assert.deepEqual(candidate(30, 5),4);\n  assert.deepEqual(candidate(31,\
    \ 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n\
    // >>> modp(1101, 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n\
    // 8\n// >>> modp(100, 101)\n// 1\nfunction modp(n, p){\n    if(n == 0){\n   \
    \     return 1;\n    }\n    if(n % 2 == 0){\n        return modp(n/2, p)**2 %\
    \ p;\n    }\n    else{\n        return modp(n-1, p) * 2 % p;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = modp;\n\
    \  assert.deepEqual(candidate(3, 5),3);\n  assert.deepEqual(candidate(1101, 101),2);\n\
    \  assert.deepEqual(candidate(0, 101),1);\n  assert.deepEqual(candidate(3, 11),8);\n\
    \  assert.deepEqual(candidate(100, 101),1);\n  assert.deepEqual(candidate(30,\
    \ 5),4);\n  assert.deepEqual(candidate(31, 5),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
