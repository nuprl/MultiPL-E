name: HumanEval_44_change_base
language: javascript
results:
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\tvar remainder\
    \ = x;\n\twhile(remainder > 0){\n\t\tresult = remainder % base + result;\n\t\t\
    remainder = Math.floor(remainder / base);\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\twhile(x > 0){\n\
    \t\tresult = x % base + result;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    var remainder\
    \ = 0;\n    while(x > 0){\n        remainder = x % base;\n        x = Math.floor(x\
    \ / base);\n        result = remainder + result;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var res = \"\";\n    while(x > 0){\n\
    \        res = x % base + res;\n        x = Math.floor(x / base);\n    }\n   \
    \ return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\"\
    );\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x>0){\n\
    \        result = x%base + result;\n        x = Math.floor(x/base);\n    }\n \
    \   return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x>0){\n\
    \        result = x%base + result;\n        x = Math.floor(x/base);\n    }\n \
    \   return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    if(x < base){\n        return x.toString();\n\
    \    }\n    return change_base(Math.floor(x/base), base) + (x % base).toString();\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  var remainder\
    \ = 0;\n  while(x > 0){\n    remainder = x % base;\n    x = Math.floor(x / base);\n\
    \    result = remainder + result;\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        var remainder = x % base;\n        x = Math.floor(x / base);\n\
    \        result = remainder + result;\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    var remainder\
    \ = 0;\n    while(x > 0){\n        remainder = x % base;\n        x = Math.floor(x\
    \ / base);\n        result = remainder + result;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = [];\n    while(x >\
    \ 0){\n        result.push(x % base);\n        x = Math.floor(x / base);\n   \
    \ }\n    return result.reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\twhile(x > 0){\n\
    \t\tresult = x % base + result;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    var remainder\
    \ = 0;\n    while(x > 0){\n        remainder = x % base;\n        x = Math.floor(x\
    \ / base);\n        result = remainder + result;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = '';\n  while(x > 0){\n\
    \    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\twhile(x > 0){\n\
    \t\tresult = (x % base) + result;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        var remainder = x % base;\n        result = remainder + result;\n\
    \        x = Math.floor(x / base);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        var remainder = x % base;\n        result = remainder + result;\n\
    \        x = Math.floor(x / base);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\tvar remainder\
    \ = 0;\n\twhile(x > 0){\n\t\tremainder = x % base;\n\t\tx = Math.floor(x / base);\n\
    \t\tresult = remainder + result;\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = '';\n  while(x > 0){\n\
    \    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\twhile(x > 0){\n\
    \t\tresult = x % base + result;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  var remainder\
    \ = 0;\n  while(x > 0){\n    remainder = x % base;\n    x = Math.floor(x / base);\n\
    \    result = remainder + result;\n  }\n  return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    var remainder\
    \ = 0;\n    while(x > 0){\n        remainder = x % base;\n        x = Math.floor(x\
    \ / base);\n        result = remainder + result;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\twhile(x > 0){\n\
    \t\tresult = x % base + result;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    let result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = '';\n  while(x > 0){\n\
    \    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\twhile(x >= base){\n\
    \t\tresult = x % base + result;\n\t\tx = Math.floor(x / base);\n\t}\n\tresult\
    \ = x + result;\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x>0){\n\
    \        result = x%base + result;\n        x = Math.floor(x/base);\n    }\n \
    \   return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\twhile(x > 0){\n\
    \t\tresult = x % base + result;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = '';\n  while(x > 0){\n\
    \    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\tvar remainder\
    \ = 0;\n\twhile(x > 0){\n\t\tremainder = x % base;\n\t\tx = Math.floor(x / base);\n\
    \t\tresult = remainder + result;\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = '';\n  while(x > 0){\n\
    \    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    var remainder\
    \ = 0;\n    while(x > 0){\n        remainder = x % base;\n        x = Math.floor(x\
    \ / base);\n        result = remainder + result;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    var remainder = x % base;\n    result = remainder + result;\n    x = Math.floor(x\
    \ / base);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x>0){\n\
    \        result = x%base + result;\n        x = Math.floor(x/base);\n    }\n \
    \   return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    var remainder\
    \ = 0;\n    while(x > 0){\n        remainder = x % base;\n        x = Math.floor(x\
    \ / base);\n        result = remainder + result;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var res = '';\n    while(x > 0){\n\
    \        res = x % base + res;\n        x = Math.floor(x / base);\n    }\n   \
    \ return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\"\
    );\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    let result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    var remainder\
    \ = 0;\n    while(x > 0){\n        remainder = x % base;\n        x = Math.floor(x\
    \ / base);\n        result = remainder + result;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        var remainder = x % base;\n        result = remainder + result;\n\
    \        x = Math.floor(x / base);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = '';\n  while(x > 0){\n\
    \    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    // your code here\n    var result\
    \ = \"\";\n    while(x > 0){\n        result = (x % base) + result;\n        x\
    \ = Math.floor(x / base);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = (x % base) + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x>0){\n\
    \        result = (x%base).toString() + result;\n        x = Math.floor(x/base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x>0){\n\
    \        result = x%base + result;\n        x = Math.floor(x/base);\n    }\n \
    \   return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    var remainder\
    \ = 0;\n    while(x > 0){\n        remainder = x % base;\n        x = Math.floor(x\
    \ / base);\n        result = remainder + result;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    var remainder\
    \ = 0;\n    while(x > 0){\n        remainder = x % base;\n        x = Math.floor(x\
    \ / base);\n        result = remainder + result;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    // your code here\n    var result\
    \ = \"\";\n    while(x > 0){\n        result = x % base + result;\n        x =\
    \ Math.floor(x / base);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = '';\n    while(x >\
    \ 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    let result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        var remainder = x % base;\n        result = remainder + result;\n\
    \        x = Math.floor(x / base);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    var remainder = x % base;\n    x = Math.floor(x / base);\n    result = remainder\
    \ + result;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var res = \"\";\n    while(x > 0){\n\
    \        res = x % base + res;\n        x = Math.floor(x / base);\n    }\n   \
    \ return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\"\
    );\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n\tvar result = \"\";\n\twhile(x > 0){\n\
    \t\tresult = x % base + result;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n    var result = \"\";\n    while(x\
    \ > 0){\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x, base){\n  var result = \"\";\n  while(x > 0){\n\
    \    result = x % base + result;\n    x = Math.floor(x / base);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n\
    \  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
