name: HumanEval_41_car_race_collision
language: javascript
prompt: "//Imagine a road that's a perfectly straight infinitely long line.\n// n\
  \ cars are driving left to right;  simultaneously, a different set of n cars\n//\
  \ are driving right to left.   The two sets of cars start out being very far from\n\
  // each other.  All cars move in the same speed.  Two cars are said to collide\n\
  // when a car that's moving left to right hits a car that's moving right to left.\n\
  // However, the cars are infinitely sturdy and strong; as a result, they continue\
  \ moving\n// in their trajectory as if they did not collide.\n// This function outputs\
  \ the number of such collisions.\nfunction car_race_collision(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = car_race_collision;\n  assert.deepEqual(candidate(2),4);\n  assert.deepEqual(candidate(3),9);\n\
  \  assert.deepEqual(candidate(4),16);\n  assert.deepEqual(candidate(8),64);\n  assert.deepEqual(candidate(10),100);\n\
  }\n\ntest();"
completions: ["    //TODO: Implement this function\n    return 0;\n}\n", "    //TODO:\
    \ implement this function\n    return 0;\n}\n", "    // your code here\n    var\
    \ left = [];\n    var right = [];\n    for(var i = 0; i < n; i++){\n        left.push(i);\n\
    \        right.push(i);\n    }\n    var count = 0;\n    for(var i = 0; i < n;\
    \ i++){\n        for(var j = 0; j < n; j++){\n            if(left[i] == right[j]){\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    //TODO: implement this function\n    return 0;\n}\n", "    return n*(n-1)/2;\n\
    }\n", "    //TODO: implement this function\n    var count = 0;\n    for(var i\
    \ = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n            if(i ==\
    \ j){\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    //TODO: implement this function\n}\n", "    return n*(n-1)/2;\n}\n",
  "    //TODO\n}\n", "\t//TODO: Implement this function\n\treturn 0;\n}\n", "    return\
    \ n*(n-1)/2;\n}\n", "    var count = 0;\n    for(var i = 0; i < n; i++){\n   \
    \     for(var j = 0; j < n; j++){\n            count++;\n        }\n    }\n  \
    \  return count;\n}\n", "    var count = 0;\n    for(var i = 0; i < n; i++){\n\
    \        for(var j = 0; j < n; j++){\n            if(i == j){\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\n", "  // your\
    \ code here\n}\n", "    //TODO: Implement this function\n    return 0;\n}\n",
  "    return n*(n-1)/2;\n}\n", "  var left = [];\n  var right = [];\n  for(var i\
    \ = 0; i < n; i++){\n    left.push(i);\n    right.push(i);\n  }\n  var count =\
    \ 0;\n  while(left.length > 0 && right.length > 0){\n    var l = left.shift();\n\
    \    var r = right.shift();\n    if(l == r){\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "    //TODO:  Implement this function.\n    //Hint:  Use a priority\
    \ queue.\n    var left_to_right = new PriorityQueue();\n    var right_to_left\
    \ = new PriorityQueue();\n    var collision = 0;\n    for(var i = 0; i < n; i++){\n\
    \        left_to_right.enqueue(i, i);\n        right_to_left.enqueue(i, -i);\n\
    \    }\n    while(!left_to_right.isEmpty() && !right_to_left.isEmpty()){\n   \
    \     var left = left_to_right.dequeue();\n        var right = right_to_left.dequeue();\n\
    \        if(left.priority < -right.priority){\n            collision++;\n    \
    \    }\n    }\n    return collision;\n}\n", "    //TODO: Implement this function.\n\
    \    //Hint:  You can use the fact that the cars are infinitely sturdy to your\
    \ advantage.\n    //Hint:  You can use the fact that the cars are moving in the\
    \ same speed to your advantage.\n    //Hint:  You can use the fact that the cars\
    \ are moving in the same direction to your advantage.\n    //Hint:  You can use\
    \ the fact that the cars are moving in the same direction to your advantage.\n\
    \    //Hint:  You can use the fact that the cars are moving in the same direction\
    \ to your advantage.\n    //Hint:  You can use the fact that the cars are moving\
    \ in the same direction to your advantage.\n    //Hint:  You can use the fact\
    \ that the cars are moving in the same direction to your advantage.\n    //Hint:\
    \  You can use the fact that the cars are moving in the same direction to your\
    \ advantage.\n    //Hint:  You can use the fact that the cars are moving in the\
    \ same direction to your advantage.\n    //Hint:  You can use the fact that the\
    \ cars are moving in the same direction to your advantage.\n    //Hint:  You can\
    \ use the fact that the cars are moving in the same direction to your advantage.\n\
    \    //Hint:  You can use the fact that the cars are moving in the same direction\
    \ to your advantage.\n    //Hint:  You can use the fact that the cars are moving\
    \ in the same direction to your advantage.\n    //Hint:  You can use the fact\
    \ that the cars are moving in the same direction to your advantage.\n    //Hint:\
    \  You can use the fact that the cars are moving in the same direction to your\
    \ advantage.\n    //Hint:  You can use the fact that the cars are moving in the\
    \ same direction to your advantage.\n    //Hint:  You can use the fact that the\
    \ cars are moving in the same direction to your advantage.\n    //Hint:  You can\
    \ use the fact that the cars are moving in the same direction to your advantage.\n\
    \    //Hint:  You can use the fact that the cars are moving in the same direction\
    \ to your advantage.\n    //Hint:  You can use the fact that the cars are moving\
    \ in the same direction to your advantage.\n    //H", "  return n*(n-1)/2;\n}\n",
  "    return n * (n - 1) / 2;\n}\n", "    //TODO: implement this function\n}\n",
  "  //TODO: Implement this function.\n  // Hint:  You can use a dictionary to keep\
    \ track of the cars.\n  //        The key is the car's position, and the value\
    \ is whether the car is moving\n  //        left to right (true) or right to left\
    \ (false).\n  //        You can use a dictionary to keep track of the cars.\n\
    \  //        The key is the car's position, and the value is whether the car is\
    \ moving\n  //        left to right (true) or right to left (false).\n  var cars\
    \ = {};\n  var collisions = 0;\n  for (var i = 0; i < n; i++) {\n    cars[i] =\
    \ true;\n    cars[-i] = false;\n  }\n  for (var i = 0; i < n; i++) {\n    for\
    \ (var j = 0; j < n; j++) {\n      if (cars[i] && !cars[j]) {\n        collisions++;\n\
    \      }\n    }\n  }\n  return collisions;\n}\n", "    var collisions = 0;\n \
    \   var left_to_right = [];\n    var right_to_left = [];\n    for(var i = 0; i\
    \ < n; i++){\n        left_to_right.push(i);\n        right_to_left.push(i);\n\
    \    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n\
    \            if(left_to_right[i] === right_to_left[j]){\n                collisions++;\n\
    \            }\n        }\n    }\n    return collisions;\n}\n", "    return n*(n-1)/2;\n\
    }\n", "    //TODO: implement this function\n    return 0;\n}\n", "    //TODO\n\
    }\n", "    //TODO: implement this function\n    var count = 0;\n    for(var i\
    \ = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n            if(i ==\
    \ j){\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    var count = 0;\n    for(var i = 0; i < n; i++){\n        for(var j\
    \ = 0; j < n; j++){\n            if(i == j){\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n", "\t//TODO: Implement this\
    \ function\n}\n", "  //TODO: implement this function\n  return 0;\n}\n", "   \
    \ var count = 0;\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j <\
    \ n; j++){\n            count++;\n        }\n    }\n    return count;\n}\n", "\t\
    var left = [];\n\tvar right = [];\n\tvar collisions = 0;\n\tfor(var i = 0; i <\
    \ n; i++){\n\t\tleft.push(i);\n\t\tright.push(i);\n\t}\n\tleft.sort(function(a,b){return\
    \ a-b});\n\tright.sort(function(a,b){return b-a});\n\tfor(var i = 0; i < n; i++){\n\
    \t\tif(left[i] == right[i]){\n\t\t\tcollisions++;\n\t\t}\n\t}\n\treturn collisions;\n\
    }\n", "    //TODO: Implement this function\n    return 0;\n}\n", "  //TODO: Implement\
    \ this function\n  return 0;\n}\n", "    //TODO: Implement this function.\n  \
    \  return 0;\n}\n", "    //TODO\n    return 0;\n}\n", "  var left = [];\n  var\
    \ right = [];\n  var collisions = 0;\n  for(var i = 0; i < n; i++){\n    left.push(i);\n\
    \    right.push(n-i);\n  }\n  for(var i = 0; i < n; i++){\n    for(var j = 0;\
    \ j < n; j++){\n      if(left[i] === right[j]){\n        collisions++;\n     \
    \ }\n    }\n  }\n  return collisions;\n}\n", "    // TODO: implement this function\n\
    \    return 0;\n}\n", "    var count = 0;\n    for(var i = 0; i < n; i++){\n \
    \       for(var j = 0; j < n; j++){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n", "    return n*(n-1)/2;\n}\n", "    var num_collisions\
    \ = 0;\n    var left_to_right = [];\n    var right_to_left = [];\n    for(var\
    \ i = 0; i < n; i++){\n        left_to_right.push(i);\n        right_to_left.push(n-i);\n\
    \    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n\
    \            if(left_to_right[i] === right_to_left[j]){\n                num_collisions++;\n\
    \            }\n        }\n    }\n    return num_collisions;\n}\n", "  //TODO\n\
    }\n", "  return n*(n-1)/2;\n}\n", "    var left = 0;\n    var right = 0;\n   \
    \ var collisions = 0;\n    for(var i = 0; i < n; i++){\n        left += i;\n \
    \       right += n - i - 1;\n        collisions += left + right;\n    }\n    return\
    \ collisions;\n}\n", "  var collisions = 0;\n  var left = [];\n  var right = [];\n\
    \  for(var i = 0; i < n; i++){\n    left.push(i);\n    right.push(i);\n  }\n \
    \ while(left.length > 0 && right.length > 0){\n    if(left[0] === right[0]){\n\
    \      collisions++;\n      left.shift();\n      right.shift();\n    }\n    else\
    \ if(left[0] < right[0]){\n      left.shift();\n    }\n    else{\n      right.shift();\n\
    \    }\n  }\n  return collisions;\n}\n", "    //TODO: implement this function\n\
    \    return 0;\n}\n", "    return n * (n - 1) / 2;\n}\n", "    return n*(n-1)/2;\n\
    }\n", "    //TODO: implement this function\n}\n", "    //TODO\n    return 0;\n\
    }\n", "    var count = 0;\n    for(var i = 1; i <= n; i++){\n        for(var j\
    \ = n; j >= 1; j--){\n            if(i == j){\n                count++;\n    \
    \        }\n        }\n    }\n    return count;\n}\n", "    //TODO\n}\n", "  //\
    \ TODO: implement this function\n  return 0;\n}\n", "    //TODO:  Implement this\
    \ function.\n    //Hint:  You can use a hash table to keep track of the cars that\
    \ are moving\n    //left to right.  The key can be the position of the car, and\
    \ the value can be\n    //the speed of the car.\n    //Hint:  You can use a hash\
    \ table to keep track of the cars that are moving\n    //right to left.  The key\
    \ can be the position of the car, and the value can be\n    //the speed of the\
    \ car.\n    //Hint:  You can use a hash table to keep track of the cars that are\
    \ moving\n    //left to right.  The key can be the position of the car, and the\
    \ value can be\n    //the speed of the car.\n    //Hint:  You can use a hash table\
    \ to keep track of the cars that are moving\n    //right to left.  The key can\
    \ be the position of the car, and the value can be\n    //the speed of the car.\n\
    \    //Hint:  You can use a hash table to keep track of the cars that are moving\n\
    \    //left to right.  The key can be the position of the car, and the value can\
    \ be\n    //the speed of the car.\n    //Hint:  You can use a hash table to keep\
    \ track of the cars that are moving\n    //right to left.  The key can be the\
    \ position of the car, and the value can be\n    //the speed of the car.\n   \
    \ //Hint:  You can use a hash table to keep track of the cars that are moving\n\
    \    //left to right.  The key can be the position of the car, and the value can\
    \ be\n    //the speed of the car.\n    //Hint:  You can use a hash table to keep\
    \ track of the cars that are moving\n    //right to left.  The key can be the\
    \ position of the car, and the value can be\n    //the speed of the car.\n   \
    \ //Hint:  You can use a hash table to keep track of the cars that are moving\n\
    \    //left to right.  The key can be the position of the car, and the value can\
    \ be\n    //the speed of the car.\n    //Hint:  You can use a hash table to",
  "    //TODO: implement this function\n    return 0;\n}\n", "\treturn n*(n-1)/2;\n\
    }\n", "    //YOUR CODE HERE\n    return 0;\n}\n", "\tvar count = 0;\n\tvar left\
    \ = [];\n\tvar right = [];\n\tfor(var i = 0; i < n; i++){\n\t\tleft.push(i);\n\
    \t\tright.push(i);\n\t}\n\tfor(var i = 0; i < n; i++){\n\t\tfor(var j = 0; j <\
    \ n; j++){\n\t\t\tif(left[i] == right[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn count;\n}\n", "    //TODO: Implement this function.\n    return\
    \ 0;\n}\n", "  //TODO: Implement this function\n}\n", "    // Your code here\n\
    \    return n*(n-1)/2;\n}\n", "  var count = 0;\n  var left = [];\n  var right\
    \ = [];\n  for(var i = 0; i < n; i++){\n    left.push(i);\n    right.push(i);\n\
    \  }\n  for(var i = 0; i < n; i++){\n    for(var j = 0; j < n; j++){\n      if(left[i]\
    \ === right[j]){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n",
  "    return n*(n-1)/2;\n}\n", "  //TODO: Implement this function.\n  //Hint:  You\
    \ can use the fact that the cars are infinitely strong and sturdy.\n  //Hint:\
    \  You can use the fact that the cars are moving in the same speed.\n  //Hint:\
    \  You can use the fact that the cars are moving in the same direction.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are moving in opposite directions.\n  //Hint:\
    \  You can use the fact that the cars are", "    //TODO: implement this function\n\
    \    //Hint: you can use the following function to generate a random number between\
    \ 0 and 1\n    //Math.random()\n    //Hint: you can use the following function\
    \ to generate a random integer between 0 and n-1\n    //Math.floor(Math.random()*n)\n\
    \    //Hint: you can use the following function to generate a random integer between\
    \ 0 and n-1\n    //Math.floor(Math.random()*n)\n    //Hint: you can use the following\
    \ function to generate a random integer between 0 and n-1\n    //Math.floor(Math.random()*n)\n\
    \    //Hint: you can use the following function to generate a random integer between\
    \ 0 and n-1\n    //Math.floor(Math.random()*n)\n    //Hint: you can use the following\
    \ function to generate a random integer between 0 and n-1\n    //Math.floor(Math.random()*n)\n\
    \    //Hint: you can use the following function to generate a random integer between\
    \ 0 and n-1\n    //Math.floor(Math.random()*n)\n    //Hint: you can use the following\
    \ function to generate a random integer between 0 and n-1\n    //Math.floor(Math.random()*n)\n\
    \    //Hint: you can use the following function to generate a random integer between\
    \ 0 and n-1\n    //Math.floor(Math.random()*n)\n    //Hint: you can use the following\
    \ function to generate a random integer between 0 and n-1\n    //Math.floor(Math.random()*n)\n\
    \    //Hint: you can use the following function to generate a random integer between\
    \ 0 and n-1\n    //Math.floor(Math.random()*n)\n    //Hint: you can use the following\
    \ function to generate a random integer between 0 and n-1\n    //Math.floor(Math.random()*n)\n\
    \    //Hint: you can use the following function to generate a random integer between\
    \ 0 and n-1\n    //Math.floor(Math.random()*n)\n    //Hint: you can use the following\
    \ function to generate a random integer between 0 and n-1\n    //Math.floor(",
  "  return n*(n-1)/2;\n}\n", "    //TODO: Implement this function.\n    return 0;\n\
    }\n", "  var count = 0;\n  for(var i = 0; i < n; i++){\n    for(var j = 0; j <\
    \ n; j++){\n      if(i < j){\n        count++;\n      }\n    }\n  }\n  return\
    \ count;\n}\n", "  //TODO: Implement this function.\n  return 0;\n}\n", "\tvar\
    \ left = 0;\n\tvar right = 0;\n\tvar count = 0;\n\twhile(left < n && right < n){\n\
    \t\tif(left == right){\n\t\t\tcount++;\n\t\t\tleft++;\n\t\t\tright++;\n\t\t}\n\
    \t\telse if(left < right){\n\t\t\tleft++;\n\t\t}\n\t\telse{\n\t\t\tright++;\n\t\
    \t}\n\t}\n\treturn count;\n}\n", "    //TODO: implement this function\n}\n", " \
    \   //TODO: implement this function\n    return 0;\n}\n", "    //YOUR CODE HERE\n\
    \    return 0;\n}\n", "  var left_to_right = [];\n  var right_to_left = [];\n\
    \  var collisions = 0;\n  for(var i = 0; i < n; i++){\n    left_to_right.push(i);\n\
    \    right_to_left.push(i);\n  }\n  for(var i = 0; i < n; i++){\n    for(var j\
    \ = 0; j < n; j++){\n      if(left_to_right[i] === right_to_left[j]){\n      \
    \  collisions++;\n      }\n    }\n  }\n  return collisions;\n}\n", "  //TODO:\
    \ Implement this function\n  var collisions = 0;\n  var left = [];\n  var right\
    \ = [];\n  for (var i = 0; i < n; i++) {\n    left.push(i);\n    right.push(i);\n\
    \  }\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < n; j++) {\n   \
    \   if (left[i] === right[j]) {\n        collisions++;\n      }\n    }\n  }\n\
    \  return collisions;\n}\n", "    //TODO: Implement this function\n    return\
    \ 0;\n}\n", "  var count = 0;\n  for(var i = 0; i < n; i++){\n    for(var j =\
    \ 0; j < n; j++){\n      count++;\n    }\n  }\n  return count;\n}\n", "    //YOUR\
    \ CODE HERE\n    var count = 0;\n    for (var i = 0; i < n; i++) {\n        for\
    \ (var j = 0; j < n; j++) {\n            if (i == j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    //TODO: Implement\
    \ this function\n    return 0;\n}\n", "    //TODO: implement this function\n \
    \   return 0;\n}\n", "    // TODO: implement this function\n    return 0;\n}\n",
  "    var count = 0;\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j <\
    \ n; j++){\n            count++;\n        }\n    }\n    return count;\n}\n", " \
    \ //TODO: Implement this function\n}\n", "    //TODO: Implement this function\n\
    \    return 0;\n}\n", "  return n*(n-1)/2;\n}\n", "\t//Your code here\n}\n", " \
    \   //TODO: Implement this function.\n    var collisions = 0;\n    var left_to_right\
    \ = [];\n    var right_to_left = [];\n    for (var i = 0; i < n; i++) {\n    \
    \    left_to_right.push(i);\n        right_to_left.push(i);\n    }\n    for (var\
    \ i = 0; i < n; i++) {\n        for (var j = 0; j < n; j++) {\n            if\
    \ (left_to_right[i] === right_to_left[j]) {\n                collisions++;\n \
    \           }\n        }\n    }\n    return collisions;\n}\n", "  var count =\
    \ 0;\n  for(var i = 0; i < n; i++){\n    for(var j = 0; j < n; j++){\n      if(i\
    \ < j){\n        count++;\n      }\n    }\n  }\n  return count;\n}\n", "    //TODO:\
    \ implement this function\n    return 0;\n}\n", "    var count = 0;\n    var left\
    \ = [];\n    var right = [];\n    for(var i = 0; i < n; i++){\n        left.push(i);\n\
    \        right.push(i);\n    }\n    for(var i = 0; i < n; i++){\n        for(var\
    \ j = 0; j < n; j++){\n            if(left[i] == right[j]){\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "  //TODO:  implement\
    \ this function.\n  return 0;\n}\n", "    //TODO: Implement this function\n  \
    \  return 0;\n}\n", "\tvar count = 0;\n\tvar left = [];\n\tvar right = [];\n\t\
    for(var i = 0; i < n; i++){\n\t\tleft.push(i);\n\t\tright.push(i);\n\t}\n\tfor(var\
    \ i = 0; i < n; i++){\n\t\tfor(var j = 0; j < n; j++){\n\t\t\tif(left[i] == right[j]){\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n", "    //TODO: Implement\
    \ this function\n    return 0;\n}\n", "    //TODO: implement this function\n \
    \   //TODO: implement this function\n    var left_to_right = [];\n    var right_to_left\
    \ = [];\n    var collisions = 0;\n    for (var i = 0; i < n; i++) {\n        left_to_right.push(i);\n\
    \        right_to_left.push(i);\n    }\n    for (var i = 0; i < n; i++) {\n  \
    \      for (var j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}\n", "    return n*(n-1)/2;\n}\n", "  //TODO: implement this function\n\
    \  return 0;\n}\n", "    return n * (n - 1) / 2;\n}\n", "    var count = 0;\n\
    \    var left = [];\n    var right = [];\n    for(var i = 0; i < n; i++){\n  \
    \      left.push(i);\n        right.push(i);\n    }\n    for(var i = 0; i < n;\
    \ i++){\n        for(var j = 0; j < n; j++){\n            if(left[i] == right[j]){\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    //TODO: Implement this function\n    return 0;\n}\n", "    return n*(n-1)/2;\n\
    }\n", "    //TODO: implement this function\n}\n", "    var count = 0;\n    var\
    \ left = [];\n    var right = [];\n    for(var i = 0; i < n; i++){\n        left.push(i);\n\
    \        right.push(i);\n    }\n    for(var i = 0; i < n; i++){\n        for(var\
    \ j = 0; j < n; j++){\n            if(left[i] === right[j]){\n               \
    \ count++;\n            }\n        }\n    }\n    return count;\n}\n", "\t//TODO:\
    \ Implement this function.\n\t// Hint:  You can use the fact that the cars are\
    \ moving in a straight line\n\t// to simplify the problem.  For example, you can\
    \ use the fact that the cars\n\t// are moving in a straight line to simplify the\
    \ problem.  For example, you can\n\t// use the fact that the cars are moving in\
    \ a straight line to simplify the problem.\n\t// For example, you can use the\
    \ fact that the cars are moving in a straight line\n\t// to simplify the problem.\
    \  For example, you can use the fact that the cars\n\t// are moving in a straight\
    \ line to simplify the problem.  For example, you can\n\t// use the fact that\
    \ the cars are moving in a straight line to simplify the problem.\n\t// For example,\
    \ you can use the fact that the cars are moving in a straight line\n\t// to simplify\
    \ the problem.  For example, you can use the fact that the cars\n\t// are moving\
    \ in a straight line to simplify the problem.  For example, you can\n\t// use\
    \ the fact that the cars are moving in a straight line to simplify the problem.\n\
    \t// For example, you can use the fact that the cars are moving in a straight\
    \ line\n\t// to simplify the problem.  For example, you can use the fact that\
    \ the cars\n\t// are moving in a straight line to simplify the problem.  For example,\
    \ you can\n\t// use the fact that the cars are moving in a straight line to simplify\
    \ the problem.\n\t// For example, you can use the fact that the cars are moving\
    \ in a straight line\n\t// to simplify the problem.  For example, you can use\
    \ the fact that the cars\n\t// are moving in a straight line to simplify the problem.\
    \  For example, you can\n\t// use the fact that the cars are moving in a straight\
    \ line to simplify the problem.\n\t// For example, you can use the fact that the\
    \ cars are moving in a straight line\n\t// to simplify the problem.  For example,\
    \ you can use the fact that the cars\n\t// are moving in a straight line to simplify\
    \ the problem.  For example, you can\n\t// use the fact that the cars are moving\
    \ in a straight line to simplify the problem.\n\t// For example, you can use the\
    \ fact that the cars are moving in a straight line", "    //TODO: implement this\
    \ function\n    return 0;\n}\n", "    //TODO: implement the function\n    return\
    \ 0;\n}\n", "    //TODO:  implement this function\n    return 0;\n}\n", "  return\
    \ n*(n-1)/2;\n}\n", "  //TODO\n}\n", "  var count = 0;\n  for(var i = 0; i < n;\
    \ i++){\n    for(var j = 0; j < n; j++){\n      count++;\n    }\n  }\n  return\
    \ count;\n}\n", "    var collisions = 0;\n    var left_to_right = [];\n    var\
    \ right_to_left = [];\n    for(var i = 0; i < n; i++){\n        left_to_right.push(i);\n\
    \        right_to_left.push(i);\n    }\n    var left_to_right_index = 0;\n   \
    \ var right_to_left_index = 0;\n    while(left_to_right_index < left_to_right.length\
    \ && right_to_left_index < right_to_left.length){\n        if(left_to_right[left_to_right_index]\
    \ === right_to_left[right_to_left_index]){\n            collisions++;\n      \
    \      left_to_right_index++;\n            right_to_left_index++;\n        }\n\
    \        else if(left_to_right[left_to_right_index] < right_to_left[right_to_left_index]){\n\
    \            left_to_right_index++;\n        }\n        else{\n            right_to_left_index++;\n\
    \        }\n    }\n    return collisions;\n}\n", "  //TODO: implement this function\n\
    }\n", "    //TODO: implement this function\n    return 0;\n}\n", "    //YOUR CODE\
    \ HERE\n    return 0;\n}\n", "\tvar count = 0;\n\tfor(var i = 0; i < n; i++){\n\
    \t\tfor(var j = 0; j < n; j++){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "\tvar collisions = 0;\n\tvar cars = [];\n\tfor(var i = 0; i < n; i++){\n\
    \t\tcars.push(i);\n\t}\n\tfor(var i = 0; i < n; i++){\n\t\tfor(var j = 0; j <\
    \ n; j++){\n\t\t\tif(cars[i] == cars[j]){\n\t\t\t\tcollisions++;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn collisions;\n}\n", "    //TODO\n}\n", "    return n*(n-1)/2;\n\
    }\n", "    //TODO: implement this function\n    return 0;\n}\n", "  //TODO\n}\n",
  "    var left_to_right = [];\n    var right_to_left = [];\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        left_to_right.push(i);\n        right_to_left.push(i);\n\
    \    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < n; j++){\n\
    \            if(left_to_right[i] === right_to_left[j]){\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "  //TODO: implement\
    \ this function\n  return 0;\n}\n", "  //TODO: Implement this function\n  return\
    \ 0;\n}\n", "    return n*(n-1)/2;\n}\n", "  //TODO: implement this function\n\
    \  return 0;\n}\n", "  return n*(n-1)/2;\n}\n", "    //TODO: implement this function\n\
    \    return 0;\n}\n", "  //TODO: Implement this function\n  return 0;\n}\n", " \
    \   //TODO: implement this function\n}\n", "    //TODO: implement this function\n\
    \    return 0;\n}\n", "    //TODO:  Implement this function.\n    return 0;\n\
    }\n", "    // your code here\n}\n", "    // TODO: Implement this function\n  \
    \  return 0;\n}\n", "    return n*(n-1)/2;\n}\n", "    var collisions = 0;\n \
    \   var left = [];\n    var right = [];\n    for(var i = 0; i < n; i++){\n   \
    \     left.push(i);\n        right.push(i);\n    }\n    for(var i = 0; i < n;\
    \ i++){\n        for(var j = 0; j < n; j++){\n            if(left[i] == right[j]){\n\
    \                collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\n", "    //TODO: Implement this function\n    return 0;\n}\n", "  var collisions\
    \ = 0;\n  var left_cars = [];\n  var right_cars = [];\n  for(var i = 0; i < n;\
    \ i++){\n    left_cars.push(i);\n    right_cars.push(i);\n  }\n  while(left_cars.length\
    \ > 0 && right_cars.length > 0){\n    if(left_cars[0] === right_cars[0]){\n  \
    \    collisions++;\n      left_cars.shift();\n      right_cars.shift();\n    }\n\
    \    else if(left_cars[0] < right_cars[0]){\n      left_cars.shift();\n    }\n\
    \    else{\n      right_cars.shift();\n    }\n  }\n  return collisions;\n}\n",
  "    //TODO: implement this function\n    return 0;\n}\n", "    //TODO: implement\
    \ this function\n    return 0;\n}\n", "  //TODO: implement this function\n  //Hint:\
    \ use a hash table to keep track of the cars that are moving right to left\n \
    \ //and their positions.\n  //Hint: use a hash table to keep track of the cars\
    \ that are moving left to right\n  //and their positions.\n  //Hint: use a hash\
    \ table to keep track of the cars that are moving right to left\n  //and their\
    \ positions.\n  //Hint: use a hash table to keep track of the cars that are moving\
    \ left to right\n  //and their positions.\n  //Hint: use a hash table to keep\
    \ track of the cars that are moving right to left\n  //and their positions.\n\
    \  //Hint: use a hash table to keep track of the cars that are moving left to\
    \ right\n  //and their positions.\n  //Hint: use a hash table to keep track of\
    \ the cars that are moving right to left\n  //and their positions.\n  //Hint:\
    \ use a hash table to keep track of the cars that are moving left to right\n \
    \ //and their positions.\n  //Hint: use a hash table to keep track of the cars\
    \ that are moving right to left\n  //and their positions.\n  //Hint: use a hash\
    \ table to keep track of the cars that are moving left to right\n  //and their\
    \ positions.\n  //Hint: use a hash table to keep track of the cars that are moving\
    \ right to left\n  //and their positions.\n  //Hint: use a hash table to keep\
    \ track of the cars that are moving left to right\n  //and their positions.\n\
    \  //Hint: use a hash table to keep track of the cars that are moving right to\
    \ left\n  //and their positions.\n  //Hint: use a hash table to keep track of\
    \ the cars that are moving left to right\n  //and their positions.\n  //Hint:\
    \ use a hash table to keep track of the cars that are moving right to left\n \
    \ //and their positions.\n  //Hint: use a hash table to keep track of the cars\
    \ that are moving left to right\n  //and their positions.\n  //Hint: use a hash\
    \ table to keep track of the cars that are moving right to left\n  //and their\
    \ positions.\n  //Hint: use a hash", "    //TODO: implement this function\n  \
    \  return 0;\n}\n", "    //TODO: implement this function\n}\n", "    return n*(n-1)/2;\n\
    }\n", "  var collisions = 0;\n  var cars = [];\n  var i;\n  for(i = 0; i < n;\
    \ i++){\n    cars.push(i);\n  }\n  for(i = 0; i < n; i++){\n    if(cars[i] < i){\n\
    \      collisions++;\n    }\n  }\n  return collisions;\n}\n", "\treturn n*(n-1)/2;\n\
    }\n", "  //TODO: implement this function\n}\n", "    return n*(n-1)/2;\n}\n",
  "  return n*(n-1)/2;\n}\n", "    //TODO: implement this function\n    return 0;\n\
    }\n", "    return n*(n-1)/2;\n}\n", "  //TODO:  Implement this function.\n  return\
    \ 0;\n}\n", "    //Your code here\n}\n", "    //TODO\n    return 0;\n}\n", " \
    \   //TODO: Implement this function\n    return 0;\n}\n", "  var left_to_right\
    \ = [];\n  var right_to_left = [];\n  var collisions = 0;\n  for(var i = 0; i\
    \ < n; i++){\n    left_to_right.push(i);\n    right_to_left.push(n-i);\n  }\n\
    \  while(left_to_right.length > 0 && right_to_left.length > 0){\n    if(left_to_right[0]\
    \ === right_to_left[0]){\n      collisions++;\n      left_to_right.shift();\n\
    \      right_to_left.shift();\n    }\n    else if(left_to_right[0] < right_to_left[0]){\n\
    \      left_to_right.shift();\n    }\n    else{\n      right_to_left.shift();\n\
    \    }\n  }\n  return collisions;\n}\n", "    //Your code here\n}\n", "    //TODO\n\
    }\n", "    return n*(n-1)/2;\n}\n", "  //TODO:  Implement this function.\n  return\
    \ 0;\n}\n", "    //TODO: implement this function\n    return 0;\n}\n", "  return\
    \ n*(n-1)/2;\n}\n", "  //YOUR CODE HERE\n}\n", "    //YOUR CODE HERE\n    return\
    \ 0;\n}\n", "    return n*(n-1)/2;\n}\n", "    var left = [];\n    var right =\
    \ [];\n    for(var i = 0; i < n; i++){\n        left.push(i);\n        right.push(i);\n\
    \    }\n    var count = 0;\n    while(left.length > 0 && right.length > 0){\n\
    \        if(left[0] == right[0]){\n            count++;\n            left.shift();\n\
    \            right.shift();\n        }\n        else if(left[0] < right[0]){\n\
    \            left.shift();\n        }\n        else{\n            right.shift();\n\
    \        }\n    }\n    return count;\n}\n", "    //TODO: implement this function\n\
    \    return 0;\n}\n", "\tvar count = 0;\n\tvar left = [];\n\tvar right = [];\n\
    \tfor(var i = 0; i < n; i++){\n\t\tleft.push(i);\n\t\tright.push(i);\n\t}\n\t\
    for(var i = 0; i < n; i++){\n\t\tfor(var j = 0; j < n; j++){\n\t\t\tif(left[i]\
    \ == right[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\n",
  "    return n*(n-1)/2;\n}\n", "    return n*(n-1)/2;\n}\n", "    //TODO: Implement\
    \ this function\n    return 0;\n}\n", "  //TODO:  Implement this function\n  return\
    \ 0;\n}\n", "  //TODO: Implement this function\n  return 0;\n}\n", "    //TODO:\
    \ Implement this function.\n    return 0;\n}\n", "    return n*(n-1)/2;\n}\n",
  "    //TODO: Implement this function\n    return 0;\n}\n", "    //TODO: Implement\
    \ this function\n    return 0;\n}\n", "    //TODO: Implement this function\n \
    \   return 0;\n}\n", "    //TODO: implement this function\n}\n", "    return n*(n-1)/2;\n\
    }\n", "    return n*(n-1)/2;\n}\n", "    //TODO:  Implement this function.\n \
    \   return 0;\n}\n", "  //TODO: Implement this function\n  return 0;\n}\n", " \
    \   // your code here\n    return n*(n-1)/2;\n}\n", "  //TODO: implement this\
    \ function\n  return 0;\n}\n", "    var count = 0;\n    for(var i = 0; i < n;\
    \ i++){\n        for(var j = 0; j < n; j++){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n", "    return n*(n-1)/2;\n}\n", "    // TODO: implement\
    \ this function\n    return 0;\n}\n", "\tvar left_to_right = [];\n\tvar right_to_left\
    \ = [];\n\tvar collisions = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tleft_to_right.push(i);\n\
    \t\tright_to_left.push(i);\n\t}\n\tfor(var i = 0; i < n; i++){\n\t\tfor(var j\
    \ = 0; j < n; j++){\n\t\t\tif(left_to_right[i] == right_to_left[j]){\n\t\t\t\t\
    collisions++;\n\t\t\t}\n\t\t}\n\t}\n\treturn collisions;\n}\n", "    return n*(n-1)/2;\n\
    }\n", "    //TODO: implement this function\n    return 0;\n}\n", "    return n*(n-1)/2;\n\
    }\n", "  //TODO: implement this function\n  return 0;\n}\n", "  //TODO: implement\
    \ this function\n  return 0;\n}\n", "    var count = 0;\n    for(var i = 0; i\
    \ < n; i++){\n        for(var j = 0; j < n; j++){\n            if(i == j){\n \
    \               count++;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    //TODO: Implement this function.\n    return 0;\n}\n", "\tlet left\
    \ = 0;\n\tlet right = 0;\n\tlet count = 0;\n\twhile(left < n && right < n){\n\t\
    \tif(left < right){\n\t\t\tleft++;\n\t\t}\n\t\telse if(left > right){\n\t\t\t\
    right++;\n\t\t}\n\t\telse{\n\t\t\tleft++;\n\t\t\tright++;\n\t\t\tcount++;\n\t\t\
    }\n\t}\n\treturn count;\n}\n", "  var left_to_right = [];\n  var right_to_left\
    \ = [];\n  for(var i = 0; i < n; i++){\n    left_to_right.push(i);\n    right_to_left.push(i);\n\
    \  }\n  var collisions = 0;\n  while(left_to_right.length > 0 && right_to_left.length\
    \ > 0){\n    var left_car = left_to_right.shift();\n    var right_car = right_to_left.shift();\n\
    \    if(left_car === right_car){\n      collisions++;\n    }\n  }\n  return collisions;\n\
    }\n", "  //TODO: implement this function\n}\n", "  var collisions = 0;\n  var\
    \ cars = [];\n  for(var i = 0; i < n; i++){\n    cars.push(i);\n  }\n  for(var\
    \ i = 0; i < n; i++){\n    for(var j = 0; j < n; j++){\n      if(cars[i] > cars[j]){\n\
    \        collisions++;\n      }\n    }\n  }\n  return collisions;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
