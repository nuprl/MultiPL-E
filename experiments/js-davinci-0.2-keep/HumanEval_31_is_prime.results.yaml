name: HumanEval_31_is_prime
language: javascript
results:
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    else if (n == 2){\n     \
    \   return true;\n    }\n    else{\n        for (var i = 2; i < n; i++){\n   \
    \         if (n % i == 0){\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n === 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i === 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    else if (n <= 3){\n     \
    \   return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0){\n        return\
    \ false;\n    }\n    let i = 5;\n    while (i * i <= n){\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0){\n            return false;\n        }\n        i = i\
    \ + 6;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    if (n == 2){\n        return\
    \ true;\n    }\n    if (n % 2 == 0){\n        return false;\n    }\n    var i\
    \ = 3;\n    while (i * i <= n){\n        if (n % i == 0){\n            return\
    \ false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    else if (n <= 3){\n     \
    \   return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0){\n        return\
    \ false;\n    }\n    let i = 5;\n    while (i * i <= n){\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0){\n            return false;\n        }\n        i = i\
    \ + 6;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    else if (n == 2){\n     \
    \   return true;\n    }\n    else{\n        for (var i = 2; i < n; i++){\n   \
    \         if (n % i == 0){\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) return false;\n    for (var i = 2; i < n; i++){\n        if (n\
    \ % i == 0) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    if (n == 2){\n        return\
    \ true;\n    }\n    if (n % 2 == 0){\n        return false;\n    }\n    for (var\
    \ i = 3; i < n; i+=2){\n        if (n % i == 0){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return\
    \ true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n \
    \   }\n    for (var i = 5; i * i <= n; i = i + 6) {\n        if (n % i == 0 ||\
    \ n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    else if (n == 2){\n     \
    \   return true;\n    }\n    else{\n        for (var i = 2; i < n; i++){\n   \
    \         if (n % i == 0){\n                return false;\n            }\n   \
    \     }\n        return true;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    if (n <= 3){\n        return\
    \ true;\n    }\n    if (n % 2 == 0 || n % 3 == 0){\n        return false;\n  \
    \  }\n    let i = 5;\n    while (i * i <= n){\n        if (n % i == 0 || n % (i\
    \ + 2) == 0){\n            return false;\n        }\n        i = i + 6;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    if (n == 2){\n        return\
    \ true;\n    }\n    if (n % 2 == 0){\n        return false;\n    }\n    for (var\
    \ i = 3; i < n; i += 2){\n        if (n % i == 0){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \  if (n < 2) {\n    return false;\n  }\n  for (var i = 2; i < n; i++) {\n   \
    \ if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    else if (n <= 3){\n     \
    \   return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0){\n        return\
    \ false;\n    }\n    var i = 5;\n    while (i * i <= n){\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0){\n            return false;\n        }\n        i = i\
    \ + 6;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    if (n <= 3){\n        return\
    \ true;\n    }\n    if (n % 2 == 0 || n % 3 == 0){\n        return false;\n  \
    \  }\n    for (var i = 5; i * i <= n; i = i + 6){\n        if (n % i == 0 || n\
    \ % (i + 2) == 0){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    if (n <= 3){\n        return\
    \ true;\n    }\n    if (n % 2 == 0 || n % 3 == 0){\n        return false;\n  \
    \  }\n    for (var i = 5; i * i <= n; i = i + 6){\n        if (n % i == 0 || n\
    \ % (i + 2) == 0){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return\
    \ true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n \
    \   }\n    for (var i = 5; i * i <= n; i = i + 6) {\n        if (n % i == 0 ||\
    \ n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    if (n == 2) {\n        return\
    \ true;\n    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    var m\
    \ = Math.sqrt(n);\n    for (var i = 3; i <= m; i += 2) {\n        if (n % i ==\
    \ 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n === 1) {\n        return false;\n    }\n    for (var i = 2; i < n;\
    \ i++) {\n        if (n % i === 0) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (let i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return\
    \ true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n \
    \   }\n    let i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n %\
    \ (i + 2) == 0) {\n            return false;\n        }\n        i = i + 6;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    else if (n <= 3) {\n   \
    \     return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0) {\n        return\
    \ false;\n    }\n    var i = 5;\n    while (i * i <= n) {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) {\n            return false;\n        }\n        i =\
    \ i + 6;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (let i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return\
    \ true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n \
    \   }\n    for (var i = 5; i * i <= n; i = i + 6) {\n        if (n % i == 0 ||\
    \ n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    else if (n <= 3) {\n   \
    \     return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0) {\n        return\
    \ false;\n    }\n    var i = 5;\n    while (i * i <= n) {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) {\n            return false;\n        }\n        i =\
    \ i + 6;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (let i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    else if (n <= 3){\n     \
    \   return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0){\n        return\
    \ false;\n    }\n    let i = 5;\n    while (i * i <= n){\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0){\n            return false;\n        }\n        i = i\
    \ + 6;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    if (n == 2){\n        return\
    \ true;\n    }\n    if (n % 2 == 0){\n        return false;\n    }\n    for (var\
    \ i = 3; i <= Math.sqrt(n); i++){\n        if (n % i == 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    else if (n <= 3) {\n   \
    \     return true;\n    }\n    else if (n % 2 == 0 || n % 3 == 0) {\n        return\
    \ false;\n    }\n    var i = 5;\n    while (i * i <= n) {\n        if (n % i ==\
    \ 0 || n % (i + 2) == 0) {\n            return false;\n        }\n        i =\
    \ i + 6;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n\
    // True\n// >>> is_prime(13441)\n// True\n// >>> is_prime(61)\n// True\n// >>>\
    \ is_prime(4)\n// False\n// >>> is_prime(1)\n// False\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i == 0) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
