name: HumanEval_108_count_nums
language: javascript
results:
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8j3lcmk2.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmp8j3lcmk2.js:11:9)\n\
    \    at test (/tmp/tmp8j3lcmk2.js:24:20)\n    at Object.<anonymous> (/tmp/tmp8j3lcmk2.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0fphl05j.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmp0fphl05j.js:11:9)\n\
    \    at test (/tmp/tmp0fphl05j.js:24:20)\n    at Object.<anonymous> (/tmp/tmp0fphl05j.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n\
    \        let num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmppc56s5zl.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmppc56s5zl.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpwry9mubz.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwry9mubz.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        if(arr[i] < 0){\n            var num = arr[i] * -1;\n            while(num\
    \ > 0){\n                sum += num % 10;\n                num = Math.floor(num\
    \ / 10);\n            }\n            sum *= -1;\n        }\n        else{\n  \
    \          var num = arr[i];\n            while(num > 0){\n                sum\
    \ += num % 10;\n                num = Math.floor(num / 10);\n            }\n \
    \       }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n5\n    at test (/tmp/tmp3973482x.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3973482x.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 5,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9ov1n7d8.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmp9ov1n7d8.js:11:9)\n\
    \    at test (/tmp/tmp9ov1n7d8.js:24:20)\n    at Object.<anonymous> (/tmp/tmp9ov1n7d8.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n\
    \        let num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp9qxajay9.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9qxajay9.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        if(num < 0){\n            num = num * -1;\n        }\n        var sum\
    \ = 0;\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpt53732xt.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt53732xt.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n\tvar count\
    \ = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar num = arr[i];\n\t\tvar\
    \ sum = 0;\n\t\tif(num < 0){\n\t\t\tnum = num * -1;\n\t\t}\n\t\twhile(num > 0){\n\
    \t\t\tsum += num % 10;\n\t\t\tnum = Math.floor(num / 10);\n\t\t}\n\t\tif(sum >\
    \ 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp_cnwjmix.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_cnwjmix.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp20vuiqom.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp20vuiqom.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpblju5j7m.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpblju5j7m.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpoec74lg2.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoec74lg2.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppjbc3bzl.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmppjbc3bzl.js:11:9)\n\
    \    at test (/tmp/tmppjbc3bzl.js:24:20)\n    at Object.<anonymous> (/tmp/tmppjbc3bzl.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp4brqy7pe.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4brqy7pe.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        var\
    \ num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmph40p0wrk.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmph40p0wrk.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        if(num < 0){\n            num = num * -1;\n        }\n        var sum\
    \ = 0;\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpc5k7d_2i.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc5k7d_2i.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpnwzoy4zy.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnwzoy4zy.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp5yonxe8r.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5yonxe8r.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpnsu2jthy.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnsu2jthy.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6845gpau.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmp6845gpau.js:11:9)\n\
    \    at test (/tmp/tmp6845gpau.js:24:20)\n    at Object.<anonymous> (/tmp/tmp6845gpau.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        if(num < 0){\n            num = num * -1;\n        }\n        var sum\
    \ = 0;\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpdg2g_8ej.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdg2g_8ej.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n\
    \            var num = arr[i];\n            var sum = 0;\n            while(num\
    \ > 0){\n                sum += num % 10;\n                num = Math.floor(num\
    \ / 10);\n            }\n            if(sum > 0){\n                count++;\n\
    \            }\n        }\n        else{\n            var num = arr[i];\n    \
    \        var sum = 0;\n            while(num < 0){\n                sum += num\
    \ % 10;\n                num = Math.floor(num / 10);\n            }\n        \
    \    if(sum < 0){\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp0uq6jz6c.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0uq6jz6c.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        while(arr[i]\
    \ > 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i]\
    \ / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpei6f_b2c.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpei6f_b2c.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n  var count\
    \ = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(sum_digits(arr[i]) > 0){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5ugxofxh.js:11\n    if(sum_digits(arr[i]) > 0){\n    ^\n\nReferenceError:\
    \ sum_digits is not defined\n    at count_nums (/tmp/tmp5ugxofxh.js:11:5)\n  \
    \  at test (/tmp/tmp5ugxofxh.js:24:20)\n    at Object.<anonymous> (/tmp/tmp5ugxofxh.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        while(arr[i]\
    \ > 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i]\
    \ / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpp_ipfp9o.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp_ipfp9o.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmppsixvau2.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmppsixvau2.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpcfl0593u.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcfl0593u.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n\tvar count\
    \ = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar num = arr[i].toString();\n\
    \t\tvar sum = 0;\n\t\tfor(var j = 0; j < num.length; j++){\n\t\t\tsum += parseInt(num[j]);\n\
    \t\t}\n\t\tif(sum > 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n5\n    at test (/tmp/tmp5vtqnxr9.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5vtqnxr9.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 5,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp2ebsc90h.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2ebsc90h.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpipvhfowy.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpipvhfowy.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpl8owiau0.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl8owiau0.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n  var count\
    \ = 0;\n  for(var i = 0; i < arr.length; i++){\n    var sum = 0;\n    var num\
    \ = arr[i];\n    if(num < 0){\n      num = num * -1;\n    }\n    while(num > 0){\n\
    \      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum\
    \ > 0){\n      count++;\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpsc8ao3bd.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsc8ao3bd.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpvgre_lzh.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvgre_lzh.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpldl76n_a.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpldl76n_a.js:11:9)\n\
    \    at test (/tmp/tmpldl76n_a.js:24:20)\n    at Object.<anonymous> (/tmp/tmpldl76n_a.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n\
    \        let num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp8h8rjrs5.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8h8rjrs5.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpbqfo0tmo.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbqfo0tmo.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqgdgbtk6.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpqgdgbtk6.js:11:9)\n\
    \    at test (/tmp/tmpqgdgbtk6.js:24:20)\n    at Object.<anonymous> (/tmp/tmpqgdgbtk6.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpwaburi_o.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwaburi_o.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp0fzbzmt3.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0fzbzmt3.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        while(arr[i]\
    \ > 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i]\
    \ / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpxad4qxc2.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxad4qxc2.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp1i818xia.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1i818xia.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        while(arr[i]\
    \ > 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i]\
    \ / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpbsbb9p6p.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbsbb9p6p.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpswt5h7cl.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpswt5h7cl.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        while(arr[i]\
    \ > 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i]\
    \ / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpyol5cx7p.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyol5cx7p.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpgvqvu45i.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgvqvu45i.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpq3hni3u8.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpq3hni3u8.js:11:9)\n\
    \    at test (/tmp/tmpq3hni3u8.js:24:20)\n    at Object.<anonymous> (/tmp/tmpq3hni3u8.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9v6p98su.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmp9v6p98su.js:11:9)\n\
    \    at test (/tmp/tmp9v6p98su.js:24:20)\n    at Object.<anonymous> (/tmp/tmp9v6p98su.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpk_4pvoko.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk_4pvoko.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        if(num < 0){\n            num = num * -1;\n        }\n        var sum\
    \ = 0;\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmps_hg7rgw.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmps_hg7rgw.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpyix9ltgl.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyix9ltgl.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_r7a_rkz.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmp_r7a_rkz.js:11:9)\n\
    \    at test (/tmp/tmp_r7a_rkz.js:24:20)\n    at Object.<anonymous> (/tmp/tmp_r7a_rkz.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n\
    \        let num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp74pyqyru.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp74pyqyru.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        let sum = 0;\n        let\
    \ num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp5gjyu7a1.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5gjyu7a1.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpb7n1wt9h.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb7n1wt9h.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        if(num < 0){\n            num = num * -1;\n        }\n        var sum\
    \ = 0;\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmps0q91r5b.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmps0q91r5b.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpx4a7hoko.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx4a7hoko.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n  var count\
    \ = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(sum_digits(arr[i]) > 0){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpts42ep33.js:11\n    if(sum_digits(arr[i]) > 0){\n    ^\n\nReferenceError:\
    \ sum_digits is not defined\n    at count_nums (/tmp/tmpts42ep33.js:11:5)\n  \
    \  at test (/tmp/tmpts42ep33.js:24:20)\n    at Object.<anonymous> (/tmp/tmpts42ep33.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp97ssiz6v.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp97ssiz6v.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpuhaeabl0.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpuhaeabl0.js:11:9)\n\
    \    at test (/tmp/tmpuhaeabl0.js:24:20)\n    at Object.<anonymous> (/tmp/tmpuhaeabl0.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpgbxk4na4.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgbxk4na4.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp6dprdga5.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6dprdga5.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpu5f8afnd.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu5f8afnd.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpq64p88z9.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq64p88z9.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            var num = arr[i] * -1;\n        }\n        else{\n            var\
    \ num = arr[i];\n        }\n        var sum = 0;\n        while(num > 0){\n  \
    \          sum += num % 10;\n            num = Math.floor(num / 10);\n       \
    \ }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpt_0y_wag.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt_0y_wag.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        if(num < 0){\n            num = num * -1;\n        }\n        var sum\
    \ = 0;\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpmd88kggw.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmd88kggw.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp3hnt1i_3.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3hnt1i_3.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        while(num != 0){\n            sum += num %\
    \ 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n\
    \        let num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpee59c0xr.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpee59c0xr.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n\tvar count\
    \ = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar sum = 0;\n\t\tvar num\
    \ = arr[i];\n\t\tif(num < 0){\n\t\t\tnum = num * -1;\n\t\t}\n\t\twhile(num > 0){\n\
    \t\t\tsum += num % 10;\n\t\t\tnum = Math.floor(num / 10);\n\t\t}\n\t\tif(sum >\
    \ 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpyq_yx30h.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyq_yx30h.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpzs8ey86c.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzs8ey86c.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpg1h455ws.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg1h455ws.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmps0gd__3v.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmps0gd__3v.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7nv9ge1_.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmp7nv9ge1_.js:11:9)\n\
    \    at test (/tmp/tmp7nv9ge1_.js:24:20)\n    at Object.<anonymous> (/tmp/tmp7nv9ge1_.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpctij7zhw.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpctij7zhw.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmppx_53afk.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmppx_53afk.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp70ufwqx6.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp70ufwqx6.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpwggog9up.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwggog9up.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n\
    \        let num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpag3cwuj1.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpag3cwuj1.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpi1xqg4bn.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi1xqg4bn.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpy98vk406.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy98vk406.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpn4ci33sw.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn4ci33sw.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpaeri32go.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaeri32go.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpxsb_hqa0.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxsb_hqa0.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpzud35olz.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzud35olz.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpb50gptkt.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb50gptkt.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmptzf6sgv0.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmptzf6sgv0.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpf2sone2c.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf2sone2c.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        while(arr[i]\
    \ > 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i]\
    \ / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpsg2sjo36.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsg2sjo36.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp_6daq_7p.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_6daq_7p.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        var\
    \ num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpy4km0nq3.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy4km0nq3.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpn4jw38iz.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn4jw38iz.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpk53wtr4j.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk53wtr4j.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            var digit = num %\
    \ 10;\n            sum += digit;\n            num = Math.floor(num / 10);\n  \
    \      }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        while(arr[i]\
    \ != 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i]\
    \ / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp4ocgmb3r.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4ocgmb3r.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    return\
    \ arr.filter(function(num){\n        return num.toString().split('').reduce(function(a,\
    \ b){\n            return parseInt(a) + parseInt(b);\n        }) > 0;\n    }).length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n5\n    at test (/tmp/tmpg3bov2ag.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg3bov2ag.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 5,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpu78fimm4.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu78fimm4.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpqvm2t8k4.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqvm2t8k4.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            var num = arr[i] * -1;\n        }\n        else{\n            var\
    \ num = arr[i];\n        }\n        var sum = 0;\n        while(num > 0){\n  \
    \          sum += num % 10;\n            num = Math.floor(num / 10);\n       \
    \ }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmprxax3s_2.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmprxax3s_2.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9hk_ojnu.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmp9hk_ojnu.js:11:9)\n\
    \    at test (/tmp/tmp9hk_ojnu.js:24:20)\n    at Object.<anonymous> (/tmp/tmp9hk_ojnu.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        var\
    \ num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp8_8pwytv.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8_8pwytv.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n\
    \        let sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpfzth05p4.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfzth05p4.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        var\
    \ num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp3osuhtva.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3osuhtva.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpxxzv2a2u.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxxzv2a2u.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            if(arr[i] % 10 < 0){\n                count++;\n            }\n \
    \       }\n        else{\n            if(arr[i] % 10 > 0){\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmptt8ry6sj.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmptt8ry6sj.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmptvlrewuo.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmptvlrewuo.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpu1xtyml9.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpu1xtyml9.js:11:9)\n\
    \    at test (/tmp/tmpu1xtyml9.js:24:20)\n    at Object.<anonymous> (/tmp/tmpu1xtyml9.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpagdycmvb.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpagdycmvb.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpn25vv1or.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn25vv1or.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpb3u1wqq4.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb3u1wqq4.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi26nz1ap.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpi26nz1ap.js:11:9)\n\
    \    at test (/tmp/tmpi26nz1ap.js:24:20)\n    at Object.<anonymous> (/tmp/tmpi26nz1ap.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp819iyt9a.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp819iyt9a.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqpw6nsel.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpqpw6nsel.js:11:9)\n\
    \    at test (/tmp/tmpqpw6nsel.js:24:20)\n    at Object.<anonymous> (/tmp/tmpqpw6nsel.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += Math.abs(num\
    \ % 10);\n            num = Math.floor(num / 10);\n        }\n        if(sum >\
    \ 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp71jhq5xy.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp71jhq5xy.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpq6o_6yez.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq6o_6yez.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n\
    \        if(arr[i] < 0){\n            sum += arr[i] * -1;\n        }\n       \
    \ else{\n            sum += arr[i];\n        }\n        while(sum > 0){\n    \
    \        sum -= sum % 10;\n            sum /= 10;\n        }\n        if(sum >\
    \ 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n6\n    at test (/tmp/tmp6gtxcj7u.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6gtxcj7u.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 6,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpb0eq65gl.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb0eq65gl.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        if(num < 0){\n            num = num * -1;\n        }\n        var sum\
    \ = 0;\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp4ynzq39p.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4ynzq39p.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n\
    \        let sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpr6gmxqk4.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr6gmxqk4.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpwlg1dp7c.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwlg1dp7c.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        if(arr[i] > 0){\n     \
    \       var sum = 0;\n            var num = arr[i];\n            while(num > 0){\n\
    \                sum += num % 10;\n                num = Math.floor(num / 10);\n\
    \            }\n            if(sum > 0){\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmphefk3ifq.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmphefk3ifq.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpdc7t4j22.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpdc7t4j22.js:11:9)\n\
    \    at test (/tmp/tmpdc7t4j22.js:24:20)\n    at Object.<anonymous> (/tmp/tmpdc7t4j22.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6wbswzco.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmp6wbswzco.js:11:9)\n\
    \    at test (/tmp/tmp6wbswzco.js:24:20)\n    at Object.<anonymous> (/tmp/tmp6wbswzco.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpiloiq04h.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpiloiq04h.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let num = arr[i];\n\
    \        let sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpsenfmbwl.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsenfmbwl.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        while(arr[i]\
    \ > 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i]\
    \ / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp8r1aywse.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8r1aywse.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmo1xy7w5.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpmo1xy7w5.js:11:9)\n\
    \    at test (/tmp/tmpmo1xy7w5.js:24:20)\n    at Object.<anonymous> (/tmp/tmpmo1xy7w5.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n\tvar count\
    \ = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\tvar sum = 0;\n\t\tvar num\
    \ = arr[i];\n\t\tif(num < 0){\n\t\t\tnum = num * -1;\n\t\t}\n\t\twhile(num > 0){\n\
    \t\t\tsum += num % 10;\n\t\t\tnum = Math.floor(num / 10);\n\t\t}\n\t\tif(sum >\
    \ 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpfz4rdj7j.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfz4rdj7j.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = -num;\n  \
    \      }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpukei9pqs.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpukei9pqs.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    let\
    \ count = 0;\n    for(let i = 0; i < arr.length; i++){\n        let sum = 0;\n\
    \        let num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpcgpmxupp.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcgpmxupp.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp2oxwm40j.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2oxwm40j.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmphir5yzrv.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmphir5yzrv.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp2iiphczc.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2iiphczc.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = -num;\n       \
    \ }\n        while(num > 0){\n            sum += num % 10;\n            num =\
    \ Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpmj10nnho.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmj10nnho.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            var num = arr[i] * -1;\n        }\n        else{\n            var\
    \ num = arr[i];\n        }\n        var sum = 0;\n        while(num > 0){\n  \
    \          sum += num % 10;\n            num = Math.floor(num / 10);\n       \
    \ }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpo07wu_ee.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo07wu_ee.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpeho_rbx7.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeho_rbx7.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp4r7gz7kn.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4r7gz7kn.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        var\
    \ num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp94xkusr4.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp94xkusr4.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp_rurh5ow.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_rurh5ow.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmputqxs33y.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmputqxs33y.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            var num = arr[i] * -1;\n        }else{\n            var num = arr[i];\n\
    \        }\n        var sum = 0;\n        while(num > 0){\n            sum +=\
    \ num % 10;\n            num = Math.floor(num / 10);\n        }\n        if(sum\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpmgh6_56l.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmgh6_56l.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        var\
    \ num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpk2hy4d0m.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk2hy4d0m.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var num = arr[i].toString();\n\
    \        var sum = 0;\n        for(var j = 0; j < num.length; j++){\n        \
    \    sum += parseInt(num[j]);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpo0wzazdu.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo0wzazdu.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp91l_g_mk.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp91l_g_mk.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp733vdu97.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp733vdu97.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n  var count\
    \ = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(sum_digits(arr[i]) > 0){\n\
    \      count++;\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe8nozv8q.js:11\n    if(sum_digits(arr[i]) > 0){\n    ^\n\nReferenceError:\
    \ sum_digits is not defined\n    at count_nums (/tmp/tmpe8nozv8q.js:11:5)\n  \
    \  at test (/tmp/tmpe8nozv8q.js:24:20)\n    at Object.<anonymous> (/tmp/tmpe8nozv8q.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpebq5879v.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpebq5879v.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            if(arr[i] % 10 < 0){\n                count++;\n            }\n \
    \       }\n        else if(arr[i] % 10 > 0){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpv6s45pcu.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv6s45pcu.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpdm_7qlnw.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdm_7qlnw.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        if(num < 0){\n            num = num * -1;\n        }\n        var sum\
    \ = 0;\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpt3s4xqsx.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt3s4xqsx.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpss1lv1cv.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpss1lv1cv.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpcwsz7u1s.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcwsz7u1s.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp2r2shn10.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2r2shn10.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpe_ft5k2e.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe_ft5k2e.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpc3mzh16f.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc3mzh16f.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        var\
    \ num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp5uqf0miu.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5uqf0miu.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n  var count\
    \ = 0;\n  for(var i = 0; i < arr.length; i++){\n    var num = arr[i];\n    var\
    \ sum = 0;\n    if(num < 0){\n      num = num * -1;\n    }\n    while(num > 0){\n\
    \      sum += num % 10;\n      num = Math.floor(num / 10);\n    }\n    if(sum\
    \ > 0){\n      count++;\n    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpckiduyq4.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpckiduyq4.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpazymi4ka.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpazymi4ka.js:11:9)\n\
    \    at test (/tmp/tmpazymi4ka.js:24:20)\n    at Object.<anonymous> (/tmp/tmpazymi4ka.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmd18c1ba.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpmd18c1ba.js:11:9)\n\
    \    at test (/tmp/tmpmd18c1ba.js:24:20)\n    at Object.<anonymous> (/tmp/tmpmd18c1ba.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpd20o3prx.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpd20o3prx.js:11:9)\n\
    \    at test (/tmp/tmpd20o3prx.js:24:20)\n    at Object.<anonymous> (/tmp/tmpd20o3prx.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpdapyae44.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdapyae44.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            var num = arr[i] * -1;\n        }\n        else{\n            var\
    \ num = arr[i];\n        }\n        var sum = 0;\n        while(num > 0){\n  \
    \          sum += num % 10;\n            num = Math.floor(num / 10);\n       \
    \ }\n        if(sum > 0){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, 0]),0);\n  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp4i16d1xt.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4i16d1xt.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz8pfmdtc.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpz8pfmdtc.js:11:9)\n\
    \    at test (/tmp/tmpz8pfmdtc.js:24:20)\n    at Object.<anonymous> (/tmp/tmpz8pfmdtc.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpdb4zibed.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdb4zibed.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphz7nya6g.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmphz7nya6g.js:11:9)\n\
    \    at test (/tmp/tmphz7nya6g.js:24:20)\n    at Object.<anonymous> (/tmp/tmphz7nya6g.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpvks7k2_j.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvks7k2_j.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp6_s881pk.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6_s881pk.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp369975_i.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp369975_i.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpydfd61ei.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpydfd61ei.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmporkc76yu.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmporkc76yu.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = -num;\n  \
    \      }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpl0vhuu6u.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl0vhuu6u.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmprf2gfk60.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmprf2gfk60.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpqipd57ii.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqipd57ii.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpqwgnit02.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqwgnit02.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        var\
    \ num = arr[i];\n        while(num > 0){\n            sum += num % 10;\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n       \
    \     count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmppxhm0vhn.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmppxhm0vhn.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n\
    \            arr[i] = arr[i] * -1;\n        }\n        var sum = 0;\n        while(arr[i]\
    \ > 0){\n            sum += arr[i] % 10;\n            arr[i] = Math.floor(arr[i]\
    \ / 10);\n        }\n        if(sum > 0){\n            count++;\n        }\n \
    \   }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpiu_2ju04.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpiu_2ju04.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpik0c53ke.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpik0c53ke.js:11:9)\n\
    \    at test (/tmp/tmpik0c53ke.js:24:20)\n    at Object.<anonymous> (/tmp/tmpik0c53ke.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        while(num != 0){\n            sum += num % 10;\n\
    \            num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n  \
    \          count++;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        var num = arr[i];\n        if(num < 0){\n            num = num * -1;\n\
    \        }\n        while(num > 0){\n            sum += num % 10;\n          \
    \  num = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp01iqzk1i.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp01iqzk1i.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(sum_digits(arr[i])\
    \ > 0){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_nums;\n\
    \  assert.deepEqual(candidate([]),0);\n  assert.deepEqual(candidate([-1, -2, 0]),0);\n\
    \  assert.deepEqual(candidate([1, 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1,\
    \ 6, 9, -6, 0, 1, 5]),5);\n  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n\
    \  assert.deepEqual(candidate([12, 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0,\
    \ 1]),1);\n  assert.deepEqual(candidate([1]),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpay40jn2f.js:11\n        if(sum_digits(arr[i]) > 0){\n        ^\n\
    \nReferenceError: sum_digits is not defined\n    at count_nums (/tmp/tmpay40jn2f.js:11:9)\n\
    \    at test (/tmp/tmpay40jn2f.js:24:20)\n    at Object.<anonymous> (/tmp/tmpay40jn2f.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmp_zj1xwet.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_zj1xwet.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var sum = 0;\n\
    \        if(arr[i] < 0){\n            sum += arr[i] * -1;\n        }\n       \
    \ else{\n            sum += arr[i];\n        }\n        while(sum > 0){\n    \
    \        sum = sum - (sum % 10);\n            sum = sum / 10;\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpvsnva0_f.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvsnva0_f.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmpaiycynqf.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaiycynqf.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function count_nums which takes an array of integers and returns\n\
    // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
    \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
    \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11])\
    \ == 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr){\n    var\
    \ count = 0;\n    for(var i = 0; i < arr.length; i++){\n        var num = arr[i];\n\
    \        var sum = 0;\n        if(num < 0){\n            num = num * -1;\n   \
    \     }\n        while(num > 0){\n            sum += num % 10;\n            num\
    \ = Math.floor(num / 10);\n        }\n        if(sum > 0){\n            count++;\n\
    \        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
    \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
    \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
    \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n0\n    at test (/tmp/tmps553a3hd.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmps553a3hd.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
