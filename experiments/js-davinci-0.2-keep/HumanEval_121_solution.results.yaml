name: HumanEval_121_solution
language: javascript
results:
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e, i) => i % 2 === 1 && e % 2\
    \ === 1).reduce((a, b) => a + b, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmplctl7l62.js:15:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmplctl7l62.js:24:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpx8ll4wjw.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpx8ll4wjw.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmp9t45fzlj.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp9t45fzlj.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpz7n05jg0.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpz7n05jg0.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpk2d66jms.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpk2d66jms.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 == 0 && lst[i] % 2 != 0){\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpbpvgenzb.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpbpvgenzb.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmp2qhhqye6.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp2qhhqye6.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++) {\n        if(i % 2 === 0 && lst[i] % 2 === 1) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmp7k0o4v9i.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp7k0o4v9i.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpjapthkna.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpjapthkna.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  return lst.filter((x,i)=>i%2==0).filter(x=>x%2!=0).reduce((a,b)=>a+b,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 1; i < lst.length;\
    \ i+=2){\n        if(lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n\
    \    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
    \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpw7o8hmbd.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpw7o8hmbd.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++) {\n        if(i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmph9zdu38e.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmph9zdu38e.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let result = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  //coding and coding..\n  let sum = 0;\n  for (let i\
    \ = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n  \
    \    sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmp14_6rgs9.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp14_6rgs9.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  return lst.filter((e,i)=>i%2===1).filter(e=>e%2===1).reduce((a,b)=>a+b,0)\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpyq2fex9m.js:14:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpyq2fex9m.js:23:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e,i)=>i%2==0).filter(e=>e%2!=0).reduce((a,b)=>a+b,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e,i)=>i%2!==0).filter(e=>e%2!==0).reduce((a,b)=>a+b,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpr2ao99wr.js:15:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpr2ao99wr.js:24:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e,i)=>i%2==0).filter(e=>e%2==1).reduce((a,b)=>a+b,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpd1_m1q_4.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpd1_m1q_4.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpm5jvswg_.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpm5jvswg_.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpetktdimd.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpetktdimd.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpl31rhcwn.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpl31rhcwn.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  return lst.filter((e,i)=>i%2!==0).filter(e=>e%2!==0).reduce((a,b)=>a+b,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpmojhj6v8.js:15:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpmojhj6v8.js:24:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e,i)=>i%2===1).filter(e=>e%2===1).reduce((a,b)=>a+b,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpa_lttsmz.js:15:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpa_lttsmz.js:24:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpqm_0vzr4.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpqm_0vzr4.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpuvu_h5x_.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpuvu_h5x_.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e, i) => i % 2 === 1 && e % 2\
    \ === 1).reduce((a, b) => a + b, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpzstqfy8o.js:15:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpzstqfy8o.js:24:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e,i)=>i%2==0).filter(e=>e%2==1).reduce((a,b)=>a+b,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++) {\n        if(i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    //coding and coding..\n    let sum = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !==\
    \ 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solution;\n\
    \  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  return lst.filter((e,i)=>i%2==0).filter(e=>e%2==1).reduce((a,b)=>a+b,0)\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e, i) => i % 2 === 1 && e % 2\
    \ === 1).reduce((a, b) => a + b, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmplwa1l8ic.js:15:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmplwa1l8ic.js:24:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e,i)=>i%2===1).filter(e=>e%2===1).reduce((a,b)=>a+b,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpl84otjz9.js:15:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpl84otjz9.js:24:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((x,i)=>i%2==0).filter(x=>x%2==1).reduce((a,b)=>a+b,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmputaqydb_.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmputaqydb_.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e,i)=>i%2!==0).filter(e=>e%2!==0).reduce((a,b)=>a+b,0)\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
    \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
    \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
    \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmp19268bjr.js:15:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp19268bjr.js:24:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpcgx9_btu.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpcgx9_btu.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmp2hqajjui.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp2hqajjui.js:30:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    return lst.filter((e, i) => i % 2 === 1 && e % 2\
    \ === 1).reduce((a, b) => a + b, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmpgkrif2aq.js:15:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpgkrif2aq.js:24:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++) {\n        if(i % 2 === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 !== 0){\n      sum += lst[i];\n    }\n  }\n\
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n\
    \  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n  return lst.filter((e, i) => i % 2 === 1 && e % 2 ===\
    \ 1).reduce((a, b) => a + b, 0);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n12\\n    at test (/tmp/tmphm95kvmi.js:15:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmphm95kvmi.js:24:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 12,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n// Examples\n// solution([5, 8, 7, 1])\
    \ ==> 12\n// solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\n\
    function solution(lst){\n    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5,\
    \ 8, 7, 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
    \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
    \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
    \ 13, 2, 9]),3);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
