name: HumanEval_76_is_simple_power
language: javascript
prompt: "//Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n\
  // is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3,\
  \ 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_simple_power;\n  assert.deepEqual(candidate(16, 2),true);\n  assert.deepEqual(candidate(143214,\
  \ 16),false);\n  assert.deepEqual(candidate(4, 2),true);\n  assert.deepEqual(candidate(9,\
  \ 3),true);\n  assert.deepEqual(candidate(16, 4),true);\n  assert.deepEqual(candidate(24,\
  \ 2),false);\n  assert.deepEqual(candidate(128, 4),false);\n  assert.deepEqual(candidate(12,\
  \ 6),false);\n  assert.deepEqual(candidate(1, 1),true);\n  assert.deepEqual(candidate(1,\
  \ 12),true);\n}\n\ntest();"
completions: ["    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return (Math.log(x) / Math.log(n))\
    \ % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n\
    }\n", "    return (Math.log(x) / Math.log(n)) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n", "    return x === Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n\
    \    if (result % 1 === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    if(x === 1) return true;\n    if(x === n) return true;\n\
    \    if(x < n) return false;\n    return is_simple_power(x/n, n);\n}\n", "   \
    \ return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x)\
    \ / Math.log(n);\n    return result % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n", "  return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \   let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n\
    }\n", "    let result = Math.log(x) / Math.log(n);\n    return result % 1 ===\
    \ 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return Math.pow(n, Math.round(Math.log(x)/Math.log(n)))\
    \ === x;\n}\n", "    var result = Math.log(x) / Math.log(n);\n    return result\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \   let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n\
    }\n", "    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n\
    }\n", "    let i = 1;\n    while (n**i <= x) {\n        if (n**i === x) {\n  \
    \          return true;\n        }\n        i++;\n    }\n    return false;\n}\n",
  "    let power = 1;\n    while (power < x) {\n        power *= n;\n    }\n    return\
    \ power === x;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n",
  "    if(x === 1) return true;\n    if(x === n) return true;\n    if(x < n) return\
    \ false;\n    if(x % n !== 0) return false;\n    return is_simple_power(x/n, n);\n\
    }\n", "    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let power =\
    \ Math.log(x) / Math.log(n);\n    return power % 1 === 0;\n}\n", "    let result\
    \ = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n", "    return\
    \ (Math.log(x) / Math.log(n)) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}", "  \
    \  if(x === 1) return true;\n    let i = 2;\n    while(i <= x){\n        if(Math.pow(n,\
    \ i) === x) return true;\n        i++;\n    }\n    return false;\n}\n", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1\
    \ === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n    return result\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}", "    var result = Math.log(x)\
    \ / Math.log(n);\n    if (result % 1 === 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}", "    return Math.log(x) / Math.log(n) %\
    \ 1 === 0;\n}\n", "    if(x === 1) return true;\n    let i = 2;\n    while(i <=\
    \ x){\n        if(i === x) return true;\n        i *= n;\n    }\n    return false;\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n", "    let i = 1;\n    while (Math.pow(n, i)\
    \ <= x) {\n        if (Math.pow(n, i) === x) {\n            return true;\n   \
    \     }\n        i++;\n    }\n    return false;\n}\n", "    let result = Math.log(x)\
    \ / Math.log(n);\n    return result % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return x === Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n}\n", "    return (Math.log(x) / Math.log(n)) % 1 === 0;\n\
    }\n", "    let i = 1;\n    while (Math.pow(n, i) <= x) {\n        if (Math.pow(n,\
    \ i) === x) {\n            return true;\n        }\n        i++;\n    }\n    return\
    \ false;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let power = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(power);\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \ return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) /\
    \ Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n", "    if(x === 1) return true;\n \
    \   let i = 2;\n    while(i < x){\n        if(Math.pow(n, i) === x) return true;\n\
    \        i++;\n    }\n    return false;\n}\n", "    let power = Math.log(x) /\
    \ Math.log(n);\n    return power % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x)\
    \ / Math.log(n);\n    return result % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let i = 1;\n    while (i < x) {\n     \
    \   i *= n;\n    }\n    return i === x;\n}\n", "    let power = Math.log(x) /\
    \ Math.log(n);\n    return (power % 1 === 0);\n}\n", "    let result = Math.log(x)\
    \ / Math.log(n);\n    return Number.isInteger(result);\n}\n", "    let result\
    \ = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let power = Math.log(x)\
    \ / Math.log(n);\n    return Number.isInteger(power);\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n", "    var i = 0;\n    var result = 1;\n    while (result <= x) {\n\
    \        result = Math.pow(n, i);\n        if (result === x) {\n            return\
    \ true;\n        }\n        i++;\n    }\n    return false;\n}\n", "    let result\
    \ = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return x === Math.pow(n,\
    \ Math.round(Math.log(x) / Math.log(n)));\n}\n", "    let result = Math.log(x)\
    \ / Math.log(n);\n    return result % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let result\
    \ = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}", "  \
    \  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1\
    \ === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    var result = Math.log(x) / Math.log(n);\n    return result\
    \ % 1 === 0;\n}\n", "    return Number.isInteger(Math.log(x)/Math.log(n));\n}\n",
  "    if(x===1) return true;\n    let i = 2;\n    while(i<=x){\n        if(Math.pow(n,i)===x)\
    \ return true;\n        i++;\n    }\n    return false;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "  let result = Math.log(x) / Math.log(n);\n\
    \  return Number.isInteger(result);\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "  \
    \  return (Math.log(x) / Math.log(n)) % 1 === 0\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return x === Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n}\n", "    let result = Math.log(x) / Math.log(n);\n    return\
    \ Number.isInteger(result);\n}\n", "    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n", "    return x === Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1\
    \ === 0;\n}\n", "    let power = Math.log(x) / Math.log(n);\n    return Number.isInteger(power);\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    if(x === 1) return true;\n    if(x ===\
    \ n) return true;\n    if(x < n) return false;\n    return is_simple_power(x/n,\
    \ n);\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n    return result\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \   let result = false;\n    if(x === 1){\n        result = true;\n    }\n   \
    \ for(let i = 1; i < x; i++){\n        if(Math.pow(n, i) === x){\n           \
    \ result = true;\n        }\n    }\n    return result;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    let power = Math.log(x) / Math.log(n);\n    return Number.isInteger(power);\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let result\
    \ = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n\
    \    return Number.isInteger(result);\n}\n", "    let i = 0;\n    while(Math.pow(n,\
    \ i) < x){\n        i++;\n    }\n    return Math.pow(n, i) === x;\n}", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    if(x === 1) return true;\n\
    \    if(n === 1) return false;\n    let i = 2;\n    while(i <= x){\n        if(Math.pow(n,\
    \ i) === x) return true;\n        i++;\n    }\n    return false;\n}", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    if(x === 1){\n        return\
    \ true;\n    }\n    if(x === n){\n        return true;\n    }\n    if(x < n){\n\
    \        return false;\n    }\n    return is_simple_power(x/n, n);\n}\n", "  \
    \  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let i = 1;\n    while (Math.pow(n, i) <=\
    \ x) {\n        if (Math.pow(n, i) === x) {\n            return true;\n      \
    \  }\n        i++;\n    }\n    return false;\n}\n", "    return Math.log(x) /\
    \ Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 ===\
    \ 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    if(x === 1) return true;\n\
    \    let i = 2;\n    while(i < x){\n        if(Math.pow(n, i) === x) return true;\n\
    \        i++;\n    }\n    return false;\n}\n", "    let result = Math.log(x) /\
    \ Math.log(n);\n    return Number.isInteger(result);\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let i = 1;\n    while (n**i < x) {\n  \
    \      i++;\n    }\n    return n**i === x;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}", "    if(x===1) return true;\n    if(x===n)\
    \ return true;\n    if(x%n===0) return is_simple_power(x/n, n);\n    return false;\n\
    }\n", "    let i = 1;\n    while (n**i <= x) {\n        if (n**i === x) {\n  \
    \          return true;\n        }\n        i++;\n    }\n    return false;\n}\n",
  "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x)\
    \ / Math.log(n);\n    return result % 1 === 0;\n}\n", "    let power = Math.log(x)\
    \ / Math.log(n);\n    return Number.isInteger(power);\n}", "    if(x === 1) return\
    \ true;\n    let i = 2;\n    while(i <= x){\n        if(Math.pow(n, i) === x)\
    \ return true;\n        i++;\n    }\n    return false;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x) / Math.log(n);\n\
    \    return result % 1 === 0;\n}\n", "    if(x === 1) return true;\n    for(let\
    \ i = 2; i <= x; i++){\n        if(Math.pow(n, i) === x) return true;\n    }\n\
    \    return false;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n",
  "    if(x === 1) return true;\n    if(x === 0) return false;\n    if(x % n !== 0)\
    \ return false;\n    return is_simple_power(x/n, n);\n}\n", "    let i = 1;\n\
    \    while (i < x) {\n        i *= n;\n    }\n    return i === x;\n}\n", "  return\
    \ x === Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n}\n", "    let result\
    \ = Math.log(x) / Math.log(n);\n    return result % 1 === 0;\n}\n", "    return\
    \ Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n)\
    \ % 1 === 0;\n}\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", " \
    \   return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let result = Math.log(x)\
    \ / Math.log(n);\n    return result % 1 === 0;\n}\n", "    let result = Math.log(x)\
    \ / Math.log(n);\n    return Number.isInteger(result);\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n", "    return x === Math.pow(n, Math.round(Math.log(x)\
    \ / Math.log(n)));\n}\n", "    return Math.pow(n, Math.round(Math.log(x)/Math.log(n)))\
    \ == x;\n}\n", "    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n\
    }\n", "    let result = Math.log(x) / Math.log(n);\n    return Number.isInteger(result);\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    if(x === 1)\
    \ return true;\n    if(x < n) return false;\n    return is_simple_power(x/n, n);\n\
    }\n", "    return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    return Math.log(x)\
    \ / Math.log(n) % 1 === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
