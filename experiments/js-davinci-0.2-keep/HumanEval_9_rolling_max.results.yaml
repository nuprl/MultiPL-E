name: HumanEval_9_rolling_max
language: javascript
results:
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var maxes = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        maxes.push(max);\n    }\n    return maxes;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmporc3varb.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmporc3varb.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpq69yedbs.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpq69yedbs.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = [];\n    max.push(numbers[0]);\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max[i-1]){\n            max.push(numbers[i]);\n\
    \        }\n        else{\n            max.push(max[i-1]);\n        }\n    }\n\
    \    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp3k35h9aa.js:24:10)\\\
    n    at Object.<anonymous> (/tmp/tmp3k35h9aa.js:30:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max_list = [];\n    var max = numbers[0];\n    max_list.push(max);\n   \
    \ for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n  \
    \          max = numbers[i];\n        }\n        max_list.push(max);\n    }\n\
    \    return max_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpqpo4syco.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpqpo4syco.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = 0;\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = [];\n    var max_so_far = numbers[0];\n    max.push(max_so_far);\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max_so_far){\n\
    \            max_so_far = numbers[i];\n        }\n        max.push(max_so_far);\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpttfy49sj.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpttfy49sj.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpgv2_37ij.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpgv2_37ij.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = [];\n    let max_num = 0;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max_num){\n            max_num = numbers[i];\n\
    \        }\n        max.push(max_num);\n    }\n    return max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp71mrxgip.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmp71mrxgip.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = [];\n    for(var i = 0; i < numbers.length; i++){\n        var current\
    \ = numbers[i];\n        if(i == 0){\n            max.push(current);\n       \
    \ }\n        else{\n            var last = max[i-1];\n            if(current >\
    \ last){\n                max.push(current);\n            }\n            else{\n\
    \                max.push(last);\n            }\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = 0;\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpfmj2454f.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpfmj2454f.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = 0;\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp5u1q4ipb.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmp5u1q4ipb.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp66g3h7b5.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmp66g3h7b5.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = [];\n    var max_so_far = numbers[0];\n    max.push(max_so_far);\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max_so_far){\n\
    \            max_so_far = numbers[i];\n        }\n        max.push(max_so_far);\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpcgp8d4rn.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpcgp8d4rn.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpjpekvc62.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpjpekvc62.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = 0;\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let result = [];\n    let max = numbers[0];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmptdfo3h18.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmptdfo3h18.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmphkznrcon.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmphkznrcon.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmphu8k4wy9.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmphu8k4wy9.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var max_list = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        max_list.push(max);\n    }\n    return max_list;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp6mbiz8mh.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmp6mbiz8mh.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = 0;\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpngd_ua3z.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpngd_ua3z.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n\tvar\
    \ max = numbers[0];\n\tvar result = [max];\n\tfor(var i = 1; i < numbers.length;\
    \ i++){\n\t\tif(numbers[i] > max){\n\t\t\tmax = numbers[i];\n\t\t}\n\t\tresult.push(max);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp917tpf4p.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmp917tpf4p.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = 0;\n    var max_list = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        max_list.push(max);\n    }\n    return max_list;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpjya4j29z.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpjya4j29z.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp7k7ind_9.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmp7k7ind_9.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = 0;\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpm_n4gooe.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpm_n4gooe.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpvt88jhrc.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpvt88jhrc.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp3k608h94.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmp3k608h94.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = 0;\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpefnpb__j.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpefnpb__j.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmprmlv0q5f.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmprmlv0q5f.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp_wzqiio1.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmp_wzqiio1.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let result = [];\n    let max = numbers[0];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp2n8l66x2.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmp2n8l66x2.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = [];\n    var max_so_far = numbers[0];\n    max.push(max_so_far);\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max_so_far){\n\
    \            max_so_far = numbers[i];\n        }\n        max.push(max_so_far);\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpprrmva6t.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpprrmva6t.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = [];\n    var current_max = numbers[0];\n    max.push(current_max);\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > current_max){\n\
    \            current_max = numbers[i];\n        }\n        max.push(current_max);\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp2epz_di_.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmp2epz_di_.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpug54q195.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpug54q195.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmphimz1470.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmphimz1470.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpvcva0qlz.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpvcva0qlz.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = 0;\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpkcr4gp4f.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpkcr4gp4f.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpg5_auwio.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpg5_auwio.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpr0wcuvdx.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpr0wcuvdx.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = [];\n    var max_value = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max_value){\n            max_value = numbers[i];\n\
    \        }\n        max.push(max_value);\n    }\n    return max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpqib97_5v.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpqib97_5v.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpbhlf711f.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpbhlf711f.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp1rbdypye.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmp1rbdypye.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpd0ywp0mo.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpd0ywp0mo.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpdx011mlg.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpdx011mlg.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpi8pqk6ta.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpi8pqk6ta.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = 0;\n    let result = [];\n    for(let i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = [];\n    var max_so_far = numbers[0];\n    max.push(max_so_far);\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max_so_far){\n\
    \            max_so_far = numbers[i];\n        }\n        max.push(max_so_far);\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp0_pk0mj_.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmp0_pk0mj_.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp60wnbxl6.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmp60wnbxl6.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpi8c8jejq.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpi8c8jejq.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = 0;\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max_list = [];\n    var max = 0;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        max_list.push(max);\n    }\n    return max_list;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  var\
    \ max = 0;\n  var result = [];\n  for(var i = 0; i < numbers.length; i++){\n \
    \   if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpyh_gkdab.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpyh_gkdab.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp9h7crzfv.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmp9h7crzfv.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpel34h_ak.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpel34h_ak.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n  var\
    \ result = [];\n  var max = numbers[0];\n  for(var i = 0; i < numbers.length;\
    \ i++){\n    if(numbers[i] > max){\n      max = numbers[i];\n    }\n    result.push(max);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmp0tgxk5o6.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmp0tgxk5o6.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpfi5tek5d.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpfi5tek5d.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpbxm9sjvn.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpbxm9sjvn.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var maxes = [];\n    var max = numbers[0];\n    maxes.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        maxes.push(max);\n    }\n    return maxes;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpis4vstc5.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpis4vstc5.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpulc6t3z1.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpulc6t3z1.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [max];\n    for(var i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpdldk2675.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpdldk2675.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let result = [];\n    let max = numbers[0];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = numbers[0];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = 0;\n    var result = [];\n    for(var i = 0; i < numbers.length; i++){\n\
    \        if(numbers[i] > max){\n            max = numbers[i];\n        }\n   \
    \     result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [max];\n    for(let i = 1; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpbt2ihivs.js:22:10)\\\
    n    at Object.<anonymous> (/tmp/tmpbt2ihivs.js:28:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var max = [];\n    var max_so_far = numbers[0];\n    max.push(max_so_far);\n\
    \    for(var i = 1; i < numbers.length; i++){\n        if(numbers[i] > max_so_far){\n\
    \            max_so_far = numbers[i];\n        }\n        max.push(max_so_far);\n\
    \    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpsbp_n1h1.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpsbp_n1h1.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ var result = [];\n    var max = numbers[0];\n    result.push(max);\n    for(var\
    \ i = 1; i < numbers.length; i++){\n        if(numbers[i] > max){\n          \
    \  max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n[\\n  undefined\\\
    n]\\n\\nshould loosely deep-equal\\n\\n[]\\n    at test (/tmp/tmpnc0r_ksd.js:23:10)\\\
    n    at Object.<anonymous> (/tmp/tmpnc0r_ksd.js:29:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: [ undefined\
    \ ],\\n  expected: [],\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3,\
    \ 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers){\n   \
    \ let max = numbers[0];\n    let result = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n      \
    \  }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
