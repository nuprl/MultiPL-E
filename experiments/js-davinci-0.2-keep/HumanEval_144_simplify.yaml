name: HumanEval_144_simplify
language: javascript
prompt: "//Your task is to implement a function that will simplify the expression\n\
  // x * n. The function returns True if x * n evaluates to a whole number and False\n\
  // otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n// <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n// You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n// simplify(\"1/5\", \"5/1\") = True\n//\
  \ simplify(\"1/6\", \"2/1\") = False\n// simplify(\"7/10\", \"10/2\") = False\n\
  function simplify(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"\
  1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"5/1\", \"3/1\"),true);\n\
  \  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n  assert.deepEqual(candidate(\"\
  2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"7/2\", \"4/2\"),true);\n\
  \  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n  assert.deepEqual(candidate(\"\
  2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"5/2\", \"3/5\"),false);\n\
  \  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n  assert.deepEqual(candidate(\"\
  2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n\
  \  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n}\n\ntest();"
completions: ["  var xNumerator = parseInt(x.split('/')[0]);\n  var xDenominator =\
    \ parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var result = (xNumerator *\
    \ nDenominator) * (nNumerator * xDenominator);\n  if (result % (xDenominator *\
    \ nDenominator) === 0) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n", "  let xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let xMultiplied = xNumerator * nDenominator;\n  let nMultiplied = nNumerator\
    \ * xDenominator;\n  return xMultiplied === nMultiplied;\n}\n", "  let xNumerator\
    \ = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n  let nNumerator\
    \ = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n  let xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n  let xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n  return xNumeratorTimesnDenominator === xDenominatorTimesnNumerator;\n\
    }\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum\
    \ = xArr[0] * nArr[1];\n    let nNum = nArr[0] * xArr[1];\n    return xNum ===\
    \ nNum;\n}\n", "    let xNumerator = x.split('/')[0];\n    let xDenominator =\
    \ x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n    let nDenominator\
    \ = n.split('/')[1];\n    let xNumeratorTimesnDenominator = xNumerator * nDenominator;\n\
    \    let xDenominatorTimesnNumerator = xDenominator * nNumerator;\n    if(xNumeratorTimesnDenominator\
    \ === xDenominatorTimesnNumerator){\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}\n", "  let x_num = parseInt(x.split('/')[0]);\n \
    \ let x_den = parseInt(x.split('/')[1]);\n  let n_num = parseInt(n.split('/')[0]);\n\
    \  let n_den = parseInt(n.split('/')[1]);\n  let result = (x_num * n_num) / (x_den\
    \ * n_den);\n  return Number.isInteger(result);\n}\n", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = parseInt(xArr[0]);\n    let xDen\
    \ = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n    let nDen = parseInt(nArr[1]);\n\
    \    let xNumDen = xNum * nDen;\n    let nNumDen = nNum * xDen;\n    return xNumDen\
    \ === nNumDen;\n}\n", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n\
    \  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n  return xNum\
    \ % nNum === 0;\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator\
    \ = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let xProduct = xNumerator\
    \ * nDenominator;\n  let nProduct = nNumerator * xDenominator;\n  return xProduct\
    \ === nProduct;\n}\n", "    let xNum = parseInt(x.split('/')[0]);\n    let xDen\
    \ = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n  \
    \  let nDen = parseInt(n.split('/')[1]);\n    let xMult = xNum * nDen;\n    let\
    \ nMult = nNum * xDen;\n    if(xMult === nMult){\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n", "  let xNumerator = x.split('/')[0];\n\
    \  let xDenominator = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n\
    \  let nDenominator = n.split('/')[1];\n  let xNumeratorTimesNDenominator = xNumerator\
    \ * nDenominator;\n  let nNumeratorTimesXDenominator = nNumerator * xDenominator;\n\
    \  if (xNumeratorTimesNDenominator % nNumeratorTimesXDenominator === 0) {\n  \
    \  return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNum = x.split('/')[0];\n\
    \    let xDen = x.split('/')[1];\n    let nNum = n.split('/')[0];\n    let nDen\
    \ = n.split('/')[1];\n    let xNumDen = xNum * nDen;\n    let nNumDen = nNum *\
    \ xDen;\n    return xNumDen === nNumDen;\n}\n", "  var xArr = x.split('/');\n\
    \  var nArr = n.split('/');\n  var xNum = xArr[0] * nArr[1];\n  var nNum = nArr[0]\
    \ * xArr[1];\n  return xNum === nNum;\n}\n", "    let xArr = x.split('/');\n \
    \   let nArr = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum\
    \ = nArr[0] * xArr[1];\n    return xNum === nNum;\n}", "  let xNumerator = x.split('/')[0];\n\
    \  let xDenominator = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n\
    \  let nDenominator = n.split('/')[1];\n  let productNumerator = xNumerator *\
    \ nNumerator;\n  let productDenominator = xDenominator * nDenominator;\n  let\
    \ product = productNumerator / productDenominator;\n  if (product % 1 === 0) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNum = x.split('/')[0];\n\
    \    let xDen = x.split('/')[1];\n    let nNum = n.split('/')[0];\n    let nDen\
    \ = n.split('/')[1];\n    let xNumDen = xNum * nDen;\n    let nNumDen = nNum *\
    \ xDen;\n    if(xNumDen % nNumDen === 0){\n        return true;\n    }\n    return\
    \ false;\n}", "    let xNumerator = x.split('/')[0];\n    let xDenominator = x.split('/')[1];\n\
    \    let nNumerator = n.split('/')[0];\n    let nDenominator = n.split('/')[1];\n\
    \    let xMultiplied = xNumerator * nNumerator;\n    let nMultiplied = xDenominator\
    \ * nDenominator;\n    if(xMultiplied % nMultiplied === 0){\n        return true;\n\
    \    }\n    return false;\n}\n", "  var xNumerator = parseInt(x.split('/')[0]);\n\
    \  var xDenominator = parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var result = (xNumerator *\
    \ nDenominator) * (nNumerator * xDenominator);\n  return result % 1 === 0;\n}\n",
  "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum = parseInt(xArr[0]);\n\
    \    let xDen = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n    let\
    \ nDen = parseInt(nArr[1]);\n    let xNumNew = xNum * nDen;\n    let xDenNew =\
    \ xDen * nNum;\n    if(xNumNew % xDenNew === 0){\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}", "  let xNum = x.split('/')[0];\n \
    \ let xDen = x.split('/')[1];\n  let nNum = n.split('/')[0];\n  let nDen = n.split('/')[1];\n\
    \  let xNumN = xNum * nDen;\n  let nNumX = nNum * xDen;\n  if (xNumN === nNumX)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNumerator\
    \ = x.split('/')[0]\n    let xDenominator = x.split('/')[1]\n    let nNumerator\
    \ = n.split('/')[0]\n    let nDenominator = n.split('/')[1]\n    let xNumeratorN\
    \ = xNumerator * nDenominator\n    let nNumeratorX = nNumerator * xDenominator\n\
    \    if(xNumeratorN === nNumeratorX){\n        return true\n    } else {\n   \
    \     return false\n    }\n}\n", "    let xArr = x.split('/');\n    let nArr =\
    \ n.split('/');\n    let xNum = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n\
    \    let nNum = parseInt(nArr[0]);\n    let nDen = parseInt(nArr[1]);\n    let\
    \ xNumDen = xNum * nDen;\n    let nNumDen = nNum * xDen;\n    let xDenDen = xDen\
    \ * nDen;\n    let nDenDen = nDen * xDen;\n    if(xNumDen === nNumDen && xDenDen\
    \ === nDenDen){\n        return true;\n    }\n    return false;\n}\n", "    let\
    \ xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "    let xNumerator = x.split('/')[0];\n\
    \    let xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n\
    \    let nDenominator = n.split('/')[1];\n    let result = (xNumerator * nDenominator)\
    \ * (nNumerator * xDenominator);\n    return result % 1 === 0;\n}\n", "  let xNumerator\
    \ = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n  let nNumerator\
    \ = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n  let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n  return result % 1 === 0;\n\
    }\n", "  var xNum = x.split('/')[0];\n  var xDen = x.split('/')[1];\n  var nNum\
    \ = n.split('/')[0];\n  var nDen = n.split('/')[1];\n  var xNumN = xNum * nDen;\n\
    \  var nNumX = nNum * xDen;\n  if(xNumN === nNumX){\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "    let xArr = x.split('/');\n    let nArr\
    \ = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum = nArr[0] *\
    \ xArr[1];\n    return xNum % nNum === 0;\n}\n", "  var xArr = x.split('/');\n\
    \  var nArr = n.split('/');\n  var xNum = parseInt(xArr[0]);\n  var xDen = parseInt(xArr[1]);\n\
    \  var nNum = parseInt(nArr[0]);\n  var nDen = parseInt(nArr[1]);\n  var xNumN\
    \ = xNum * nDen;\n  var nNumX = nNum * xDen;\n  if(xNumN === nNumX){\n    return\
    \ true;\n  }\n  return false;\n}\n", "  let xNumerator = x.split('/')[0];\n  let\
    \ xDenominator = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n  let\
    \ nDenominator = n.split('/')[1];\n  let xNumeratorTimesnDenominator = xNumerator\
    \ * nDenominator;\n  let xDenominatorTimesnNumerator = xDenominator * nNumerator;\n\
    \  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "  var x_numerator = parseInt(x.split('/')[0]);\n\
    \  var x_denominator = parseInt(x.split('/')[1]);\n  var n_numerator = parseInt(n.split('/')[0]);\n\
    \  var n_denominator = parseInt(n.split('/')[1]);\n  var x_n = x_numerator * n_denominator;\n\
    \  var n_n = n_numerator * x_denominator;\n  if (x_n % n_n === 0) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = parseInt(xArr[0]);\n    let xDen\
    \ = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n    let nDen = parseInt(nArr[1]);\n\
    \    let xN = xNum * nDen;\n    let nX = nNum * xDen;\n    if(xN === nX){\n  \
    \      return true;\n    }\n    return false;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0\
    \ ? true : false;\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n\
    \    let xNum = xArr[0] * nArr[1];\n    let nNum = nArr[0] * xArr[1];\n    if\
    \ (xNum % nNum === 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    if(result % (xDenominator\
    \ * nDenominator) === 0){\n        return true;\n    }\n    return false;\n}\n",
  "    let xNum = x.split('/')[0];\n    let xDen = x.split('/')[1];\n    let nNum\
    \ = n.split('/')[0];\n    let nDen = n.split('/')[1];\n    let xNumN = xNum *\
    \ nDen;\n    let nNumX = nNum * xDen;\n    if(xNumN === nNumX){\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "  var xNumerator =\
    \ parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var xProduct = xNumerator * nDenominator;\n  var nProduct = nNumerator * xDenominator;\n\
    \  if (xProduct === nProduct) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n  let xNum\
    \ = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n  return xNum === nNum;\n\
    }\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum\
    \ = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n\
    \    let nDen = parseInt(nArr[1]);\n    let xNumN = xNum * nDen;\n    let nNumX\
    \ = nNum * xDen;\n    if(xNumN === nNumX){\n        return true;\n    }\n    return\
    \ false;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    if(result % (xDenominator\
    \ * nDenominator) === 0){\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "  var xNumerator = parseInt(x.split('/')[0]);\n  var xDenominator\
    \ = parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var xProduct = xNumerator\
    \ * nDenominator;\n  var nProduct = nNumerator * xDenominator;\n  return xProduct\
    \ === nProduct;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let\
    \ xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = xNumerator\
    \ * nDenominator * nNumerator * xDenominator;\n    return result % 1 === 0;\n}",
  "  let xNum = x.split('/')[0];\n  let xDen = x.split('/')[1];\n  let nNum = n.split('/')[0];\n\
    \  let nDen = n.split('/')[1];\n  let xNumN = xNum * nDen;\n  let nNumX = nNum\
    \ * xDen;\n  if(xNumN === nNumX){\n    return true;\n  } else {\n    return false;\n\
    \  }\n}", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "    let xNumerator = x.split('/')[0];\n    let xDenominator = x.split('/')[1];\n\
    \    let nNumerator = n.split('/')[0];\n    let nDenominator = n.split('/')[1];\n\
    \    let xMultiplier = nDenominator / xDenominator;\n    let nMultiplier = xDenominator\
    \ / nDenominator;\n    let xProduct = xNumerator * xMultiplier;\n    let nProduct\
    \ = nNumerator * nMultiplier;\n    if (xProduct % 1 === 0 && nProduct % 1 ===\
    \ 0){\n        return true;\n    } else {\n        return false;\n    }\n}\n",
  "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n  let xNum = parseInt(xArr[0]);\n\
    \  let xDen = parseInt(xArr[1]);\n  let nNum = parseInt(nArr[0]);\n  let nDen\
    \ = parseInt(nArr[1]);\n  let xNumN = xNum * nDen;\n  let nNumX = nNum * xDen;\n\
    \  if(xNumN === nNumX){\n    return true;\n  }\n  return false;\n}\n", "  let\
    \ xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let xProduct = xNumerator * nDenominator;\n  let nProduct = nNumerator * xDenominator;\n\
    \  return xProduct === nProduct;\n}\n", "    let xNum = x.split('/')[0]\n    let\
    \ xDen = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n\
    \    let xNumN = xNum * nDen\n    let nNumX = nNum * xDen\n    if(xNumN === nNumX){\n\
    \        return true\n    } else {\n        return false\n    }\n}", "  var xArr\
    \ = x.split('/');\n  var nArr = n.split('/');\n  var xNum = xArr[0] * nArr[1];\n\
    \  var nNum = nArr[0] * xArr[1];\n  return xNum === nNum;\n}\n", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let xProduct = xNumerator * nDenominator;\n    let nProduct = nNumerator\
    \ * xDenominator;\n    return xProduct === nProduct;\n}\n", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n\
    \  let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let product = xNumerator *\
    \ nNumerator;\n  let denominator = xDenominator * nDenominator;\n  return product\
    \ % denominator === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xMultiplied = xNumerator\
    \ * nDenominator;\n    let nMultiplied = nNumerator * xDenominator;\n    return\
    \ xMultiplied === nMultiplied;\n}\n", "    let xArr = x.split('/');\n    let nArr\
    \ = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum = nArr[0] *\
    \ xArr[1];\n    return xNum === nNum;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let product = xNumerator\
    \ * nNumerator;\n    let productDenominator = xDenominator * nDenominator;\n \
    \   if(product % productDenominator === 0){\n        return true;\n    }\n   \
    \ return false;\n}\n", "  var x_numerator = x.split('/')[0];\n  var x_denominator\
    \ = x.split('/')[1];\n  var n_numerator = n.split('/')[0];\n  var n_denominator\
    \ = n.split('/')[1];\n  var x_numerator_n_denominator = x_numerator * n_denominator;\n\
    \  var n_numerator_x_denominator = n_numerator * x_denominator;\n  if(x_numerator_n_denominator\
    \ % n_numerator_x_denominator === 0){\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let\
    \ xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "  var xArr = x.split('/');\n  var nArr = n.split('/');\n  var xNum = parseInt(xArr[0]);\n\
    \  var xDen = parseInt(xArr[1]);\n  var nNum = parseInt(nArr[0]);\n  var nDen\
    \ = parseInt(nArr[1]);\n  var xNum2 = xNum * nDen;\n  var nNum2 = nNum * xDen;\n\
    \  if(xNum2 === nNum2){\n    return true;\n  }\n  return false;\n}\n", "  let\
    \ xArr = x.split('/');\n  let nArr = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n\
    \  let nNum = nArr[0] * xArr[1];\n  return xNum % nNum === 0;\n}\n", "    let\
    \ xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let xMultiplied = xNumerator * nDenominator;\n    let nMultiplied = nNumerator\
    \ * xDenominator;\n    return xMultiplied === nMultiplied;\n}\n", "    let xArr\
    \ = x.split('/');\n    let nArr = n.split('/');\n    let xNum = parseInt(xArr[0]);\n\
    \    let xDen = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n    let\
    \ nDen = parseInt(nArr[1]);\n    let xNumDen = xNum * nDen;\n    let nNumDen =\
    \ nNum * xDen;\n    if(xNumDen === nNumDen){\n        return true;\n    }\n  \
    \  return false;\n}\n", "  var x = x.split('/');\n  var n = n.split('/');\n  var\
    \ xNum = x[0];\n  var xDen = x[1];\n  var nNum = n[0];\n  var nDen = n[1];\n \
    \ var xNumN = xNum * nDen;\n  var xDenN = xDen * nNum;\n  if (xNumN % xDenN ===\
    \ 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  let xArr\
    \ = x.split('/');\n  let nArr = n.split('/');\n  let xNumerator = parseInt(xArr[0]);\n\
    \  let xDenominator = parseInt(xArr[1]);\n  let nNumerator = parseInt(nArr[0]);\n\
    \  let nDenominator = parseInt(nArr[1]);\n  let xProduct = xNumerator * nDenominator;\n\
    \  let nProduct = nNumerator * xDenominator;\n  if(xProduct === nProduct){\n \
    \   return true;\n  }\n  return false;\n}\n", "  var xNumerator = x.split('/')[0];\n\
    \  var xDenominator = x.split('/')[1];\n  var nNumerator = n.split('/')[0];\n\
    \  var nDenominator = n.split('/')[1];\n  var xMultiplier = nDenominator / xDenominator;\n\
    \  var nMultiplier = xDenominator / nDenominator;\n  var xResult = xNumerator\
    \ * xMultiplier;\n  var nResult = nNumerator * nMultiplier;\n  if(xResult % 1\
    \ === 0 && nResult % 1 === 0){\n    return true;\n  }\n  return false;\n}\n",
  "  var x_numerator = parseInt(x.split('/')[0]);\n  var x_denominator = parseInt(x.split('/')[1]);\n\
    \  var n_numerator = parseInt(n.split('/')[0]);\n  var n_denominator = parseInt(n.split('/')[1]);\n\
    \  var x_numerator_new = x_numerator * n_denominator;\n  var x_denominator_new\
    \ = x_denominator * n_numerator;\n  if(x_numerator_new % x_denominator_new ===\
    \ 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = xNumerator\
    \ * nDenominator * nNumerator * xDenominator;\n    return result % 1 === 0;\n\
    }\n", "  let xNumerator = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n\
    \  let nNumerator = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n\
    \  let xNumeratorTimesnDenominator = xNumerator * nDenominator;\n  let xDenominatorTimesnNumerator\
    \ = xDenominator * nNumerator;\n  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  let xNumerator\
    \ = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n  let nNumerator\
    \ = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n  let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n  if(result % 1 === 0){\n  \
    \  return true;\n  } else {\n    return false;\n  }\n}\n", "  var xNumerator =\
    \ parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  var xProduct = xNumerator * nDenominator;\n  var nProduct = nNumerator * xDenominator;\n\
    \  if (xProduct === nProduct) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "  let xNumerator = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n\
    \  let nNumerator = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n\
    \  let xNumeratorTimesnDenominator = xNumerator * nDenominator;\n  let xDenominatorTimesnNumerator\
    \ = xDenominator * nNumerator;\n  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  let xNumerator\
    \ = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n \
    \ return result % 1 === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xProduct = xNumerator\
    \ * nDenominator;\n    let nProduct = nNumerator * xDenominator;\n    if(xProduct\
    \ === nProduct){\n        return true;\n    }\n    return false;\n}\n", "  let\
    \ xArr = x.split('/');\n  let nArr = n.split('/');\n  let xNum = parseInt(xArr[0]);\n\
    \  let xDen = parseInt(xArr[1]);\n  let nNum = parseInt(nArr[0]);\n  let nDen\
    \ = parseInt(nArr[1]);\n  let xNumN = xNum * nDen;\n  let nNumX = nNum * xDen;\n\
    \  return xNumN === nNumX;\n}\n", "    var xArr = x.split('/');\n    var nArr\
    \ = n.split('/');\n    var xNum = parseInt(xArr[0]);\n    var xDen = parseInt(xArr[1]);\n\
    \    var nNum = parseInt(nArr[0]);\n    var nDen = parseInt(nArr[1]);\n    var\
    \ xNum2 = xNum * nDen;\n    var xDen2 = xDen * nNum;\n    if(xNum2 % xDen2 ===\
    \ 0){\n        return true;\n    }\n    return false;\n}\n", "  let xArr = x.split('/');\n\
    \  let nArr = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0]\
    \ * xArr[1];\n  return xNum === nNum;\n}\n", "    let xArr = x.split('/');\n \
    \   let nArr = n.split('/');\n    let xNum = parseInt(xArr[0]);\n    let xDen\
    \ = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n    let nDen = parseInt(nArr[1]);\n\
    \    let xNumN = xNum * nDen;\n    let xDenN = xDen * nNum;\n    if (xNumN % xDenN\
    \ === 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum\
    \ = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n\
    \    let nDen = parseInt(nArr[1]);\n    let xN = xNum * nDen;\n    let nX = nNum\
    \ * xDen;\n    if (xN % nX === 0) {\n        return true;\n    } else {\n    \
    \    return false;\n    }\n}\n", "    let xNum = x.split('/')[0]\n    let xDen\
    \ = x.split('/')[1]\n    let nNum = n.split('/')[0]\n    let nDen = n.split('/')[1]\n\
    \    let xNumDen = xNum * nDen\n    let nNumDen = nNum * xDen\n    if(xNumDen\
    \ % nNumDen === 0){\n        return true\n    } else {\n        return false\n\
    \    }\n}", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n  let xNum\
    \ = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n  return xNum === nNum;\n\
    }\n", "    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n\
    \    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let xMult = xNum * nDen;\n    let nMult = nNum * xDen;\n    if (xMult ===\
    \ nMult) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum\
    \ = xArr[0] * nArr[1];\n    let nNum = nArr[0] * xArr[1];\n    return xNum ===\
    \ nNum;\n}\n", "    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n\
    \    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    let result = (xNum * nDen) * (nNum * xDen);\n    return result % 1 === 0;\n\
    }\n", "  //your code here\n  var xArr = x.split('/');\n  var nArr = n.split('/');\n\
    \  var xNum = xArr[0] * nArr[1];\n  var nNum = nArr[0] * xArr[1];\n  if (xNum\
    \ === nNum) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", " \
    \ let xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n \
    \ return result % 1 === 0;\n}\n", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n\
    \  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n  if (xNum\
    \ % nNum === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n",
  "  var xArr = x.split('/');\n  var nArr = n.split('/');\n  var xNum = xArr[0] *\
    \ nArr[1];\n  var nNum = nArr[0] * xArr[1];\n  if (xNum % nNum === 0) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "  let xNum = x.split('/')[0];\n\
    \  let xDen = x.split('/')[1];\n  let nNum = n.split('/')[0];\n  let nDen = n.split('/')[1];\n\
    \  let xNumN = xNum * nDen;\n  let xDenN = xDen * nNum;\n  if (xNumN % xDenN ===\
    \ 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  let xNumerator\
    \ = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let product = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n\
    \  return product % 1 === 0;\n}\n", "    let xArr = x.split('/');\n    let nArr\
    \ = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum = nArr[0] *\
    \ xArr[1];\n    return xNum % nNum === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }", "  var xNumerator = x.split('/')[0];\n  var xDenominator = x.split('/')[1];\n\
    \  var nNumerator = n.split('/')[0];\n  var nDenominator = n.split('/')[1];\n\
    \  var xNumeratorTimesNumerator = xNumerator * nNumerator;\n  var xDenominatorTimesDenominator\
    \ = xDenominator * nDenominator;\n  if(xNumeratorTimesNumerator % xDenominatorTimesDenominator\
    \ === 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let\
    \ xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let xMultiplied = xNumerator * nDenominator;\n    let nMultiplied = nNumerator\
    \ * xDenominator;\n    return xMultiplied === nMultiplied;\n}", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = xNumerator * nDenominator * nNumerator * xDenominator;\n   \
    \ return result % 1 === 0;\n}", "    let xArr = x.split('/');\n    let nArr =\
    \ n.split('/');\n    let xNumerator = xArr[0];\n    let xDenominator = xArr[1];\n\
    \    let nNumerator = nArr[0];\n    let nDenominator = nArr[1];\n    let xNumeratorInt\
    \ = parseInt(xNumerator);\n    let xDenominatorInt = parseInt(xDenominator);\n\
    \    let nNumeratorInt = parseInt(nNumerator);\n    let nDenominatorInt = parseInt(nDenominator);\n\
    \    let xNumeratorDenominator = xNumeratorInt / xDenominatorInt;\n    let nNumeratorDenominator\
    \ = nNumeratorInt / nDenominatorInt;\n    let xNumeratorDenominatorMultiplied\
    \ = xNumeratorDenominator * nNumeratorDenominator;\n    if(xNumeratorDenominatorMultiplied\
    \ % 1 === 0){\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let\
    \ xNum = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n    let nNum =\
    \ parseInt(nArr[0]);\n    let nDen = parseInt(nArr[1]);\n    let result = (xNum\
    \ * nDen) / (xDen * nNum);\n    return result % 1 === 0;\n}\n", "  let xNumerator\
    \ = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let xProduct = xNumerator * nDenominator;\n  let nProduct = nNumerator * xDenominator;\n\
    \  return xProduct === nProduct;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum\
    \ = xArr[0] * nArr[1];\n    let nNum = nArr[0] * xArr[1];\n    if (xNum === nNum)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}", " \
    \   let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "    var xNumerator = parseInt(x.split(\"\
    /\")[0]);\n    var xDenominator = parseInt(x.split(\"/\")[1]);\n    var nNumerator\
    \ = parseInt(n.split(\"/\")[0]);\n    var nDenominator = parseInt(n.split(\"/\"\
    )[1]);\n    var xMultiplied = xNumerator * nDenominator;\n    var nMultiplied\
    \ = nNumerator * xDenominator;\n    if (xMultiplied === nMultiplied) {\n     \
    \   return true;\n    } else {\n        return false;\n    }\n}\n", "    let xNumerator\
    \ = x.split('/')[0];\n    let xDenominator = x.split('/')[1];\n    let nNumerator\
    \ = n.split('/')[0];\n    let nDenominator = n.split('/')[1];\n    let result\
    \ = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n    if(result\
    \ % 1 === 0){\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xProduct = xNumerator\
    \ * nDenominator;\n    let nProduct = nNumerator * xDenominator;\n    if (xProduct\
    \ % nProduct === 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n  \
    \  let xNum = xArr[0];\n    let xDen = xArr[1];\n    let nNum = nArr[0];\n   \
    \ let nDen = nArr[1];\n    let xNumDen = xNum * nDen;\n    let nNumDen = nNum\
    \ * xDen;\n    return xNumDen % nNumDen === 0;\n}\n", "  var xArr = x.split('/');\n\
    \  var nArr = n.split('/');\n  var xNum = parseInt(xArr[0]);\n  var xDen = parseInt(xArr[1]);\n\
    \  var nNum = parseInt(nArr[0]);\n  var nDen = parseInt(nArr[1]);\n  var xNumNew\
    \ = xNum * nDen;\n  var xDenNew = xDen * nNum;\n  if(xNumNew % xDenNew === 0){\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n", "  var xArr = x.split('/');\n\
    \  var nArr = n.split('/');\n  var xNum = parseInt(xArr[0]);\n  var xDen = parseInt(xArr[1]);\n\
    \  var nNum = parseInt(nArr[0]);\n  var nDen = parseInt(nArr[1]);\n  var xNumDen\
    \ = xNum * nDen;\n  var nNumDen = nNum * xDen;\n  if(xNumDen % nNumDen === 0){\n\
    \    return true;\n  }\n  return false;\n}\n", "  let xArr = x.split('/');\n \
    \ let nArr = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0]\
    \ * xArr[1];\n  return xNum === nNum;\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n\
    \  let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let result = (xNumerator *\
    \ nDenominator) * (nNumerator * xDenominator);\n  return result % 1 === 0;\n}\n",
  "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    if(result % (xDenominator * nDenominator) === 0){\n        return true;\n\
    \    }\n    return false;\n}\n", "    let xNum = x.split('/')[0];\n    let xDen\
    \ = x.split('/')[1];\n    let nNum = n.split('/')[0];\n    let nDen = n.split('/')[1];\n\
    \    let xNumN = parseInt(xNum) * parseInt(nDen);\n    let nNumX = parseInt(nNum)\
    \ * parseInt(xDen);\n    return xNumN === nNumX;\n}\n", "    let xNumerator =\
    \ parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = xNumerator * nDenominator * nNumerator * xDenominator;\n   \
    \ return result % 1 === 0;\n}", "    let xArr = x.split('/');\n    let nArr =\
    \ n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum = nArr[0] * xArr[1];\n\
    \    return xNum === nNum;\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n\
    \  let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let product = (xNumerator\
    \ * nNumerator) / (xDenominator * nDenominator);\n  return Number.isInteger(product);\n\
    }\n", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n  let xNum = xArr[0]\
    \ * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n  return xNum === nNum;\n}\n",
  "    let xNumerator = x.split('/')[0];\n    let xDenominator = x.split('/')[1];\n\
    \    let nNumerator = n.split('/')[0];\n    let nDenominator = n.split('/')[1];\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0 ? true : false;\n}\n", "  var xNumerator = x.split('/')[0];\n\
    \  var xDenominator = x.split('/')[1];\n  var nNumerator = n.split('/')[0];\n\
    \  var nDenominator = n.split('/')[1];\n  var xProduct = xNumerator * nNumerator;\n\
    \  var nProduct = xDenominator * nDenominator;\n  if (xProduct % nProduct ===\
    \ 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  let xArr\
    \ = x.split('/');\n  let nArr = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n\
    \  let nNum = nArr[0] * xArr[1];\n  return xNum === nNum;\n}\n", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "  var xNum = parseInt(x.split('/')[0]);\n\
    \  var xDen = parseInt(x.split('/')[1]);\n  var nNum = parseInt(n.split('/')[0]);\n\
    \  var nDen = parseInt(n.split('/')[1]);\n  var xNumDen = xNum * nDen;\n  var\
    \ nNumDen = nNum * xDen;\n  if (xNumDen % nNumDen === 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "    let xNumerator = x.split('/')[0];\n\
    \    let xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n\
    \    let nDenominator = n.split('/')[1];\n    let xNum = xNumerator * nDenominator;\n\
    \    let nNum = nNumerator * xDenominator;\n    if(xNum % nNum === 0){\n     \
    \   return true;\n    }\n    return false;\n}\n", "  let xArr = x.split('/');\n\
    \  let nArr = n.split('/');\n  let xNum = parseInt(xArr[0]);\n  let xDen = parseInt(xArr[1]);\n\
    \  let nNum = parseInt(nArr[0]);\n  let nDen = parseInt(nArr[1]);\n  let xNumSimplified\
    \ = xNum * nDen;\n  let xDenSimplified = xDen * nNum;\n  if (xNumSimplified %\
    \ xDenSimplified === 0) {\n    return true;\n  } else {\n    return false;\n \
    \ }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let product = (xNumerator\
    \ * nNumerator) / (xDenominator * nDenominator);\n    return product % 1 === 0;\n\
    }\n", "    let xSplit = x.split('/');\n    let nSplit = n.split('/');\n    let\
    \ xNumerator = parseInt(xSplit[0]);\n    let xDenominator = parseInt(xSplit[1]);\n\
    \    let nNumerator = parseInt(nSplit[0]);\n    let nDenominator = parseInt(nSplit[1]);\n\
    \    let xMultiplied = xNumerator * nDenominator;\n    let nMultiplied = nNumerator\
    \ * xDenominator;\n    if (xMultiplied === nMultiplied) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum\
    \ = nArr[0] * xArr[1];\n    return xNum === nNum;\n}\n", "    let numX = x.split('/')[0];\n\
    \    let denX = x.split('/')[1];\n    let numN = n.split('/')[0];\n    let denN\
    \ = n.split('/')[1];\n    let num = numX * numN;\n    let den = denX * denN;\n\
    \    let gcd = function gcd(a,b){\n        return b ? gcd(b, a%b) : a;\n    };\n\
    \    let divisor = gcd(num, den);\n    num /= divisor;\n    den /= divisor;\n\
    \    return num % den === 0;\n}", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n\
    \  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n  if(xNum ===\
    \ nNum){\n    return true;\n  }\n  return false;\n}\n", "  let xArr = x.split('/');\n\
    \  let nArr = n.split('/');\n  let xNum = Number(xArr[0]);\n  let xDen = Number(xArr[1]);\n\
    \  let nNum = Number(nArr[0]);\n  let nDen = Number(nArr[1]);\n  let xMult = xNum\
    \ * nDen;\n  let nMult = nNum * xDen;\n  return xMult === nMult;\n}\n", "    let\
    \ xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "    let xArr = x.split('/');\n    let nArr\
    \ = n.split('/');\n    let xNumerator = parseInt(xArr[0]);\n    let xDenominator\
    \ = parseInt(xArr[1]);\n    let nNumerator = parseInt(nArr[0]);\n    let nDenominator\
    \ = parseInt(nArr[1]);\n    let result = (xNumerator * nDenominator) * (nNumerator\
    \ * xDenominator);\n    if(result % (xDenominator * nDenominator) === 0){\n  \
    \      return true;\n    }\n    return false;\n}\n", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum\
    \ = nArr[0] * xArr[1];\n    return xNum % nNum === 0;\n}\n", "  let xNumerator\
    \ = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let xProduct = xNumerator * nDenominator;\n  let nProduct = nNumerator * xDenominator;\n\
    \  return xProduct === nProduct;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xMultiplied = xNumerator\
    \ * nDenominator;\n    let nMultiplied = nNumerator * xDenominator;\n    return\
    \ xMultiplied === nMultiplied;\n}\n", "  let xArr = x.split('/');\n  let nArr\
    \ = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n\
    \  if(xNum === nNum){\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum\
    \ = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n\
    \    let nDen = parseInt(nArr[1]);\n    let xMult = xNum * nDen;\n    let nMult\
    \ = nNum * xDen;\n    if(xMult === nMult){\n        return true;\n    }\n    return\
    \ false;\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n\
    \    let xNum = xArr[0] * nArr[1];\n    let nNum = nArr[0] * xArr[1];\n    return\
    \ xNum === nNum;\n}", "  let xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator\
    \ = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let xProduct = xNumerator\
    \ * nDenominator;\n  let nProduct = nNumerator * xDenominator;\n  return xProduct\
    \ === nProduct;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let\
    \ xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }", "    var x_numerator = parseInt(x.split(\"/\")[0]);\n    var x_denominator\
    \ = parseInt(x.split(\"/\")[1]);\n    var n_numerator = parseInt(n.split(\"/\"\
    )[0]);\n    var n_denominator = parseInt(n.split(\"/\")[1]);\n    var result =\
    \ (x_numerator * n_numerator) / (x_denominator * n_denominator);\n    return result\
    \ % 1 === 0;\n}\n", "    let xNum = parseInt(x.split('/')[0]);\n    let xDen =\
    \ parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n    let\
    \ nDen = parseInt(n.split('/')[1]);\n    let xNumDen = xNum * nDen;\n    let nNumDen\
    \ = nNum * xDen;\n    return xNumDen === nNumDen;\n}\n", "  var xArr = x.split('/');\n\
    \  var nArr = n.split('/');\n  var xNum = parseInt(xArr[0]);\n  var xDen = parseInt(xArr[1]);\n\
    \  var nNum = parseInt(nArr[0]);\n  var nDen = parseInt(nArr[1]);\n  var xNumDen\
    \ = xNum * nDen;\n  var nNumDen = nNum * xDen;\n  if (xNumDen === nNumDen) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n", "  let xNumerator\
    \ = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n  let nNumerator\
    \ = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n  let xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n  let xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n  return xNumeratorTimesnDenominator === xDenominatorTimesnNumerator;\n\
    }\n", "    let xNumerator = x.split('/')[0];\n    let xDenominator = x.split('/')[1];\n\
    \    let nNumerator = n.split('/')[0];\n    let nDenominator = n.split('/')[1];\n\
    \    let xNumeratorTimesNDenominator = xNumerator * nDenominator;\n    let nNumeratorTimesXDenominator\
    \ = nNumerator * xDenominator;\n    if(xNumeratorTimesNDenominator % nNumeratorTimesXDenominator\
    \ === 0){\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "  let xNumerator = x.split('/')[0];\n  let xDenominator = x.split('/')[1];\n\
    \  let nNumerator = n.split('/')[0];\n  let nDenominator = n.split('/')[1];\n\
    \  let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n \
    \ return result % 1 === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = xNumerator\
    \ * nDenominator * nNumerator * xDenominator;\n    return result % 1 === 0;\n\
    }\n", "    let xNumerator = x.split('/')[0];\n    let xDenominator = x.split('/')[1];\n\
    \    let nNumerator = n.split('/')[0];\n    let nDenominator = n.split('/')[1];\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "    let xArr = x.split('/');\n    let nArr\
    \ = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum = nArr[0] *\
    \ xArr[1];\n    if(xNum === nNum){\n        return true;\n    }\n    return false;\n\
    }", "  var xNumerator = x.split('/')[0];\n  var xDenominator = x.split('/')[1];\n\
    \  var nNumerator = n.split('/')[0];\n  var nDenominator = n.split('/')[1];\n\
    \  var xNumeratorTimesnDenominator = xNumerator * nDenominator;\n  var xDenominatorTimesnNumerator\
    \ = xDenominator * nNumerator;\n  if(xNumeratorTimesnDenominator === xDenominatorTimesnNumerator){\n\
    \    return true;\n  }\n  return false;\n}\n", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum\
    \ = nArr[0] * xArr[1];\n    return xNum === nNum;\n}\n", "  let xNum = x.split('/')[0];\n\
    \  let xDen = x.split('/')[1];\n  let nNum = n.split('/')[0];\n  let nDen = n.split('/')[1];\n\
    \  let xNumN = xNum * nDen;\n  let nNumX = nNum * xDen;\n  return xNumN === nNumX;\n\
    }\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator =\
    \ parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum\
    \ = xArr[0] * nArr[1];\n    let nNum = nArr[0] * xArr[1];\n    return xNum % nNum\
    \ === 0;\n}\n", "    let xNum = x.split('/')[0];\n    let xDen = x.split('/')[1];\n\
    \    let nNum = n.split('/')[0];\n    let nDen = n.split('/')[1];\n    let xNumN\
    \ = xNum * nDen;\n    let nNumX = nNum * xDen;\n    if(xNumN === nNumX){\n   \
    \     return true;\n    }\n    return false;\n}\n", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum\
    \ = nArr[0] * xArr[1];\n    let xDen = xArr[1] * nArr[1];\n    return xNum ===\
    \ nNum && xNum % xDen === 0;\n}", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n\
    \  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n  return xNum\
    \ === nNum;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) / (xDenominator * nNumerator);\n    return result % 1 === 0;\n\
    }", "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "  let xNum = x.split('/')[0];\n  let xDen = x.split('/')[1];\n  let nNum\
    \ = n.split('/')[0];\n  let nDen = n.split('/')[1];\n  let xNumN = xNum * nDen;\n\
    \  let xDenN = xDen * nNum;\n  if (xNumN === xDenN) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "  var xNumerator = x.split('/')[0];\n  var\
    \ xDenominator = x.split('/')[1];\n  var nNumerator = n.split('/')[0];\n  var\
    \ nDenominator = n.split('/')[1];\n  var xNumeratorTimesDenominator = xNumerator\
    \ * nDenominator;\n  var nNumeratorTimesDenominator = nNumerator * xDenominator;\n\
    \  if (xNumeratorTimesDenominator === nNumeratorTimesDenominator) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\n", "  let xNum = x.split('/')[0];\n\
    \  let xDen = x.split('/')[1];\n  let nNum = n.split('/')[0];\n  let nDen = n.split('/')[1];\n\
    \  let xNumN = xNum * nDen;\n  let nNumX = nNum * xDen;\n  let xDenN = xDen *\
    \ nDen;\n  let nDenX = nDen * xDen;\n  if (xNumN === nNumX && xDenN === nDenX)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  let xNumerator\
    \ = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let product = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n\
    \  return product % 1 === 0;\n}\n", "  let xArr = x.split('/');\n  let nArr =\
    \ n.split('/');\n  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n\
    \  return xNum === nNum;\n}\n", "    let xNumerator = x.split('/')[0];\n    let\
    \ xDenominator = x.split('/')[1];\n    let nNumerator = n.split('/')[0];\n   \
    \ let nDenominator = n.split('/')[1];\n    let xNumeratorTimesNumerator = xNumerator\
    \ * nNumerator;\n    let xDenominatorTimesDenominator = xDenominator * nDenominator;\n\
    \    if (xNumeratorTimesNumerator % xDenominatorTimesDenominator === 0) {\n  \
    \      return true;\n    } else {\n        return false;\n    }\n}", "  let xNumerator\
    \ = parseInt(x.split('/')[0]);\n  let xDenominator = parseInt(x.split('/')[1]);\n\
    \  let nNumerator = parseInt(n.split('/')[0]);\n  let nDenominator = parseInt(n.split('/')[1]);\n\
    \  let product = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n\
    \  return product % 1 === 0;\n}\n", "    let xNum = parseInt(x.split('/')[0]);\n\
    \    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n\
    \    let nDen = parseInt(n.split('/')[1]);\n    let xMult = xNum * nDen;\n   \
    \ let nMult = nNum * xDen;\n    return xMult === nMult;\n}\n", "  let xArr = x.split('/');\n\
    \  let nArr = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0]\
    \ * xArr[1];\n  return xNum % nNum === 0;\n}\n", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum\
    \ = nArr[0] * xArr[1];\n    if (xNum % nNum === 0){\n        return true;\n  \
    \  } else {\n        return false;\n    }\n}", "  let xArr = x.split('/');\n \
    \ let nArr = n.split('/');\n  let xNum = parseInt(xArr[0]);\n  let xDen = parseInt(xArr[1]);\n\
    \  let nNum = parseInt(nArr[0]);\n  let nDen = parseInt(nArr[1]);\n  let result\
    \ = (xNum * nDen) / (xDen * nNum);\n  return result % 1 === 0;\n}\n", "  var xNumerator\
    \ = x.split('/')[0];\n  var xDenominator = x.split('/')[1];\n  var nNumerator\
    \ = n.split('/')[0];\n  var nDenominator = n.split('/')[1];\n  var xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n  var xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n  if(xNumeratorTimesnDenominator % xDenominatorTimesnNumerator\
    \ === 0){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "  var\
    \ xArr = x.split('/');\n  var nArr = n.split('/');\n  var xNum = xArr[0] * nArr[1];\n\
    \  var nNum = nArr[0] * xArr[1];\n  if (xNum % nNum === 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xProduct = xNumerator\
    \ * nDenominator;\n    let nProduct = nNumerator * xDenominator;\n    return xProduct\
    \ === nProduct;\n}\n", "    var xArr = x.split('/');\n    var nArr = n.split('/');\n\
    \    var xNum = parseInt(xArr[0]);\n    var xDen = parseInt(xArr[1]);\n    var\
    \ nNum = parseInt(nArr[0]);\n    var nDen = parseInt(nArr[1]);\n    var xNumN\
    \ = xNum * nDen;\n    var nNumX = nNum * xDen;\n    if(xNumN === nNumX){\n   \
    \     return true;\n    }\n    return false;\n}\n", "  var xNumerator = parseInt(x.split('/')[0]);\n\
    \  var xDenominator = parseInt(x.split('/')[1]);\n  var nNumerator = parseInt(n.split('/')[0]);\n\
    \  var nDenominator = parseInt(n.split('/')[1]);\n  var product = xNumerator *\
    \ nNumerator;\n  var productDenominator = xDenominator * nDenominator;\n  return\
    \ product % productDenominator === 0;\n}\n", "  let xNum = x.split('/')[0];\n\
    \  let xDen = x.split('/')[1];\n  let nNum = n.split('/')[0];\n  let nDen = n.split('/')[1];\n\
    \  let xNumN = xNum * nDen;\n  let nNumX = nNum * xDen;\n  if (xNumN === nNumX)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let xMultiplied = xNumerator * nDenominator;\n    let nMultiplied = nNumerator\
    \ * xDenominator;\n    if (xMultiplied === nMultiplied) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}", "  let xArr = x.split('/');\n\
    \  let nArr = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0]\
    \ * xArr[1];\n  return xNum === nNum;\n}\n", "    let xNum = x.split('/')[0];\n\
    \    let xDen = x.split('/')[1];\n    let nNum = n.split('/')[0];\n    let nDen\
    \ = n.split('/')[1];\n    let xNumN = xNum * nDen;\n    let nNumX = nNum * xDen;\n\
    \    if(xNumN === nNumX){\n        return true;\n    }\n    return false;\n}\n",
  "  let xArr = x.split('/');\n  let nArr = n.split('/');\n  let xNumerator = xArr[0];\n\
    \  let xDenominator = xArr[1];\n  let nNumerator = nArr[0];\n  let nDenominator\
    \ = nArr[1];\n  let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \  if(result % 1 === 0){\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n", "    let xNum = x.split('/')[0];\n    let xDen = x.split('/')[1];\n    let\
    \ nNum = n.split('/')[0];\n    let nDen = n.split('/')[1];\n    let xNumN = xNum\
    \ * nDen;\n    let nNumX = nNum * xDen;\n    let xDenN = xDen * nDen;\n    let\
    \ nDenX = nDen * xDen;\n    if(xNumN === nNumX && xDenN === nDenX){\n        return\
    \ true;\n    }\n    return false;\n}\n", "  let xArr = x.split('/');\n  let nArr\
    \ = n.split('/');\n  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n\
    \  return xNum === nNum;\n}\n", "  var xArr = x.split('/');\n  var nArr = n.split('/');\n\
    \  var xNum = xArr[0] * nArr[1];\n  var nNum = nArr[0] * xArr[1];\n  if(xNum ===\
    \ nNum){\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let\
    \ xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n\
    \    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    return (xNum * nDen) % (xDen * nNum) === 0;\n}\n", "    let xNum = x.split('/')[0];\n\
    \    let xDen = x.split('/')[1];\n    let nNum = n.split('/')[0];\n    let nDen\
    \ = n.split('/')[1];\n    let xNumN = xNum * nDen;\n    let nNumX = nNum * xDen;\n\
    \    if(xNumN === nNumX){\n        return true;\n    }\n    return false;\n}\n",
  "    let xNumerator = Number(x.split('/')[0]);\n    let xDenominator = Number(x.split('/')[1]);\n\
    \    let nNumerator = Number(n.split('/')[0]);\n    let nDenominator = Number(n.split('/')[1]);\n\
    \    let xProduct = xNumerator * nDenominator;\n    let nProduct = nNumerator\
    \ * xDenominator;\n    if (xProduct === nProduct) {\n        return true;\n  \
    \  } else {\n        return false;\n    }\n}", "    var xArr = x.split('/');\n\
    \    var nArr = n.split('/');\n    var xNum = parseInt(xArr[0]);\n    var xDen\
    \ = parseInt(xArr[1]);\n    var nNum = parseInt(nArr[0]);\n    var nDen = parseInt(nArr[1]);\n\
    \    var result = (xNum * nDen) * (nNum * xDen);\n    if (result % (xDen * nDen)\
    \ === 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n    let xNum\
    \ = parseInt(xArr[0]);\n    let xDen = parseInt(xArr[1]);\n    let nNum = parseInt(nArr[0]);\n\
    \    let nDen = parseInt(nArr[1]);\n    let xNumN = xNum * nDen;\n    let nNumX\
    \ = nNum * xDen;\n    if(xNumN === nNumX){\n        return true;\n    }\n    return\
    \ false;\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n  let xDenominator\
    \ = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let xNumeratorTimesnDenominator\
    \ = xNumerator * nDenominator;\n  let xDenominatorTimesnNumerator = xDenominator\
    \ * nNumerator;\n  if (xNumeratorTimesnDenominator === xDenominatorTimesnNumerator)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    let xNumerator\
    \ = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    if (result % (xDenominator * nDenominator) === 0) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNum = xArr[0] * nArr[1];\n    let nNum\
    \ = nArr[0] * xArr[1];\n    return xNum === nNum;\n}\n", "  let xNumerator = parseInt(x.split('/')[0]);\n\
    \  let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  let xProduct = xNumerator\
    \ * nDenominator;\n  let nProduct = nNumerator * xDenominator;\n  return xProduct\
    \ === nProduct;\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n\
    \    let xNum = xArr[0] * nArr[1];\n    let nNum = nArr[0] * xArr[1];\n    return\
    \ xNum % nNum === 0;\n}\n", "    let xArr = x.split('/');\n    let nArr = n.split('/');\n\
    \    let xNum = xArr[0] * nArr[1];\n    let nNum = nArr[0] * xArr[1];\n    return\
    \ xNum === nNum;\n}\n", "    var x_numerator = x.split(\"/\")[0];\n    var x_denominator\
    \ = x.split(\"/\")[1];\n    var n_numerator = n.split(\"/\")[0];\n    var n_denominator\
    \ = n.split(\"/\")[1];\n    var result = (x_numerator * n_numerator) / (x_denominator\
    \ * n_denominator);\n    if (result % 1 === 0) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n", "  var xNum = x.split('/')[0];\n\
    \  var xDen = x.split('/')[1];\n  var nNum = n.split('/')[0];\n  var nDen = n.split('/')[1];\n\
    \  var xNumN = xNum * nDen;\n  var nNumX = nNum * xDen;\n  if(xNumN === nNumX){\n\
    \    return true;\n  }\n  return false;\n}\n", "  let xNumerator = x.split('/')[0];\n\
    \  let xDenominator = x.split('/')[1];\n  let nNumerator = n.split('/')[0];\n\
    \  let nDenominator = n.split('/')[1];\n  let xNumeratorTimesnDenominator = xNumerator\
    \ * nDenominator;\n  let xDenominatorTimesnNumerator = xDenominator * nNumerator;\n\
    \  return xNumeratorTimesnDenominator % xDenominatorTimesnNumerator === 0;\n}\n",
  "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let result = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n\
    \    return result % 1 === 0;\n}\n", "    let xNumerator = parseInt(x.split('/')[0]);\n\
    \    let xDenominator = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let result = (xNumerator\
    \ * nDenominator) * (nNumerator * xDenominator);\n    return result % 1 === 0;\n\
    }\n", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n  let xNumerator\
    \ = xArr[0];\n  let xDenominator = xArr[1];\n  let nNumerator = nArr[0];\n  let\
    \ nDenominator = nArr[1];\n  let xNumeratorTimesNumerator = xNumerator * nNumerator;\n\
    \  let xDenominatorTimesDenominator = xDenominator * nDenominator;\n  if (xNumeratorTimesNumerator\
    \ % xDenominatorTimesDenominator === 0) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
