name: HumanEval_115_max_fill
language: javascript
prompt: "//You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n// and\
  \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
  \ the wells.\n// Output the number of times you need to lower the buckets.\n// Example\
  \ 1:\n// Input: \n// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n// bucket_capacity\
  \ : 1\n// Output: 6\n// Example 2:\n// Input: \n// grid : [[0,0,1,1], [0,0,0,0],\
  \ [1,1,1,1], [0,1,1,1]]\n// bucket_capacity : 2\n// Output: 5\n// Example 3:\n//\
  \ Input: \n// grid : [[0,0,0], [0,0,0]]\n// bucket_capacity : 5\n// Output: 0\n\
  // Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n\
  // * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity\
  \ <= 10\nfunction max_fill(grid, capacity){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
  \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
  \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
  \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
  \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
completions: ["    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] >\
    \ max_fill){\n                max_fill = grid[i][j];\n            }\n        }\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                fill++;\n         \
    \   }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ==\
    \ 1){\n                max_fill = Math.max(max_fill, j + 1);\n            }\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n              \
    \  fill++;\n            }\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                fill++;\n            }\n    \
    \    }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ==\
    \ 1){\n                max_fill += capacity;\n            }\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ > max_fill){\n                max_fill = grid[i][j];\n            }\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let row\
    \ of grid){\n        let fill = 0;\n        for(let well of row){\n          \
    \  if(well === 1){\n                fill++;\n            }\n            else if(fill\
    \ > 0){\n                max_fill = Math.max(max_fill, fill);\n              \
    \  fill = 0;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                max_fill = Math.max(max_fill,\
    \ j);\n            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n\
    \        for(let j = 0; j < row.length; j++){\n            if(row[j] > max_fill){\n\
    \                max_fill = row[j];\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                fill++;\n            }\n    \
    \    }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] > max){\n        \
    \        max = grid[i][j];\n            }\n        }\n    }\n    return max;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] > max_fill){\n \
    \               max_fill = grid[i][j];\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let row = grid[i];\n        let fill = 0;\n        for(let j = 0; j <\
    \ row.length; j++){\n            if(row[j] == 1){\n                fill++;\n \
    \           }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         max_fill = Math.max(max_fill, j + 1);\n            }\n        }\n  \
    \  }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i <\
    \ grid.length; i++){\n        let row = grid[i];\n        for(let j = 0; j < row.length;\
    \ j++){\n            if(row[j] === 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                fill++;\n            }\n    \
    \    }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         max_fill = Math.max(max_fill, j);\n            }\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i <\
    \ grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                max_fill += capacity;\n            }\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                max_fill = Math.max(max_fill, grid[i][j]);\n      \
    \      }\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let curr_fill = 0;\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n        \
    \        curr_fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ curr_fill);\n    }\n    return max_fill;\n}", "    let max = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] > max){\n                max = grid[i][j];\n      \
    \      }\n        }\n    }\n    return max;\n}", "    let max_fill = 0;\n    for(let\
    \ row of grid){\n        let fill = 0;\n        for(let i = 0; i < row.length;\
    \ i++){\n            if(row[i] === 1){\n                fill++;\n            }\
    \ else {\n                if(fill > max_fill){\n                    max_fill =\
    \ fill;\n                }\n                fill = 0;\n            }\n       \
    \ }\n        if(fill > max_fill){\n            max_fill = fill;\n        }\n \
    \   }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                fill++;\n            }\n    \
    \    }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let row of grid){\n        for(let cell of\
    \ row){\n            if(cell > max_fill){\n                max_fill = cell;\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "    var max_fill\
    \ = 0;\n    for(var i = 0; i < grid.length; i++){\n        var fill = 0;\n   \
    \     for(var j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                fill++;\n            }\n        }\n        if(fill > max_fill){\n\
    \            max_fill = fill;\n        }\n    }\n    return max_fill;\n}", " \
    \   //return the number of times you need to lower the buckets\n    //grid is\
    \ a 2d array\n    //capacity is an integer\n    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        if(fill > max_fill){\n        \
    \    max_fill = fill;\n        }\n    }\n    return max_fill * capacity;\n}\n",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ row of grid){\n        let fill = 0;\n        for(let well of row){\n      \
    \      if(well){\n                fill++;\n            }\n            else{\n\
    \                fill = 0;\n            }\n            if(fill > max_fill){\n\
    \                max_fill = fill;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] == 1){\n                fill++;\n            }\n     \
    \   }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let row of grid){\n        for(let well of row){\n\
    \            if(well > max_fill){\n                max_fill = well;\n        \
    \    }\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n \
    \   for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    var max_fill = 0;\n    for(var\
    \ i = 0; i < grid.length; i++){\n        var fill = 0;\n        for(var j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n              \
    \  fill++;\n            }\n        }\n        if(fill > max_fill){\n         \
    \   max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            fill += grid[i][j];\n\
    \        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] > max){\n        \
    \        max = grid[i][j];\n            }\n        }\n    }\n    return max;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                max_fill = Math.max(max_fill, capacity);\n            }\n   \
    \     }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                fill++;\n         \
    \   }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         fill += grid[i][j];\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] > max_fill){\n                max_fill = grid[i][j];\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill += 1;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n\
    \        for(let j = 0; j < row.length; j++){\n            let cell = row[j];\n\
    \            if(cell === 1){\n                max_fill += capacity;\n        \
    \    }\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n \
    \   for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                max_fill += capacity;\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] > max_fill){\n            \
    \    max_fill = grid[i][j];\n            }\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] > max_fill){\n \
    \               max_fill = grid[i][j];\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let row = grid[i];\n        for(let j = 0; j < row.length; j++){\n  \
    \          let cell = row[j];\n            if(cell == 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;\n}", " \
    \   var max_fill = 0;\n    for(var i = 0; i < grid.length; i++){\n        var\
    \ fill = 0;\n        for(var j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        if(fill >\
    \ max_fill){\n            max_fill = fill;\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                max_fill = Math.max(max_fill, j);\n            }\n        }\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let row = grid[i];\n        for(let j = 0; j <\
    \ row.length; j++){\n            if(row[j] > max_fill){\n                max_fill\
    \ = row[j];\n            }\n        }\n    }\n    return max_fill;\n}", "    let\
    \ max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n        \
    \        max_fill += capacity;\n            }\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let row of grid){\n        for(let cell of\
    \ row){\n            if(cell > max_fill){\n                max_fill = cell;\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] > max_fill){\n                max_fill = grid[i][j];\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "    var max_fill\
    \ = 0;\n    for(var i = 0; i < grid.length; i++){\n        var row = grid[i];\n\
    \        for(var j = 0; j < row.length; j++){\n            if(row[j] === 1){\n\
    \                max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let row = grid[i];\n        let fill = 0;\n        for(let j = 0; j <\
    \ row.length; j++){\n            if(row[j] === 1){\n                fill++;\n\
    \            }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                max_fill += capacity;\n            }\n        }\n \
    \   }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let row = grid[i];\n        let fill = 0;\n  \
    \      for(let j = 0; j < row.length; j++){\n            if(row[j] === 1){\n \
    \               fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                max_fill = Math.max(max_fill,\
    \ j);\n            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                max_fill\
    \ = Math.max(max_fill, j + 1);\n            }\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}\n",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] >\
    \ max){\n                max = grid[i][j];\n            }\n        }\n    }\n\
    \    return max;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row\
    \ = grid[i];\n        for(let j = 0; j < row.length; j++){\n            if(row[j]\
    \ === 1){\n                max_fill += capacity;\n            }\n        }\n \
    \   }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] == 1){\n                max_fill = Math.max(max_fill,\
    \ j + 1);\n            }\n        }\n    }\n    return max_fill;\n}", "    let\
    \ max_fill = 0;\n    for(let row of grid){\n        for(let well of row){\n  \
    \          if(well > max_fill){\n                max_fill = well;\n          \
    \  }\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n   \
    \ for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                max_fill = Math.max(max_fill,\
    \ capacity);\n            }\n        }\n    }\n    return max_fill;\n}", "   \
    \ let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          max_fill = Math.max(max_fill, capacity - grid[i][j]);\n           \
    \ }\n        }\n    }\n    return max_fill;\n}", "    let max = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] > max){\n                max = grid[i][j];\n      \
    \      }\n        }\n    }\n    return max;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] > max_fill){\n                max_fill = grid[i][j];\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill += 1;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let\
    \ fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] > max_fill){\n            \
    \    max_fill = grid[i][j];\n            }\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         max_fill = Math.max(max_fill, j);\n            }\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] > max_fill){\n \
    \               max_fill = grid[i][j];\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] == 1){\n                fill++;\n            }\n     \
    \   }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            fill += grid[i][j];\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                max_fill += capacity;\n  \
    \          }\n        }\n    }\n    return max_fill;\n}", "    let max_fill =\
    \ 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n     \
    \   for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] > max){\n                max = grid[i][j];\n      \
    \      }\n        }\n    }\n    return max;\n}", "    var max_fill = 0;\n    for(var\
    \ i = 0; i < grid.length; i++){\n        for(var j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                max_fill = Math.max(max_fill,\
    \ capacity);\n            }\n        }\n    }\n    return max_fill;\n}", "   \
    \ let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] == 1){\n                fill++;\n            }\n     \
    \   }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                max_fill\
    \ = Math.max(max_fill, capacity);\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] >\
    \ max_fill){\n                max_fill = grid[i][j];\n            }\n        }\n\
    \    }\n    return max_fill;\n}", "    var max_fill = 0;\n    for(var i = 0; i\
    \ < grid.length; i++){\n        var fill = 0;\n        for(var j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                fill++;\n         \
    \   }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ==\
    \ 1){\n                max_fill = Math.max(max_fill, j);\n            }\n    \
    \    }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j\
    \ < grid[i].length; j++){\n            if(grid[i][j] == 1){\n                fill++;\n\
    \            }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ > max_fill){\n                max_fill = grid[i][j];\n            }\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] == 1){\n                fill++;\n\
    \            }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n\
    \    return max_fill;\n}", "    var max_fill = 0;\n    for(var i = 0; i < grid.length;\
    \ i++){\n        for(var j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                max_fill += capacity;\n            }\n        }\n  \
    \  }\n    return max_fill;\n}", "    var max_fill = 0;\n    for(var i = 0; i <\
    \ grid.length; i++){\n        var fill = 0;\n        for(var j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                fill++;\n         \
    \   }\n        }\n        if(fill > max_fill){\n            max_fill = fill;\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                fill++;\n         \
    \   }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let row = grid[i];\n        for(let j = 0; j < row.length; j++){\n  \
    \          if(row[j] == 1){\n                max_fill += capacity;\n         \
    \   }\n        }\n    }\n    return max_fill;\n}", "    let max = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                max = Math.max(max, j);\n \
    \           }\n        }\n    }\n    return max;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    var max_fill = 0;\n    for(var\
    \ i = 0; i < grid.length; i++){\n        var fill = 0;\n        for(var j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n              \
    \  fill++;\n            }\n        }\n        if(fill > max_fill){\n         \
    \   max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let row of grid){\n        let fill = 0;\n        for(let well\
    \ of row){\n            if(well){\n                fill++;\n            }else{\n\
    \                max_fill = Math.max(max_fill, fill);\n                fill =\
    \ 0;\n            }\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return max_fill;\n}", "    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ > max){\n                max = grid[i][j];\n            }\n        }\n    }\n\
    \    return max;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    var max_fill = 0;\n    for(var i = 0; i < grid.length; i++){\n      \
    \  var fill = 0;\n        for(var j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] == 1){\n                fill++;\n            }\n        }\n\
    \        if(fill > max_fill){\n            max_fill = fill;\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n\
    \        let row_fill = 0;\n        for(let j = 0; j < row.length; j++){\n   \
    \         if(row[j] === 1){\n                row_fill++;\n            }\n    \
    \    }\n        max_fill = Math.max(max_fill, row_fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] > max_fill){\n            \
    \    max_fill = grid[i][j];\n            }\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let row = grid[i];\n        for(let j = 0; j < row.length; j++){\n        \
    \    if(row[j] === 1){\n                max_fill += capacity;\n            }\n\
    \        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                max_fill = Math.max(max_fill,\
    \ capacity - grid[i][j]);\n            }\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] > max){\n                max = grid[i][j];\n      \
    \      }\n        }\n    }\n    return max;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                fill++;\n         \
    \   }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                max_fill += capacity;\n            }\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                max_fill = Math.max(max_fill, j);\n            }\n        }\n\
    \    }\n    return max_fill;\n}\n", "    let max_fill = 0;\n    for(let i = 0;\
    \ i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n \
    \           if(grid[i][j] === 1){\n                max_fill += capacity;\n   \
    \         }\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] > max_fill){\n                max_fill = grid[i][j];\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let current_fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          current_fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ current_fill);\n    }\n    return max_fill;\n}", "    var max_fill = 0;\n  \
    \  for(var i = 0; i < grid.length; i++){\n        var fill = 0;\n        for(var\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         fill++;\n            }\n        }\n        if(fill > max_fill){\n  \
    \          max_fill = fill;\n        }\n    }\n    return max_fill;\n}", "   \
    \ let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    var max_fill\
    \ = 0;\n    for(var i = 0; i < grid.length; i++){\n        var row = grid[i];\n\
    \        for(var j = 0; j < row.length; j++){\n            if(row[j] == 1){\n\
    \                max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] >\
    \ max_fill){\n                max_fill = grid[i][j];\n            }\n        }\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] > max_fill){\n                max_fill = grid[i][j];\n\
    \            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                max_fill += capacity;\n     \
    \       }\n        }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                max_fill = Math.max(max_fill,\
    \ j);\n            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                max_fill\
    \ += capacity;\n            }\n        }\n    }\n    return max_fill;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] > max_fill){\n \
    \               max_fill = grid[i][j];\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                fill += 1;\n            }\n \
    \       }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                max_fill = Math.max(max_fill, j + 1);\n            }\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                fill++;\n\
    \            }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ > max_fill){\n                max_fill = grid[i][j];\n            }\n      \
    \  }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                max_fill = Math.max(max_fill,\
    \ j);\n            }\n        }\n    }\n    return max_fill;\n}", "    let max\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] > max){\n                max\
    \ = grid[i][j];\n            }\n        }\n    }\n    return max;\n}", "    let\
    \ max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] > max){\n             \
    \   max = grid[i][j];\n            }\n        }\n    }\n    return max;\n}", " \
    \   let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          max_fill = Math.max(max_fill, capacity);\n            }\n        }\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                fill++;\n        \
    \    }\n        }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                fill += 1;\n            }\n \
    \       }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         max_fill = Math.max(max_fill, j);\n            }\n        }\n    }\n\
    \    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                fill++;\n            }\n \
    \       }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                max_fill += capacity;\n            }\n        }\n    }\n    return\
    \ max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ==\
    \ 1){\n                max_fill = Math.max(max_fill, j);\n            }\n    \
    \    }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                max_fill = Math.max(max_fill,\
    \ j);\n            }\n        }\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill = 0;\n   \
    \     for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                fill++;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}", "    let max = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] > max){\n                max = grid[i][j];\n      \
    \      }\n        }\n    }\n    return max;\n}", "    let max_fill = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   fill++;\n            }\n        }\n        max_fill = Math.max(max_fill, fill);\n\
    \    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                max_fill = Math.max(max_fill,\
    \ j + 1);\n            }\n        }\n    }\n    return max_fill;\n}", "    let\
    \ max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill =\
    \ 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] == 1){\n                max_fill\
    \ = Math.max(max_fill, j);\n            }\n        }\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    var max_fill_count = 0;\n    for(var i = 0; i < grid.length; i++){\n      \
    \  for(var j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                max_fill_count++;\n            }\n        }\n    }\n    return\
    \ max_fill_count * capacity;\n}", "    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ > max){\n                max = grid[i][j];\n            }\n        }\n    }\n\
    \    return max;\n}", "    let max_fill = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                fill++;\n            }\n  \
    \      }\n        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n\
    }", "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n      \
    \  let fill = 0;\n        for(let j = 0; j < grid[i].length; j++){\n         \
    \   if(grid[i][j] === 1){\n                fill++;\n            }\n        }\n\
    \        max_fill = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}",
  "    let max_fill = 0;\n    for(let i = 0; i < grid.length; i++){\n        let fill\
    \ = 0;\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                fill++;\n            }\n        }\n        max_fill\
    \ = Math.max(max_fill, fill);\n    }\n    return max_fill;\n}", "    let max_fill\
    \ = 0;\n    for(let row of grid){\n        for(let well of row){\n           \
    \ if(well > max_fill){\n                max_fill = well;\n            }\n    \
    \    }\n    }\n    return max_fill;\n}", "    let max_fill = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        let fill = 0;\n        for(let j = 0; j\
    \ < grid[i].length; j++){\n            if(grid[i][j] === 1){\n               \
    \ fill += 1;\n            }\n        }\n        max_fill = Math.max(max_fill,\
    \ fill);\n    }\n    return max_fill;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
