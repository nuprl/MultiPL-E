name: HumanEval_159_eat
language: javascript
prompt: "//You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n// but now you need to eat more carrots to complete the day's meals.\n\
  // you should return an array of [ total number of eaten carrots after your meals,\n\
  // the number of carrots left after your meals ]\n// if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n// Example:\n\
  // * eat(5, 6, 10) -> [11, 4]\n// * eat(4, 8, 9) -> [12, 1]\n// * eat(1, 10, 10)\
  \ -> [11, 0]\n// * eat(2, 11, 5) -> [7, 0]\n// Variables:\n// @number : integer\n\
  // the number of carrots that you have eaten.\n// @need : integer\n// the number\
  \ of carrots that you need to eat.\n// @remaining : integer\n// the number of remaining\
  \ carrots thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <=\
  \ need <= 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nfunction eat(number,\
  \ need, remaining){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = eat;\n  assert.deepEqual(candidate(5, 6, 10),[11, 4]);\n  assert.deepEqual(candidate(4,\
  \ 8, 9),[12, 1]);\n  assert.deepEqual(candidate(1, 10, 10),[11, 0]);\n  assert.deepEqual(candidate(2,\
  \ 11, 5),[7, 0]);\n  assert.deepEqual(candidate(4, 5, 7),[9, 2]);\n  assert.deepEqual(candidate(4,\
  \ 5, 1),[5, 0]);\n}\n\ntest();"
completions: ["  let total = number + need;\n  let left = remaining - need;\n  if\
    \ (left < 0) {\n    left = 0;\n  }\n  return [total, left];\n}\n", "    return\
    \ [number + need, remaining - need]\n}\n", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [total, left];\n  }\n}\n", "  let total = number + need;\n  let\
    \ left = remaining - need;\n  if (total <= remaining) {\n    return [total, left];\n\
    \  } else {\n    return [total - (total - remaining), 0];\n  }\n}\n", "  return\
    \ [number + need > remaining ? remaining : number + need, number + need > remaining\
    \ ? 0 : remaining - (number + need)];\n}\n", "  let total = number + need;\n \
    \ let left = remaining - need;\n  if (total > remaining) {\n    return [total,\
    \ 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  if(number + need >\
    \ remaining){\n    return [remaining, 0];\n  }\n  return [number + need, remaining\
    \ - (number + need)];\n}\n", "  let total = number + need;\n  let left = remaining\
    \ - need;\n  if (total > remaining) {\n    return [remaining, 0];\n  } else {\n\
    \    return [total, left];\n  }\n}\n", "  if (number + need <= remaining) {\n\
    \    return [number + need, remaining - (number + need)];\n  } else {\n    return\
    \ [remaining + number, 0];\n  }\n}\n", "  let total = number + remaining;\n  let\
    \ left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n\
    \    return [total, left];\n  }\n}\n", "  let total = number + need;\n  let left\
    \ = remaining - need;\n  if (total > remaining) {\n    return [remaining, 0];\n\
    \  } else {\n    return [total, left];\n  }\n}\n", "  let total = number + need;\n\
    \  if (total <= remaining) {\n    return [total, remaining - total];\n  } else\
    \ {\n    return [remaining + number, 0];\n  }\n}\n", "  let total = number + need;\n\
    \  let left = remaining - need;\n  if (left < 0) {\n    return [total, 0];\n \
    \ } else {\n    return [total, left];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + need;\n  if (total > remaining)\
    \ {\n    return [remaining, 0];\n  } else {\n    return [total, remaining - total];\n\
    \  }\n}\n", "  let total = number + need;\n  let left = remaining - need;\n  if\
    \ (total > remaining) {\n    return [remaining, 0];\n  } else {\n    return [total,\
    \ left];\n  }\n}\n", "  let total = number + need;\n  if (total > remaining) {\n\
    \    return [remaining, 0];\n  } else {\n    return [total, remaining - total];\n\
    \  }\n}", "  let total = number + need;\n  let left = remaining - need;\n  if\
    \ (total > remaining) {\n    return [remaining, 0];\n  } else {\n    return [total,\
    \ left];\n  }\n}\n", "  let total = number + need;\n  let left = remaining - total;\n\
    \  if (left < 0) {\n    return [total, 0];\n  } else {\n    return [total, left];\n\
    \  }\n}\n", "  return [number + Math.min(need, remaining), Math.max(0, remaining\
    \ - need)];\n}", "  let eaten = number + need;\n  let left = remaining - need;\n\
    \  if (left < 0) {\n    left = 0;\n  }\n  return [eaten, left];\n}\n", "  return\
    \ [number + need <= remaining ? number + need : remaining, number + need <= remaining\
    \ ? 0 : number + need - remaining];\n}\n", "  let eaten = number + need;\n  let\
    \ left = remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [eaten,\
    \ left];\n}\n", "    let eaten = number + need;\n    let left = remaining - need;\n\
    \    return [eaten, left];\n}\n", "    if (number + need <= remaining) {\n   \
    \     return [number + need, remaining - (number + need)]\n    } else {\n    \
    \    return [remaining + number, 0]\n    }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + remaining;\n  let left = total\
    \ - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [total, left];\n}",
  "  let total = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n\
    \    left = 0;\n  }\n  return [total, left];\n}\n", "  if (number + need <= remaining)\
    \ {\n    return [number + need, remaining - (number + need)];\n  } else {\n  \
    \  return [number + remaining, 0];\n  }\n}\n", "  let eaten = number + need;\n\
    \  let left = remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return\
    \ [eaten, left];\n}\n", "  if(number + need <= remaining){\n    return [number\
    \ + need, remaining - (number + need)]\n  } else {\n    return [number + remaining,\
    \ 0]\n  }\n}\n", "  if(remaining >= need){\n    return [number + need, remaining\
    \ - need];\n  }\n  else{\n    return [number + remaining, 0];\n  }\n}\n", "  let\
    \ eaten = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n\
    \    left = 0;\n  }\n  return [eaten, left];\n}\n", "  let total = number + need;\n\
    \  let left = remaining - need;\n  if (total > remaining) {\n    return [remaining,\
    \ 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  let left = total - need;\n  return left < 0 ? [total, 0] : [need,\
    \ left];\n}\n", "  let total = number + remaining;\n  let left = total - need;\n\
    \  return left < 0 ? [total, 0] : [need, left];\n}\n", "    if(number + need >\
    \ remaining){\n        return [remaining, 0];\n    }\n    return [number + need,\
    \ remaining - (number + need)];\n}\n", "  if(remaining < need){\n    return [number\
    \ + remaining, 0];\n  }\n  return [number + need, remaining - need];\n}\n", " \
    \ if (number + need <= remaining) {\n    return [number + need, remaining - (number\
    \ + need)];\n  } else {\n    return [remaining + number, 0];\n  }\n}\n", "  let\
    \ total = number + need;\n  if (total > remaining) {\n    return [remaining, 0];\n\
    \  } else {\n    return [total, remaining - total];\n  }\n}\n", "    let total\
    \ = number + remaining;\n    if (total >= need) {\n        return [need, total\
    \ - need];\n    } else {\n        return [total, 0];\n    }\n}\n", "  let total\
    \ = number + remaining;\n  if (total >= need) {\n    return [need, total - need];\n\
    \  } else {\n    return [total, 0];\n  }\n}", "  let total = number + need;\n\
    \  if (total > remaining) {\n    return [remaining, 0];\n  } else {\n    return\
    \ [total, remaining - total];\n  }\n}\n", "    let total = number + remaining;\n\
    \    let left = total - need;\n    if (left < 0) {\n        return [total, 0];\n\
    \    } else {\n        return [total, left];\n    }\n}\n", "  if(number + need\
    \ > remaining) {\n    return [remaining, 0];\n  }\n  return [number + need, remaining\
    \ - (number + need)];\n}\n", "  if(number + need <= remaining){\n    return [number\
    \ + need, remaining - (number + need)]\n  }\n  else{\n    return [remaining +\
    \ number, 0]\n  }\n}\n", "  let total = number + remaining;\n  if (total >= need)\
    \ {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n  }\n\
    }\n", "    let eaten = number + need;\n    if (eaten > remaining) {\n        return\
    \ [remaining, 0];\n    } else {\n        return [eaten, remaining - eaten];\n\
    \    }\n}\n", "  return [number + need <= remaining ? number + need : remaining,\
    \ number + need <= remaining ? 0 : number + need - remaining];\n}\n", "  let total\
    \ = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n    return\
    \ [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  let total\
    \ = number + need;\n  if (total > remaining) {\n    return [remaining, 0];\n \
    \ } else {\n    return [total, remaining - total];\n  }\n}\n", "  return [number\
    \ + Math.min(need, remaining), Math.max(0, remaining - need)];\n}\n", "  let total\
    \ = number + remaining;\n  if (total >= need) {\n    return [need, total - need];\n\
    \  } else {\n    return [total, 0];\n  }\n}\n", "    let total = number + remaining;\n\
    \    if (total >= need) {\n        return [need, total - need];\n    } else {\n\
    \        return [total, 0];\n    }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  if(remaining >= need){\n    return [number + need,\
    \ remaining - need];\n  } else {\n    return [number + remaining, 0];\n  }\n}\n",
  "  let total = number + remaining;\n  let left = total - need;\n  if (left >= 0)\
    \ {\n    return [need, left];\n  } else {\n    return [total, 0];\n  }\n}\n",
  "  let total = number + need;\n  if (total > remaining) {\n    return [remaining,\
    \ 0];\n  } else {\n    return [total, remaining - total];\n  }\n}\n", "  let total\
    \ = number + remaining;\n  if (total >= need) {\n    return [need, total - need];\n\
    \  } else {\n    return [total, 0];\n  }\n}\n", "    if (remaining < need - number)\
    \ {\n        return [number + remaining, 0];\n    } else {\n        return [number\
    \ + need, remaining - need + number];\n    }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  if (number + need <= remaining) {\n    return [number\
    \ + need, remaining - (number + need)];\n  } else {\n    return [number + remaining,\
    \ 0];\n  }\n}\n", "  let eaten = number + need;\n  if (eaten > remaining) {\n\
    \    eaten = remaining;\n  }\n  return [eaten, remaining - eaten];\n}\n", "  let\
    \ total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  if (total >= need) {\n    return [need, total - need];\n  }\
    \ else {\n    return [total, 0];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + remaining;\n  if (total >= need)\
    \ {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n  }\n\
    }\n", "  let total = number + need;\n  let left = remaining - need;\n  if (total\
    \ > remaining) {\n    return [remaining, 0];\n  } else {\n    return [total, left];\n\
    \  }\n}", "  let total = number + need;\n  let left = remaining - need;\n  if\
    \ (left < 0) {\n    left = 0;\n  }\n  return [total, left];\n}\n", "  let total\
    \ = number + need;\n  let left = remaining - need;\n  if (total > remaining) {\n\
    \    total = remaining;\n    left = 0;\n  }\n  return [total, left];\n}", "  if\
    \ (number + remaining >= need) {\n    return [need, number + remaining - need];\n\
    \  } else {\n    return [number + remaining, 0];\n  }\n}\n", "  var total = number\
    \ + need;\n  if (total <= remaining) {\n    return [total, remaining - total];\n\
    \  } else {\n    return [total - remaining, 0];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  if (total >= need) {\n    return [need, total - need];\n  }\
    \ else {\n    return [total, 0];\n  }\n}\n", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [total, left];\n  }\n}\n", "  var total = number + need;\n  var\
    \ left = remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [total,\
    \ left];\n}\n", "  let total = number + need;\n  let left = remaining - need;\n\
    \  if (total > remaining) {\n    return [remaining, 0];\n  } else {\n    return\
    \ [total, left];\n  }\n}\n", "  if(number + need <= remaining){\n    return [number\
    \ + need, remaining - (number + need)]\n  } else {\n    return [number + remaining,\
    \ 0]\n  }\n}\n", "    if(number + need <= remaining){\n        return [number\
    \ + need, remaining - (number + need)]\n    } else {\n        return [number +\
    \ remaining, 0]\n    }\n}\n", "  let total = number + remaining;\n  if (total\
    \ >= need) {\n    return [need, total - need];\n  } else {\n    return [total,\
    \ 0];\n  }\n}\n", "  if (number + need <= remaining) {\n    return [number + need,\
    \ remaining - (number + need)];\n  } else {\n    return [number + remaining, 0];\n\
    \  }\n}\n", "  let total = number + need;\n  if (total > remaining) {\n    return\
    \ [remaining, 0];\n  } else {\n    return [total, remaining - total];\n  }\n}\n",
  "  let total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  let total = number\
    \ + need;\n  let left = remaining - need;\n  if (total > remaining) {\n    return\
    \ [remaining, 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  let total\
    \ = number + need;\n  if (total > remaining) {\n    return [remaining, 0];\n \
    \ } else {\n    return [total, remaining - total];\n  }\n}\n", "  let total =\
    \ number + remaining;\n  if (total >= need) {\n    return [need, total - need];\n\
    \  } else {\n    return [total, 0];\n  }\n}\n", "  if (remaining >= need) {\n\
    \    return [number + need, remaining - need];\n  } else {\n    return [number\
    \ + remaining, 0];\n  }\n}\n", "  let eaten = number + need;\n  let left = remaining\
    \ - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [eaten, left];\n}\n",
  "  let total = number + need;\n  if (total > remaining) {\n    return [remaining,\
    \ 0];\n  } else {\n    return [total, remaining - total];\n  }\n}\n", "  let total\
    \ = number + remaining;\n  if (total >= need) {\n    return [need, total - need];\n\
    \  } else {\n    return [total, 0];\n  }\n}", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [need, left];\n  }\n}\n", "  let total = number + need;\n  let\
    \ left = remaining - total;\n  if (left < 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [total, left];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + remaining;\n  if (total >= need)\
    \ {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n  }\n\
    }\n", "  if (number + need <= remaining) {\n    return [number + need, remaining\
    \ - (number + need)];\n  } else {\n    return [number + remaining, 0];\n  }\n\
    }\n", "  let total = number + need;\n  return total > remaining ? [remaining,\
    \ 0] : [total, remaining - total];\n}", "  let total = number + need;\n  let left\
    \ = remaining - total;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n\
    \    return [total, left];\n  }\n}\n", "  let total = number + remaining;\n  if\
    \ (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + remaining;\n  if (total > need)\
    \ {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n  }\n\
    }\n", "  let total = number + need;\n  let left = remaining - need;\n  if (total\
    \ > remaining) {\n    return [remaining, 0];\n  } else {\n    return [total, left];\n\
    \  }\n}\n", "    let total = number + need;\n    let left = remaining - need;\n\
    \    if (total > remaining) {\n        return [remaining, 0];\n    } else {\n\
    \        return [total, left];\n    }\n}\n", "  let total = number + need;\n \
    \ if (total > remaining) {\n    return [remaining, 0];\n  } else {\n    return\
    \ [total, remaining - total];\n  }\n}\n", "    let total = number + remaining;\n\
    \    let left = total - need;\n    if (left < 0) {\n        return [total, 0];\n\
    \    } else {\n        return [total, left];\n    }\n}\n", "  let total = number\
    \ + need;\n  if (total > remaining) {\n    return [remaining, 0];\n  } else {\n\
    \    return [total, remaining - total];\n  }\n}\n", "  let total = number + need;\n\
    \  let left = remaining - need;\n  if (total > remaining) {\n    return [remaining,\
    \ 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  let total = number\
    \ + need;\n  let left = remaining - total;\n  if (left < 0) {\n    return [total\
    \ + left, 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  return [number\
    \ + Math.min(need, remaining), remaining - Math.min(need, remaining)];\n}", " \
    \ let total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  let eaten = number\
    \ + need;\n  let left = remaining - need;\n  if (left < 0) {\n    left = 0;\n\
    \  }\n  return [eaten, left];\n}\n", "  if(number + remaining < need){\n    return\
    \ [number + remaining, 0];\n  }\n  return [need, number + remaining - need];\n\
    }", "  let total = number + remaining;\n  if (total >= need) {\n    return [need,\
    \ total - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "    if(remaining\
    \ >= need){\n        return [number + need, remaining - need];\n    }\n    return\
    \ [number + remaining, 0];\n}\n", "  let eaten = number + need;\n  let left =\
    \ remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [eaten, left];\n\
    }\n", "    let eaten = number + need;\n    let left = remaining - need;\n    if\
    \ (left < 0) {\n        left = 0;\n    }\n    return [eaten, left];\n}\n", " \
    \ let total = number + need;\n  let left = remaining - need;\n  if (total > remaining)\
    \ {\n    return [remaining, 0];\n  } else {\n    return [total, left];\n  }\n\
    }\n", "  let total = number + need;\n  let left = remaining - need;\n  if (left\
    \ < 0) {\n    return [total, 0];\n  } else {\n    return [total, left];\n  }\n\
    }\n", "  let total = number + need;\n  if (total > remaining) {\n    return [remaining,\
    \ 0];\n  } else {\n    return [total, remaining - total];\n  }\n}\n", "  if (number\
    \ + need <= remaining) {\n    return [number + need, remaining - (number + need)];\n\
    \  } else {\n    return [number + remaining, 0];\n  }\n}", "  let total = number\
    \ + need;\n  let left = remaining - need;\n  return [total, left];\n}\n", "  let\
    \ total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  if (total >= need) {\n    return [need, total - need];\n  }\
    \ else {\n    return [total, 0];\n  }\n}\n", "  let total = number + need;\n \
    \ let left = remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return\
    \ [total, left];\n}", "  let total = number + remaining;\n  if (total >= need)\
    \ {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n  }\n\
    }\n", "  let total = number + remaining;\n  let left = total - need;\n  return\
    \ left < 0 ? [total, 0] : [total, left];\n}\n", "    let total = number + remaining;\n\
    \    let left = total - need;\n    if (left < 0) {\n        return [total, 0];\n\
    \    } else {\n        return [need, left];\n    }\n}\n", "  if(number + need\
    \ <= remaining){\n    return [number + need, remaining - (number + need)]\n  }\
    \ else {\n    return [number + remaining, 0]\n  }\n}\n", "    let total = number\
    \ + need;\n    let left = remaining - need;\n    if (total > remaining) {\n  \
    \      return [remaining, 0];\n    } else {\n        return [total, left];\n \
    \   }\n}\n", "  let total = number + remaining;\n  if (total >= need) {\n    return\
    \ [need, total - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "    let\
    \ total = number + remaining;\n    let left = 0;\n    if (total >= need) {\n \
    \       left = total - need;\n    }\n    return [total, left];\n}\n", "  let total\
    \ = number + remaining;\n  if (total >= need) {\n    return [need, total - need];\n\
    \  } else {\n    return [total, 0];\n  }\n}\n", "  let total = number + need;\n\
    \  let left = remaining - total;\n  if (left < 0) {\n    return [total, 0];\n\
    \  } else {\n    return [total, left];\n  }\n}", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "    if(number + need <= remaining){\n        return\
    \ [number + need, remaining - (number + need)]\n    }else{\n        return [number\
    \ + remaining, 0]\n    }\n}\n", "  let total = number + need;\n  let left = remaining\
    \ - need;\n  if (total > remaining) {\n    return [remaining, 0];\n  } else {\n\
    \    return [total, left];\n  }\n}\n", "  if(remaining >= need){\n    return [number\
    \ + need, remaining - need];\n  } else {\n    return [number + remaining, 0];\n\
    \  }\n}\n", "  let eaten = number + need;\n  let left = remaining - need;\n  if\
    \ (left < 0) {\n    left = 0;\n  }\n  return [eaten, left];\n}", "  let total\
    \ = number + need;\n  let left = remaining - need;\n  if (total > remaining) {\n\
    \    return [remaining, 0];\n  } else {\n    return [total, left];\n  }\n}\n",
  "  if(number + need <= remaining){\n    return [number + need, remaining - (number\
    \ + need)]\n  } else {\n    return [number + remaining, 0]\n  }\n}\n", "  let\
    \ total = number + remaining;\n  let left = total - need;\n  if (left < 0) {\n\
    \    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n", " \
    \ let total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  let total = number\
    \ + need;\n  if (total > remaining) {\n    return [remaining, 0];\n  } else {\n\
    \    return [total, remaining - total];\n  }\n}", "  let total = number + need;\n\
    \  let left = remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return\
    \ [total, left];\n}", "  let total = number + remaining;\n  if (total >= need)\
    \ {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n  }\n\
    }\n", "  let total = number + need;\n  let left = remaining - need;\n  if (total\
    \ > remaining) {\n    total = remaining;\n    left = 0;\n  }\n  return [total,\
    \ left];\n}\n", "  if (number + need > remaining) {\n    return [remaining, 0];\n\
    \  }\n  return [number + need, remaining - (number + need)];\n}\n", "  let total\
    \ = number + need;\n  let left = remaining - need;\n  if (total > remaining) {\n\
    \    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n", " \
    \ if(number + need <= remaining){\n    return [number + need, remaining - (number\
    \ + need)]\n  } else {\n    return [number + remaining, 0]\n  }\n}\n", "  if (number\
    \ + remaining >= need) {\n    return [need, number + remaining - need];\n  } else\
    \ {\n    return [number + remaining, 0];\n  }\n}\n", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left < 0) {\n    return [total, 0];\n  } else\
    \ {\n    return [total, left];\n  }\n}\n", "  let total = number + need;\n  let\
    \ left = remaining - need;\n  if (total > remaining) {\n    return [remaining,\
    \ 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  let eaten = number\
    \ + need;\n  let left = remaining - need;\n  if (left < 0) {\n    left = 0;\n\
    \  }\n  return [eaten, left];\n}\n", "  let total = number + need;\n  let left\
    \ = remaining - need;\n  if (total > remaining) {\n    return [remaining, 0];\n\
    \  } else {\n    return [total, left];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}", "  let total = number + need;\n  let left = remaining\
    \ - total;\n  if (left < 0) {\n    return [total, 0];\n  } else {\n    return\
    \ [total, left];\n  }\n}\n", "  if (number + need > remaining) {\n    return [remaining,\
    \ 0];\n  } else {\n    return [number + need, remaining - (number + need)];\n\
    \  }\n}\n", "    if(need > remaining){\n        return [number + remaining, 0];\n\
    \    } else {\n        return [number + need, remaining - need];\n    }\n}\n",
  "  let total = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n\
    \    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n", " \
    \ let total = number + remaining;\n  if (total >= need) {\n    return [need, total\
    \ - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "    if(number + need\
    \ <= remaining){\n        return [number + need, remaining - (number + need)]\n\
    \    } else {\n        return [number + remaining, 0]\n    }\n}\n", "  let total\
    \ = number + remaining;\n  if (total >= need) {\n    return [need, total - need];\n\
    \  } else {\n    return [total, 0];\n  }\n}", "  let total = number + remaining;\n\
    \  let left = total - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [total,\
    \ left];\n}", "  let total = number + need;\n  let left = remaining - need;\n\
    \  if (total > remaining) {\n    return [remaining, 0];\n  } else {\n    return\
    \ [total, left];\n  }\n}", "  let total = number + remaining;\n  if (total >=\
    \ need) {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n\
    \  }\n}", "  let total = number + remaining;\n  if (total >= need) {\n    return\
    \ [need, total - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  let\
    \ total = number + need;\n  let left = remaining - need;\n  if (left < 0) {\n\
    \    return [total, 0];\n  } else {\n    return [total, left];\n  }\n}\n", " \
    \ if(number + need > remaining){\n    return [remaining, 0];\n  } else {\n   \
    \ return [number + need, remaining - (number + need)];\n  }\n}\n", "  let total\
    \ = number + need;\n  let left = remaining - total;\n  return left < 0 ? [total,\
    \ 0] : [total, left];\n}\n", "  let total = number + need;\n  let left = remaining\
    \ - need;\n  if (total > remaining) {\n    return [remaining, 0];\n  } else {\n\
    \    return [total, left];\n  }\n}\n", "  let eaten = number + need;\n  let left\
    \ = remaining - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [eaten,\
    \ left];\n}\n", "  if (number + need <= remaining) {\n    return [number + need,\
    \ remaining - (number + need)];\n  } else {\n    return [remaining + number, 0];\n\
    \  }\n}\n", "  let total = number + need;\n  if (total > remaining) {\n    return\
    \ [remaining, 0];\n  } else {\n    return [total, remaining - total];\n  }\n}\n",
  "  if(remaining >= need){\n    return [number + need, remaining - need];\n  }\n\
    \  else{\n    return [number + remaining, 0];\n  }\n}", "  let eaten = number\
    \ + need;\n  let left = remaining - need;\n  if (left < 0) {\n    left = 0;\n\
    \  }\n  return [eaten, left];\n}", "  if(number + need > remaining){\n    return\
    \ [remaining, 0];\n  } else {\n    return [number + need, remaining - (number\
    \ + need)];\n  }\n}\n", "  let total = number + need;\n  if (total > remaining)\
    \ {\n    return [remaining, 0];\n  } else {\n    return [total, remaining - total];\n\
    \  }\n}\n", "  if (number + need <= remaining) {\n    return [number + need, remaining\
    \ - (number + need)];\n  } else {\n    return [number + remaining, 0];\n  }\n\
    }\n", "  let total = number + remaining;\n  if (total >= need) {\n    return [need,\
    \ total - need];\n  } else {\n    return [total, 0];\n  }\n}\n", "  if (number\
    \ + need <= remaining) {\n    return [number + need, remaining - (number + need)];\n\
    \  } else {\n    return [number + remaining, 0];\n  }\n}\n", "  let total = number\
    \ + remaining;\n  if (total >= need) {\n    return [need, total - need];\n  }\
    \ else {\n    return [total, 0];\n  }\n}", "  let total = number + need;\n  let\
    \ left = remaining - need;\n  if (total > remaining) {\n    return [remaining,\
    \ 0];\n  } else {\n    return [total, left];\n  }\n}\n", "  if(number + need <=\
    \ remaining){\n    return [number + need, remaining - (number + need)]\n  } else\
    \ {\n    return [number + remaining, 0]\n  }\n}", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}\n", "  let total = number + need;\n  if (total > remaining)\
    \ {\n    return [remaining, 0];\n  } else {\n    return [total, remaining - total];\n\
    \  }\n}\n", "  if(number + need <= remaining){\n    return [number + need, remaining\
    \ - (number + need)]\n  } else {\n    return [number + remaining, 0]\n  }\n}\n",
  "  if (number + need <= remaining) {\n    return [number + need, remaining - (number\
    \ + need)];\n  } else {\n    return [number + remaining, 0];\n  }\n}\n", "  if(number\
    \ + need > remaining){\n    return [remaining, 0];\n  } else {\n    return [number\
    \ + need, remaining - (number + need)];\n  }\n}\n", "    let total = number +\
    \ remaining;\n    let left = total - need;\n    if (left < 0) {\n        return\
    \ [total, 0];\n    } else {\n        return [total, left];\n    }\n}\n", "  let\
    \ total = number + need;\n  if (total > remaining) {\n    return [remaining, 0];\n\
    \  } else {\n    return [total, remaining - total];\n  }\n}\n", "    if(remaining\
    \ >= need){\n        return [number + need, remaining - need];\n    }\n    else{\n\
    \        return [number + remaining, 0];\n    }\n}\n", "  let total = number +\
    \ remaining;\n  if (total >= need) {\n    return [need, total - need];\n  } else\
    \ {\n    return [total, 0];\n  }\n}\n", "  let total = number + need;\n  let left\
    \ = remaining - need;\n  if (total > remaining) {\n    return [remaining, 0];\n\
    \  } else {\n    return [total, left];\n  }\n}\n", "  let total = number + remaining;\n\
    \  if (total >= need) {\n    return [need, total - need];\n  } else {\n    return\
    \ [total, 0];\n  }\n}", "  let total = number + need;\n  let left = remaining\
    \ - need;\n  if (left < 0) {\n    left = 0;\n  }\n  return [total, left];\n}\n",
  "  let total = number + need;\n  if (total > remaining) {\n    return [remaining,\
    \ 0];\n  } else {\n    return [total, remaining - total];\n  }\n}\n", "  let total\
    \ = number + need;\n  if (total > remaining) {\n    return [remaining, 0];\n \
    \ } else {\n    return [total, remaining - total];\n  }\n}", "  let total = number\
    \ + need;\n  if (total > remaining) {\n    return [remaining, 0];\n  } else {\n\
    \    return [total, remaining - total];\n  }\n}\n", "  if(number + remaining <\
    \ need){\n    return [number + remaining, 0];\n  }\n  return [need, number + remaining\
    \ - need];\n}\n", "  let total = number + remaining;\n  let left = total - need;\n\
    \  if (left < 0) {\n    return [total, 0];\n  } else {\n    return [total, left];\n\
    \  }\n}\n", "    let total = number + remaining;\n    if (total >= need) {\n \
    \       return [need, total - need];\n    } else {\n        return [total, 0];\n\
    \    }\n}\n", "    var total = number + need;\n    if (total > remaining) {\n\
    \        return [remaining, 0];\n    } else {\n        return [total, remaining\
    \ - total];\n    }\n}", "  let total = number + remaining;\n  if (total >= need)\
    \ {\n    return [need, total - need];\n  } else {\n    return [total, 0];\n  }\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
