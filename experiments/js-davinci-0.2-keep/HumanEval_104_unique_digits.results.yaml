name: HumanEval_104_unique_digits
language: javascript
results:
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i];\n        var isUnique = true;\n        while(num > 0){\n           \
    \ var digit = num % 10;\n            if(digit % 2 == 0){\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let unique = [];\n    for(let i = 0; i < x.length; i++){\n        let current\
    \ = x[i].toString();\n        let isUnique = true;\n        for(let j = 0; j <\
    \ current.length; j++){\n            if(current[j] % 2 === 0){\n             \
    \   isUnique = false;\n            }\n        }\n        if(isUnique){\n     \
    \       unique.push(current);\n        }\n    }\n    return unique.sort();\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '135', '31' ]\n\nshould equal\n\n[ 31,\
    \ 135 ]\n    at test (/tmp/tmpw5j33p2i.js:34:10)\n    at Object.<anonymous> (/tmp/tmpw5j33p2i.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ '135', '31' ],\n  expected: [ 31, 135 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even_digits = [0, 2, 4, 6, 8];\n    let even_digits_string = even_digits.join('');\n\
    \    let result = [];\n    for (let i = 0; i < x.length; i++){\n        let str\
    \ = x[i].toString();\n        let is_even = false;\n        for (let j = 0; j\
    \ < str.length; j++){\n            if (even_digits_string.includes(str[j])){\n\
    \                is_even = true;\n                break;\n            }\n    \
    \    }\n        if (!is_even){\n            result.push(x[i]);\n        }\n  \
    \  }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let even\
    \ = false;\n        let num = x[i].toString().split('');\n        for(let j =\
    \ 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n              \
    \  even = true;\n            }\n        }\n        if(even === false){\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even_digits = [0, 2, 4, 6, 8];\n    let unique_digits = [];\n    for\
    \ (let i = 0; i < x.length; i++){\n        let is_unique = true;\n        let\
    \ num = x[i];\n        while (num > 0){\n            let digit = num % 10;\n \
    \           if (even_digits.includes(digit)){\n                is_unique = false;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if (is_unique){\n            unique_digits.push(x[i]);\n \
    \       }\n    }\n    return unique_digits.sort((a, b) => a - b);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var isEven\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                isEven = true;\n  \
    \          }\n        }\n        if(!isEven){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var even = false;\n        for (var j = 0; j < z.length; j++){\n\
    \            if (z[j] % 2 == 0){\n                even = true;\n            }\n\
    \        }\n        if (even == false){\n            y.push(x[i]);\n        }\n\
    \    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let even\
    \ = false;\n        let str = x[i].toString();\n        for(let j = 0; j < str.length;\
    \ j++){\n            if(str[j] % 2 === 0){\n                even = true;\n   \
    \         }\n        }\n        if(!even){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num\
    \ = x[i];\n        let isEven = false;\n        while(num > 0){\n            let\
    \ digit = num % 10;\n            if(digit % 2 === 0){\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n  \
    \      }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var temp = x[i].toString().split('');\n        for(var j =\
    \ 0; j < temp.length; j++){\n            if(temp[j] % 2 == 0){\n             \
    \   even = true;\n            }\n        }\n        if(even == false){\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString();\n\
    \        var count = 0;\n        for (var j = 0; j < z.length; j++){\n       \
    \     if (z[j] % 2 == 0){\n                count++;\n            }\n        }\n\
    \        if (count == 0){\n            y.push(x[i]);\n        }\n    }\n    return\
    \ y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString();\n\
    \        var even = false;\n        for (var j = 0; j < z.length; j++){\n    \
    \        if (z[j] % 2 == 0){\n                even = true;\n            }\n  \
    \      }\n        if (even == false){\n            y.push(x[i]);\n        }\n\
    \    }\n    y.sort(function(a, b){return a-b});\n    return y;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [2,4,6,8,0];\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var count = 0;\n        for(var\
    \ j = 0; j < str.length; j++){\n            if(even.includes(parseInt(str[j]))){\n\
    \                count++;\n            }\n        }\n        if(count == 0){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var count = 0;\n        for (var j = 0; j < z.length; j++){\n  \
    \          if (z[j] % 2 == 0){\n                count++;\n            }\n    \
    \    }\n        if (count == 0){\n            y.push(x[i]);\n        }\n    }\n\
    \    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even_digits = [];\n    var unique_digits = [];\n    for (var i = 0; i\
    \ < x.length; i++){\n        var num = x[i].toString();\n        for (var j =\
    \ 0; j < num.length; j++){\n            if (num[j] % 2 === 0){\n             \
    \   even_digits.push(x[i]);\n                break;\n            }\n        }\n\
    \    }\n    for (var k = 0; k < x.length; k++){\n        if (even_digits.indexOf(x[k])\
    \ === -1){\n            unique_digits.push(x[k]);\n        }\n    }\n    return\
    \ unique_digits.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        if(x[i] % 2 == 0){\n            even.push(x[i]);\n        }\n       \
    \ else{\n            odd.push(x[i]);\n        }\n    }\n    return odd;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpeck557tv.js:27:10)\n    at Object.<anonymous> (/tmp/tmpeck557tv.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var unique = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i].toString();\n        var even = false;\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            unique.push(x[i]);\n\
    \        }\n    }\n    return unique.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var flag = false;\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n           \
    \     flag = true;\n            }\n        }\n        if(flag == false){\n   \
    \         odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var newArr = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().includes(\"\
    2\") || x[i].toString().includes(\"4\") || x[i].toString().includes(\"6\") ||\
    \ x[i].toString().includes(\"8\") || x[i].toString().includes(\"0\")){\n     \
    \       continue;\n        }\n        else{\n            newArr.push(x[i]);\n\
    \        }\n    }\n    return newArr.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \tvar even = [];\n\tvar odd = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\t\
    var num = x[i].toString();\n\t\tvar even_count = 0;\n\t\tfor(var j = 0; j < num.length;\
    \ j++){\n\t\t\tif(num[j] % 2 == 0){\n\t\t\t\teven_count += 1;\n\t\t\t}\n\t\t}\n\
    \t\tif(even_count == 0){\n\t\t\todd.push(x[i]);\n\t\t}\n\t}\n\treturn odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even = [];\n    let odd = [];\n    for(let i = 0; i < x.length; i++){\n\
    \        let num = x[i];\n        let str = num.toString();\n        let check\
    \ = false;\n        for(let j = 0; j < str.length; j++){\n            if(str[j]\
    \ % 2 === 0){\n                check = true;\n            }\n        }\n     \
    \   if(check){\n            even.push(num);\n        }\n        else{\n      \
    \      odd.push(num);\n        }\n    }\n    return odd.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var temp\
    \ = x[i].toString().split('');\n        var flag = true;\n        for(var j =\
    \ 0; j < temp.length; j++){\n            if(temp[j] % 2 == 0){\n             \
    \   flag = false;\n                break;\n            }\n        }\n        if(flag){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(e){\n\
    \            return e % 2 !== 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){\n        return a -\
    \ b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even = [];\n    let odd = [];\n    for(let i = 0; i < x.length; i++){\n\
    \        let num = x[i].toString();\n        let count = 0;\n        for(let j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even = [];\n    let odd = [];\n    for(let i = 0; i < x.length; i++){\n\
    \        let str = x[i].toString();\n        let check = false;\n        for(let\
    \ j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n          \
    \      check = true;\n            }\n        }\n        if(check === false){\n\
    \            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let isEven\
    \ = false;\n        let number = x[i].toString();\n        for(let j = 0; j <\
    \ number.length; j++){\n            if(number[j] % 2 === 0){\n               \
    \ isEven = true;\n            }\n        }\n        if(!isEven){\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i];\n        var even = false;\n        while(num > 0){\n            var\
    \ digit = num % 10;\n            if(digit % 2 == 0){\n                even = true;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(!even){\n            result.push(x[i]);\n        }\n  \
    \  }\n    return result.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var count = 0;\n        for (var j = 0; j < z.length; j++){\n  \
    \          if (z[j] % 2 == 0){\n                count++;\n            }\n    \
    \    }\n        if (count == 0){\n            y.push(x[i]);\n        }\n    }\n\
    \    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        if(x[i] % 2 === 0){\n            even.push(x[i]);\n        }else{\n \
    \           odd.push(x[i]);\n        }\n    }\n    return odd;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpqad48_se.js:26:10)\n    at Object.<anonymous> (/tmp/tmpqad48_se.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var count = 0;\n        for (var j = 0; j < num.length; j++){\n     \
    \       if (num[j] % 2 == 0){\n                count++;\n            }\n     \
    \   }\n        if (count == 0){\n            y.push(x[i]);\n        }\n    }\n\
    \    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i];\n        var isUnique = true;\n        while(num > 0){\n           \
    \ var digit = num % 10;\n            if(digit % 2 == 0){\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num\
    \ = x[i];\n        let isEven = false;\n        while(num > 0){\n            if(num\
    \ % 2 === 0){\n                isEven = true;\n                break;\n      \
    \      }\n            num = Math.floor(num / 10);\n        }\n        if(!isEven){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var count =\
    \ 0;\n        var z = x[i].toString().split(\"\");\n        for (var j = 0; j\
    \ < z.length; j++){\n            if (z[j] % 2 == 0){\n                count++;\n\
    \            }\n        }\n        if (count == 0){\n            y.push(x[i]);\n\
    \        }\n    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var str = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < str.length; j++){\n            if(str[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        if (x[i].toString().split('').every(function(y){return\
    \ y % 2 !== 0})){\n            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a,b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var string\
    \ = x[i].toString();\n        var even = false;\n        for(var j = 0; j < string.length;\
    \ j++){\n            if(string[j] % 2 == 0){\n                even = true;\n \
    \           }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString().split('');\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                even.push(x[i]);\n\
    \                break;\n            }\n        }\n    }\n    for(var k = 0; k\
    \ < x.length; k++){\n        if(even.indexOf(x[k]) === -1){\n            odd.push(x[k]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a - b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i=0; i<x.length; i++){\n        let num = x[i].toString();\n\
    \        let count = 0;\n        for(let j=0; j<num.length; j++){\n          \
    \  if(num[j]%2==0){\n                count++;\n            }\n        }\n    \
    \    if(count==0){\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort(function(a,b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var arr = [];\n    for(var i = 0; i < x.length; i++){\n        var num =\
    \ x[i];\n        var str = num.toString();\n        var isEven = false;\n    \
    \    for(var j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n\
    \                isEven = true;\n            }\n        }\n        if(!isEven){\n\
    \            arr.push(num);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        if (x[i].toString().length\
    \ == 1){\n            y.push(x[i]);\n        }\n        else{\n            var\
    \ z = x[i].toString().split(\"\");\n            var count = 0;\n            for\
    \ (var j = 0; j < z.length; j++){\n                if (z[j] % 2 == 0){\n     \
    \               count++;\n                }\n            }\n            if (count\
    \ == 0){\n                y.push(x[i]);\n            }\n        }\n    }\n   \
    \ return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var count = 0;\n        for (var j = 0; j < z.length; j++){\n  \
    \          if (z[j] % 2 == 0){\n                count++;\n            }\n    \
    \    }\n        if (count == 0){\n            y.push(x[i]);\n        }\n    }\n\
    \    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    for(var i = 0; i < x.length; i++){\n        var num =\
    \ x[i].toString();\n        for(var j = 0; j < num.length; j++){\n           \
    \ if(num[j] % 2 == 0){\n                even.push(x[i]);\n                break;\n\
    \            }\n        }\n    }\n    return x.filter(function(val){\n       \
    \ return even.indexOf(val) == -1;\n    }).sort(function(a, b){\n        return\
    \ a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even = [];\n    let odd = [];\n    for(let i = 0; i < x.length; i++){\n\
    \        let num = x[i].toString().split('');\n        let isEven = false;\n \
    \       for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                isEven = true;\n            }\n        }\n        if(isEven){\n\
    \            even.push(x[i]);\n        }else{\n            odd.push(x[i]);\n \
    \       }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evenDigits = [];\n    var uniqueDigits = [];\n    for(var i = 0; i <\
    \ x.length; i++){\n        var num = x[i].toString();\n        var numArr = num.split(\"\
    \");\n        for(var j = 0; j < numArr.length; j++){\n            if(numArr[j]\
    \ % 2 === 0){\n                evenDigits.push(numArr[j]);\n            }\n  \
    \      }\n    }\n    for(var k = 0; k < x.length; k++){\n        var num = x[k].toString();\n\
    \        var numArr = num.split(\"\");\n        for(var l = 0; l < numArr.length;\
    \ l++){\n            if(evenDigits.indexOf(numArr[l]) === -1){\n             \
    \   uniqueDigits.push(x[k]);\n            }\n        }\n    }\n    return uniqueDigits;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 15, 33, 33, 1422, 1 ]\n\nshould equal\n\
    \n[ 1, 15, 33 ]\n    at test (/tmp/tmpbswreziz.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbswreziz.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 15,\
    \ 33, 33, 1422, 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var newArr = [];\n    for(var i = 0; i < x.length; i++){\n        var str\
    \ = x[i].toString();\n        var flag = true;\n        for(var j = 0; j < str.length;\
    \ j++){\n            if(str[j] % 2 === 0){\n                flag = false;\n  \
    \          }\n        }\n        if(flag){\n            newArr.push(x[i]);\n \
    \       }\n    }\n    return newArr.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var sorted = x.sort(function(a, b){return a-b});\n    var result = [];\n\
    \    for(var i = 0; i < sorted.length; i++){\n        var num = sorted[i].toString();\n\
    \        var flag = true;\n        for(var j = 0; j < num.length; j++){\n    \
    \        if(num[j] % 2 === 0){\n                flag = false;\n            }\n\
    \        }\n        if(flag){\n            result.push(sorted[i]);\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \tvar result = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tvar num = x[i].toString();\n\
    \t\tvar even = false;\n\t\tfor(var j = 0; j < num.length; j++){\n\t\t\tif(num[j]\
    \ % 2 == 0){\n\t\t\t\teven = true;\n\t\t\t}\n\t\t}\n\t\tif(even == false){\n\t\
    \t\tresult.push(x[i]);\n\t\t}\n\t}\n\treturn result.sort();\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 135, 31 ]\n\nshould equal\n\n[ 31, 135\
    \ ]\n    at test (/tmp/tmpvltnomrp.js:34:10)\n    at Object.<anonymous> (/tmp/tmpvltnomrp.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 135, 31 ],\n  expected: [ 31, 135 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var a = x[i].toString().split(\"\
    \");\n        var b = [];\n        for (var j = 0; j < a.length; j++){\n     \
    \       if (a[j] % 2 != 0){\n                b.push(a[j]);\n            }\n  \
    \      }\n        if (b.length == a.length){\n            y.push(x[i]);\n    \
    \    }\n    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        if (x[i].toString().split('').every(function(n){\n\
    \            return n % 2 !== 0;\n        })){\n            y.push(x[i]);\n  \
    \      }\n    }\n    return y.sort(function(a, b){\n        return a - b;\n  \
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let even\
    \ = false;\n        let num = x[i].toString().split('');\n        for(let j =\
    \ 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n              \
    \  even = true;\n            }\n        }\n        if(even === false){\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evens = [];\n    var odds = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        if(x[i] % 2 === 0){\n            evens.push(x[i]);\n        }\n     \
    \   else{\n            odds.push(x[i]);\n        }\n    }\n    return odds;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmp119mr43x.js:28:10)\n    at Object.<anonymous> (/tmp/tmp119mr43x.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString().split('');\n        var check = false;\n  \
    \      for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n\
    \                check = true;\n            }\n        }\n        if(check ==\
    \ false){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        if(x[i] % 2 === 0){\n            even.push(x[i]);\n        }\n      \
    \  else{\n            odd.push(x[i]);\n        }\n    }\n    return odd;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpiqh4tl1j.js:27:10)\n    at Object.<anonymous> (/tmp/tmpiqh4tl1j.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ === 1){\n            result.push(x[i]);\n        }\n        else{\n        \
    \    var flag = true;\n            for(var j = 0; j < x[i].toString().length;\
    \ j++){\n                if(x[i].toString()[j] % 2 === 0){\n                 \
    \   flag = false;\n                }\n            }\n            if(flag){\n \
    \               result.push(x[i]);\n            }\n        }\n    }\n    return\
    \ result.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \tvar result = [];\n\tfor(var i = 0; i < x.length; i++){\n\t\tvar even = false;\n\
    \t\tvar num = x[i].toString();\n\t\tfor(var j = 0; j < num.length; j++){\n\t\t\
    \tif(num[j] % 2 == 0){\n\t\t\t\teven = true;\n\t\t\t}\n\t\t}\n\t\tif(even == false){\n\
    \t\t\tresult.push(x[i]);\n\t\t}\n\t}\n\treturn result.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let temp\
    \ = x[i].toString().split('');\n        let flag = true;\n        for(let j =\
    \ 0; j < temp.length; j++){\n            if(temp[j] % 2 === 0){\n            \
    \    flag = false;\n                break;\n            }\n        }\n       \
    \ if(flag){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        if(x[i] % 2 === 0){\n            even.push(x[i]);\n        }\n      \
    \  else{\n            odd.push(x[i]);\n        }\n    }\n    return odd;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmp7epkr6fw.js:28:10)\n    at Object.<anonymous> (/tmp/tmp7epkr6fw.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var isUnique\
    \ = true;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                isUnique = false;\n\
    \            }\n        }\n        if(isUnique){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var res = [];\n    for(var i = 0; i < x.length; i++){\n        var num =\
    \ x[i];\n        var is_unique = true;\n        while(num > 0){\n            var\
    \ digit = num % 10;\n            if(digit % 2 == 0){\n                is_unique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(is_unique){\n            res.push(x[i]);\n   \
    \     }\n    }\n    return res.sort(function(a, b){return a - b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var str = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < str.length; j++){\n            if(str[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var arr = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(y){\n\
    \            return y % 2 != 0;\n        })){\n            arr.push(x[i]);\n \
    \       }\n    }\n    return arr.sort(function(a, b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    // your code here\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().length === 1){\n            unique.push(x[i]);\n\
    \        }\n        else{\n            var check = true;\n            for(var\
    \ j = 0; j < x[i].toString().length; j++){\n                if(x[i].toString()[j]\
    \ % 2 === 0){\n                    check = false;\n                }\n       \
    \     }\n            if(check){\n                unique.push(x[i]);\n        \
    \    }\n        }\n    }\n    return unique.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let current\
    \ = x[i];\n        let flag = true;\n        while(current > 0){\n           \
    \ let digit = current % 10;\n            if(digit % 2 == 0){\n               \
    \ flag = false;\n                break;\n            }\n            current =\
    \ Math.floor(current / 10);\n        }\n        if(flag){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var isUnique\
    \ = true;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                isUnique = false;\n\
    \            }\n        }\n        if(isUnique){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var newArr = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i].toString().split('');\n        var count = 0;\n        for(var j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 === 0){\n                count++;\n\
    \            }\n        }\n        if(count === 0){\n            newArr.push(x[i]);\n\
    \        }\n    }\n    return newArr.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let even\
    \ = false;\n        let num = x[i].toString().split('');\n        for(let j =\
    \ 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n              \
    \  even = true;\n            }\n        }\n        if(even === false){\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(item){\n\
    \            return item % 2 !== 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){\n        return a -\
    \ b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evenDigits = [];\n    var uniqueDigits = [];\n    for(var i = 0; i <\
    \ x.length; i++){\n        var num = x[i].toString();\n        for(var j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 === 0){\n                evenDigits.push(x[i]);\n\
    \                break;\n            }\n        }\n    }\n    for(var k = 0; k\
    \ < x.length; k++){\n        if(evenDigits.indexOf(x[k]) === -1){\n          \
    \  uniqueDigits.push(x[k]);\n        }\n    }\n    return uniqueDigits.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var flag = true;\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n           \
    \     flag = false;\n            }\n        }\n        if(flag){\n           \
    \ odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evenDigits = [];\n    var uniqueDigits = [];\n    for(var i = 0; i <\
    \ x.length; i++){\n        var currentNumber = x[i];\n        var currentNumberString\
    \ = currentNumber.toString();\n        var currentNumberArray = currentNumberString.split(\"\
    \");\n        for(var j = 0; j < currentNumberArray.length; j++){\n          \
    \  if(currentNumberArray[j] % 2 === 0){\n                evenDigits.push(currentNumber);\n\
    \            }\n        }\n    }\n    for(var k = 0; k < x.length; k++){\n   \
    \     if(evenDigits.indexOf(x[k]) === -1){\n            uniqueDigits.push(x[k]);\n\
    \        }\n    }\n    return uniqueDigits.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \tvar y = [];\n\tfor (var i = 0; i < x.length; i++) {\n\t\tvar z = x[i].toString();\n\
    \t\tvar a = z.split(\"\");\n\t\tvar b = false;\n\t\tfor (var j = 0; j < a.length;\
    \ j++) {\n\t\t\tif (a[j] % 2 == 0) {\n\t\t\t\tb = true;\n\t\t\t}\n\t\t}\n\t\t\
    if (b == false) {\n\t\t\ty.push(x[i]);\n\t\t}\n\t}\n\treturn y.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString();\n\
    \        var even = false;\n        for (var j = 0; j < z.length; j++){\n    \
    \        if (z[j] % 2 == 0){\n                even = true;\n            }\n  \
    \      }\n        if (even == false){\n            y.push(x[i]);\n        }\n\
    \    }\n    return y.sort();\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 135, 31 ]\n\nshould equal\n\n[ 31, 135\
    \ ]\n    at test (/tmp/tmphgpwsqle.js:34:10)\n    at Object.<anonymous> (/tmp/tmphgpwsqle.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 135, 31 ],\n  expected: [ 31, 135 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var arr = [];\n    for(var i = 0; i < x.length; i++){\n        var num =\
    \ x[i].toString();\n        var count = 0;\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                count++;\n        \
    \    }\n        }\n        if(count == 0){\n            arr.push(x[i]);\n    \
    \    }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var newArr = [];\n    for(var i = 0; i < x.length; i++){\n        var str\
    \ = x[i].toString();\n        var flag = true;\n        for(var j = 0; j < str.length;\
    \ j++){\n            if(str[j] % 2 === 0){\n                flag = false;\n  \
    \          }\n        }\n        if(flag){\n            newArr.push(x[i]);\n \
    \       }\n    }\n    return newArr.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even = [];\n    for(let i = 0; i < x.length; i++){\n        let num =\
    \ x[i].toString();\n        for(let j = 0; j < num.length; j++){\n           \
    \ if(num[j] % 2 === 0){\n                even.push(x[i]);\n                break;\n\
    \            }\n        }\n    }\n    return x.filter(function(x){\n        return\
    \ !even.includes(x);\n    }).sort(function(a, b){\n        return a - b;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let even\
    \ = false;\n        let num = x[i].toString().split('');\n        for(let j =\
    \ 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n              \
    \  even = true;\n            }\n        }\n        if(even === false){\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even = [];\n    let odd = [];\n    for(let i = 0; i < x.length; i++){\n\
    \        let num = x[i].toString().split('');\n        let count = 0;\n      \
    \  for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               count++;\n            }\n        }\n        if(count === 0){\n\
    \            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    // your code here\n    var arr = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var str = x[i].toString();\n        var flag = true;\n        for(var\
    \ j = 0; j < str.length; j++){\n            if(str[j] % 2 == 0){\n           \
    \     flag = false;\n                break;\n            }\n        }\n      \
    \  if(flag){\n            arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i];\n        var isUnique = true;\n        while(num > 0){\n           \
    \ var digit = num % 10;\n            if(digit % 2 == 0){\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(element){\n\
    \            return element % 2 !== 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){\n        return a -\
    \ b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even = [];\n    let odd = [];\n    for(let i = 0; i < x.length; i++){\n\
    \        let num = x[i].toString();\n        let count = 0;\n        for(let j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n            \
    \    count++;\n            }\n        }\n        if(count === 0){\n          \
    \  odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var check = false;\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n           \
    \     check = true;\n            }\n        }\n        if(check == false){\n \
    \           odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num\
    \ = x[i];\n        let isUnique = true;\n        while(num > 0){\n           \
    \ let digit = num % 10;\n            if(digit % 2 === 0){\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evenDigits = [];\n    var uniqueDigits = [];\n    for(var i = 0; i <\
    \ x.length; i++){\n        var number = x[i].toString();\n        for(var j =\
    \ 0; j < number.length; j++){\n            if(number[j] % 2 === 0){\n        \
    \        evenDigits.push(number);\n            }\n        }\n    }\n    for(var\
    \ k = 0; k < x.length; k++){\n        if(evenDigits.indexOf(x[k].toString()) ===\
    \ -1){\n            uniqueDigits.push(x[k]);\n        }\n    }\n    return uniqueDigits.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var arr = [];\n    for(var i = 0; i < x.length; i++){\n        var str =\
    \ x[i].toString();\n        var flag = true;\n        for(var j = 0; j < str.length;\
    \ j++){\n            if(str[j] % 2 == 0){\n                flag = false;\n   \
    \             break;\n            }\n        }\n        if(flag){\n          \
    \  arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a, b){return\
    \ a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even_digits = [2,4,6,8,0];\n    var unique_digits = [];\n    for (var\
    \ i = 0; i < x.length; i++){\n        var has_even = false;\n        var num =\
    \ x[i].toString();\n        for (var j = 0; j < num.length; j++){\n          \
    \  if (even_digits.includes(parseInt(num[j]))){\n                has_even = true;\n\
    \            }\n        }\n        if (!has_even){\n            unique_digits.push(x[i]);\n\
    \        }\n    }\n    return unique_digits.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evens = [];\n    var odds = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var even = false;\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n           \
    \     even = true;\n            }\n        }\n        if(even){\n            evens.push(x[i]);\n\
    \        }else{\n            odds.push(x[i]);\n        }\n    }\n    return odds;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmp2ve242ay.js:34:10)\n    at Object.<anonymous> (/tmp/tmp2ve242ay.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let even\
    \ = false;\n        let num = x[i].toString().split('');\n        for(let j =\
    \ 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n              \
    \  even = true;\n            }\n        }\n        if(even === false){\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) =>\
    \ a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var unique = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i].toString();\n        var even = false;\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            unique.push(x[i]);\n\
    \        }\n    }\n    return unique.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var flag = true;\n        for (var j = 0; j < z.length; j++){\n\
    \            if (z[j] % 2 == 0){\n                flag = false;\n            }\n\
    \        }\n        if (flag){\n            y.push(x[i]);\n        }\n    }\n\
    \    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i];\n        var isUnique = true;\n        while(num > 0){\n           \
    \ var digit = num % 10;\n            if(digit % 2 == 0){\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var even = false;\n        for (var j = 0; j < z.length; j++){\n\
    \            if (z[j] % 2 == 0){\n                even = true;\n            }\n\
    \        }\n        if (even == false){\n            y.push(x[i]);\n        }\n\
    \    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var isEven\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                isEven = true;\n  \
    \          }\n        }\n        if(!isEven){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var count = 0;\n        for (var j = 0; j < z.length; j++){\n  \
    \          if (z[j] % 2 == 0){\n                count++;\n            }\n    \
    \    }\n        if (count == 0){\n            y.push(x[i]);\n        }\n    }\n\
    \    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evens = [];\n    var odds = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString().split('');\n        var count = 0;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              count++;\n            }\n        }\n        if(count == 0){\n \
    \           odds.push(x[i]);\n        }\n    }\n    return odds.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var isEven\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                isEven = true;\n  \
    \          }\n        }\n        if(!isEven){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num\
    \ = x[i];\n        let isUnique = true;\n        while(num > 0){\n           \
    \ let digit = num % 10;\n            if(digit % 2 === 0){\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let arr = [];\n    for(let i = 0; i < x.length; i++){\n        let num =\
    \ x[i];\n        let str = num.toString();\n        let flag = true;\n       \
    \ for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n  \
    \              flag = false;\n                break;\n            }\n        }\n\
    \        if(flag){\n            arr.push(num);\n        }\n    }\n    return arr.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var arr = [];\n    for(var i = 0; i < x.length; i++){\n        var num =\
    \ x[i].toString().split('');\n        var flag = true;\n        for(var j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 == 0){\n                flag\
    \ = false;\n            }\n        }\n        if(flag){\n            arr.push(x[i]);\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i];\n        var isUnique = true;\n        while(num > 0){\n           \
    \ var digit = num % 10;\n            if(digit % 2 == 0){\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().length\
    \ == 1){\n            result.push(x[i]);\n        }\n        else{\n         \
    \   var count = 0;\n            for(var j = 0; j < x[i].toString().length; j++){\n\
    \                if(x[i].toString()[j] % 2 == 0){\n                    count++;\n\
    \                }\n            }\n            if(count == 0){\n             \
    \   result.push(x[i]);\n            }\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let even\
    \ = false;\n        let num = x[i].toString().split('');\n        for(let j =\
    \ 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n              \
    \  even = true;\n            }\n        }\n        if(even === false){\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var newArr = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i].toString();\n        var flag = false;\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                flag = true;\n   \
    \         }\n        }\n        if(flag === false){\n            newArr.push(x[i]);\n\
    \        }\n    }\n    return newArr.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even_digits = [2,4,6,8,0];\n    var unique_digits = [];\n    for (var\
    \ i = 0; i < x.length; i++){\n        var has_even = false;\n        var num =\
    \ x[i].toString();\n        for (var j = 0; j < num.length; j++){\n          \
    \  if (even_digits.includes(parseInt(num[j]))){\n                has_even = true;\n\
    \            }\n        }\n        if (!has_even){\n            unique_digits.push(x[i]);\n\
    \        }\n    }\n    return unique_digits.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let evenDigits = [2,4,6,8,0];\n    let uniqueDigits = [];\n    for(let i\
    \ = 0; i < x.length; i++){\n        let unique = true;\n        let num = x[i].toString().split('');\n\
    \        for(let j = 0; j < num.length; j++){\n            if(evenDigits.includes(parseInt(num[j]))){\n\
    \                unique = false;\n            }\n        }\n        if(unique){\n\
    \            uniqueDigits.push(x[i]);\n        }\n    }\n    return uniqueDigits.sort(function(a,b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evenDigits = [];\n    var uniqueDigits = [];\n    for(var i = 0; i <\
    \ x.length; i++){\n        var num = x[i].toString();\n        for(var j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 === 0){\n                evenDigits.push(num);\n\
    \            }\n        }\n    }\n    for(var k = 0; k < x.length; k++){\n   \
    \     if(evenDigits.indexOf(x[k].toString()) === -1){\n            uniqueDigits.push(x[k]);\n\
    \        }\n    }\n    return uniqueDigits.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var newArr = [];\n    for(var i = 0; i < x.length; i++){\n        var str\
    \ = x[i].toString();\n        var count = 0;\n        for(var j = 0; j < str.length;\
    \ j++){\n            if(str[j] % 2 == 0){\n                count++;\n        \
    \    }\n        }\n        if(count == 0){\n            newArr.push(x[i]);\n \
    \       }\n    }\n    return newArr.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var arr = [];\n    for(var i = 0; i < x.length; i++){\n        var str =\
    \ x[i].toString();\n        var flag = true;\n        for(var j = 0; j < str.length;\
    \ j++){\n            if(str[j] % 2 == 0){\n                flag = false;\n   \
    \             break;\n            }\n        }\n        if(flag){\n          \
    \  arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a, b){return\
    \ a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var isEven\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                isEven = true;\n  \
    \          }\n        }\n        if(!isEven){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var flag = true;\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n           \
    \     flag = false;\n            }\n        }\n        if(flag){\n           \
    \ odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evens = [];\n    var odds = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var str = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < str.length; j++){\n            if(str[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odds.push(x[i]);\n\
    \        }\n    }\n    return odds.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even_digits = [];\n    var unique_digits = [];\n    for (var i = 0; i\
    \ < x.length; i++){\n        var num = x[i].toString();\n        for (var j =\
    \ 0; j < num.length; j++){\n            if (num[j] % 2 === 0){\n             \
    \   even_digits.push(x[i]);\n                break;\n            }\n        }\n\
    \    }\n    for (var i = 0; i < x.length; i++){\n        if (even_digits.indexOf(x[i])\
    \ === -1){\n            unique_digits.push(x[i]);\n        }\n    }\n    return\
    \ unique_digits.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(num);\n\
    \        }\n    }\n    for(var i = 0; i < odd.length; i++){\n        even.push(parseInt(odd[i]));\n\
    \    }\n    return even.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var temp\
    \ = x[i].toString().split('');\n        var flag = true;\n        for(var j =\
    \ 0; j < temp.length; j++){\n            if(temp[j] % 2 == 0){\n             \
    \   flag = false;\n                break;\n            }\n        }\n        if(flag){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let unique = [];\n    for(let i = 0; i < x.length; i++){\n        let num\
    \ = x[i];\n        let even = false;\n        while(num > 0){\n            let\
    \ digit = num % 10;\n            if(digit % 2 == 0){\n                even = true;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(!even){\n            unique.push(x[i]);\n        }\n  \
    \  }\n    return unique.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let temp\
    \ = x[i].toString().split('');\n        let even = false;\n        for(let j =\
    \ 0; j < temp.length; j++){\n            if(temp[j] % 2 === 0){\n            \
    \    even = true;\n            }\n        }\n        if(!even){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a,b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        if(x[i] % 2 == 0){\n            even.push(x[i]);\n        }\n       \
    \ else{\n            odd.push(x[i]);\n        }\n    }\n    return odd;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmp5z7ufj67.js:27:10)\n    at Object.<anonymous> (/tmp/tmp5z7ufj67.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let isUnique\
    \ = true;\n        let num = x[i].toString();\n        for(let j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                isUnique = false;\n\
    \            }\n        }\n        if(isUnique){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \  var result = [];\n  for (var i = 0; i < x.length; i++) {\n    var even = false;\n\
    \    var num = x[i].toString();\n    for (var j = 0; j < num.length; j++) {\n\
    \      if (num[j] % 2 === 0) {\n        even = true;\n      }\n    }\n    if (even\
    \ === false) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var isEven\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                isEven = true;\n  \
    \          }\n        }\n        if(!isEven){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var count\
    \ = 0;\n        var temp = x[i].toString();\n        for(var j = 0; j < temp.length;\
    \ j++){\n            if(temp[j] % 2 == 0){\n                count++;\n       \
    \     }\n        }\n        if(count == 0){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even = [];\n    let odd = [];\n    for(let i = 0; i < x.length; i++){\n\
    \        let num = x[i].toString();\n        let count = 0;\n        for(let j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n            \
    \    count++;\n            }\n        }\n        if(count === 0){\n          \
    \  odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var str = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < str.length; j++){\n            if(str[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \  var y = [];\n  for (var i = 0; i < x.length; i++) {\n    var num = x[i];\n\
    \    var even = false;\n    while (num > 0) {\n      var digit = num % 10;\n \
    \     if (digit % 2 == 0) {\n        even = true;\n        break;\n      }\n \
    \     num = Math.floor(num / 10);\n    }\n    if (!even) {\n      y.push(x[i]);\n\
    \    }\n  }\n  return y.sort(function(a, b){return a-b});\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 135, 31 ]\n\nshould equal\n\n[ 31, 135\
    \ ]\n    at test (/tmp/tmp8kchxx5k.js:35:10)\n    at Object.<anonymous> (/tmp/tmp8kchxx5k.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 135, 31 ],\n  expected: [ 31, 135 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even_digits = [0, 2, 4, 6, 8];\n    let result = [];\n    for (let i\
    \ = 0; i < x.length; i++){\n        let even_digit_count = 0;\n        let num\
    \ = x[i];\n        while (num > 0){\n            let digit = num % 10;\n     \
    \       if (even_digits.includes(digit)){\n                even_digit_count +=\
    \ 1;\n            }\n            num = Math.floor(num / 10);\n        }\n    \
    \    if (even_digit_count == 0){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let even\
    \ = false;\n        let num = x[i].toString().split('');\n        for(let j =\
    \ 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n              \
    \  even = true;\n            }\n        }\n        if(even === false){\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let isUnique\
    \ = true;\n        let num = x[i].toString();\n        for(let j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                isUnique = false;\n\
    \            }\n        }\n        if(isUnique){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var y = x[i].toString().split(\"\");\n        for(var j = 0; j < y.length;\
    \ j++){\n            if(y[j] % 2 === 0){\n                even.push(x[i]);\n \
    \               break;\n            }\n        }\n    }\n    for(var i = 0; i\
    \ < x.length; i++){\n        if(even.indexOf(x[i]) === -1){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even_digits = [2,4,6,8,0];\n    var result = [];\n    for(var i = 0;\
    \ i < x.length; i++){\n        var has_even = false;\n        var num = x[i];\n\
    \        while(num > 0){\n            var digit = num % 10;\n            if(even_digits.includes(digit)){\n\
    \                has_even = true;\n                break;\n            }\n   \
    \         num = Math.floor(num / 10);\n        }\n        if(!has_even){\n   \
    \         result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i];\n        var is_unique = true;\n        while(num > 0){\n          \
    \  var digit = num % 10;\n            if(digit % 2 == 0){\n                is_unique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(is_unique){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var arr = [];\n    for(var i = 0; i < x.length; i++){\n        var num =\
    \ x[i].toString();\n        var count = 0;\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                count++;\n        \
    \    }\n        }\n        if(count == 0){\n            arr.push(x[i]);\n    \
    \    }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var flag = true;\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n           \
    \     flag = false;\n            }\n        }\n        if(flag){\n           \
    \ odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(digit){\n\
    \            return digit % 2 !== 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){\n        return a -\
    \ b;\n    });\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var temp\
    \ = x[i].toString().split('');\n        var flag = true;\n        for(var j =\
    \ 0; j < temp.length; j++){\n            if(temp[j] % 2 == 0){\n             \
    \   flag = false;\n                break;\n            }\n        }\n        if(flag){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        if(x[i] % 2 === 0){\n            even.push(x[i]);\n        }else{\n \
    \           odd.push(x[i]);\n        }\n    }\n    return odd;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpdbahwb87.js:26:10)\n    at Object.<anonymous> (/tmp/tmpdbahwb87.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var isEven\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                isEven = true;\n  \
    \          }\n        }\n        if(!isEven){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var counter = 0;\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n          \
    \      counter++;\n            }\n        }\n        if(counter === 0){\n    \
    \        odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evenDigits = [];\n    var uniqueDigits = [];\n    for(var i = 0; i <\
    \ x.length; i++){\n        var num = x[i].toString();\n        for(var j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 === 0){\n                evenDigits.push(x[i]);\n\
    \                break;\n            }\n        }\n    }\n    for(var k = 0; k\
    \ < x.length; k++){\n        if(evenDigits.indexOf(x[k]) === -1){\n          \
    \  uniqueDigits.push(x[k]);\n        }\n    }\n    return uniqueDigits.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        if (x[i].toString().split('').every(function(element){\n\
    \            return element % 2 !== 0;\n        })){\n            y.push(x[i]);\n\
    \        }\n    }\n    return y.sort(function(a, b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(digit\
    \ => digit % 2 !== 0)){\n            result.push(x[i]);\n        }\n    }\n  \
    \  return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i];\n        var is_unique = true;\n        while(num > 0){\n          \
    \  if(num % 2 == 0){\n                is_unique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if(is_unique){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n             \
    \   count++;\n            }\n        }\n        if(count == 0){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evenDigit = [];\n    var uniqueDigit = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                evenDigit.push(x[i]);\n\
    \                break;\n            }\n        }\n    }\n    for(var i = 0; i\
    \ < x.length; i++){\n        if(evenDigit.indexOf(x[i]) === -1){\n           \
    \ uniqueDigit.push(x[i]);\n        }\n    }\n    return uniqueDigit.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    for(var i = 0; i < x.length; i++){\n        var num =\
    \ x[i].toString().split('');\n        for(var j = 0; j < num.length; j++){\n \
    \           if(num[j] % 2 === 0){\n                even.push(x[i]);\n        \
    \        break;\n            }\n        }\n    }\n    var unique = x.filter(function(item){\n\
    \        return even.indexOf(item) === -1;\n    });\n    return unique.sort(function(a,\
    \ b){\n        return a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        if (x[i].toString().includes('2')\
    \ || x[i].toString().includes('4') || x[i].toString().includes('6') || x[i].toString().includes('8')\
    \ || x[i].toString().includes('0')){\n            continue;\n        }\n     \
    \   else{\n            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \tvar y = [];\n\tfor (var i = 0; i < x.length; i++) {\n\t\tvar z = x[i].toString().split(\"\
    \");\n\t\tvar count = 0;\n\t\tfor (var j = 0; j < z.length; j++) {\n\t\t\tif(z[j]\
    \ % 2 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count == 0){\n\t\t\ty.push(x[i]);\n\
    \t\t}\n\t}\n\treturn y.sort(function(a, b){return a-b});\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString().split('');\n        var count = 0;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               count++;\n            }\n        }\n        if(count === 0){\n\
    \            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var newArr = [];\n    for(var i = 0; i < x.length; i++){\n        var str\
    \ = x[i].toString();\n        var count = 0;\n        for(var j = 0; j < str.length;\
    \ j++){\n            if(str[j] % 2 === 0){\n                count++;\n       \
    \     }\n        }\n        if(count === 0){\n            newArr.push(x[i]);\n\
    \        }\n    }\n    return newArr.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even_digits = [0, 2, 4, 6, 8];\n    var unique_digits = [];\n    for\
    \ (var i = 0; i < x.length; i++){\n        var num = x[i];\n        var has_even\
    \ = false;\n        while (num > 0){\n            var digit = num % 10;\n    \
    \        if (even_digits.indexOf(digit) > -1){\n                has_even = true;\n\
    \                break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if (!has_even){\n            unique_digits.push(x[i]);\n \
    \       }\n    }\n    return unique_digits.sort(function(a, b){return a - b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evenDigits = [];\n    var uniqueDigits = [];\n    for(var i = 0; i <\
    \ x.length; i++){\n        var num = x[i].toString();\n        for(var j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 === 0){\n                evenDigits.push(x[i]);\n\
    \                break;\n            }\n        }\n    }\n    for(var k = 0; k\
    \ < x.length; k++){\n        if(evenDigits.indexOf(x[k]) === -1){\n          \
    \  uniqueDigits.push(x[k]);\n        }\n    }\n    return uniqueDigits.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var counter\
    \ = 0;\n        var number = x[i].toString();\n        for(var j = 0; j < number.length;\
    \ j++){\n            if(number[j] % 2 === 0){\n                counter++;\n  \
    \          }\n        }\n        if(counter === 0){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let even_digits = [2,4,6,8,0];\n    let unique_digits = [];\n    for(let\
    \ i = 0; i < x.length; i++){\n        let has_even_digit = false;\n        let\
    \ num = x[i];\n        while(num > 0){\n            let digit = num % 10;\n  \
    \          if(even_digits.includes(digit)){\n                has_even_digit =\
    \ true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(!has_even_digit){\n            unique_digits.push(x[i]);\n\
    \        }\n    }\n    return unique_digits.sort((a,b) => a - b);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evens = [];\n    var odds = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        var even = false;\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n           \
    \     even = true;\n            }\n        }\n        if(even == false){\n   \
    \         odds.push(x[i]);\n        }\n    }\n    return odds;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmp99i6h1q0.js:32:10)\n    at Object.<anonymous> (/tmp/tmp99i6h1q0.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i];\n        var isUnique = true;\n        while(num > 0){\n           \
    \ var digit = num % 10;\n            if(digit % 2 == 0){\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString().split('');\n        var count = 0;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               count++;\n            }\n        }\n        if(count === 0){\n\
    \            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let evenDigits = [];\n    let uniqueDigits = [];\n    for(let i = 0; i <\
    \ x.length; i++){\n        let num = x[i].toString();\n        for(let j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 === 0){\n                evenDigits.push(x[i]);\n\
    \                break;\n            }\n        }\n    }\n    for(let i = 0; i\
    \ < x.length; i++){\n        if(evenDigits.indexOf(x[i]) === -1){\n          \
    \  uniqueDigits.push(x[i]);\n        }\n    }\n    return uniqueDigits.sort((a,\
    \ b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even_digits = [0, 2, 4, 6, 8];\n    var unique_digits = [];\n    for\
    \ (var i = 0; i < x.length; i++){\n        var has_even_digit = false;\n     \
    \   var number = x[i];\n        while (number > 0){\n            var digit = number\
    \ % 10;\n            if (even_digits.indexOf(digit) != -1){\n                has_even_digit\
    \ = true;\n                break;\n            }\n            number = Math.floor(number\
    \ / 10);\n        }\n        if (!has_even_digit){\n            unique_digits.push(x[i]);\n\
    \        }\n    }\n    return unique_digits.sort(function(a, b){return a - b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString();\n\
    \        if (z.includes(\"2\") || z.includes(\"4\") || z.includes(\"6\") || z.includes(\"\
    8\") || z.includes(\"0\")){\n            continue;\n        }\n        else{\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString();\n\
    \        var even = false;\n        for (var j = 0; j < z.length; j++){\n    \
    \        if (z[j] % 2 == 0){\n                even = true;\n            }\n  \
    \      }\n        if (even == false){\n            y.push(x[i]);\n        }\n\
    \    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    for(var i = 0; i < x.length; i++){\n        var num =\
    \ x[i].toString();\n        for(var j = 0; j < num.length; j++){\n           \
    \ if(num[j] % 2 == 0){\n                even.push(x[i]);\n                break;\n\
    \            }\n        }\n    }\n    var unique = x.filter(function(item){\n\
    \        return even.indexOf(item) < 0;\n    });\n    return unique.sort(function(a,\
    \ b){\n        return a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var is_unique\
    \ = true;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                is_unique = false;\n\
    \            }\n        }\n        if(is_unique){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmp4mu_ha_9.js:31:10)\n    at Object.<anonymous> (/tmp/tmp4mu_ha_9.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        if (x[i].toString().split('').every(function(digit){\n\
    \            return digit % 2 != 0;\n        })){\n            y.push(x[i]);\n\
    \        }\n    }\n    return y.sort(function(a, b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        if (x[i].toString().split('').every(function(e){\n\
    \            return e % 2 != 0;\n        })){\n            y.push(x[i]);\n   \
    \     }\n    }\n    return y.sort(function(a, b){\n        return a - b;\n   \
    \ });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1,\
    \ 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var unique = [];\n    for(var i = 0; i < x.length; i++){\n        var even\
    \ = false;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                even = true;\n    \
    \        }\n        }\n        if(even == false){\n            unique.push(x[i]);\n\
    \        }\n    }\n    return unique.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var count = 0;\n        for (var j = 0; j < z.length; j++){\n  \
    \          if (z[j] % 2 == 0){\n                count += 1;\n            }\n \
    \       }\n        if (count == 0){\n            y.push(x[i]);\n        }\n  \
    \  }\n    return y.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        var isUnique\
    \ = true;\n        var num = x[i].toString();\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 === 0){\n                isUnique = false;\n\
    \            }\n        }\n        if(isUnique){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var even =\
    \ false;\n        var num = x[i].toString();\n        for (var j = 0; j < num.length;\
    \ j++){\n            if (num[j] % 2 == 0){\n                even = true;\n   \
    \         }\n        }\n        if (even == false){\n            y.push(x[i]);\n\
    \        }\n    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let even\
    \ = false;\n        let num = x[i].toString().split('');\n        for(let j =\
    \ 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n              \
    \  even = true;\n            }\n        }\n        if(even === false){\n     \
    \       result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var str = x[i].toString();\n        var count = 0;\n        for(var j\
    \ = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n            \
    \    count++;\n            }\n        }\n        if(count === 0){\n          \
    \  odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a, b){return\
    \ a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let evenDigits = [0,2,4,6,8];\n    let uniqueDigits = [];\n    for(let i\
    \ = 0; i < x.length; i++){\n        let num = x[i];\n        let hasEven = false;\n\
    \        while(num > 0){\n            let digit = num % 10;\n            if(evenDigits.includes(digit)){\n\
    \                hasEven = true;\n                break;\n            }\n    \
    \        num = Math.floor(num / 10);\n        }\n        if(!hasEven){\n     \
    \       uniqueDigits.push(x[i]);\n        }\n    }\n    return uniqueDigits.sort((a,b)\
    \ => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var str = x[i].toString();\n        var arr = str.split('');\n      \
    \  for(var j = 0; j < arr.length; j++){\n            if(arr[j] % 2 == 0){\n  \
    \              even.push(x[i]);\n                break;\n            }\n     \
    \   }\n    }\n    for(var i = 0; i < x.length; i++){\n        if(even.indexOf(x[i])\
    \ == -1){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var arr = [];\n    for(var i = 0; i < x.length; i++){\n        var num =\
    \ x[i].toString();\n        var flag = true;\n        for(var j = 0; j < num.length;\
    \ j++){\n            if(num[j] % 2 == 0){\n                flag = false;\n   \
    \         }\n        }\n        if(flag){\n            arr.push(x[i]);\n     \
    \   }\n    }\n    return arr.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var count = 0;\n        for (var j = 0; j < z.length; j++){\n  \
    \          if (z[j] % 2 == 0){\n                count += 1;\n            }\n \
    \       }\n        if (count == 0){\n            y.push(x[i]);\n        }\n  \
    \  }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var unique = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i];\n        var isUnique = true;\n        while(num > 0){\n           \
    \ if(num % 2 == 0){\n                isUnique = false;\n                break;\n\
    \            }\n            num = Math.floor(num / 10);\n        }\n        if(isUnique){\n\
    \            unique.push(x[i]);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var even = [];\n    var odd = [];\n    for(var i = 0; i < x.length; i++){\n\
    \        var num = x[i].toString();\n        for(var j = 0; j < num.length; j++){\n\
    \            if(num[j] % 2 == 0){\n                even.push(x[i]);\n        \
    \        break;\n            }\n        }\n    }\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(even.indexOf(x[i]) == -1){\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var even = false;\n        for (var j = 0; j < z.length; j++){\n\
    \            if (z[j] % 2 == 0){\n                even = true;\n            }\n\
    \        }\n        if (even == false){\n            y.push(x[i]);\n        }\n\
    \    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num\
    \ = x[i];\n        let isUnique = true;\n        while(num > 0){\n           \
    \ let digit = num % 10;\n            if(digit % 2 === 0){\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \  var result = [];\n  for (var i = 0; i < x.length; i++) {\n    var even = false;\n\
    \    var num = x[i].toString();\n    for (var j = 0; j < num.length; j++) {\n\
    \      if (num[j] % 2 === 0) {\n        even = true;\n      }\n    }\n    if (even\
    \ === false) {\n      result.push(x[i]);\n    }\n  }\n  return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    // your code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ 1, 15, 33\
    \ ]\n    at test (/tmp/tmp94nloa24.js:18:10)\n    at Object.<anonymous> (/tmp/tmp94nloa24.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var result = [];\n    for(var i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(function(x){\n\
    \            return x % 2 !== 0;\n        })){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){\n        return a -\
    \ b;\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num\
    \ = x[i];\n        let isEven = false;\n        while(num > 0){\n            let\
    \ digit = num % 10;\n            if(digit % 2 === 0){\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(!isEven){\n            result.push(x[i]);\n  \
    \      }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let evenDigits = [2,4,6,8,0];\n    let uniqueDigits = [];\n    for(let i\
    \ = 0; i < x.length; i++){\n        let isUnique = true;\n        let num = x[i].toString();\n\
    \        for(let j = 0; j < num.length; j++){\n            if(evenDigits.includes(parseInt(num[j]))){\n\
    \                isUnique = false;\n            }\n        }\n        if(isUnique){\n\
    \            uniqueDigits.push(x[i]);\n        }\n    }\n    return uniqueDigits.sort((a,b)\
    \ => a-b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var y = [];\n    for (var i = 0; i < x.length; i++){\n        var z = x[i].toString().split(\"\
    \");\n        var count = 0;\n        for (var j = 0; j < z.length; j++){\n  \
    \          if (z[j] % 2 == 0){\n                count++;\n            }\n    \
    \    }\n        if (count == 0){\n            y.push(x[i]);\n        }\n    }\n\
    \    return y.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    var evens = [];\n    for(var i = 0; i < x.length; i++){\n        var num\
    \ = x[i].toString();\n        for(var j = 0; j < num.length; j++){\n         \
    \   if(num[j] % 2 === 0){\n                evens.push(x[i]);\n               \
    \ break;\n            }\n        }\n    }\n    var uniques = x.filter(function(num){\n\
    \        return evens.indexOf(num) === -1;\n    });\n    return uniques.sort(function(a,\
    \ b){\n        return a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let y = [];\n    for (let i = 0; i < x.length; i++){\n        let z = x[i].toString();\n\
    \        let count = 0;\n        for (let j = 0; j < z.length; j++){\n       \
    \     if (z[j] % 2 == 0){\n                count++;\n            }\n        }\n\
    \        if (count == 0){\n            y.push(x[i]);\n        }\n    }\n    return\
    \ y.sort();\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 135, 31 ]\n\nshould equal\n\n[ 31, 135\
    \ ]\n    at test (/tmp/tmp39l6we9c.js:34:10)\n    at Object.<anonymous> (/tmp/tmp39l6we9c.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 135, 31 ],\n  expected: [ 31, 135 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x){\n\
    \    let result = [];\n    for(let i = 0; i < x.length; i++){\n        let num\
    \ = x[i];\n        let isUnique = true;\n        while(num > 0){\n           \
    \ let digit = num % 10;\n            if(digit % 2 === 0){\n                isUnique\
    \ = false;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if(isUnique){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
