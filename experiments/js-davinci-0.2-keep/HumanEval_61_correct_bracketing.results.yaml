name: HumanEval_61_correct_bracketing
language: javascript
results:
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n       \
    \ if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n\
    \        else if (brackets[i] == \")\"){\n            if (stack.length == 0){\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    if (stack.length == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var left = 0;\n    var right = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            left += 1;\n        }\n\
    \        else if (brackets[i] == \")\"){\n            right += 1;\n        }\n\
    \        if (right > left){\n            return false;\n        }\n    }\n   \
    \ if (left == right){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount++;\n\t\t} else if (brackets[i] == \")\") {\n\t\t\t\
    count--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ count == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count += 1;\n    }\n    else if (brackets[i] == \")\") {\n\
    \      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n\
    \  }\n  if (count == 0) {\n    return true;\n  }\n  else {\n    return false;\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\
    \t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    if (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            open--;\n        }\n        if (open < 0){\n       \
    \     return false;\n        }\n    }\n    return open == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count++;\n    } else if (brackets[i] == \")\") {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count++;\n    } else if (brackets[i] == \")\") {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count++;\n    }\n    else if (brackets[i] == \")\") {\n \
    \     count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  if (count == 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\
    \t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    if (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            open -= 1;\n        }\n        if (open\
    \ < 0){\n            return false;\n        }\n    }\n    return open == 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            open--;\n        }\n        if (open < 0){\n       \
    \     return false;\n        }\n    }\n    return open == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count++;\n        } else if (brackets[i]\
    \ == \")\") {\n            count--;\n        }\n        if (count < 0) {\n   \
    \         return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    let count = 0;\n    for (let i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] == \"(\") {\n            open++;\n        } else if (brackets[i]\
    \ == \")\") {\n            open--;\n        }\n        if (open < 0) {\n     \
    \       return false;\n        }\n    }\n    return open == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count++;\n        }\n        else if\
    \ (brackets[i] == \")\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count == 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count += 1;\n    }\n    else if (brackets[i] == \")\") {\n\
    \      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n\
    \  }\n  if (count == 0) {\n    return true;\n  }\n  else {\n    return false;\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            open -= 1;\n        }\n        if (open\
    \ < 0){\n            return false;\n        }\n    }\n    return open == 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            open -= 1;\n        }\n        if (open\
    \ < 0){\n            return false;\n        }\n    }\n    return open == 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count += 1;\n    } else if (brackets[i] == \")\") {\n   \
    \   count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  return count == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count += 1;\n    } else if (brackets[i] == \")\") {\n   \
    \   count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  return count == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var open = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      open++;\n    } else if (brackets[i] == \")\") {\n      open--;\n\
    \    }\n    if (open < 0) {\n      return false;\n    }\n  }\n  return open ==\
    \ 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar i = 0;\n\tvar count = 0;\n\twhile (i < brackets.length){\n\t\tif (brackets[i]\
    \ == \"(\"){\n\t\t\tcount += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\
    \t\tcount -= 1;\n\t\t}\n\t\tif (count < 0){\n\t\t\treturn false;\n\t\t}\n\t\t\
    i += 1;\n\t}\n\tif (count == 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\
    \t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    if (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] == \"(\") {\n            open++;\n        } else if (brackets[i]\
    \ == \")\") {\n            open--;\n        }\n        if (open < 0) {\n     \
    \       return false;\n        }\n    }\n    return open == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n       \
    \ if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n\
    \        else if (brackets[i] == \")\"){\n            if (stack.length == 0){\n\
    \                return false;\n            }\n            else {\n          \
    \      stack.pop();\n            }\n        }\n    }\n    if (stack.length ==\
    \ 0){\n        return true;\n    }\n    else {\n        return false;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar stack = [];\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tstack.push(brackets[i]);\n\t\t} else if (brackets[i] == \"\
    )\") {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count++;\n        } else if (brackets[i]\
    \ == \")\") {\n            count--;\n        }\n        if (count < 0) {\n   \
    \         return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count += 1;\n    }\n    else {\n      count -= 1;\n    }\n\
    \    if (count < 0) {\n      return false;\n    }\n  }\n  if (count == 0) {\n\
    \    return true;\n  }\n  else {\n    return false;\n  }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var open = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      open++;\n    } else if (brackets[i] == \")\") {\n      open--;\n\
    \    }\n    if (open < 0) {\n      return false;\n    }\n  }\n  return open ==\
    \ 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\
    \t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] == \"(\") {\n            open++;\n        } else if (brackets[i]\
    \ == \")\") {\n            open--;\n        }\n        if (open < 0) {\n     \
    \       return false;\n        }\n    }\n    return open == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            open--;\n        }\n        if (open < 0){\n       \
    \     return false;\n        }\n    }\n    return open == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    // your code here\n    var count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            count += 1;\n       \
    \ }\n        else if (brackets[i] == \")\"){\n            count -= 1;\n      \
    \  }\n        if (count < 0){\n            return false;\n        }\n    }\n \
    \   if (count == 0){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            open -= 1;\n        }\n        if (open\
    \ < 0){\n            return false;\n        }\n    }\n    return open == 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            open--;\n        }\n        if (open < 0){\n       \
    \     return false;\n        }\n    }\n    return open == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\
    \t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            open -= 1;\n        }\n        if (open\
    \ < 0){\n            return false;\n        }\n    }\n    return open == 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count += 1;\n    } else if (brackets[i] == \")\") {\n   \
    \   count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  return count == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count += 1;\n    } else if (brackets[i] == \")\") {\n   \
    \   count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  return count == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n       \
    \ if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n\
    \        else if (brackets[i] == \")\"){\n            if (stack.length == 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if (stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n       \
    \ if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n\
    \        else if (brackets[i] == \")\"){\n            if (stack.length == 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if (stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n       \
    \ if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n\
    \        else if (brackets[i] == \")\"){\n            if (stack.length == 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if (stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar open_brackets = 0;\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif\
    \ (brackets[i] == \"(\"){\n\t\t\topen_brackets += 1;\n\t\t}\n\t\telse if (brackets[i]\
    \ == \")\"){\n\t\t\topen_brackets -= 1;\n\t\t}\n\t\tif (open_brackets < 0){\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\tif (open_brackets == 0){\n\t\treturn true;\n\t\
    }\n\telse{\n\t\treturn false;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      count++;\n    } else if (brackets[i] === \")\") {\n    \
    \  count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return\
    \ count === 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      count += 1;\n    } else if (brackets[i] === \")\") {\n \
    \     count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n \
    \ }\n  return count === 0;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar stack = [];\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse if (brackets[i]\
    \ == \")\") {\n\t\t\tif (stack.length == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\telse {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length ==\
    \ 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            open--;\n        }\n        if (open < 0){\n       \
    \     return false;\n        }\n    }\n    return open == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ === \"(\") {\n\t\t\tcount += 1;\n\t\t} else if (brackets[i] === \")\") {\n\t\
    \t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn count === 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      count++;\n    } else if (brackets[i] === \")\") {\n    \
    \  count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return\
    \ count === 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"\
    ),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var open = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      open++;\n    } else if (brackets[i] == \")\") {\n      open--;\n\
    \    }\n    if (open < 0) {\n      return false;\n    }\n  }\n  return open ==\
    \ 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] == \"(\") {\n            open++;\n        } else if (brackets[i]\
    \ == \")\") {\n            open--;\n        }\n        if (open < 0) {\n     \
    \       return false;\n        }\n    }\n    return open == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      count += 1;\n    } else if (brackets[i] === \")\") {\n \
    \     count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n \
    \ }\n  return count === 0;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\
    \t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count++;\n        } else if (brackets[i]\
    \ == \")\") {\n            count--;\n        }\n        if (count < 0) {\n   \
    \         return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    let stack = [];\n    for (let i = 0; i < brackets.length; i++){\n       \
    \ if (brackets[i] === \"(\"){\n            stack.push(brackets[i]);\n        }\n\
    \        else if (brackets[i] === \")\"){\n            if (stack.length === 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if (stack.length ===\
    \ 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count += 1;\n    } else if (brackets[i] == \")\") {\n   \
    \   count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  return count == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\
    \t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            open -= 1;\n        }\n        if (open\
    \ < 0){\n            return false;\n        }\n    }\n    return open == 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n       \
    \ if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n\
    \        else if (brackets[i] == \")\"){\n            if (stack.length == 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if (stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\
    \t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\
    \t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"(\") {\n\t\t\tcount += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\
    \t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count++;\n        } else if (brackets[i]\
    \ == \")\") {\n            count--;\n        }\n        if (count < 0) {\n   \
    \         return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count++;\n    } else if (brackets[i] == \")\") {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count++;\n    } else if (brackets[i] == \")\") {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n       \
    \ if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n\
    \        else if (brackets[i] == \")\"){\n            if (stack.length == 0){\n\
    \                return false;\n            }\n            else{\n           \
    \     stack.pop();\n            }\n        }\n    }\n    if (stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            open++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            open--;\n        }\n        if (open < 0){\n       \
    \     return false;\n        }\n    }\n    return open == 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open_brackets = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            open_brackets += 1;\n       \
    \ }\n        else if (brackets[i] == \")\"){\n            open_brackets -= 1;\n\
    \        }\n        if (open_brackets < 0){\n            return false;\n     \
    \   }\n    }\n    if (open_brackets == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    let count = 0;\n    for (let i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    return count == 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++) {\n       \
    \ if (brackets[i] == \"(\") {\n            count += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            count -= 1;\n        }\n        if (count < 0) {\n\
    \            return false;\n        }\n    }\n    return count == 0;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n       \
    \ if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n        }\n\
    \        else if (brackets[i] == \")\"){\n            if (stack.length == 0){\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    if (stack.length == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count += 1;\n    } else if (brackets[i] == \")\") {\n   \
    \   count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  return count == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      count++;\n    } else if (brackets[i] == \")\") {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ == 0;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n\
    \  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var open_brackets = 0;\n    for (var i = 0; i < brackets.length; i++) {\n\
    \        if (brackets[i] == \"(\") {\n            open_brackets += 1;\n      \
    \  } else if (brackets[i] == \")\") {\n            open_brackets -= 1;\n     \
    \   }\n        if (open_brackets < 0) {\n            return false;\n        }\n\
    \    }\n    return open_brackets == 0;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
    ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
    ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
    )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
    ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
    (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n \
    \ assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \  var stack = [];\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      stack.push(brackets[i]);\n    } else if (brackets[i] ===\
    \ \")\") {\n      if (stack.length === 0) {\n        return false;\n      } else\
    \ {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
    )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets){\n\
    \    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count += 1;\n        }\n        else if\
    \ (brackets[i] == \")\"){\n            count -= 1;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count == 0){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
    (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
    ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
    ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
    (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
    )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
    ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"\
    ),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
