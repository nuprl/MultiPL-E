name: HumanEval_111_histogram
language: javascript
results:
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let\
    \ key in obj){\n        if(obj[key] > max){\n            max = obj[key];\n   \
    \     }\n    }\n    let newObj = {};\n    for(let key in obj){\n        if(obj[key]\
    \ === max){\n            newObj[key] = max;\n        }\n    }\n    return newObj;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp4xkngg4n.js:46:10)\n    at Object.<anonymous> (/tmp/tmp4xkngg4n.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(!obj[arr[i]]){\n            obj[arr[i]]\
    \ = 1;\n        }else{\n            obj[arr[i]]++;\n        }\n        if(obj[arr[i]]\
    \ > max){\n            max = obj[arr[i]];\n        }\n    }\n    let result =\
    \ {};\n    for(let key in obj){\n        if(obj[key] === max){\n            result[key]\
    \ = obj[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp6dhw5k5z.js:44:10)\n    at Object.<anonymous> (/tmp/tmp6dhw5k5z.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let dict = {};\n    let max = 0;\n    let maxLetters = [];\n    test.split('\
    \ ').forEach(letter => {\n        if(dict[letter]){\n            dict[letter]++;\n\
    \        }else{\n            dict[letter] = 1;\n        }\n        if(dict[letter]\
    \ > max){\n            max = dict[letter];\n            maxLetters = [letter];\n\
    \        }else if(dict[letter] === max){\n            maxLetters.push(letter);\n\
    \        }\n    });\n    let result = {};\n    maxLetters.forEach(letter => {\n\
    \        result[letter] = max;\n    });\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpt85t0im4.js:45:10)\n    at Object.<anonymous> (/tmp/tmpt85t0im4.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpaqoi66ix.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqoi66ix.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(var key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_cg2f4ag.js:43:10)\n    at Object.<anonymous> (/tmp/tmp_cg2f4ag.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] in dict){\n            dict[arr[i]]++;\n        }\n\
    \        else{\n            dict[arr[i]] = 1;\n        }\n    }\n    var max =\
    \ 0;\n    for(var key in dict){\n        if(dict[key] > max){\n            max\
    \ = dict[key];\n        }\n    }\n    var newDict = {};\n    for(var key in dict){\n\
    \        if(dict[key] == max){\n            newDict[key] = max;\n        }\n \
    \   }\n    return newDict;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp6e2gimej.js:47:10)\n    at Object.<anonymous> (/tmp/tmp6e2gimej.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var max = 0;\n    var max_letter = [];\n    var letters\
    \ = test.split(' ');\n    for (var i = 0; i < letters.length; i++){\n        if\
    \ (result[letters[i]] == undefined){\n            result[letters[i]] = 1;\n  \
    \      }\n        else{\n            result[letters[i]] += 1;\n        }\n   \
    \     if (result[letters[i]] > max){\n            max = result[letters[i]];\n\
    \            max_letter = [];\n            max_letter.push(letters[i]);\n    \
    \    }\n        else if (result[letters[i]] == max){\n            max_letter.push(letters[i]);\n\
    \        }\n    }\n    for (var i = 0; i < max_letter.length; i++){\n        result[max_letter[i]]\
    \ = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpsiewv8hu.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsiewv8hu.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let\
    \ key in obj){\n        if(obj[key] > max){\n            max = obj[key];\n   \
    \     }\n    }\n    let newObj = {};\n    for(let key in obj){\n        if(obj[key]\
    \ === max){\n            newObj[key] = max;\n        }\n    }\n    return newObj;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpl3wy22t4.js:46:10)\n    at Object.<anonymous> (/tmp/tmpl3wy22t4.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var hist = {};\n    var max = 0;\n    var max_key = [];\n    var test_arr\
    \ = test.split(' ');\n    for (var i = 0; i < test_arr.length; i++){\n       \
    \ if (hist[test_arr[i]]){\n            hist[test_arr[i]]++;\n        }\n     \
    \   else{\n            hist[test_arr[i]] = 1;\n        }\n    }\n    for (var\
    \ key in hist){\n        if (hist[key] > max){\n            max = hist[key];\n\
    \            max_key = [key];\n        }\n        else if (hist[key] == max){\n\
    \            max_key.push(key);\n        }\n    }\n    var result = {};\n    for\
    \ (var i = 0; i < max_key.length; i++){\n        result[max_key[i]] = max;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpmhh3eyfk.js:50:10)\n    at Object.<anonymous> (/tmp/tmpmhh3eyfk.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let obj = {};\n    let max = 0;\n    let maxArr = [];\n    let arr = test.split('\
    \ ');\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n  \
    \          obj[arr[i]]++;\n        }else{\n            obj[arr[i]] = 1;\n    \
    \    }\n    }\n    for(let key in obj){\n        if(obj[key] > max){\n       \
    \     max = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n\
    \        }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n\
    \    }\n    for(let i = 0; i < maxArr.length; i++){\n        obj[maxArr[i]] =\
    \ max;\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpa1ejcrf9.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa1ejcrf9.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(\" \");\n    var count = {};\n    for (var i = 0;\
    \ i < letters.length; i++) {\n        var letter = letters[i];\n        if (count[letter])\
    \ {\n            count[letter]++;\n        } else {\n            count[letter]\
    \ = 1;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp4cyrybyo.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4cyrybyo.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]] +=\
    \ 1;\n        } else {\n            result[arr[i]] = 1;\n        }\n    }\n  \
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpdyoq82q4.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdyoq82q4.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]] += 1;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp9vs646po.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9vs646po.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmphi4zcrni.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphi4zcrni.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(let i\
    \ in result){\n        if(result[i] < max){\n            delete result[i];\n \
    \       }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpxwgxeyge.js:43:10)\n    at Object.<anonymous> (/tmp/tmpxwgxeyge.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    for(let\
    \ key in obj){\n        if(obj[key] > max){\n            max = obj[key];\n   \
    \     }\n    }\n    let newObj = {};\n    for(let key in obj){\n        if(obj[key]\
    \ === max){\n            newObj[key] = max;\n        }\n    }\n    return newObj;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmph8blu6km.js:45:10)\n    at Object.<anonymous> (/tmp/tmph8blu6km.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    let maxArr\
    \ = [];\n    for(let key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n     \
    \   }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n  \
    \  }\n    let result = {};\n    for(let i = 0; i < maxArr.length; i++){\n    \
    \    result[maxArr[i]] = max;\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpkuq65rrn.js:49:10)\n    at Object.<anonymous> (/tmp/tmpkuq65rrn.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let obj = {};\n    let arr = test.split(' ');\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(!obj[arr[i]]){\n            obj[arr[i]] = 1;\n        } else\
    \ {\n            obj[arr[i]]++;\n        }\n    }\n    let max = 0;\n    let maxArr\
    \ = [];\n    for(let key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [key];\n        } else if(obj[key] === max){\n\
    \            maxArr.push(key);\n        }\n    }\n    let result = {};\n    for(let\
    \ i = 0; i < maxArr.length; i++){\n        result[maxArr[i]] = max;\n    }\n \
    \   return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpjyxv7i7i.js:48:10)\n    at Object.<anonymous> (/tmp/tmpjyxv7i7i.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]] += 1;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpto79cujc.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpto79cujc.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    var max = 0;\n  \
    \  for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n       \
    \     result[arr[i]]++;\n        }else{\n            result[arr[i]] = 1;\n   \
    \     }\n        if(result[arr[i]] > max){\n            max = result[arr[i]];\n\
    \        }\n    }\n    var newResult = {};\n    for(var key in result){\n    \
    \    if(result[key] === max){\n            newResult[key] = result[key];\n   \
    \     }\n    }\n    return newResult;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp7xzftf63.js:44:10)\n    at Object.<anonymous> (/tmp/tmp7xzftf63.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var dict = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]] += 1;\n\
    \        }else{\n            dict[arr[i]] = 1;\n        }\n    }\n    return dict;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp3qwky955.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3qwky955.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(dict[arr[i]]){\n            dict[arr[i]]++;\n        }\n \
    \       else{\n            dict[arr[i]] = 1;\n        }\n    }\n    return dict;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpa7e633_g.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa7e633_g.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let dict = {};\n    let max = 0;\n    let maxKeys = [];\n    let testArr\
    \ = test.split(' ');\n    for (let i = 0; i < testArr.length; i++){\n        if\
    \ (dict[testArr[i]]){\n            dict[testArr[i]] += 1;\n        } else {\n\
    \            dict[testArr[i]] = 1;\n        }\n    }\n    for (let key in dict){\n\
    \        if (dict[key] > max){\n            max = dict[key];\n            maxKeys\
    \ = [key];\n        } else if (dict[key] === max){\n            maxKeys.push(key);\n\
    \        }\n    }\n    for (let i = 0; i < maxKeys.length; i++){\n        dict[maxKeys[i]]\
    \ = max;\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpmvjspci8.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmvjspci8.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var testArray = test.split(' ');\n    var testObject = {};\n    var max =\
    \ 0;\n    var maxKey = [];\n    for (var i = 0; i < testArray.length; i++){\n\
    \        if (testObject[testArray[i]]){\n            testObject[testArray[i]]++;\n\
    \        } else {\n            testObject[testArray[i]] = 1;\n        }\n    }\n\
    \    for (var key in testObject){\n        if (testObject[key] > max){\n     \
    \       max = testObject[key];\n            maxKey = [key];\n        } else if\
    \ (testObject[key] === max){\n            maxKey.push(key);\n        }\n    }\n\
    \    var result = {};\n    for (var i = 0; i < maxKey.length; i++){\n        result[maxKey[i]]\
    \ = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpo3n_gdgt.js:48:10)\n    at Object.<anonymous> (/tmp/tmpo3n_gdgt.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp6lms35wp.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6lms35wp.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(!result[arr[i]]){\n            result[arr[i]]\
    \ = 1;\n        }else{\n            result[arr[i]]++;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(let key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpuq72c9ac.js:43:10)\n    at Object.<anonymous> (/tmp/tmpuq72c9ac.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    let\
    \ maxArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n\
    \            result[arr[i]]++;\n        }else{\n            result[arr[i]] = 1;\n\
    \        }\n    }\n    for(let key in result){\n        if(result[key] > max){\n\
    \            max = result[key];\n            maxArr = [];\n            maxArr.push(key);\n\
    \        }else if(result[key] === max){\n            maxArr.push(key);\n     \
    \   }\n    }\n    for(let i = 0; i < maxArr.length; i++){\n        result[maxArr[i]]\
    \ = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqcxvoocj.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqcxvoocj.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var dict = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]]++;\n\
    \        }\n        else{\n            dict[arr[i]] = 1;\n        }\n    }\n \
    \   return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp9_i1x6ji.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9_i1x6ji.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var dict = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]] += 1;\n\
    \        }\n        else{\n            dict[arr[i]] = 1;\n        }\n    }\n \
    \   var max = 0;\n    for(var key in dict){\n        if(dict[key] > max){\n  \
    \          max = dict[key];\n        }\n    }\n    var newDict = {};\n    for(var\
    \ key in dict){\n        if(dict[key] == max){\n            newDict[key] = max;\n\
    \        }\n    }\n    return newDict;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpkrbns4al.js:47:10)\n    at Object.<anonymous> (/tmp/tmpkrbns4al.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(\" \");\n    let max = 0;\n  \
    \  for(let i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n       \
    \     result[arr[i]]++;\n        }else{\n            result[arr[i]] = 1;\n   \
    \     }\n        if(result[arr[i]] > max){\n            max = result[arr[i]];\n\
    \        }\n    }\n    for(let key in result){\n        if(result[key] < max){\n\
    \            delete result[key];\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpdzqx65eo.js:42:10)\n    at Object.<anonymous> (/tmp/tmpdzqx65eo.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpztu9q2ys.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpztu9q2ys.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var testArr = test.split(' ');\n    var result = {};\n    for(var i = 0;\
    \ i < testArr.length; i++){\n        if(result[testArr[i]]){\n            result[testArr[i]]++;\n\
    \        }else{\n            result[testArr[i]] = 1;\n        }\n    }\n    var\
    \ max = 0;\n    var maxArr = [];\n    for(var key in result){\n        if(result[key]\
    \ > max){\n            max = result[key];\n            maxArr = [];\n        \
    \    maxArr.push(key);\n        }else if(result[key] === max){\n            maxArr.push(key);\n\
    \        }\n    }\n    var result2 = {};\n    for(var i = 0; i < maxArr.length;\
    \ i++){\n        result2[maxArr[i]] = max;\n    }\n    return result2;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpr68yoqq_.js:49:10)\n    at Object.<anonymous> (/tmp/tmpr68yoqq_.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(dict[arr[i]]){\n            dict[arr[i]] += 1;\n        }\n\
    \        else{\n            dict[arr[i]] = 1;\n        }\n    }\n    return dict;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqpulxp5w.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqpulxp5w.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqc3c4z34.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqc3c4z34.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var obj = {};\n    var arr = test.split(' ');\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmphd6i28nw.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphd6i28nw.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpiewqflzj.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpiewqflzj.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var temp = test.split(\" \");\n    for(var i = 0; i\
    \ < temp.length; i++){\n        if(result[temp[i]]){\n            result[temp[i]]++;\n\
    \        }else{\n            result[temp[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpz52ookh2.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz52ookh2.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]] += 1;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqw3lmsxr.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqw3lmsxr.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] in dict){\n            dict[arr[i]] += 1;\n       \
    \ }\n        else{\n            dict[arr[i]] = 1;\n        }\n    }\n    return\
    \ dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpebh7waub.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpebh7waub.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    var max = 0;\n    var maxArr\
    \ = [];\n    for(var key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n     \
    \   }else if(obj[key] == max){\n            maxArr.push(key);\n        }\n   \
    \ }\n    var result = {};\n    for(var i = 0; i < maxArr.length; i++){\n     \
    \   result[maxArr[i]] = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpezyemw65.js:49:10)\n    at Object.<anonymous> (/tmp/tmpezyemw65.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(let key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpvr3exiqv.js:43:10)\n    at Object.<anonymous> (/tmp/tmpvr3exiqv.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(dict[arr[i]]){\n            dict[arr[i]] += 1;\n        }\n\
    \        else{\n            dict[arr[i]] = 1;\n        }\n    }\n    return dict;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmphvagotlw.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphvagotlw.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var dict = {};\n    var max = 0;\n    var max_key = [];\n    var test_arr\
    \ = test.split(' ');\n    for (var i = 0; i < test_arr.length; i++){\n       \
    \ if (test_arr[i] in dict){\n            dict[test_arr[i]] += 1;\n        }\n\
    \        else{\n            dict[test_arr[i]] = 1;\n        }\n    }\n    for\
    \ (var key in dict){\n        if (dict[key] > max){\n            max = dict[key];\n\
    \            max_key = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_key.push(key);\n        }\n    }\n    var new_dict = {};\n  \
    \  for (var i = 0; i < max_key.length; i++){\n        new_dict[max_key[i]] = max;\n\
    \    }\n    return new_dict;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp5se2908a.js:50:10)\n    at Object.<anonymous> (/tmp/tmp5se2908a.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var dict = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]]++;\n\
    \        }\n        else{\n            dict[arr[i]] = 1;\n        }\n    }\n \
    \   return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpfit46_ln.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfit46_ln.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]] === undefined){\n            obj[arr[i]] = 1;\n\
    \        }\n        else{\n            obj[arr[i]] += 1;\n        }\n    }\n \
    \   return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpiocoozn8.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpiocoozn8.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    var max = 0;\n    for(var\
    \ key in obj){\n        if(obj[key] > max){\n            max = obj[key];\n   \
    \     }\n    }\n    var result = {};\n    for(var key in obj){\n        if(obj[key]\
    \ === max){\n            result[key] = max;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpd7pa4g4s.js:46:10)\n    at Object.<anonymous> (/tmp/tmpd7pa4g4s.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(\" \");\n    var dict = {};\n    for(var i = 0;\
    \ i < letters.length; i++){\n        if(letters[i] in dict){\n            dict[letters[i]]\
    \ += 1;\n        }\n        else{\n            dict[letters[i]] = 1;\n       \
    \ }\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp7yuln336.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7yuln336.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var dict = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] in dict){\n            dict[arr[i]] +=\
    \ 1;\n        }\n        else{\n            dict[arr[i]] = 1;\n        }\n   \
    \ }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmps4jhirc4.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps4jhirc4.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var obj = {};\n    var arr = test.split(' ');\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]] += 1;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqsjtdm76.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqsjtdm76.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n\
    \        } else {\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]]\
    \ > max){\n            max = obj[arr[i]];\n        }\n    }\n    for(let key in\
    \ obj){\n        if(obj[key] < max){\n            delete obj[key];\n        }\n\
    \    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp9u50savq.js:43:10)\n    at Object.<anonymous> (/tmp/tmp9u50savq.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var test = test.split(\" \");\n    var dict = {};\n    var max = 0;\n   \
    \ for(var i = 0; i < test.length; i++){\n        if(dict[test[i]] == undefined){\n\
    \            dict[test[i]] = 1;\n        }\n        else{\n            dict[test[i]]\
    \ += 1;\n        }\n        if(dict[test[i]] > max){\n            max = dict[test[i]];\n\
    \        }\n    }\n    var max_dict = {};\n    for(var key in dict){\n       \
    \ if(dict[key] == max){\n            max_dict[key] = max;\n        }\n    }\n\
    \    return max_dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpru3e4gs1.js:45:10)\n    at Object.<anonymous> (/tmp/tmpru3e4gs1.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpbktak5mz.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbktak5mz.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    var max = 0;\n  \
    \  for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n       \
    \     result[arr[i]]++;\n        }else{\n            result[arr[i]] = 1;\n   \
    \     }\n        if(result[arr[i]] > max){\n            max = result[arr[i]];\n\
    \        }\n    }\n    for(var key in result){\n        if(result[key] < max){\n\
    \            delete result[key];\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpt8nejia_.js:43:10)\n    at Object.<anonymous> (/tmp/tmpt8nejia_.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var test = test.split(' ');\n    var result = {};\n    for(var i = 0; i <\
    \ test.length; i++){\n        if(result[test[i]]){\n            result[test[i]]++;\n\
    \        } else {\n            result[test[i]] = 1;\n        }\n    }\n    var\
    \ max = 0;\n    var maxKey = [];\n    for(var key in result){\n        if(result[key]\
    \ > max){\n            max = result[key];\n            maxKey = [];\n        \
    \    maxKey.push(key);\n        } else if(result[key] == max){\n            maxKey.push(key);\n\
    \        }\n    }\n    var finalResult = {};\n    for(var i = 0; i < maxKey.length;\
    \ i++){\n        finalResult[maxKey[i]] = max;\n    }\n    return finalResult;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpp5xtyfkx.js:49:10)\n    at Object.<anonymous> (/tmp/tmpp5xtyfkx.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let letters = test.split(\" \");\n    let count = {};\n    let max = 0;\n\
    \    let maxLetter = [];\n    for(let i = 0; i < letters.length; i++){\n     \
    \   if(count[letters[i]]){\n            count[letters[i]]++;\n        }\n    \
    \    else{\n            count[letters[i]] = 1;\n        }\n        if(count[letters[i]]\
    \ > max){\n            max = count[letters[i]];\n            maxLetter = [];\n\
    \            maxLetter.push(letters[i]);\n        }\n        else if(count[letters[i]]\
    \ === max){\n            maxLetter.push(letters[i]);\n        }\n    }\n    let\
    \ result = {};\n    for(let i = 0; i < maxLetter.length; i++){\n        result[maxLetter[i]]\
    \ = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpp0_kkqhi.js:49:10)\n    at Object.<anonymous> (/tmp/tmpp0_kkqhi.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(let key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpu86dmukk.js:43:10)\n    at Object.<anonymous> (/tmp/tmpu86dmukk.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    let newResult\
    \ = {};\n    for(let key in result){\n        if(result[key] === max){\n     \
    \       newResult[key] = result[key];\n        }\n    }\n    return newResult;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpahhdkfcu.js:44:10)\n    at Object.<anonymous> (/tmp/tmpahhdkfcu.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(let key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp2g_hefzk.js:43:10)\n    at Object.<anonymous> (/tmp/tmp2g_hefzk.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var dict = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] in dict){\n            dict[arr[i]]++;\n\
    \        }\n        else{\n            dict[arr[i]] = 1;\n        }\n    }\n \
    \   var max = 0;\n    for(var key in dict){\n        if(dict[key] > max){\n  \
    \          max = dict[key];\n        }\n    }\n    var newDict = {};\n    for(var\
    \ key in dict){\n        if(dict[key] == max){\n            newDict[key] = max;\n\
    \        }\n    }\n    return newDict;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpn3cj4dn2.js:47:10)\n    at Object.<anonymous> (/tmp/tmpn3cj4dn2.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp9tnnkb9z.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9tnnkb9z.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpn24t5t0h.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpn24t5t0h.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    let\
    \ maxArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n\
    \            obj[arr[i]]++;\n        }else{\n            obj[arr[i]] = 1;\n  \
    \      }\n    }\n    for(let key in obj){\n        if(obj[key] > max){\n     \
    \       max = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n\
    \        }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n\
    \    }\n    for(let i = 0; i < maxArr.length; i++){\n        obj[maxArr[i]] =\
    \ max;\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpb5k93_o4.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb5k93_o4.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpp84no10p.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpp84no10p.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    var max = 0;\n    var result\
    \ = {};\n    for(var key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            result = {};\n            result[key] = max;\n    \
    \    }else if(obj[key] === max){\n            result[key] = max;\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp7ah7jgqg.js:45:10)\n    at Object.<anonymous> (/tmp/tmp7ah7jgqg.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    let maxArr\
    \ = [];\n    for(let key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n     \
    \   }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n  \
    \  }\n    let newObj = {};\n    for(let i = 0; i < maxArr.length; i++){\n    \
    \    newObj[maxArr[i]] = max;\n    }\n    return newObj;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpg9j1fjaj.js:49:10)\n    at Object.<anonymous> (/tmp/tmpg9j1fjaj.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var count = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(count[arr[i]]){\n            count[arr[i]]++;\n\
    \        }\n        else{\n            count[arr[i]] = 1;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpmp71_0to.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmp71_0to.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  var result = {};\n  var arr = test.split(' ');\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(result[arr[i]]){\n      result[arr[i]]++;\n    }else{\n      result[arr[i]]\
    \ = 1;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp2rycvc0e.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2rycvc0e.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var testArr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i <\
    \ testArr.length; i++){\n        if(obj[testArr[i]]){\n            obj[testArr[i]]\
    \ += 1;\n        } else {\n            obj[testArr[i]] = 1;\n        }\n    }\n\
    \    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpcb766p0j.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcb766p0j.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpmnqtvc7c.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmnqtvc7c.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(' ');\n    var count = {};\n    var max = 0;\n \
    \   var maxLetters = [];\n    for(var i = 0; i < letters.length; i++){\n     \
    \   if(count[letters[i]]){\n            count[letters[i]]++;\n        } else {\n\
    \            count[letters[i]] = 1;\n        }\n        if(count[letters[i]] >\
    \ max){\n            max = count[letters[i]];\n            maxLetters = [];\n\
    \            maxLetters.push(letters[i]);\n        } else if(count[letters[i]]\
    \ === max){\n            maxLetters.push(letters[i]);\n        }\n    }\n    var\
    \ result = {};\n    for(var j = 0; j < maxLetters.length; j++){\n        result[maxLetters[j]]\
    \ = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpsq27e7y3.js:47:10)\n    at Object.<anonymous> (/tmp/tmpsq27e7y3.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpjnxf8dlz.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjnxf8dlz.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  var arr = test.split(\" \");\n  var obj = {};\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(obj[arr[i]]){\n      obj[arr[i]]++;\n    }else{\n      obj[arr[i]]\
    \ = 1;\n    }\n  }\n  return obj;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmprr0wjivy.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprr0wjivy.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]]++;\n\
    \        }\n        else{\n            dict[arr[i]] = 1;\n        }\n        if(dict[arr[i]]\
    \ > max){\n            max = dict[arr[i]];\n        }\n    }\n    var result =\
    \ {};\n    for(var key in dict){\n        if(dict[key] == max){\n            result[key]\
    \ = max;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpwh0wfmj3.js:45:10)\n    at Object.<anonymous> (/tmp/tmpwh0wfmj3.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpo6lgrws2.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo6lgrws2.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(dict[arr[i]]){\n            dict[arr[i]]++;\n        }\n \
    \       else{\n            dict[arr[i]] = 1;\n        }\n    }\n    return dict;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp_gzhkkvo.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_gzhkkvo.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n\
    \        }else{\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]]\
    \ > max){\n            max = obj[arr[i]];\n        }\n    }\n    for(let key in\
    \ obj){\n        if(obj[key] < max){\n            delete obj[key];\n        }\n\
    \    }\n    return obj;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpfd5oihox.js:42:10)\n    at Object.<anonymous> (/tmp/tmpfd5oihox.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(dict[arr[i]]){\n            dict[arr[i]] += 1;\n        }\n\
    \        else{\n            dict[arr[i]] = 1;\n        }\n    }\n    return dict;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpprabnm4v.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpprabnm4v.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var dict = {};\n    var max = 0;\n    var max_keys = [];\n    var test_array\
    \ = test.split(\" \");\n    for (var i = 0; i < test_array.length; i++){\n   \
    \     if (dict[test_array[i]]){\n            dict[test_array[i]] += 1;\n     \
    \   }\n        else{\n            dict[test_array[i]] = 1;\n        }\n    }\n\
    \    for (var key in dict){\n        if (dict[key] > max){\n            max =\
    \ dict[key];\n            max_keys = [key];\n        }\n        else if (dict[key]\
    \ == max){\n            max_keys.push(key);\n        }\n    }\n    for (var i\
    \ = 0; i < max_keys.length; i++){\n        dict[max_keys[i]] = max;\n    }\n \
    \   return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp73cvs1mc.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp73cvs1mc.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let max = 0;\n    let maxLetter = [];\n    let arr\
    \ = test.split(' ');\n    for(let i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n\
    \            result[arr[i]]++;\n        } else {\n            result[arr[i]] =\
    \ 1;\n        }\n    }\n    for(let key in result){\n        if(result[key] >\
    \ max){\n            max = result[key];\n            maxLetter = [key];\n    \
    \    } else if(result[key] === max){\n            maxLetter.push(key);\n     \
    \   }\n    }\n    for(let i = 0; i < maxLetter.length; i++){\n        result[maxLetter[i]]\
    \ = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmptsf443_g.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptsf443_g.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpym001pjb.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpym001pjb.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpy3yjc9a6.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy3yjc9a6.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpo84xxeh_.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo84xxeh_.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpkqu0sqfc.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkqu0sqfc.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    let\
    \ maxArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n\
    \            obj[arr[i]]++;\n        }else{\n            obj[arr[i]] = 1;\n  \
    \      }\n    }\n    for(let key in obj){\n        if(obj[key] > max){\n     \
    \       max = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n\
    \        }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n\
    \    }\n    for(let i = 0; i < maxArr.length; i++){\n        obj[maxArr[i]] =\
    \ max;\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpwu4hw6mp.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwu4hw6mp.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var dict = {};\n    var max = 0;\n    var max_keys = [];\n    var test_arr\
    \ = test.split(' ');\n    for (var i = 0; i < test_arr.length; i++){\n       \
    \ if (test_arr[i] in dict){\n            dict[test_arr[i]] += 1;\n        }\n\
    \        else{\n            dict[test_arr[i]] = 1;\n        }\n    }\n    for\
    \ (var key in dict){\n        if (dict[key] > max){\n            max = dict[key];\n\
    \            max_keys = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_keys.push(key);\n        }\n    }\n    var max_dict = {};\n \
    \   for (var i = 0; i < max_keys.length; i++){\n        max_dict[max_keys[i]]\
    \ = max;\n    }\n    return max_dict;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpclyvd4p8.js:50:10)\n    at Object.<anonymous> (/tmp/tmpclyvd4p8.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var dict = {};\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]]++;\n\
    \        }\n        else{\n            dict[arr[i]] = 1;\n        }\n        if(dict[arr[i]]\
    \ > max){\n            max = dict[arr[i]];\n        }\n    }\n    var result =\
    \ {};\n    for(var key in dict){\n        if(dict[key] == max){\n            result[key]\
    \ = max;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpa1kz5ksq.js:45:10)\n    at Object.<anonymous> (/tmp/tmpa1kz5ksq.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]] === undefined){\n            obj[arr[i]] = 1;\n\
    \        }\n        else{\n            obj[arr[i]]++;\n        }\n    }\n    return\
    \ obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpvzh1s59y.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvzh1s59y.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(\" \");\n    for(let i = 0; i\
    \ < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpuwdao8dg.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuwdao8dg.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var count = {};\n    var max = 0;\n    var\
    \ maxLetter = [];\n    for(var i = 0; i < arr.length; i++){\n        if(count[arr[i]]){\n\
    \            count[arr[i]]++;\n        }else{\n            count[arr[i]] = 1;\n\
    \        }\n        if(count[arr[i]] > max){\n            max = count[arr[i]];\n\
    \            maxLetter = [];\n            maxLetter.push(arr[i]);\n        }else\
    \ if(count[arr[i]] === max){\n            maxLetter.push(arr[i]);\n        }\n\
    \    }\n    var result = {};\n    for(var j = 0; j < maxLetter.length; j++){\n\
    \        result[maxLetter[j]] = max;\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp71bycnz1.js:47:10)\n    at Object.<anonymous> (/tmp/tmp71bycnz1.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpoonf7gl1.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpoonf7gl1.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(' ');\n    var result = {};\n    for(var i = 0;\
    \ i < letters.length; i++){\n        if(result[letters[i]]){\n            result[letters[i]]++;\n\
    \        } else {\n            result[letters[i]] = 1;\n        }\n    }\n   \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp3glvunu6.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3glvunu6.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n\
    \        } else {\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]]\
    \ > max){\n            max = obj[arr[i]];\n        }\n    }\n    for(let key in\
    \ obj){\n        if(obj[key] < max){\n            delete obj[key];\n        }\n\
    \    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpcl87500j.js:43:10)\n    at Object.<anonymous> (/tmp/tmpcl87500j.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp09zns3ki.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp09zns3ki.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  var str = test.split(\" \");\n  var dict = {};\n  for(var i = 0; i < str.length;\
    \ i++){\n    if(dict[str[i]]){\n      dict[str[i]] += 1;\n    }\n    else{\n \
    \     dict[str[i]] = 1;\n    }\n  }\n  var max = 0;\n  var max_key = \"\";\n \
    \ for(var key in dict){\n    if(dict[key] > max){\n      max = dict[key];\n  \
    \    max_key = key;\n    }\n  }\n  var result = {};\n  for(var key in dict){\n\
    \    if(dict[key] == max){\n      result[key] = max;\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpy9ro3b0x.js:49:10)\n    at Object.<anonymous> (/tmp/tmpy9ro3b0x.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let dict = {};\n    let max = 0;\n    let max_keys = [];\n    let test_arr\
    \ = test.split(' ');\n    for (let i = 0; i < test_arr.length; i++){\n       \
    \ if (test_arr[i] in dict){\n            dict[test_arr[i]] += 1;\n        }\n\
    \        else{\n            dict[test_arr[i]] = 1;\n        }\n    }\n    for\
    \ (let key in dict){\n        if (dict[key] > max){\n            max = dict[key];\n\
    \            max_keys = [key];\n        }\n        else if (dict[key] === max){\n\
    \            max_keys.push(key);\n        }\n    }\n    for (let i = 0; i < max_keys.length;\
    \ i++){\n        dict[max_keys[i]] = max;\n    }\n    return dict;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpzqitnlke.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzqitnlke.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    let max\
    \ = 0;\n    for(let key in result){\n        if(result[key] > max){\n        \
    \    max = result[key];\n        }\n    }\n    let newResult = {};\n    for(let\
    \ key in result){\n        if(result[key] === max){\n            newResult[key]\
    \ = result[key];\n        }\n    }\n    return newResult;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp25jgim4i.js:45:10)\n    at Object.<anonymous> (/tmp/tmp25jgim4i.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let hist = {};\n    test.split(' ').forEach(function(letter){\n        if(hist[letter]){\n\
    \            hist[letter]++;\n        }else{\n            hist[letter] = 1;\n\
    \        }\n    });\n    let max = 0;\n    let maxLetters = [];\n    for(let letter\
    \ in hist){\n        if(hist[letter] > max){\n            max = hist[letter];\n\
    \            maxLetters = [letter];\n        }else if(hist[letter] === max){\n\
    \            maxLetters.push(letter);\n        }\n    }\n    let result = {};\n\
    \    maxLetters.forEach(function(letter){\n        result[letter] = max;\n   \
    \ });\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpdbjpchbe.js:47:10)\n    at Object.<anonymous> (/tmp/tmpdbjpchbe.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let dict = {};\n    let max = 0;\n    let maxLetters = [];\n    let letters\
    \ = test.split(' ');\n    for (let i = 0; i < letters.length; i++){\n        if\
    \ (letters[i] in dict){\n            dict[letters[i]] += 1;\n        }\n     \
    \   else{\n            dict[letters[i]] = 1;\n        }\n    }\n    for (let key\
    \ in dict){\n        if (dict[key] > max){\n            max = dict[key];\n   \
    \         maxLetters = [key];\n        }\n        else if (dict[key] === max){\n\
    \            maxLetters.push(key);\n        }\n    }\n    for (let i = 0; i <\
    \ maxLetters.length; i++){\n        dict[maxLetters[i]] = max;\n    }\n    return\
    \ dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpxh5886ie.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxh5886ie.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n\
    \        }else{\n            obj[arr[i]] = 1;\n        }\n        if(obj[arr[i]]\
    \ > max){\n            max = obj[arr[i]];\n        }\n    }\n    for(let key in\
    \ obj){\n        if(obj[key] < max){\n            delete obj[key];\n        }\n\
    \    }\n    return obj;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpa7_ruzqz.js:42:10)\n    at Object.<anonymous> (/tmp/tmpa7_ruzqz.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(let key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp79mfzamh.js:43:10)\n    at Object.<anonymous> (/tmp/tmp79mfzamh.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    var max = 0;\n  \
    \  for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n       \
    \     result[arr[i]]++;\n        }else{\n            result[arr[i]] = 1;\n   \
    \     }\n        if(result[arr[i]] > max){\n            max = result[arr[i]];\n\
    \        }\n    }\n    for(var key in result){\n        if(result[key] < max){\n\
    \            delete result[key];\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmps7m2mysp.js:43:10)\n    at Object.<anonymous> (/tmp/tmps7m2mysp.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(!obj[arr[i]]){\n            obj[arr[i]]\
    \ = 1;\n        } else {\n            obj[arr[i]] += 1;\n        }\n        if(obj[arr[i]]\
    \ > max){\n            max = obj[arr[i]];\n        }\n    }\n    for(let key in\
    \ obj){\n        if(obj[key] < max){\n            delete obj[key];\n        }\n\
    \    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpv3adn25b.js:43:10)\n    at Object.<anonymous> (/tmp/tmpv3adn25b.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    var answer\
    \ = {};\n    for(var key in result){\n        if(result[key] === max){\n     \
    \       answer[key] = max;\n        }\n    }\n    return answer;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmplttf3_ni.js:44:10)\n    at Object.<anonymous> (/tmp/tmplttf3_ni.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(var key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpsm8ceptn.js:43:10)\n    at Object.<anonymous> (/tmp/tmpsm8ceptn.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqytpnp1x.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqytpnp1x.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqyga0obw.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqyga0obw.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let max = 0;\n    let maxArr = [];\n    let arr = test.split('\
    \ ');\n    for(let i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n\
    \            result[arr[i]]++;\n        } else {\n            result[arr[i]] =\
    \ 1;\n        }\n    }\n    for(let key in result){\n        if(result[key] >\
    \ max){\n            max = result[key];\n            maxArr = [];\n          \
    \  maxArr.push(key);\n        } else if(result[key] === max){\n            maxArr.push(key);\n\
    \        }\n    }\n    for(let i = 0; i < maxArr.length; i++){\n        result[maxArr[i]]\
    \ = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpbfmn4zg0.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbfmn4zg0.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpvheck77w.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvheck77w.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let obj = {};\n    let arr = test.split(' ');\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpv817fi6r.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv817fi6r.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    let\
    \ maxArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n\
    \            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n\
    \        }\n    }\n    for(let key in obj){\n        if(obj[key] > max){\n   \
    \         max = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n\
    \        } else if(obj[key] === max){\n            maxArr.push(key);\n       \
    \ }\n    }\n    for(let i = 0; i < maxArr.length; i++){\n        obj[maxArr[i]]\
    \ = max;\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpbib2d02_.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbib2d02_.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpbrwzafxi.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbrwzafxi.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var dict = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(dict[arr[i]] == undefined){\n            dict[arr[i]]\
    \ = 1;\n        }\n        else{\n            dict[arr[i]]++;\n        }\n   \
    \ }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmplfsdsxg6.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplfsdsxg6.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(' ');\n    var dict = {};\n    var max = 0;\n  \
    \  for(var i = 0; i < letters.length; i++){\n        if(dict[letters[i]]){\n \
    \           dict[letters[i]] += 1;\n        }\n        else{\n            dict[letters[i]]\
    \ = 1;\n        }\n        if(dict[letters[i]] > max){\n            max = dict[letters[i]];\n\
    \        }\n    }\n    var result = {};\n    for(var key in dict){\n        if(dict[key]\
    \ == max){\n            result[key] = max;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmphz20gies.js:45:10)\n    at Object.<anonymous> (/tmp/tmphz20gies.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }\n        else{\n            result[arr[i]] = 1;\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqb4ali17.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqb4ali17.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var max = 0;\n    var max_key = '';\n    var max_keys\
    \ = [];\n    var test_array = test.split(' ');\n    for (var i = 0; i < test_array.length;\
    \ i++){\n        if (result[test_array[i]]){\n            result[test_array[i]]\
    \ += 1;\n        } else {\n            result[test_array[i]] = 1;\n        }\n\
    \    }\n    for (var key in result){\n        if (result[key] > max){\n      \
    \      max = result[key];\n            max_key = key;\n            max_keys =\
    \ [];\n            max_keys.push(max_key);\n        } else if (result[key] ==\
    \ max){\n            max_keys.push(key);\n        }\n    }\n    var final_result\
    \ = {};\n    for (var i = 0; i < max_keys.length; i++){\n        final_result[max_keys[i]]\
    \ = max;\n    }\n    return final_result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpzycsxsbp.js:51:10)\n    at Object.<anonymous> (/tmp/tmpzycsxsbp.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]]\
    \ += 1;\n        }\n        else{\n            dict[arr[i]] = 1;\n        }\n\
    \        if(dict[arr[i]] > max){\n            max = dict[arr[i]];\n        }\n\
    \    }\n    var result = {};\n    for(var key in dict){\n        if(dict[key]\
    \ == max){\n            result[key] = max;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpvlqcqphb.js:45:10)\n    at Object.<anonymous> (/tmp/tmpvlqcqphb.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letter = test.split(' ');\n    var count = {};\n    for(var i = 0; i\
    \ < letter.length; i++){\n        if(count[letter[i]]){\n            count[letter[i]]++;\n\
    \        }\n        else{\n            count[letter[i]] = 1;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpdlgwc80c.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdlgwc80c.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var max = 0;\n    var maxKey = '';\n    var maxKeys\
    \ = [];\n    var testArray = test.split(' ');\n    for(var i = 0; i < testArray.length;\
    \ i++){\n        if(result[testArray[i]]){\n            result[testArray[i]]++;\n\
    \        } else {\n            result[testArray[i]] = 1;\n        }\n    }\n \
    \   for(var key in result){\n        if(result[key] > max){\n            max =\
    \ result[key];\n            maxKey = key;\n            maxKeys = [];\n       \
    \     maxKeys.push(maxKey);\n        } else if(result[key] === max){\n       \
    \     maxKeys.push(key);\n        }\n    }\n    var finalResult = {};\n    for(var\
    \ i = 0; i < maxKeys.length; i++){\n        finalResult[maxKeys[i]] = max;\n \
    \   }\n    return finalResult;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp8o32t4nu.js:51:10)\n    at Object.<anonymous> (/tmp/tmp8o32t4nu.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let letters = test.split(' ');\n    let letterCount = {};\n    let maxCount\
    \ = 0;\n    let maxLetters = [];\n    for(let i = 0; i < letters.length; i++){\n\
    \        if(letterCount[letters[i]]){\n            letterCount[letters[i]]++;\n\
    \        } else {\n            letterCount[letters[i]] = 1;\n        }\n     \
    \   if(letterCount[letters[i]] > maxCount){\n            maxCount = letterCount[letters[i]];\n\
    \            maxLetters = [letters[i]];\n        } else if(letterCount[letters[i]]\
    \ === maxCount){\n            maxLetters.push(letters[i]);\n        }\n    }\n\
    \    let result = {};\n    for(let i = 0; i < maxLetters.length; i++){\n     \
    \   result[maxLetters[i]] = maxCount;\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpx8kvxvp6.js:46:10)\n    at Object.<anonymous> (/tmp/tmpx8kvxvp6.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(let key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp_j7tg5mg.js:42:10)\n    at Object.<anonymous> (/tmp/tmp_j7tg5mg.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] in dict){\n            dict[arr[i]]++;\n        }\n\
    \        else{\n            dict[arr[i]] = 1;\n        }\n    }\n    return dict;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp2xqe6eok.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2xqe6eok.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp8epbncgp.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8epbncgp.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    var max = 0;\n  \
    \  for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n       \
    \     result[arr[i]]++;\n        }else{\n            result[arr[i]] = 1;\n   \
    \     }\n        if(result[arr[i]] > max){\n            max = result[arr[i]];\n\
    \        }\n    }\n    var final = {};\n    for(var key in result){\n        if(result[key]\
    \ == max){\n            final[key] = result[key];\n        }\n    }\n    return\
    \ final;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpu5okdwdg.js:44:10)\n    at Object.<anonymous> (/tmp/tmpu5okdwdg.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]] += 1;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    let maxArr\
    \ = [];\n    for(let key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [key];\n        }else if(obj[key] === max){\n\
    \            maxArr.push(key);\n        }\n    }\n    let result = {};\n    for(let\
    \ i = 0; i < maxArr.length; i++){\n        result[maxArr[i]] = max;\n    }\n \
    \   return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp779knuta.js:48:10)\n    at Object.<anonymous> (/tmp/tmp779knuta.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var hist = {};\n    var max = 0;\n    var maxLetters = [];\n    var letters\
    \ = test.split(' ');\n    for (var i = 0; i < letters.length; i++){\n        if\
    \ (letters[i] in hist){\n            hist[letters[i]] += 1;\n        }\n     \
    \   else{\n            hist[letters[i]] = 1;\n        }\n    }\n    for (var key\
    \ in hist){\n        if (hist[key] > max){\n            max = hist[key];\n   \
    \         maxLetters = [key];\n        }\n        else if (hist[key] == max){\n\
    \            maxLetters.push(key);\n        }\n    }\n    for (var i = 0; i <\
    \ maxLetters.length; i++){\n        hist[maxLetters[i]] = max;\n    }\n    return\
    \ hist;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqyt8r89l.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqyt8r89l.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(var key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpyc1nhjzz.js:43:10)\n    at Object.<anonymous> (/tmp/tmpyc1nhjzz.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var dict = {};\n    var max = 0;\n    var maxLetters = [];\n    var letters\
    \ = test.split(' ');\n    for (var i = 0; i < letters.length; i++){\n        if\
    \ (letters[i] in dict){\n            dict[letters[i]] += 1;\n        } else {\n\
    \            dict[letters[i]] = 1;\n        }\n    }\n    for (var key in dict){\n\
    \        if (dict[key] > max){\n            max = dict[key];\n            maxLetters\
    \ = [key];\n        } else if (dict[key] == max){\n            maxLetters.push(key);\n\
    \        }\n    }\n    for (var i = 0; i < maxLetters.length; i++){\n        dict[maxLetters[i]]\
    \ = max;\n    }\n    return dict;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp44f99edc.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp44f99edc.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let testArr = test.split(' ');\n    let max = 0;\n\
    \    for(let i = 0; i < testArr.length; i++){\n        if(result[testArr[i]]){\n\
    \            result[testArr[i]]++;\n        } else {\n            result[testArr[i]]\
    \ = 1;\n        }\n        if(result[testArr[i]] > max){\n            max = result[testArr[i]];\n\
    \        }\n    }\n    for(let key in result){\n        if(result[key] < max){\n\
    \            delete result[key];\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmps6iwm_b8.js:43:10)\n    at Object.<anonymous> (/tmp/tmps6iwm_b8.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    let maxArr\
    \ = [];\n    for(let key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n     \
    \   }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n  \
    \  }\n    let result = {};\n    for(let i = 0; i < maxArr.length; i++){\n    \
    \    result[maxArr[i]] = max;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpap_cfpt9.js:48:10)\n    at Object.<anonymous> (/tmp/tmpap_cfpt9.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqa1l1wqv.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqa1l1wqv.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    let maxArr\
    \ = [];\n    for(let key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n     \
    \   }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n  \
    \  }\n    let result = {};\n    for(let i = 0; i < maxArr.length; i++){\n    \
    \    result[maxArr[i]] = max;\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp5_xrn4td.js:49:10)\n    at Object.<anonymous> (/tmp/tmp5_xrn4td.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]] === undefined){\n            obj[arr[i]] = 1;\n\
    \        } else {\n            obj[arr[i]]++;\n        }\n    }\n    return obj;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpf7ito6_8.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf7ito6_8.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    let\
    \ maxArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n\
    \            obj[arr[i]]++;\n        }else{\n            obj[arr[i]] = 1;\n  \
    \      }\n    }\n    for(let key in obj){\n        if(obj[key] > max){\n     \
    \       max = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n\
    \        }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n\
    \    }\n    for(let i = 0; i < maxArr.length; i++){\n        obj[maxArr[i]] =\
    \ max;\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpdqxrrsof.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdqxrrsof.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var max = 0;\n    var maxLetters = [];\n    var letters\
    \ = test.split(' ');\n    for (var i = 0; i < letters.length; i++){\n        if\
    \ (result[letters[i]]){\n            result[letters[i]]++;\n        }\n      \
    \  else{\n            result[letters[i]] = 1;\n        }\n    }\n    for (var\
    \ key in result){\n        if (result[key] > max){\n            max = result[key];\n\
    \            maxLetters = [key];\n        }\n        else if (result[key] ===\
    \ max){\n            maxLetters.push(key);\n        }\n    }\n    for (var i =\
    \ 0; i < maxLetters.length; i++){\n        result[maxLetters[i]] = max;\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp8tb3usxx.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8tb3usxx.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp47l21a9r.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp47l21a9r.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let dict = {};\n    let max = 0;\n    let max_keys = [];\n    let test_arr\
    \ = test.split(' ');\n    for (let i = 0; i < test_arr.length; i++){\n       \
    \ if (test_arr[i] in dict){\n            dict[test_arr[i]] += 1;\n        }\n\
    \        else{\n            dict[test_arr[i]] = 1;\n        }\n    }\n    for\
    \ (let key in dict){\n        if (dict[key] > max){\n            max = dict[key];\n\
    \            max_keys = [key];\n        }\n        else if (dict[key] === max){\n\
    \            max_keys.push(key);\n        }\n    }\n    for (let i = 0; i < max_keys.length;\
    \ i++){\n        dict[max_keys[i]] = max;\n    }\n    return dict;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp7qcxk1vg.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7qcxk1vg.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(var key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpfnm4nt_j.js:43:10)\n    at Object.<anonymous> (/tmp/tmpfnm4nt_j.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    var max = 0;\n  \
    \  var maxArr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n\
    \            result[arr[i]] += 1;\n        }else{\n            result[arr[i]]\
    \ = 1;\n        }\n    }\n    for(var key in result){\n        if(result[key]\
    \ > max){\n            max = result[key];\n            maxArr = [];\n        \
    \    maxArr.push(key);\n        }else if(result[key] === max){\n            maxArr.push(key);\n\
    \        }\n    }\n    var final = {};\n    for(var i = 0; i < maxArr.length;\
    \ i++){\n        final[maxArr[i]] = max;\n    }\n    return final;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpfr0_3y3s.js:49:10)\n    at Object.<anonymous> (/tmp/tmpfr0_3y3s.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var hist = {};\n    var max = 0;\n    var maxKeys = [];\n    test.split('\
    \ ').forEach(function(letter){\n        if(hist[letter]){\n            hist[letter]++;\n\
    \        }else{\n            hist[letter] = 1;\n        }\n        if(hist[letter]\
    \ > max){\n            max = hist[letter];\n            maxKeys = [letter];\n\
    \        }else if(hist[letter] === max){\n            maxKeys.push(letter);\n\
    \        }\n    });\n    var result = {};\n    maxKeys.forEach(function(key){\n\
    \        result[key] = max;\n    });\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp9vwfqjob.js:45:10)\n    at Object.<anonymous> (/tmp/tmp9vwfqjob.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(' ');\n    var dict = {};\n    for (var i = 0; i\
    \ < letters.length; i++){\n        if (letters[i] in dict){\n            dict[letters[i]]\
    \ += 1;\n        }\n        else{\n            dict[letters[i]] = 1;\n       \
    \ }\n    }\n    var max = 0;\n    for (var key in dict){\n        if (dict[key]\
    \ > max){\n            max = dict[key];\n        }\n    }\n    var maxDict = {};\n\
    \    for (var key in dict){\n        if (dict[key] == max){\n            maxDict[key]\
    \ = max;\n        }\n    }\n    return maxDict;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpbxybnhy4.js:47:10)\n    at Object.<anonymous> (/tmp/tmpbxybnhy4.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpx4962hct.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx4962hct.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpr3evuzp9.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr3evuzp9.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  var result = {};\n  var arr = test.split(' ');\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(result[arr[i]]){\n      result[arr[i]] += 1;\n    } else {\n \
    \     result[arr[i]] = 1;\n    }\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp21xunyeh.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp21xunyeh.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var count = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        var num = arr[i];\n        count[num] = count[num]\
    \ ? count[num] + 1 : 1;\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp5aqgx8h8.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5aqgx8h8.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(let key\
    \ in result){\n        if(result[key] !== max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpfnme6tve.js:43:10)\n    at Object.<anonymous> (/tmp/tmpfnme6tve.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  var testArray = test.split(' ');\n  var testDict = {};\n  var max = 0;\n  var\
    \ maxKey = '';\n  for (var i = 0; i < testArray.length; i++){\n    if (testDict[testArray[i]]){\n\
    \      testDict[testArray[i]] += 1;\n    }\n    else {\n      testDict[testArray[i]]\
    \ = 1;\n    }\n  }\n  for (var key in testDict){\n    if (testDict[key] > max){\n\
    \      max = testDict[key];\n      maxKey = key;\n    }\n  }\n  for (var key in\
    \ testDict){\n    if (testDict[key] < max){\n      delete testDict[key];\n   \
    \ }\n  }\n  return testDict;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpvgv15u0a.js:48:10)\n    at Object.<anonymous> (/tmp/tmpvgv15u0a.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]]\
    \ += 1;\n        }\n        else{\n            dict[arr[i]] = 1;\n        }\n\
    \        if(dict[arr[i]] > max){\n            max = dict[arr[i]];\n        }\n\
    \    }\n    var result = {};\n    for(var key in dict){\n        if(dict[key]\
    \ == max){\n            result[key] = max;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpl0djcuow.js:45:10)\n    at Object.<anonymous> (/tmp/tmpl0djcuow.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var max = 0;\n    var maxKey = '';\n    var maxKeys\
    \ = [];\n    var testArray = test.split(' ');\n    for(var i = 0; i < testArray.length;\
    \ i++){\n        if(result[testArray[i]]){\n            result[testArray[i]]++;\n\
    \        } else {\n            result[testArray[i]] = 1;\n        }\n    }\n \
    \   for(var key in result){\n        if(result[key] > max){\n            max =\
    \ result[key];\n            maxKey = key;\n            maxKeys = [];\n       \
    \     maxKeys.push(maxKey);\n        } else if(result[key] === max){\n       \
    \     maxKeys.push(key);\n        }\n    }\n    var finalResult = {};\n    for(var\
    \ i = 0; i < maxKeys.length; i++){\n        finalResult[maxKeys[i]] = max;\n \
    \   }\n    return finalResult;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp2pgtn0ek.js:51:10)\n    at Object.<anonymous> (/tmp/tmp2pgtn0ek.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpeo40i541.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeo40i541.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmphcft6njg.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphcft6njg.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(' ');\n    var letterCount = {};\n    var maxCount\
    \ = 0;\n    var maxLetter = [];\n    for(var i = 0; i < letters.length; i++){\n\
    \        if(letterCount[letters[i]]){\n            letterCount[letters[i]]++;\n\
    \        }else{\n            letterCount[letters[i]] = 1;\n        }\n       \
    \ if(letterCount[letters[i]] > maxCount){\n            maxCount = letterCount[letters[i]];\n\
    \            maxLetter = [letters[i]];\n        }else if(letterCount[letters[i]]\
    \ === maxCount){\n            maxLetter.push(letters[i]);\n        }\n    }\n\
    \    var result = {};\n    for(var i = 0; i < maxLetter.length; i++){\n      \
    \  result[maxLetter[i]] = maxCount;\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpm64w_bhj.js:46:10)\n    at Object.<anonymous> (/tmp/tmpm64w_bhj.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(' ');\n    var count = {};\n    for (var i = 0;\
    \ i < letters.length; i++) {\n        if (count[letters[i]]) {\n            count[letters[i]]++;\n\
    \        } else {\n            count[letters[i]] = 1;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp_8zzwj4a.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_8zzwj4a.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var dict = {};\n    var max = 0;\n    var maxKeys = [];\n    var testArr\
    \ = test.split(' ');\n    for (var i = 0; i < testArr.length; i++){\n        if\
    \ (dict[testArr[i]]){\n            dict[testArr[i]] += 1;\n        } else {\n\
    \            dict[testArr[i]] = 1;\n        }\n    }\n    for (var key in dict){\n\
    \        if (dict[key] > max){\n            max = dict[key];\n            maxKeys\
    \ = [key];\n        } else if (dict[key] === max){\n            maxKeys.push(key);\n\
    \        }\n    }\n    var result = {};\n    for (var i = 0; i < maxKeys.length;\
    \ i++){\n        result[maxKeys[i]] = max;\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpl6k2n71q.js:48:10)\n    at Object.<anonymous> (/tmp/tmpl6k2n71q.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  var arr = test.split(\" \");\n  var obj = {};\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(obj[arr[i]]){\n      obj[arr[i]] += 1;\n    } else {\n      obj[arr[i]]\
    \ = 1;\n    }\n  }\n  return obj;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp6gt2ybtn.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6gt2ybtn.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    var max = 0;\n    var maxArr\
    \ = [];\n    for(var key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n     \
    \   }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n  \
    \  }\n    var result = {};\n    for(var i = 0; i < maxArr.length; i++){\n    \
    \    result[maxArr[i]] = max;\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpfvnlphcz.js:49:10)\n    at Object.<anonymous> (/tmp/tmpfvnlphcz.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var max = 0;\n    var maxKey = '';\n    var maxKeys\
    \ = [];\n    var arr = test.split(' ');\n    for(var i = 0; i < arr.length; i++){\n\
    \        if(result[arr[i]]){\n            result[arr[i]]++;\n        }else{\n\
    \            result[arr[i]] = 1;\n        }\n    }\n    for(var key in result){\n\
    \        if(result[key] > max){\n            max = result[key];\n            maxKey\
    \ = key;\n            maxKeys = [];\n            maxKeys.push(key);\n        }else\
    \ if(result[key] === max){\n            maxKeys.push(key);\n        }\n    }\n\
    \    if(maxKeys.length > 1){\n        result = {};\n        for(var i = 0; i <\
    \ maxKeys.length; i++){\n            result[maxKeys[i]] = max;\n        }\n  \
    \  }else{\n        result = {};\n        result[maxKey] = max;\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpj_m0hign.js:56:10)\n    at Object.<anonymous> (/tmp/tmpj_m0hign.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpl032o2lu.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl032o2lu.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let obj = {};\n    let arr = test.split(' ');\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpc8ukoidh.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpc8ukoidh.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(\" \");\n    for(let i = 0; i\
    \ < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    let max\
    \ = 0;\n    let maxArr = [];\n    for(let key in result){\n        if(result[key]\
    \ > max){\n            max = result[key];\n            maxArr = [];\n        \
    \    maxArr.push(key);\n        }else if(result[key] === max){\n            maxArr.push(key);\n\
    \        }\n    }\n    let final = {};\n    for(let i = 0; i < maxArr.length;\
    \ i++){\n        final[maxArr[i]] = max;\n    }\n    return final;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp6gd5euyz.js:48:10)\n    at Object.<anonymous> (/tmp/tmp6gd5euyz.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var dict = {};\n    var max = 0;\n    var max_keys = [];\n    var test_arr\
    \ = test.split(' ');\n    for (var i = 0; i < test_arr.length; i++){\n       \
    \ if (test_arr[i] in dict){\n            dict[test_arr[i]] += 1;\n        }\n\
    \        else{\n            dict[test_arr[i]] = 1;\n        }\n    }\n    for\
    \ (var key in dict){\n        if (dict[key] > max){\n            max = dict[key];\n\
    \            max_keys = [key];\n        }\n        else if (dict[key] == max){\n\
    \            max_keys.push(key);\n        }\n    }\n    var result = {};\n   \
    \ for (var i = 0; i < max_keys.length; i++){\n        result[max_keys[i]] = max;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpa7vkccda.js:50:10)\n    at Object.<anonymous> (/tmp/tmpa7vkccda.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(' ');\n    var dict = {};\n    var max = 0;\n  \
    \  var maxLetters = [];\n    for (var i = 0; i < letters.length; i++){\n     \
    \   if (letters[i] in dict){\n            dict[letters[i]] += 1;\n        }\n\
    \        else{\n            dict[letters[i]] = 1;\n        }\n    }\n    for (var\
    \ key in dict){\n        if (dict[key] > max){\n            max = dict[key];\n\
    \            maxLetters = [key];\n        }\n        else if (dict[key] == max){\n\
    \            maxLetters.push(key);\n        }\n    }\n    var result = {};\n \
    \   for (var i = 0; i < maxLetters.length; i++){\n        result[maxLetters[i]]\
    \ = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp3z7pc0_n.js:50:10)\n    at Object.<anonymous> (/tmp/tmp3z7pc0_n.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(' ');\n    var count = {};\n    var max = 0;\n \
    \   var maxLetters = [];\n    for(var i = 0; i < letters.length; i++){\n     \
    \   if(count[letters[i]]){\n            count[letters[i]]++;\n        } else {\n\
    \            count[letters[i]] = 1;\n        }\n        if(count[letters[i]] >\
    \ max){\n            max = count[letters[i]];\n            maxLetters = [];\n\
    \            maxLetters.push(letters[i]);\n        } else if(count[letters[i]]\
    \ === max){\n            maxLetters.push(letters[i]);\n        }\n    }\n    var\
    \ result = {};\n    for(var i = 0; i < maxLetters.length; i++){\n        result[maxLetters[i]]\
    \ = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp31amzp5n.js:47:10)\n    at Object.<anonymous> (/tmp/tmp31amzp5n.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let hist = {};\n    let max = 0;\n    let maxLetters = [];\n    test.split('\
    \ ').forEach(function(letter){\n        if(hist[letter]){\n            hist[letter]\
    \ += 1;\n        } else {\n            hist[letter] = 1;\n        }\n        if(hist[letter]\
    \ > max){\n            max = hist[letter];\n            maxLetters = [letter];\n\
    \        } else if(hist[letter] === max){\n            maxLetters.push(letter);\n\
    \        }\n    });\n    maxLetters.forEach(function(letter){\n        hist[letter]\
    \ = max;\n    });\n    return hist;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpvm0wwy28.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvm0wwy28.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpugle_wi1.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpugle_wi1.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var hist = {};\n    var max = 0;\n    var max_key = [];\n    var arr = test.split('\
    \ ');\n    for(var i = 0; i < arr.length; i++){\n        if(hist[arr[i]]){\n \
    \           hist[arr[i]]++;\n        }else{\n            hist[arr[i]] = 1;\n \
    \       }\n    }\n    for(var key in hist){\n        if(hist[key] > max){\n  \
    \          max = hist[key];\n            max_key = [key];\n        }else if(hist[key]\
    \ == max){\n            max_key.push(key);\n        }\n    }\n    for(var i =\
    \ 0; i < max_key.length; i++){\n        hist[max_key[i]] = max;\n    }\n    return\
    \ hist;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpa20uhsz2.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa20uhsz2.js:51:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(' ');\n    let obj = {};\n    let max = 0;\n    let\
    \ maxArr = [];\n    for(let i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n\
    \            obj[arr[i]]++;\n        }else{\n            obj[arr[i]] = 1;\n  \
    \      }\n    }\n    for(let key in obj){\n        if(obj[key] > max){\n     \
    \       max = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n\
    \        }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n\
    \    }\n    for(let i = 0; i < maxArr.length; i++){\n        obj[maxArr[i]] =\
    \ max;\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp7iqubo5m.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7iqubo5m.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let arr = test.split(\" \");\n    let obj = {};\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    let max = 0;\n    let maxArr\
    \ = [];\n    for(let key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n     \
    \   }else if(obj[key] === max){\n            maxArr.push(key);\n        }\n  \
    \  }\n    let result = {};\n    for(let i = 0; i < maxArr.length; i++){\n    \
    \    result[maxArr[i]] = max;\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmppp6ht09_.js:49:10)\n    at Object.<anonymous> (/tmp/tmppp6ht09_.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] in dict){\n            dict[arr[i]]++;\n\
    \        }else{\n            dict[arr[i]] = 1;\n        }\n        if(dict[arr[i]]\
    \ > max){\n            max = dict[arr[i]];\n        }\n    }\n    var result =\
    \ {};\n    for(var key in dict){\n        if(dict[key] == max){\n            result[key]\
    \ = dict[key];\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpm6qxnxib.js:44:10)\n    at Object.<anonymous> (/tmp/tmpm6qxnxib.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        } else {\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp95h115sz.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp95h115sz.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp8wxtedf8.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8wxtedf8.js:37:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    var max = 0;\n    var\
    \ maxArr = [];\n    for(var i = 0; i < arr.length; i++){\n        if(obj[arr[i]]){\n\
    \            obj[arr[i]]++;\n        } else {\n            obj[arr[i]] = 1;\n\
    \        }\n    }\n    for(var key in obj){\n        if(obj[key] > max){\n   \
    \         max = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n\
    \        } else if(obj[key] === max){\n            maxArr.push(key);\n       \
    \ }\n    }\n    for(var i = 0; i < maxArr.length; i++){\n        obj[maxArr[i]]\
    \ = max;\n    }\n    return obj;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpcdr_0d64.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcdr_0d64.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(!obj[arr[i]]){\n            obj[arr[i]] = 1;\n        } else\
    \ {\n            obj[arr[i]]++;\n        }\n    }\n    var max = 0;\n    var maxArr\
    \ = [];\n    for(var key in obj){\n        if(obj[key] > max){\n            max\
    \ = obj[key];\n            maxArr = [];\n            maxArr.push(key);\n     \
    \   } else if(obj[key] === max){\n            maxArr.push(key);\n        }\n \
    \   }\n    var result = {};\n    for(var i = 0; i < maxArr.length; i++){\n   \
    \     result[maxArr[i]] = max;\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp732j7qui.js:49:10)\n    at Object.<anonymous> (/tmp/tmp732j7qui.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var max = 0;\n    var max_keys = [];\n    var arr =\
    \ test.split(' ');\n    for (var i = 0; i < arr.length; i++){\n        if (result[arr[i]]){\n\
    \            result[arr[i]] += 1;\n        }\n        else {\n            result[arr[i]]\
    \ = 1;\n        }\n    }\n    for (var key in result){\n        if (result[key]\
    \ > max){\n            max = result[key];\n            max_keys = [];\n      \
    \      max_keys.push(key);\n        }\n        else if (result[key] == max){\n\
    \            max_keys.push(key);\n        }\n    }\n    for (var i = 0; i < max_keys.length;\
    \ i++){\n        result[max_keys[i]] = max;\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpvclmg5jy.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvclmg5jy.js:54:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpszljbjks.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpszljbjks.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]] === undefined){\n            result[arr[i]]\
    \ = 1;\n        } else {\n            result[arr[i]]++;\n        }\n    }\n  \
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpgtlyr2lx.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgtlyr2lx.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] in dict){\n            dict[arr[i]]++;\n        }\n\
    \        else{\n            dict[arr[i]] = 1;\n        }\n    }\n    var max =\
    \ 0;\n    for(var key in dict){\n        if(dict[key] > max){\n            max\
    \ = dict[key];\n        }\n    }\n    var newDict = {};\n    for(var key in dict){\n\
    \        if(dict[key] == max){\n            newDict[key] = max;\n        }\n \
    \   }\n    return newDict;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpapozd68t.js:47:10)\n    at Object.<anonymous> (/tmp/tmpapozd68t.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpm93gn3oj.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm93gn3oj.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] in dict){\n            dict[arr[i]]++;\n        }\n\
    \        else{\n            dict[arr[i]] = 1;\n        }\n    }\n    var max =\
    \ 0;\n    for(var key in dict){\n        if(dict[key] > max){\n            max\
    \ = dict[key];\n        }\n    }\n    var result = {};\n    for(var key in dict){\n\
    \        if(dict[key] == max){\n            result[key] = max;\n        }\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpvkjub8vu.js:47:10)\n    at Object.<anonymous> (/tmp/tmpvkjub8vu.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(let key\
    \ in result){\n        if(result[key] < max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpwx6kwd3f.js:42:10)\n    at Object.<anonymous> (/tmp/tmpwx6kwd3f.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var count = 0;\n    var max = 0;\n    var maxLetter\
    \ = '';\n    var letters = test.split(' ');\n    for(var i = 0; i < letters.length;\
    \ i++){\n        if(result[letters[i]]){\n            result[letters[i]]++;\n\
    \        }else{\n            result[letters[i]] = 1;\n        }\n    }\n    for(var\
    \ key in result){\n        if(result[key] > max){\n            max = result[key];\n\
    \            maxLetter = key;\n        }\n    }\n    for(var key in result){\n\
    \        if(result[key] === max){\n            count++;\n        }\n    }\n  \
    \  if(count > 1){\n        delete result[maxLetter];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ b: 2 }\n\nshould equal\n\n{ a: 2, b: 2\
    \ }\n    at test (/tmp/tmp9pl1v7og.js:45:10)\n    at Object.<anonymous> (/tmp/tmp9pl1v7og.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { b: 2 },\n  expected: { a: 2, b: 2 },\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(\" \");\n    for(var i = 0; i\
    \ < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmprfzgae59.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprfzgae59.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(!result[arr[i]]){\n            result[arr[i]]\
    \ = 1;\n        } else {\n            result[arr[i]]++;\n        }\n    }\n  \
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpq55uj3i9.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq55uj3i9.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var letters = test.split(\" \");\n    var count = {};\n    var max = 0;\n\
    \    var maxLetter = \"\";\n    for(var i = 0; i < letters.length; i++){\n   \
    \     if(count[letters[i]]){\n            count[letters[i]]++;\n        }\n  \
    \      else{\n            count[letters[i]] = 1;\n        }\n        if(count[letters[i]]\
    \ > max){\n            max = count[letters[i]];\n            maxLetter = letters[i];\n\
    \        }\n    }\n    var maxCount = {};\n    for(var key in count){\n      \
    \  if(count[key] == max){\n            maxCount[key] = max;\n        }\n    }\n\
    \    return maxCount;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpzp518tp2.js:47:10)\n    at Object.<anonymous> (/tmp/tmpzp518tp2.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpqnupektq.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqnupektq.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]]++;\n        }else{\n\
    \            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpsom7pbiy.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsom7pbiy.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var dict = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(arr[i] in dict){\n            dict[arr[i]]++;\n\
    \        }\n        else{\n            dict[arr[i]] = 1;\n        }\n    }\n \
    \   var max = 0;\n    for(var key in dict){\n        if(dict[key] > max){\n  \
    \          max = dict[key];\n        }\n    }\n    var result = {};\n    for(var\
    \ key in dict){\n        if(dict[key] == max){\n            result[key] = max;\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp0anwtd0e.js:47:10)\n    at Object.<anonymous> (/tmp/tmp0anwtd0e.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \  var testArray = test.split(\" \");\n  var testObject = {};\n  var max = 0;\n\
    \  for (var i = 0; i < testArray.length; i++) {\n    if (testObject[testArray[i]]\
    \ === undefined) {\n      testObject[testArray[i]] = 1;\n    } else {\n      testObject[testArray[i]]\
    \ += 1;\n    }\n    if (testObject[testArray[i]] > max) {\n      max = testObject[testArray[i]];\n\
    \    }\n  }\n  var maxArray = [];\n  for (var key in testObject) {\n    if (testObject[key]\
    \ === max) {\n      maxArray.push(key);\n    }\n  }\n  var maxObject = {};\n \
    \ for (var i = 0; i < maxArray.length; i++) {\n    maxObject[maxArray[i]] = max;\n\
    \  }\n  return maxObject;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b\
    \ a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"\
    b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"\
    ),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"\
    ),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"\
    g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpqxfikmpt.js:48:10)\n    at Object.<anonymous> (/tmp/tmpqxfikmpt.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] in dict){\n            dict[arr[i]] += 1;\n       \
    \ }\n        else{\n            dict[arr[i]] = 1;\n        }\n    }\n    return\
    \ dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpzz3cy77e.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzz3cy77e.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var dict = {};\n    var max = 0;\n    var max_keys = [];\n    var test_split\
    \ = test.split(\" \");\n    for (var i = 0; i < test_split.length; i++){\n   \
    \     if (test_split[i] in dict){\n            dict[test_split[i]] += 1;\n   \
    \     }\n        else{\n            dict[test_split[i]] = 1;\n        }\n    }\n\
    \    for (var key in dict){\n        if (dict[key] > max){\n            max =\
    \ dict[key];\n            max_keys = [key];\n        }\n        else if (dict[key]\
    \ == max){\n            max_keys.push(key);\n        }\n    }\n    for (var i\
    \ = 0; i < max_keys.length; i++){\n        dict[max_keys[i]] = max;\n    }\n \
    \   return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpugtkk7v4.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpugtkk7v4.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    let max = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    for(let key\
    \ in result){\n        if(result[key] !== max){\n            delete result[key];\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpre82u0s6.js:42:10)\n    at Object.<anonymous> (/tmp/tmpre82u0s6.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    let result = {};\n    let arr = test.split(' ');\n    for(let i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmp6bkai_3r.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6bkai_3r.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var max = 0;\n    var maxKey = [];\n    var arr = test.split(\"\
    \ \");\n    for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n\
    \            result[arr[i]]++;\n        }else{\n            result[arr[i]] = 1;\n\
    \        }\n    }\n    for(var key in result){\n        if(result[key] > max){\n\
    \            max = result[key];\n            maxKey = [];\n            maxKey.push(key);\n\
    \        }else if(result[key] == max){\n            maxKey.push(key);\n      \
    \  }\n    }\n    var result2 = {};\n    for(var i = 0; i < maxKey.length; i++){\n\
    \        result2[maxKey[i]] = max;\n    }\n    return result2;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpckm9s0sq.js:49:10)\n    at Object.<anonymous> (/tmp/tmpckm9s0sq.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\"\
    : 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\"\
    : 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1,\
    \ \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\": 4});\n\
    \  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    \"),{});\n  assert.deepEqual(candidate(\"a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmps14appgl.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps14appgl.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var max = 0;\n    var maxKeys = [];\n    var testArray\
    \ = test.split(' ');\n    for(var i = 0; i < testArray.length; i++){\n       \
    \ if(result[testArray[i]]){\n            result[testArray[i]] += 1;\n        }\
    \ else {\n            result[testArray[i]] = 1;\n        }\n    }\n    for(var\
    \ key in result){\n        if(result[key] > max){\n            max = result[key];\n\
    \            maxKeys = [];\n            maxKeys.push(key);\n        } else if(result[key]\
    \ === max){\n            maxKeys.push(key);\n        }\n    }\n    var finalResult\
    \ = {};\n    for(var i = 0; i < maxKeys.length; i++){\n        finalResult[maxKeys[i]]\
    \ = max;\n    }\n    return finalResult;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpu9csrb0u.js:49:10)\n    at Object.<anonymous> (/tmp/tmpu9csrb0u.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var hist = {};\n    var max = 0;\n    var max_key = '';\n    var max_keys\
    \ = [];\n    var words = test.split(' ');\n    for (var i = 0; i < words.length;\
    \ i++){\n        if (words[i] in hist){\n            hist[words[i]]++;\n     \
    \   } else {\n            hist[words[i]] = 1;\n        }\n        if (hist[words[i]]\
    \ > max){\n            max = hist[words[i]];\n            max_key = words[i];\n\
    \            max_keys = [max_key];\n        } else if (hist[words[i]] == max){\n\
    \            max_keys.push(words[i]);\n        }\n    }\n    var result = {};\n\
    \    for (var i = 0; i < max_keys.length; i++){\n        result[max_keys[i]] =\
    \ max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp37m_skrf.js:48:10)\n    at Object.<anonymous> (/tmp/tmp37m_skrf.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var dict = {};\n    var max = 0;\n    var\
    \ max_key = [];\n    for(var i = 0; i < arr.length; i++){\n        if(dict[arr[i]]){\n\
    \            dict[arr[i]] += 1;\n        }else{\n            dict[arr[i]] = 1;\n\
    \        }\n    }\n    for(var key in dict){\n        if(dict[key] > max){\n \
    \           max = dict[key];\n            max_key = [key];\n        }else if(dict[key]\
    \ == max){\n            max_key.push(key);\n        }\n    }\n    var result =\
    \ {};\n    for(var i = 0; i < max_key.length; i++){\n        result[max_key[i]]\
    \ = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmp2d68zfwm.js:48:10)\n    at Object.<anonymous> (/tmp/tmp2d68zfwm.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    var max = 0;\n    var\
    \ max_key = '';\n    for(var i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n\
    \            result[arr[i]]++;\n        }else{\n            result[arr[i]] = 1;\n\
    \        }\n        if(result[arr[i]] > max){\n            max = result[arr[i]];\n\
    \            max_key = arr[i];\n        }\n    }\n    var final_result = {};\n\
    \    for(var key in result){\n        if(result[key] == max){\n            final_result[key]\
    \ = max;\n        }\n    }\n    return final_result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"\
    a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"\
    ),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\":\
    \ 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpqrfjd9ri.js:46:10)\n    at Object.<anonymous> (/tmp/tmpqrfjd9ri.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(\" \");\n    var dict = {};\n    for(var i = 0; i <\
    \ arr.length; i++){\n        if(dict[arr[i]]){\n            dict[arr[i]] += 1;\n\
    \        }\n        else{\n            dict[arr[i]] = 1;\n        }\n    }\n \
    \   return dict;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"\
    a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"\
    b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"),{\"a\": 1, \"b\": 1, \"\
    c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\"\
    : 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b b b a\"),{\"b\"\
    : 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n\
    \  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"a\"),{\"\
    a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmpv8zee72n.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv8zee72n.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var arr = test.split(' ');\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(obj[arr[i]]){\n            obj[arr[i]] += 1;\n        } else\
    \ {\n            obj[arr[i]] = 1;\n        }\n    }\n    return obj;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = histogram;\n\
    \  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"a b c d g\"\
    ),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ a: 2, b: 2, c: 1 }\n\nshould equal\n\n\
    { a: 2, b: 2 }\n    at test (/tmp/tmplyvhj9b8.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplyvhj9b8.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: { a: 2, b:\
    \ 2, c: 1 },\n  expected: { a: 2, b: 2 },\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string representing a space separated lowercase letters, return\
    \ a dictionary\n// of the letter with the most repetition and containing the corresponding\
    \ count.\n// If several letters have the same occurrence, return all of them.\n\
    // Example:\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a\
    \ b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n\
    // histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\nfunction histogram(test){\n\
    \    var result = {};\n    var arr = test.split(' ');\n    var max = 0;\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(result[arr[i]]){\n            result[arr[i]]++;\n\
    \        }else{\n            result[arr[i]] = 1;\n        }\n        if(result[arr[i]]\
    \ > max){\n            max = result[arr[i]];\n        }\n    }\n    var final\
    \ = {};\n    for(var key in result){\n        if(result[key] === max){\n     \
    \       final[key] = result[key];\n        }\n    }\n    return final;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = histogram;\n  assert.deepEqual(candidate(\"a b b a\"),{\"a\": 2, \"b\": 2});\n\
    \  assert.deepEqual(candidate(\"a b c a b\"),{\"a\": 2, \"b\": 2});\n  assert.deepEqual(candidate(\"\
    a b c d g\"),{\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\
    r t g\"),{\"r\": 1, \"t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"b b\
    \ b b a\"),{\"b\": 4});\n  assert.deepEqual(candidate(\"r t g\"),{\"r\": 1, \"\
    t\": 1, \"g\": 1});\n  assert.deepEqual(candidate(\"\"),{});\n  assert.deepEqual(candidate(\"\
    a\"),{\"a\": 1});\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ '': 1 }\n\nshould equal\n\n{}\n    at\
    \ test (/tmp/tmpwz3338nv.js:44:10)\n    at Object.<anonymous> (/tmp/tmpwz3338nv.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: { '': 1 },\n  expected: {},\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
