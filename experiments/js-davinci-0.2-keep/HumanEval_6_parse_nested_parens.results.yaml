name: HumanEval_6_parse_nested_parens
language: javascript
results:
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var paren_count = [];\n    for (var i = 0; i\
    \ < paren_array.length; i++){\n        var paren_count_temp = 0;\n        for\
    \ (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == '('){\n                paren_count_temp++;\n            }\n        }\n  \
    \      paren_count.push(paren_count_temp);\n    }\n    return paren_count;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 3, 1, 5 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpy3gnpq2h.js:26:10)\n    at Object.<anonymous> (/tmp/tmpy3gnpq2h.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1, 5 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var paren_count = [];\n    for(var i = 0;\
    \ i < paren_array.length; i++){\n        var paren_count_temp = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                paren_count_temp++;\n            }\n        }\n   \
    \     paren_count.push(paren_count_temp);\n    }\n    return paren_count;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 3, 1, 5 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpwwnrebkz.js:26:10)\n    at Object.<anonymous> (/tmp/tmpwwnrebkz.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1, 5 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var paren_count = [];\n    for (var i = 0; i\
    \ < paren_array.length; i++){\n        var paren_level = 0;\n        var paren_stack\
    \ = [];\n        for (var j = 0; j < paren_array[i].length; j++){\n          \
    \  if (paren_array[i][j] == '('){\n                paren_stack.push(paren_array[i][j]);\n\
    \                paren_level = Math.max(paren_level, paren_stack.length);\n  \
    \          }\n            else if (paren_array[i][j] == ')'){\n              \
    \  paren_stack.pop();\n            }\n        }\n        paren_count.push(paren_level);\n\
    \    }\n    return paren_count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var max_depth = 0;\n    var depth = 0;\n   \
    \ var max_depth_array = [];\n    for (var i = 0; i < paren_array.length; i++){\n\
    \        for (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == '('){\n                depth++;\n            }\n            else if (paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n            if (depth > max_depth){\n\
    \                max_depth = depth;\n            }\n        }\n        max_depth_array.push(max_depth);\n\
    \        max_depth = 0;\n        depth = 0;\n    }\n    return max_depth_array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(max_nested_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxt_ghmqs.js:10\n        result.push(max_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: max_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpxt_ghmqs.js:10:16)\n    at test (/tmp/tmpxt_ghmqs.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpxt_ghmqs.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let count = 0;\n       \
    \ let max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var max_depth = [];\n    for(var i = 0; i\
    \ < paren_array.length; i++){\n        var depth = 0;\n        var max = 0;\n\
    \        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                depth++;\n                if(depth > max){\n   \
    \                 max = depth;\n                }\n            }\n           \
    \ else if(paren_array[i][j] == \")\"){\n                depth--;\n           \
    \ }\n        }\n        max_depth.push(max);\n    }\n    return max_depth;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let count = 0;\n        let max = 0;\n        for(let j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] === '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ === ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var max_depth = 0;\n    var depth = 0;\n   \
    \ var max_depth_array = [];\n    for (var i = 0; i < paren_array.length; i++){\n\
    \        for (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == '('){\n                depth++;\n            }\n            else if (paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n            if (depth > max_depth){\n\
    \                max_depth = depth;\n            }\n        }\n        max_depth_array.push(max_depth);\n\
    \        max_depth = 0;\n        depth = 0;\n    }\n    return max_depth_array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let max_depth = 0;\n    let depth = 0;\n   \
    \ let max_depth_array = [];\n    for (let i = 0; i < paren_array.length; i++){\n\
    \        for (let j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ === '('){\n                depth += 1;\n            }\n            else if (paren_array[i][j]\
    \ === ')'){\n                depth -= 1;\n            }\n            if (depth\
    \ > max_depth){\n                max_depth = depth;\n            }\n        }\n\
    \        max_depth_array.push(max_depth);\n        max_depth = 0;\n        depth\
    \ = 0;\n    }\n    return max_depth_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf2x5val3.js:10\n        result.push(parse_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpf2x5val3.js:10:16)\n    at test (/tmp/tmpf2x5val3.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpf2x5val3.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let count = 0;\n        let max = 0;\n        for(let j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] === '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ === ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == \"(\"){\n                count++;\n         \
    \       if(count > max){\n                    max = count;\n                }\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  count--;\n            }\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_single_paren(paren_array[i]));\n    }\n   \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz4e3z673.js:10\n        result.push(parse_single_paren(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_single_paren is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpz4e3z673.js:10:16)\n    at test (/tmp/tmpz4e3z673.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpz4e3z673.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max_count = 0;\n        for(var j = 0; j < paren.length; j++){\n       \
    \     if(paren[j] == '('){\n                count++;\n                if(count\
    \ > max_count){\n                    max_count = count;\n                }\n \
    \           }\n            else if(paren[j] == ')'){\n                count--;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens =\
    \ paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren = parens[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let arr = paren_string.split('\
    \ ');\n    let result = [];\n    for(let i = 0; i < arr.length; i++){\n      \
    \  let count = 0;\n        let max = 0;\n        for(let j = 0; j < arr[i].length;\
    \ j++){\n            if(arr[i][j] === '('){\n                count++;\n      \
    \          if(count > max){\n                    max = count;\n              \
    \  }\n            }\n            if(arr[i][j] === ')'){\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }else if(paren[j]\
    \ == \")\"){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var max_nesting = [];\n    for (var i = 0; i\
    \ < paren_array.length; i++){\n        var paren_count = 0;\n        var max_count\
    \ = 0;\n        for (var j = 0; j < paren_array[i].length; j++){\n           \
    \ if (paren_array[i][j] == '('){\n                paren_count++;\n           \
    \     if (paren_count > max_count){\n                    max_count = paren_count;\n\
    \                }\n            }\n            else if (paren_array[i][j] == ')'){\n\
    \                paren_count--;\n            }\n        }\n        max_nesting.push(max_count);\n\
    \    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar result = [];\n\
    \tvar paren_array = paren_string.split(' ');\n\tfor(var i = 0; i < paren_array.length;\
    \ i++){\n\t\tvar paren_count = 0;\n\t\tvar max_paren_count = 0;\n\t\tfor(var j\
    \ = 0; j < paren_array[i].length; j++){\n\t\t\tif(paren_array[i][j] == '('){\n\
    \t\t\t\tparen_count++;\n\t\t\t\tif(paren_count > max_paren_count){\n\t\t\t\t\t\
    max_paren_count = paren_count;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(paren_array[i][j]\
    \ == ')'){\n\t\t\t\tparen_count--;\n\t\t\t}\n\t\t}\n\t\tresult.push(max_paren_count);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_arr\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_arr.length;\
    \ i++){\n        let paren = paren_arr[i];\n        let count = 0;\n        let\
    \ max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            if(paren[j]\
    \ === ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result =\
    \ [];\n    let paren_array = paren_string.split(' ');\n    for(let i = 0; i <\
    \ paren_array.length; i++){\n        let paren = paren_array[i];\n        let\
    \ count = 0;\n        let max = 0;\n        for(let j = 0; j < paren.length; j++){\n\
    \            if(paren[j] === '('){\n                count++;\n               \
    \ if(count > max){\n                    max = count;\n                }\n    \
    \        }\n            else if(paren[j] === ')'){\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_4ti6rmp.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmp_4ti6rmp.js:10:16)\n    at test (/tmp/tmp_4ti6rmp.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp_4ti6rmp.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmps4ws4g5_.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmps4ws4g5_.js:10:16)\n    at test (/tmp/tmps4ws4g5_.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmps4ws4g5_.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let count = 0;\n        let max = 0;\n        for(let j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] === '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ === ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphc720dft.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmphc720dft.js:10:16)\n    at test (/tmp/tmphc720dft.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmphc720dft.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let paren_array\
    \ = paren_string.split(' ');\n  let result = [];\n  for(let i = 0; i < paren_array.length;\
    \ i++){\n    let paren_str = paren_array[i];\n    let max_nesting = 0;\n    let\
    \ current_nesting = 0;\n    for(let j = 0; j < paren_str.length; j++){\n     \
    \ if(paren_str[j] === '('){\n        current_nesting++;\n        if(current_nesting\
    \ > max_nesting){\n          max_nesting = current_nesting;\n        }\n     \
    \ }\n      else if(paren_str[j] === ')'){\n        current_nesting--;\n      }\n\
    \    }\n    result.push(max_nesting);\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let count = 0;\n        let max = 0;\n        for(let j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] === '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ === ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result =\
    \ [];\n    var paren_array = paren_string.split(' ');\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpebpioqw1.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpebpioqw1.js:10:16)\n    at test (/tmp/tmpebpioqw1.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpebpioqw1.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_single_paren(paren_array[i]));\n    }\n   \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8wmcxh5s.js:10\n        result.push(parse_single_paren(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_single_paren is not defined\n    at\
    \ parse_nested_parens (/tmp/tmp8wmcxh5s.js:10:16)\n    at test (/tmp/tmp8wmcxh5s.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp8wmcxh5s.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_nested_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp77f6inpy.js:10\n        result.push(get_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmp77f6inpy.js:10:16)\n    at test (/tmp/tmp77f6inpy.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp77f6inpy.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let parens =\
    \ paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < parens.length;\
    \ i++){\n        let count = 0;\n        let max = 0;\n        for(let j = 0;\
    \ j < parens[i].length; j++){\n            if(parens[i][j] === '('){\n       \
    \         count++;\n                if(count > max){\n                    max\
    \ = count;\n                }\n            } else {\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == \"(\"){\n                count++;\n         \
    \       if(count > max){\n                    max = count;\n                }\n\
    \            }\n            else if(paren_group[j] == \")\"){\n              \
    \  count--;\n            }\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == '('){\n                count++;\n          \
    \      if(count > max_count){\n                    max_count = count;\n      \
    \          }\n            }\n            else if(paren_group[j] == ')'){\n   \
    \             count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == '('){\n                count++;\n          \
    \      if(count > max_count){\n                    max_count = count;\n      \
    \          }\n            }\n            else if(paren_group[j] == ')'){\n   \
    \             count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        var max_depth = 0;\n\
    \        var depth = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == '('){\n                depth++;\n          \
    \      if(depth > max_depth){\n                    max_depth = depth;\n      \
    \          }\n            }\n            else if(paren_group[j] == ')'){\n   \
    \             depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(\" \");\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_group = paren_array[i];\n    var count = 0;\n    var max_count\
    \ = 0;\n    for(var j = 0; j < paren_group.length; j++){\n      if(paren_group[j]\
    \ == \"(\"){\n        count++;\n        if(count > max_count){\n          max_count\
    \ = count;\n        }\n      }\n      else if(paren_group[j] == \")\"){\n    \
    \    count--;\n      }\n    }\n    result.push(max_count);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let count = 0;\n       \
    \ let max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var max_nested_parens = [];\n    for (var i\
    \ = 0; i < paren_array.length; i++){\n        var paren_count = 0;\n        var\
    \ max_paren_count = 0;\n        for (var j = 0; j < paren_array[i].length; j++){\n\
    \            if (paren_array[i][j] == '('){\n                paren_count++;\n\
    \                if (paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if (paren_array[i][j]\
    \ == ')'){\n                paren_count--;\n            }\n        }\n       \
    \ max_nested_parens.push(max_paren_count);\n    }\n    return max_nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var max_nesting =\
    \ 0;\n        var current_nesting = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == '('){\n                current_nesting++;\n\
    \                if(current_nesting > max_nesting){\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            else if(paren_group[j]\
    \ == ')'){\n                current_nesting--;\n            }\n        }\n   \
    \     result.push(max_nesting);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let count = 0;\n       \
    \ let max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == '('){\n                count++;\n           \
    \     if(count > max){\n                    max = count;\n                }\n\
    \            }else if(paren_group[j] == ')'){\n                count--;\n    \
    \        }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let count = 0;\n       \
    \ let max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }else if(paren[j]\
    \ === ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result =\
    \ [];\n    let paren_groups = paren_string.split(' ');\n    for(let i = 0; i <\
    \ paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n   \
    \     let max_depth = 0;\n        let current_depth = 0;\n        for(let j =\
    \ 0; j < paren_group.length; j++){\n            if(paren_group[j] === '('){\n\
    \                current_depth++;\n                if(current_depth > max_depth){\n\
    \                    max_depth = current_depth;\n                }\n         \
    \   }\n            else if(paren_group[j] === ')'){\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var max_nesting = 0;\n \
    \       var current_nesting = 0;\n        for(var j = 0; j < paren.length; j++){\n\
    \            if(paren[j] == '('){\n                current_nesting++;\n      \
    \          if(current_nesting > max_nesting){\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            else if(paren[j]\
    \ == ')'){\n                current_nesting--;\n            }\n        }\n   \
    \     result.push(max_nesting);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens =\
    \ paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var paren = parens[i];\n        var count = 0;\n        var max\
    \ = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }else if(paren[j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result =\
    \ [];\n    let paren_groups = paren_string.split(' ');\n    for(let i = 0; i <\
    \ paren_groups.length; i++){\n        let paren_group = paren_groups[i];\n   \
    \     let max_depth = 0;\n        let current_depth = 0;\n        for(let j =\
    \ 0; j < paren_group.length; j++){\n            if(paren_group[j] === '('){\n\
    \                current_depth++;\n                if(current_depth > max_depth){\n\
    \                    max_depth = current_depth;\n                }\n         \
    \   }\n            else if(paren_group[j] === ')'){\n                current_depth--;\n\
    \            }\n        }\n        result.push(max_depth);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let paren_array\
    \ = paren_string.split(' ');\n  let result = [];\n  for(let i = 0; i < paren_array.length;\
    \ i++){\n    let count = 0;\n    let max = 0;\n    for(let j = 0; j < paren_array[i].length;\
    \ j++){\n      if(paren_array[i][j] === '('){\n        count++;\n        if(count\
    \ > max){\n          max = count;\n        }\n      }\n      if(paren_array[i][j]\
    \ === ')'){\n        count--;\n      }\n    }\n    result.push(max);\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(' ');\n    var paren_levels = [];\n    for (var i = 0;\
    \ i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var paren_level = 0;\n        var max_level = 0;\n        for (var j\
    \ = 0; j < paren_group.length; j++){\n            if (paren_group[j] == '('){\n\
    \                paren_level++;\n                if (paren_level > max_level){\n\
    \                    max_level = paren_level;\n                }\n           \
    \ }\n            else if (paren_group[j] == ')'){\n                paren_level--;\n\
    \            }\n        }\n        paren_levels.push(max_level);\n    }\n    return\
    \ paren_levels;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(\" \");\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    for(var j\
    \ = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j] == \"(\"){\n\
    \        paren_count++;\n        if(paren_count > max_paren_count){\n        \
    \  max_paren_count = paren_count;\n        }\n      }\n      else if(paren_array[i][j]\
    \ == \")\"){\n        paren_count--;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == '('){\n                count++;\n          \
    \      if(count > max_count){\n                    max_count = count;\n      \
    \          }\n            }\n            else if(paren_group[j] == ')'){\n   \
    \             count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === '('){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] === ')'){\n\
    \                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe7je_k6s.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpe7je_k6s.js:10:16)\n    at test (/tmp/tmpe7je_k6s.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpe7je_k6s.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var temp = paren_array[i];\n        var count = 0;\n        var\
    \ max = 0;\n        for(var j = 0; j < temp.length; j++){\n            if(temp[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(temp[j] == ')'){\n                count--;\n            }\n        }\n  \
    \      result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var paren_stack =\
    \ [];\n        var max_depth = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            var paren = paren_group[j];\n            if(paren == \"(\"\
    ){\n                paren_stack.push(paren);\n                if(paren_stack.length\
    \ > max_depth){\n                    max_depth = paren_stack.length;\n       \
    \         }\n            }\n            else if(paren == \")\"){\n           \
    \     paren_stack.pop();\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplmax5wbl.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmplmax5wbl.js:10:16)\n    at test (/tmp/tmplmax5wbl.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmplmax5wbl.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(' ');\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    for(var j\
    \ = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j] === '('){\n\
    \        paren_count++;\n        if(paren_count > max_paren_count){\n        \
    \  max_paren_count = paren_count;\n        }\n      } else if(paren_array[i][j]\
    \ === ')'){\n        paren_count--;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result =\
    \ [];\n    var paren_array = paren_string.split(' ');\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == '('){\n                count++;\n           \
    \     if(count > max){\n                    max = count;\n                }\n\
    \            }\n            else if(paren_group[j] == ')'){\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(' ');\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    for(var j\
    \ = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j] === '('){\n\
    \        paren_count++;\n        if(paren_count > max_paren_count){\n        \
    \  max_paren_count = paren_count;\n        }\n      }\n      else if(paren_array[i][j]\
    \ === ')'){\n        paren_count--;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_max_nested_parens(paren_array[i]));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjesqy1ka.js:10\n        result.push(get_max_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_max_nested_parens is not defined\n  \
    \  at parse_nested_parens (/tmp/tmpjesqy1ka.js:10:16)\n    at test (/tmp/tmpjesqy1ka.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpjesqy1ka.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(' ');\n    var max_levels = [];\n    for (var i = 0; i\
    \ < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n \
    \       var level = 0;\n        var max_level = 0;\n        for (var j = 0; j\
    \ < paren_group.length; j++){\n            if (paren_group[j] == '('){\n     \
    \           level += 1;\n                if (level > max_level){\n           \
    \         max_level = level;\n                }\n            }\n            else\
    \ if (paren_group[j] == ')'){\n                level -= 1;\n            }\n  \
    \      }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp01e_id1d.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmp01e_id1d.js:10:16)\n    at test (/tmp/tmp01e_id1d.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp01e_id1d.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8owhp12r.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmp8owhp12r.js:10:16)\n    at test (/tmp/tmp8owhp12r.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp8owhp12r.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_nested_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1oigifhy.js:10\n        result.push(get_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmp1oigifhy.js:10:16)\n    at test (/tmp/tmp1oigifhy.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp1oigifhy.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj7p4bodp.js:10\n        result.push(parse_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpj7p4bodp.js:10:16)\n    at test (/tmp/tmpj7p4bodp.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpj7p4bodp.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var paren_levels = [];\n    for (var i = 0;\
    \ i < paren_array.length; i++){\n        var paren_level = 0;\n        var paren_count\
    \ = 0;\n        for (var j = 0; j < paren_array[i].length; j++){\n           \
    \ if (paren_array[i][j] == '('){\n                paren_count++;\n           \
    \     if (paren_count > paren_level){\n                    paren_level = paren_count;\n\
    \                }\n            }\n            else if (paren_array[i][j] == ')'){\n\
    \                paren_count--;\n            }\n        }\n        paren_levels.push(paren_level);\n\
    \    }\n    return paren_levels;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let paren_levels = [];\n    for (let i = 0;\
    \ i < paren_array.length; i++){\n        let paren_level = 0;\n        for (let\
    \ j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j] ===\
    \ '('){\n                paren_level++;\n            }\n        }\n        paren_levels.push(paren_level);\n\
    \    }\n    return paren_levels;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 3, 1, 5 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmp4x_xlpzr.js:26:10)\n    at Object.<anonymous> (/tmp/tmp4x_xlpzr.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1, 5 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var max_nested_parens = [];\n    for (var i\
    \ = 0; i < paren_array.length; i++){\n        max_nested_parens.push(max_nested_parens_helper(paren_array[i]));\n\
    \    }\n    return max_nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqqcb8cu4.js:10\n        max_nested_parens.push(max_nested_parens_helper(paren_array[i]));\n\
    \                          ^\n\nReferenceError: max_nested_parens_helper is not\
    \ defined\n    at parse_nested_parens (/tmp/tmpqqcb8cu4.js:10:27)\n    at test\
    \ (/tmp/tmpqqcb8cu4.js:20:20)\n    at Object.<anonymous> (/tmp/tmpqqcb8cu4.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var paren_count =\
    \ 0;\n        var max_paren_count = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == \"(\"){\n                paren_count++;\n\
    \                if(paren_count > max_paren_count){\n                    max_paren_count\
    \ = paren_count;\n                }\n            }\n            else if(paren_group[j]\
    \ == \")\"){\n                paren_count--;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max_count = 0;\n        for(var j = 0; j < paren.length; j++){\n       \
    \     if(paren[j] == '('){\n                count++;\n                if(count\
    \ > max_count){\n                    max_count = count;\n                }\n \
    \           }\n            else if(paren[j] == ')'){\n                count--;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === '('){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] === ')'){\n\
    \                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_max_nested_parens(paren_array[i]));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt94flr6n.js:10\n        result.push(get_max_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_max_nested_parens is not defined\n  \
    \  at parse_nested_parens (/tmp/tmpt94flr6n.js:10:16)\n    at test (/tmp/tmpt94flr6n.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpt94flr6n.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp52z8dpdq.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmp52z8dpdq.js:10:16)\n    at test (/tmp/tmp52z8dpdq.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp52z8dpdq.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var stack = [];\n      \
    \  var max_depth = 0;\n        for(var j = 0; j < paren.length; j++){\n      \
    \      if(paren[j] == '('){\n                stack.push(paren[j]);\n         \
    \       max_depth = Math.max(max_depth, stack.length);\n            }\n      \
    \      else if(paren[j] == ')'){\n                stack.pop();\n            }\n\
    \        }\n        result.push(max_depth);\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let count = 0;\n       \
    \ let max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result =\
    \ [];\n    var paren_array = paren_string.split(' ');\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_array\
    \ = paren_string.split(' ');\n\tvar result = [];\n\tfor(var i = 0; i < paren_array.length;\
    \ i++){\n\t\tvar count = 0;\n\t\tvar max = 0;\n\t\tfor(var j = 0; j < paren_array[i].length;\
    \ j++){\n\t\t\tif(paren_array[i][j] == '('){\n\t\t\t\tcount++;\n\t\t\t\tif(count\
    \ > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(paren_array[i][j]\
    \ == ')'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t}\n\t\tresult.push(max);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(' ');\n    var paren_levels = [];\n    for (var i = 0;\
    \ i < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n\
    \        var paren_level = 0;\n        var max_paren_level = 0;\n        for (var\
    \ j = 0; j < paren_group.length; j++){\n            if (paren_group[j] == '('){\n\
    \                paren_level++;\n                if (paren_level > max_paren_level){\n\
    \                    max_paren_level = paren_level;\n                }\n     \
    \       }\n            else if (paren_group[j] == ')'){\n                paren_level--;\n\
    \            }\n        }\n        paren_levels.push(max_paren_level);\n    }\n\
    \    return paren_levels;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var max_nesting =\
    \ 0;\n        var current_nesting = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == '('){\n                current_nesting++;\n\
    \                if(current_nesting > max_nesting){\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            else if(paren_group[j]\
    \ == ')'){\n                current_nesting--;\n            }\n        }\n   \
    \     result.push(max_nesting);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_nested_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmilxoa24.js:10\n        result.push(get_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpmilxoa24.js:10:16)\n    at test (/tmp/tmpmilxoa24.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpmilxoa24.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let count = 0;\n       \
    \ let max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqiv2k91g.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpqiv2k91g.js:10:16)\n    at test (/tmp/tmpqiv2k91g.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpqiv2k91g.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max = 0;\n        for(var j = 0; j < paren_group.length; j++){\n \
    \           if(paren_group[j] == '('){\n                count++;\n           \
    \     if(count > max){\n                    max = count;\n                }\n\
    \            }\n            else if(paren_group[j] == ')'){\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    //TODO: Implement\
    \ this function\n    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for (var i = 0; i < paren_array.length; i++) {\n        var paren\
    \ = paren_array[i];\n        var count = 0;\n        var max_count = 0;\n    \
    \    for (var j = 0; j < paren.length; j++) {\n            if (paren[j] == \"\
    (\") {\n                count++;\n                if (count > max_count) {\n \
    \                   max_count = count;\n                }\n            } else\
    \ if (paren[j] == \")\") {\n                count--;\n            }\n        }\n\
    \        result.push(max_count);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(find_max_nested_parens(paren_array[i]));\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0ofr5vkm.js:10\n        result.push(find_max_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: find_max_nested_parens is not defined\n \
    \   at parse_nested_parens (/tmp/tmp0ofr5vkm.js:10:16)\n    at test (/tmp/tmp0ofr5vkm.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp0ofr5vkm.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(' ');\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    for(var j\
    \ = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j] === '('){\n\
    \        paren_count++;\n        if(paren_count > max_paren_count){\n        \
    \  max_paren_count = paren_count;\n        }\n      } else if(paren_array[i][j]\
    \ === ')'){\n        paren_count--;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == '('){\n                count++;\n          \
    \      if(count > max_count){\n                    max_count = count;\n      \
    \          }\n            }\n            else if(paren_group[j] == ')'){\n   \
    \             count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(get_nested_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz6wethp0.js:10\n        result.push(get_nested_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: get_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpz6wethp0.js:10:16)\n    at test (/tmp/tmpz6wethp0.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpz6wethp0.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var temp = paren_array[i];\n        var count = 0;\n        var\
    \ max = 0;\n        for(var j = 0; j < temp.length; j++){\n            if(temp[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(temp[j] == ')'){\n                count--;\n            }\n        }\n  \
    \      result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === '('){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] === ')'){\n\
    \                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var max_depth = 0;\n    var depth = 0;\n   \
    \ var max_depth_array = [];\n    for (var i = 0; i < paren_array.length; i++){\n\
    \        for (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == '('){\n                depth++;\n            } else if (paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n            if (depth > max_depth){\n\
    \                max_depth = depth;\n            }\n        }\n        max_depth_array.push(max_depth);\n\
    \        max_depth = 0;\n        depth = 0;\n    }\n    return max_depth_array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === '('){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] === ')'){\n\
    \                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var output = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        output.push(max_paren_count);\n    }\n    return\
    \ output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_groups.length;\
    \ i++){\n        let paren_group = paren_groups[i];\n        let max_level = 0;\n\
    \        let current_level = 0;\n        for(let j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] === '('){\n                current_level++;\n\
    \                if(current_level > max_level){\n                    max_level\
    \ = current_level;\n                }\n            }\n            else if(paren_group[j]\
    \ === ')'){\n                current_level--;\n            }\n        }\n    \
    \    result.push(max_level);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == '('){\n                count++;\n          \
    \      if(count > max_count){\n                    max_count = count;\n      \
    \          }\n            }\n            else if(paren_group[j] == ')'){\n   \
    \             count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var max_depth = 0;\n        var current_depth = 0;\n        for(var\
    \ j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] ==\
    \ \"(\"){\n                current_depth++;\n                if(current_depth\
    \ > max_depth){\n                    max_depth = current_depth;\n            \
    \    }\n            }\n            else if(paren_array[i][j] == \")\"){\n    \
    \            current_depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(' ');\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_count = 0;\n    var max_paren_count = 0;\n    for(var j\
    \ = 0; j < paren_array[i].length; j++){\n      if(paren_array[i][j] === '('){\n\
    \        paren_count++;\n        if(paren_count > max_paren_count){\n        \
    \  max_paren_count = paren_count;\n        }\n      } else if(paren_array[i][j]\
    \ === ')'){\n        paren_count--;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var max_nesting =\
    \ 0;\n        var current_nesting = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == '('){\n                current_nesting++;\n\
    \                if(current_nesting > max_nesting){\n                    max_nesting\
    \ = current_nesting;\n                }\n            }\n            else if(paren_group[j]\
    \ == ')'){\n                current_nesting--;\n            }\n        }\n   \
    \     result.push(max_nesting);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let paren_levels = [];\n    for (let i = 0;\
    \ i < paren_array.length; i++){\n        let paren_level = 0;\n        for (let\
    \ j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j] ===\
    \ '('){\n                paren_level++;\n            }\n            else if (paren_array[i][j]\
    \ === ')'){\n                paren_level--;\n            }\n        }\n      \
    \  paren_levels.push(paren_level);\n    }\n    return paren_levels;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpy5wan4dl.js:29:10)\n    at Object.<anonymous> (/tmp/tmpy5wan4dl.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === '('){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] === ')'){\n\
    \                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == '('){\n                count++;\n          \
    \      if(count > max_count){\n                    max_count = count;\n      \
    \          }\n            }\n            else if(paren_group[j] == ')'){\n   \
    \             count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(' ');\n    var max_nesting = [];\n    for (var i = 0; i\
    \ < paren_groups.length; i++){\n        max_nesting.push(get_max_nesting(paren_groups[i]));\n\
    \    }\n    return max_nesting;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpiufm2tlf.js:10\n        max_nesting.push(get_max_nesting(paren_groups[i]));\n\
    \                    ^\n\nReferenceError: get_max_nesting is not defined\n   \
    \ at parse_nested_parens (/tmp/tmpiufm2tlf.js:10:21)\n    at test (/tmp/tmpiufm2tlf.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpiufm2tlf.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_arr\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_arr.length;\
    \ i++){\n        let paren = paren_arr[i];\n        let stack = [];\n        let\
    \ max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                stack.push(paren[j]);\n                max = Math.max(max,\
    \ stack.length);\n            }else{\n                stack.pop();\n         \
    \   }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === '('){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] === ')'){\n\
    \                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(' ');\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    result.push(parse_parens(paren_array[i]));\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphv4tdaxj.js:10\n    result.push(parse_parens(paren_array[i]));\n\
    \           ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmphv4tdaxj.js:10:12)\n    at test (/tmp/tmphv4tdaxj.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmphv4tdaxj.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_group = paren_array[i];\n        let max_level = 0;\n\
    \        let level = 0;\n        for(let j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] === '('){\n                level++;\n         \
    \       if(level > max_level){\n                    max_level = level;\n     \
    \           }\n            }\n            else if(paren_group[j] === ')'){\n \
    \               level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var current_paren = paren_array[i];\n        var current_level\
    \ = 0;\n        var max_level = 0;\n        for(var j = 0; j < current_paren.length;\
    \ j++){\n            if(current_paren[j] == \"(\"){\n                current_level++;\n\
    \                if(current_level > max_level){\n                    max_level\
    \ = current_level;\n                }\n            }\n            else if(current_paren[j]\
    \ == \")\"){\n                current_level--;\n            }\n        }\n   \
    \     result.push(max_level);\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(' ');\n  var result = [];\n  for(var i = 0; i < paren_array.length;\
    \ i++){\n    var paren = paren_array[i];\n    var count = 0;\n    var max = 0;\n\
    \    for(var j = 0; j < paren.length; j++){\n      if(paren[j] === '('){\n   \
    \     count++;\n        if(count > max){\n          max = count;\n        }\n\
    \      }\n      else if(paren[j] === ')'){\n        count--;\n      }\n    }\n\
    \    result.push(max);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let count = 0;\n       \
    \ let max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result =\
    \ [];\n    var paren_array = paren_string.split(' ');\n    for(var i = 0; i <\
    \ paren_array.length; i++){\n        var paren_count = 0;\n        var max_paren_count\
    \ = 0;\n        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(paren_array[i].length - paren_array[i].replace(/[()]/g,\
    \ \"\").length);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 6, 6, 2, 10 ]\n\nshould equal\n\n[ 2,\
    \ 3, 1, 3 ]\n    at test (/tmp/tmpo65zlqrs.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo65zlqrs.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 6, 2,\
    \ 10 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk9i4c3ke.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmpk9i4c3ke.js:10:16)\n    at test (/tmp/tmpk9i4c3ke.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpk9i4c3ke.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let parens =\
    \ paren_string.split(' ');\n    let max_nesting = [];\n    for(let i = 0; i <\
    \ parens.length; i++){\n        let paren = parens[i];\n        let max = 0;\n\
    \        let count = 0;\n        for(let j = 0; j < paren.length; j++){\n    \
    \        if(paren[j] === '('){\n                count++;\n                if(count\
    \ > max){\n                    max = count;\n                }\n            }\n\
    \            else if(paren[j] === ')'){\n                count--;\n          \
    \  }\n        }\n        max_nesting.push(max);\n    }\n    return max_nesting;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_arr\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_arr.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_arr[i].length; j++){\n            if(paren_arr[i][j]\
    \ === '('){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_arr[i][j] === ')'){\n\
    \                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var parens = paren_string.split('\
    \ ');\n  var max_depth = [];\n  for (var i = 0; i < parens.length; i++){\n   \
    \ var depth = 0;\n    var max = 0;\n    for (var j = 0; j < parens[i].length;\
    \ j++){\n      if (parens[i][j] == '('){\n        depth++;\n        if (depth\
    \ > max){\n          max = depth;\n        }\n      }\n      else if (parens[i][j]\
    \ == ')'){\n        depth--;\n      }\n    }\n    max_depth.push(max);\n  }\n\
    \  return max_depth;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let count = 0;\n       \
    \ let max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var max_nested_parens = [];\n    for (var i\
    \ = 0; i < paren_array.length; i++){\n        var paren_group = paren_array[i];\n\
    \        var max_nested_paren = 0;\n        var current_nested_paren = 0;\n  \
    \      for (var j = 0; j < paren_group.length; j++){\n            if (paren_group[j]\
    \ == '('){\n                current_nested_paren += 1;\n                if (current_nested_paren\
    \ > max_nested_paren){\n                    max_nested_paren = current_nested_paren;\n\
    \                }\n            }\n            else if (paren_group[j] == ')'){\n\
    \                current_nested_paren -= 1;\n            }\n        }\n      \
    \  max_nested_parens.push(max_nested_paren);\n    }\n    return max_nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_group = paren_array[i];\n        let stack = [];\n\
    \        let max_depth = 0;\n        for(let j = 0; j < paren_group.length; j++){\n\
    \            let paren = paren_group[j];\n            if(paren === '('){\n   \
    \             stack.push(paren);\n                max_depth = Math.max(max_depth,\
    \ stack.length);\n            }\n            else if(paren === ')'){\n       \
    \         stack.pop();\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var max_level = 0;\n\
    \        var level = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == '('){\n                level++;\n          \
    \      if(level > max_level){\n                    max_level = level;\n      \
    \          }\n            }\n            else if(paren_group[j] == ')'){\n   \
    \             level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result =\
    \ [];\n    var paren_groups = paren_string.split(' ');\n    for(var i = 0; i <\
    \ paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n   \
    \     var depth = 0;\n        var max_depth = 0;\n        for(var j = 0; j < paren_group.length;\
    \ j++){\n            if(paren_group[j] == '('){\n                depth++;\n  \
    \              if(depth > max_depth){\n                    max_depth = depth;\n\
    \                }\n            }\n            else if(paren_group[j] == ')'){\n\
    \                depth--;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren_count = 0;\n        let max_paren_count = 0;\n    \
    \    for(let j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ === '('){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] === ')'){\n\
    \                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var paren_count = [];\n    for (var i = 0; i\
    \ < paren_array.length; i++){\n        var paren_count_temp = 0;\n        for\
    \ (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == '('){\n                paren_count_temp++;\n            }\n        }\n  \
    \      paren_count.push(paren_count_temp);\n    }\n    return paren_count;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 3, 1, 5 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpko1sau2c.js:26:10)\n    at Object.<anonymous> (/tmp/tmpko1sau2c.js:31:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1, 5 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    // TODO: Implement\
    \ this function\n    var paren_array = paren_string.split(\" \");\n    var result\
    \ = [];\n    for (var i = 0; i < paren_array.length; i++) {\n        var count\
    \ = 0;\n        var max = 0;\n        for (var j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] == \"(\") {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            }\n            else if (paren_array[i][j] == \")\")\
    \ {\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let count = 0;\n        let max = 0;\n        for(let j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] === '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ === ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_parens(paren_array[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbrjfl1aw.js:10\n        result.push(parse_parens(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpbrjfl1aw.js:10:16)\n    at test (/tmp/tmpbrjfl1aw.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpbrjfl1aw.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        result.push(parse_nested_parens_helper(paren_array[i]));\n  \
    \  }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7h53007n.js:10\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \               ^\n\nReferenceError: parse_nested_parens_helper is not defined\n\
    \    at parse_nested_parens (/tmp/tmp7h53007n.js:10:16)\n    at test (/tmp/tmp7h53007n.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp7h53007n.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var paren_depth = [];\n    for (var i = 0;\
    \ i < paren_array.length; i++){\n        paren_depth.push(get_paren_depth(paren_array[i]));\n\
    \    }\n    return paren_depth;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpldv22qc1.js:10\n        paren_depth.push(get_paren_depth(paren_array[i]));\n\
    \                    ^\n\nReferenceError: get_paren_depth is not defined\n   \
    \ at parse_nested_parens (/tmp/tmpldv22qc1.js:10:21)\n    at test (/tmp/tmpldv22qc1.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpldv22qc1.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == '('){\n                count++;\n                if(count > max){\n     \
    \               max = count;\n                }\n            }\n            else\
    \ if(paren[j] == ')'){\n                count--;\n            }\n        }\n \
    \       result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_count++;\n                if(paren_count >\
    \ max_paren_count){\n                    max_paren_count = paren_count;\n    \
    \            }\n            }\n            else if(paren_array[i][j] == \")\"\
    ){\n                paren_count--;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var max_depth = 0;\n    var depth = 0;\n   \
    \ var max_depth_array = [];\n    for (var i = 0; i < paren_array.length; i++){\n\
    \        for (var j = 0; j < paren_array[i].length; j++){\n            if (paren_array[i][j]\
    \ == '('){\n                depth++;\n            }\n            else if (paren_array[i][j]\
    \ == ')'){\n                depth--;\n            }\n            if (depth > max_depth){\n\
    \                max_depth = depth;\n            }\n        }\n        max_depth_array.push(max_depth);\n\
    \        max_depth = 0;\n        depth = 0;\n    }\n    return max_depth_array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var count = 0;\n        var max = 0;\n        for(var j = 0;\
    \ j < paren_array[i].length; j++){\n            if(paren_array[i][j] == '('){\n\
    \                count++;\n                if(count > max){\n                \
    \    max = count;\n                }\n            }\n            else if(paren_array[i][j]\
    \ == ')'){\n                count--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_count = 0;\n        var max_paren_count = 0;\n    \
    \    for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == '('){\n                paren_count++;\n                if(paren_count > max_paren_count){\n\
    \                    max_paren_count = paren_count;\n                }\n     \
    \       }\n            else if(paren_array[i][j] == ')'){\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_group = paren_array[i];\n        var count = 0;\n \
    \       var max_count = 0;\n        for(var j = 0; j < paren_group.length; j++){\n\
    \            if(paren_group[j] == '('){\n                count++;\n          \
    \      if(count > max_count){\n                    max_count = count;\n      \
    \          }\n            }\n            else if(paren_group[j] == ')'){\n   \
    \             count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var max_depth = 0;\n    var max_depth_array\
    \ = [];\n    for (var i = 0; i < paren_array.length; i++){\n        var depth\
    \ = 0;\n        for (var j = 0; j < paren_array[i].length; j++){\n           \
    \ if (paren_array[i][j] == '('){\n                depth++;\n            }\n  \
    \          else if (paren_array[i][j] == ')'){\n                depth--;\n   \
    \         }\n        }\n        max_depth_array.push(depth);\n    }\n    return\
    \ max_depth_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmp0m7fe8oa.js:30:10)\n    at Object.<anonymous> (/tmp/tmp0m7fe8oa.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(' ');\n    let result = [];\n    for(let i = 0; i < paren_array.length;\
    \ i++){\n        let paren = paren_array[i];\n        let count = 0;\n       \
    \ let max = 0;\n        for(let j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ === '('){\n                count++;\n                if(count > max){\n    \
    \                max = count;\n                }\n            }\n            else\
    \ if(paren[j] === ')'){\n                count--;\n            }\n        }\n\
    \        result.push(max);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(' ');\n    var max_levels = [];\n    for (var i = 0; i\
    \ < paren_groups.length; i++){\n        var paren_group = paren_groups[i];\n \
    \       var max_level = 0;\n        var level = 0;\n        for (var j = 0; j\
    \ < paren_group.length; j++){\n            if (paren_group[j] == '('){\n     \
    \           level++;\n                if (level > max_level){\n              \
    \      max_level = level;\n                }\n            }\n            else\
    \ if (paren_group[j] == ')'){\n                level--;\n            }\n     \
    \   }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren = paren_array[i];\n        var count = 0;\n       \
    \ var max = 0;\n        for(var j = 0; j < paren.length; j++){\n            if(paren[j]\
    \ == \"(\"){\n                count++;\n                if(count > max){\n   \
    \                 max = count;\n                }\n            }\n           \
    \ else if(paren[j] == \")\"){\n                count--;\n            }\n     \
    \   }\n        result.push(max);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
