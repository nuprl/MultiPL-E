name: HumanEval_124_valid_date
language: javascript
results:
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split(\"-\");\n\
    \    if(dateArr.length !== 3) return false;\n    if(dateArr[0] < 1 || dateArr[0]\
    \ > 12) return false;\n    if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n\
    \    if(dateArr[0] === 2 && dateArr[1] > 29) return false;\n    if(dateArr[0]\
    \ === 4 && dateArr[1] > 30) return false;\n    if(dateArr[0] === 6 && dateArr[1]\
    \ > 30) return false;\n    if(dateArr[0] === 9 && dateArr[1] > 30) return false;\n\
    \    if(dateArr[0] === 11 && dateArr[1] > 30) return false;\n    if(dateArr[2].length\
    \ !== 4) return false;\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6etju03g.js:40:10)\n    at Object.<anonymous> (/tmp/tmp6etju03g.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    if(dateArr.length != 3){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n        \
    \    return false;\n        }\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(year < 1){\n        return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length === 0) {\n       \
    \ return false;\n    }\n    let dateArr = date.split('-');\n    let month = dateArr[0];\n\
    \    let day = dateArr[1];\n    let year = dateArr[2];\n    if (month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if (month === '01' || month === '03'\
    \ || month === '05' || month === '07' || month === '08' || month === '10' || month\
    \ === '12') {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    if (month === '04' || month === '06' || month === '09'\
    \ || month === '11') {\n        if (day < 1 || day > 30) {\n            return\
    \ false;\n        }\n    }\n    if (month === '02') {\n        if (day < 1 ||\
    \ day > 29) {\n            return false;\n        }\n    }\n    if (year.length\
    \ !== 4) {\n        return false;\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n  if(date.length === 0){\n    return false;\n\
    \  }\n  var dateArr = date.split('-');\n  if(dateArr.length !== 3){\n    return\
    \ false;\n  }\n  var month = parseInt(dateArr[0]);\n  var day = parseInt(dateArr[1]);\n\
    \  var year = parseInt(dateArr[2]);\n  if(month < 1 || month > 12){\n    return\
    \ false;\n  }\n  if(day < 1 || day > 31){\n    return false;\n  }\n  if(month\
    \ === 2 && day > 29){\n    return false;\n  }\n  if(month === 4 || month === 6\
    \ || month === 9 || month === 11){\n    if(day > 30){\n      return false;\n \
    \   }\n  }\n  if(year < 0){\n    return false;\n  }\n  return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    if(dateArr[0].length != 2 || dateArr[1].length != 2 || dateArr[2].length\
    \ != 4) return false;\n    if(dateArr[0] < 1 || dateArr[0] > 12) return false;\n\
    \    if(dateArr[0] == 2){\n        if(dateArr[1] < 1 || dateArr[1] > 29) return\
    \ false;\n    }\n    else if(dateArr[0] == 1 || dateArr[0] == 3 || dateArr[0]\
    \ == 5 || dateArr[0] == 7 || dateArr[0] == 8 || dateArr[0] == 10 || dateArr[0]\
    \ == 12){\n        if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n    }\n\
    \    else{\n        if(dateArr[1] < 1 || dateArr[1] > 30) return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = dateArr[0];\n\
    \    let day = dateArr[1];\n    let year = dateArr[2];\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(month === '01' || month === '03'\
    \ || month === '05' || month === '07' || month === '08' || month === '10' || month\
    \ === '12'){\n        if(day < 1 || day > 31){\n            return false;\n  \
    \      }\n    }\n    if(month === '04' || month === '06' || month === '09' ||\
    \ month === '11'){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === '02'){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(year.length !== 4){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = dateArr[0];\n\
    \    let day = dateArr[1];\n    let year = dateArr[2];\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n       \
    \ return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n\
    \    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n     \
    \   if(day > 30){\n            return false;\n        }\n    }\n    if(year.length\
    \ != 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(month == 2 && day > 29){\n\
    \        return false;\n    }\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11){\n        if(day > 30){\n            return false;\n        }\n\
    \    }\n    if(year.length != 4){\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3) return false;\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(month === 2){\n        if(day\
    \ < 1 || day > 29) return false;\n    }else if(month === 1 || month === 3 || month\
    \ === 5 || month === 7 || month === 8 || month === 10 || month === 12){\n    \
    \    if(day < 1 || day > 31) return false;\n    }else{\n        if(day < 1 ||\
    \ day > 30) return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    var dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n\
    \    var year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(month == 2){\n        if(day < 1 || day > 29) return false;\n\
    \    }else if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31) return false;\n\
    \    }else{\n        if(day < 1 || day > 30) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    if(dateArr.length != 3 || date == ''){\n\
    \        return false;\n    }\n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    if(month == 2){\n        if(day < 1 || day > 29){\n     \
    \       return false;\n        }\n    }\n    if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 1000 || year\
    \ > 9999){\n        return false;\n    }\n    return true;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    if(month < 1\
    \ || month > 12){\n        return false;\n    }\n    if(month === '02'){\n   \
    \     if(day < 1 || day > 29){\n            return false;\n        }\n    }\n\
    \    if(month === '01' || month === '03' || month === '05' || month === '07' ||\
    \ month === '08' || month === '10' || month === '12'){\n        if(day < 1 ||\
    \ day > 31){\n            return false;\n        }\n    }\n    if(month === '04'\
    \ || month === '06' || month === '09' || month === '11'){\n        if(day < 1\
    \ || day > 30){\n            return false;\n        }\n    }\n    if(year.length\
    \ !== 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12) return false;\n    if(month == 2 && day > 29) return\
    \ false;\n    if(month == 2 && day < 1) return false;\n    if(month == 2 && day\
    \ == 29 && year % 4 != 0) return false;\n    if(month == 2 && day == 29 && year\
    \ % 4 == 0 && year % 100 == 0 && year % 400 != 0) return false;\n    if(month\
    \ == 2 && day == 29 && year % 4 == 0 && year % 100 == 0 && year % 400 == 0) return\
    \ true;\n    if(month == 2 && day < 29) return true;\n    if(month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31) return false;\n        else return true;\n  \
    \  }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n       \
    \ if(day < 1 || day > 30) return false;\n        else return true;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2\
    \ && day > 29) return false;\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    if(month > 12 || month < 1){\n        return false;\n    }\n    if(day >\
    \ 31 || day < 1){\n        return false;\n    }\n    if(month === '02' && day\
    \ > 29){\n        return false;\n    }\n    if(month === '04' && day > 30){\n\
    \        return false;\n    }\n    if(month === '06' && day > 30){\n        return\
    \ false;\n    }\n    if(month === '09' && day > 30){\n        return false;\n\
    \    }\n    if(month === '11' && day > 30){\n        return false;\n    }\n  \
    \  if(year.length !== 4){\n        return false;\n    }\n    return true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if (dateArr.length != 3) return false;\n\
    \    let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if (month < 1 || month > 12) return false;\n    if (day < 1 || day > 31)\
    \ return false;\n    if (month == 2 && day > 29) return false;\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    if (year.length != 4) return false;\n    return true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length !== 3) return false;\n\
    \    let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month === '02' && day > 29) return false;\n    if(month === '04'\
    \ && day > 30) return false;\n    if(month === '06' && day > 30) return false;\n\
    \    if(month === '09' && day > 30) return false;\n    if(month === '11' && day\
    \ > 30) return false;\n    if(year.length !== 4) return false;\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    //your code here\n    var date = date.split('-');\n\
    \    var month = parseInt(date[0]);\n    var day = parseInt(date[1]);\n    var\
    \ year = parseInt(date[2]);\n    if(date.length !== 3){\n        return false;\n\
    \    }\n    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ === 2){\n        if(day < 1 || day > 29){\n            return false;\n     \
    \   }\n    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(month === 1 || month === 3 || month === 5 || month === 7 || month ===\
    \ 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArray = date.split('-');\n\
    \    var month = parseInt(dateArray[0]);\n    var day = parseInt(dateArray[1]);\n\
    \    var year = parseInt(dateArray[2]);\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 ||\
    \ month === 11){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(year < 0){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    var daysInMonth = [31,28,31,30,31,30,31,31,30,31,30,31];\n    if(month <\
    \ 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > daysInMonth[month-1]){\n\
    \        return false;\n    }\n    if(year < 1){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    var months = [1,3,5,7,8,10,12];\n  \
    \  var months2 = [4,6,9,11];\n    if(dateArr.length !== 3){\n        return false;\n\
    \    }\n    if(months.includes(month)){\n        if(day < 1 || day > 31){\n  \
    \          return false;\n        }\n    }\n    if(months2.includes(month)){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(month === 2){\n        if(day < 1 || day > 29){\n            return false;\n\
    \        }\n    }\n    if(month < 1 || month > 12){\n        return false;\n \
    \   }\n    if(year < 1){\n        return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n  if(date.length === 0){\n    return false;\n\
    \  }\n  let dateArr = date.split('-');\n  if(dateArr.length !== 3){\n    return\
    \ false;\n  }\n  let month = Number(dateArr[0]);\n  let day = Number(dateArr[1]);\n\
    \  let year = Number(dateArr[2]);\n  if(month < 1 || month > 12){\n    return\
    \ false;\n  }\n  if(day < 1 || day > 31){\n    return false;\n  }\n  if(month\
    \ === 2 && day > 29){\n    return false;\n  }\n  if(month === 4 || month === 6\
    \ || month === 9 || month === 11){\n    if(day > 30){\n      return false;\n \
    \   }\n  }\n  if(year < 0){\n    return false;\n  }\n  return true;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length === 0) {\n       \
    \ return false;\n    }\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    if (year < 0) {\n      \
    \  return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    var dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    if(dateArr[0].length != 2 || dateArr[1].length != 2 || dateArr[2].length\
    \ != 4) return false;\n    var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n\
    \    var year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2 && day\
    \ > 29) return false;\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 2 && day\
    \ < 1) return false;\n    if(month == 2 && day == 29 && !isLeapYear(year)) return\
    \ false;\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31) return\
    \ false;\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day < 1 || day > 30) return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(month === 2){\n        if(day > 29){\n    \
    \        return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2 && day\
    \ > 29) return false;\n    if((month == 4 || month == 6 || month == 9 || month\
    \ == 11) && day > 30) return false;\n    if(year < 0) return false;\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var date_arr = date.split('-');\n    var month = parseInt(date_arr[0]);\n\
    \    var day = parseInt(date_arr[1]);\n    var year = parseInt(date_arr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day < 1 || day > 29){\n            return false;\n      \
    \  }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    else{\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var day = dateArr[0];\n    var month = dateArr[1];\n    var year = dateArr[2];\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    if(day < 1 ||\
    \ day > 31){\n        return false;\n    }\n    if(month < 1 || month > 12){\n\
    \        return false;\n    }\n    if(year < 1){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphwr6_265.js:40:10)\n    at Object.<anonymous> (/tmp/tmphwr6_265.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length == 0) {\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if (dateArr.length !=\
    \ 3) {\n        return false;\n    }\n    let day = parseInt(dateArr[1]);\n  \
    \  let month = parseInt(dateArr[0]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ == 2) {\n        if (day < 1 || day > 29) {\n            return false;\n   \
    \     }\n    } else if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12) {\n        if (day < 1 || day > 31)\
    \ {\n            return false;\n        }\n    } else {\n        if (day < 1 ||\
    \ day > 30) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2\
    \ && day > 29) return false;\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArray = date.split('-');\n\
    \    if (dateArray.length !== 3) {\n        return false;\n    }\n    var month\
    \ = parseInt(dateArray[0]);\n    var day = parseInt(dateArray[1]);\n    var year\
    \ = parseInt(dateArray[2]);\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\
    \    if (month === 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day > 30) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    if(date.length !== 10){\n        return false;\n    }\n \
    \   if(date[2] !== '-' || date[5] !== '-'){\n        return false;\n    }\n  \
    \  let month = date.slice(0,2);\n    let day = date.slice(3,5);\n    let year\
    \ = date.slice(6,10);\n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ === '02' && day > 29){\n        return false;\n    }\n    if(month === '04'\
    \ && day > 30){\n        return false;\n    }\n    if(month === '06' && day >\
    \ 30){\n        return false;\n    }\n    if(month === '09' && day > 30){\n  \
    \      return false;\n    }\n    if(month === '11' && day > 30){\n        return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2 && day\
    \ > 29) return false;\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let arr = date.split('-');\n    if(arr.length != 3) return false;\n    if(arr[0]\
    \ < 1 || arr[0] > 12) return false;\n    if(arr[1] < 1 || arr[1] > 31) return\
    \ false;\n    if(arr[0] == 2 && arr[1] > 29) return false;\n    if(arr[0] == 4\
    \ || arr[0] == 6 || arr[0] == 9 || arr[0] == 11) {\n        if(arr[1] > 30) return\
    \ false;\n    }\n    if(arr[2].length != 4) return false;\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(dateArr.length != 3){\n        return false;\n    }\n    if(month < 1\
    \ || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n\
    \        return false;\n    }\n    if(month == 2 && day > 29){\n        return\
    \ false;\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day > 30){\n            return false;\n        }\n    }\n    if(year.length\
    \ != 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2\
    \ && day > 29) return false;\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    var month = dateArr[0];\n\
    \    var day = dateArr[1];\n    var year = dateArr[2];\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n       \
    \ return false;\n    }\n    if(month == 2 && day > 29){\n        return false;\n\
    \    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n     \
    \   if(day > 30){\n            return false;\n        }\n    }\n    if(year.length\
    \ != 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if((month\
    \ === 4 || month === 6 || month === 9 || month === 11) && day > 30){\n       \
    \ return false;\n    }\n    if(month === 2 && day > 29){\n        return false;\n\
    \    }\n    if(year < 0){\n        return false;\n    }\n    return true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n        return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    let month = dateArr[0];\n    let day\
    \ = dateArr[1];\n    let year = dateArr[2];\n    if(month < 1 || month > 12){\n\
    \        return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if(month == 2 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n \
    \           return false;\n        }\n    }\n    if(year.length != 4){\n     \
    \   return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length === 0) {\n       \
    \ return false;\n    }\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    if\
    \ (year < 0) {\n        return false;\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month == 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    if(month < 1\
    \ || month > 12){\n        return false;\n    }\n    if(month === '01' || month\
    \ === '03' || month === '05' || month === '07' || month === '08' || month ===\
    \ '10' || month === '12'){\n        if(day < 1 || day > 31){\n            return\
    \ false;\n        }\n    }\n    if(month === '04' || month === '06' || month ===\
    \ '09' || month === '11'){\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    if(month === '02'){\n        if(day < 1 || day\
    \ > 29){\n            return false;\n        }\n    }\n    if(year.length !==\
    \ 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var date_arr = date.split('-');\n\
    \    if(date_arr.length != 3) return false;\n    var month = parseInt(date_arr[0]);\n\
    \    var day = parseInt(date_arr[1]);\n    var year = parseInt(date_arr[2]);\n\
    \    if(month < 1 || month > 12) return false;\n    if(month == 2){\n        if(day\
    \ < 1 || day > 29) return false;\n    }\n    else if(month == 1 || month == 3\
    \ || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n\
    \        if(day < 1 || day > 31) return false;\n    }\n    else{\n        if(day\
    \ < 1 || day > 30) return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    if(dateArr.length != 3){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(year < 1){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var date_arr = date.split('-');\n    if(date_arr.length !=\
    \ 3){\n        return false;\n    }\n    var month = parseInt(date_arr[0]);\n\
    \    var day = parseInt(date_arr[1]);\n    var year = parseInt(date_arr[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day < 1 || day > 29){\n            return false;\n      \
    \  }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    else{\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    let month =\
    \ dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day >\
    \ 31) {\n        return false;\n    }\n    if (month === '02' && day > 29) {\n\
    \        return false;\n    }\n    if (month === '04' && day > 30) {\n       \
    \ return false;\n    }\n    if (month === '06' && day > 30) {\n        return\
    \ false;\n    }\n    if (month === '09' && day > 30) {\n        return false;\n\
    \    }\n    if (month === '11' && day > 30) {\n        return false;\n    }\n\
    \    if (year.length !== 4) {\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3 || dateArr[0].length\
    \ !== 2 || dateArr[1].length !== 2 || dateArr[2].length !== 4){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 ||\
    \ month === 11){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n \
    \   }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    if(dateArr.length != 3){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month == 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day < 1 || day > 30){\n    \
    \        return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3) return false;\n    if(dateArr[0] < 1 || dateArr[0]\
    \ > 12) return false;\n    if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n\
    \    if(dateArr[0] === 2 && dateArr[1] > 29) return false;\n    if(dateArr[0]\
    \ === 4 && dateArr[1] > 30) return false;\n    if(dateArr[0] === 6 && dateArr[1]\
    \ > 30) return false;\n    if(dateArr[0] === 9 && dateArr[1] > 30) return false;\n\
    \    if(dateArr[0] === 11 && dateArr[1] > 30) return false;\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6x5_4odj.js:39:10)\n    at Object.<anonymous> (/tmp/tmp6x5_4odj.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 2 && day\
    \ < 1) return false;\n    if(month == 2 && day == 29 && !isLeapYear(year)) return\
    \ false;\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31) return\
    \ false;\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day < 1 || day > 30) return false;\n    }\n    return true;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    var isLeapYear = (year % 4 == 0 && year\
    \ % 100 != 0) || (year % 400 == 0);\n    if(month < 1 || month > 12 || day < 1\
    \ || day > 31 || year < 1){\n        return false;\n    }\n    if(month == 2){\n\
    \        if(isLeapYear){\n            if(day > 29){\n                return false;\n\
    \            }\n        }else{\n            if(day > 28){\n                return\
    \ false;\n            }\n        }\n    }else if(month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if(day > 30){\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp23qn1_im.js:52:10)\n    at Object.<anonymous> (/tmp/tmp23qn1_im.js:64:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n  let dateArr = date.split('-');\n  if\
    \ (dateArr.length !== 3) {\n    return false;\n  }\n  let month = parseInt(dateArr[0]);\n\
    \  let day = parseInt(dateArr[1]);\n  let year = parseInt(dateArr[2]);\n  if (month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  if (month === 2) {\n    if (day\
    \ < 1 || day > 29) {\n      return false;\n    }\n  } else if (month === 4 ||\
    \ month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30)\
    \ {\n      return false;\n    }\n  } else {\n    if (day < 1 || day > 31) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n \
    \   let year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3 || dateArr[0].length\
    \ !== 2 || dateArr[1].length !== 2 || dateArr[2].length !== 4){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ === 2 && day > 29){\n        return false;\n    }\n    if((month === 4 || month\
    \ === 6 || month === 9 || month === 11) && day > 30){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length === 0) {\n       \
    \ return false;\n    }\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    if\
    \ (year < 0) {\n        return false;\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    var month = dateArr[0];\n    var day\
    \ = dateArr[1];\n    var year = dateArr[2];\n    if(month < 1 || month > 12){\n\
    \        return false;\n    }\n    if(month == 1 || month == 3 || month == 5 ||\
    \ month == 7 || month == 8 || month == 10 || month == 12){\n        if(day < 1\
    \ || day > 31){\n            return false;\n        }\n    }\n    if(month ==\
    \ 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day >\
    \ 30){\n            return false;\n        }\n    }\n    if(month == 2){\n   \
    \     if(day < 1 || day > 29){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    var month = parseInt(dateArr[0]);\n\
    \    var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n      \
    \      return false;\n        }\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 1){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   if(dateArr.length != 3) return false;\n    var month = parseInt(dateArr[0]);\n\
    \    var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(month == 2){\n        if(day\
    \ < 1 || day > 29) return false;\n    }else if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31) return false;\n    }else{\n        if(day < 1 || day > 30)\
    \ return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArray = date.split('-');\n    if(dateArray.length\
    \ != 3){\n        return false;\n    }\n    var month = parseInt(dateArray[0]);\n\
    \    var day = parseInt(dateArray[1]);\n    var year = parseInt(dateArray[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day < 1 || day > 29){\n            return false;\n      \
    \  }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    else{\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var arr = date.split('-');\n    if(arr.length != 3){\n  \
    \      return false;\n    }\n    var month = parseInt(arr[0]);\n    var day =\
    \ parseInt(arr[1]);\n    var year = parseInt(arr[2]);\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(month == 2){\n        if(day <\
    \ 1 || day > 29){\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12){\n        if(day < 1 || day > 31){\n            return false;\n\
    \        }\n    }\n    else{\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month > 12 || month < 1){\n        return false;\n    }\n    if(day > 31\
    \ || day < 1){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length === 0) {\n       \
    \ return false;\n    }\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    if\
    \ (year < 0) {\n        return false;\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   if(dateArr.length != 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n\
    \    var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month == 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if (dateArr.length != 3) return false;\n\
    \    if (dateArr[0] < 1 || dateArr[0] > 12) return false;\n    if (dateArr[0]\
    \ == 1 || dateArr[0] == 3 || dateArr[0] == 5 || dateArr[0] == 7 || dateArr[0]\
    \ == 8 || dateArr[0] == 10 || dateArr[0] == 12) {\n        if (dateArr[1] < 1\
    \ || dateArr[1] > 31) return false;\n    } else if (dateArr[0] == 4 || dateArr[0]\
    \ == 6 || dateArr[0] == 9 || dateArr[0] == 11) {\n        if (dateArr[1] < 1 ||\
    \ dateArr[1] > 30) return false;\n    } else if (dateArr[0] == 2) {\n        if\
    \ (dateArr[1] < 1 || dateArr[1] > 29) return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    // your code here\n    var dateArr\
    \ = date.split('-');\n    if (dateArr.length != 3) {\n        return false;\n\
    \    }\n    var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n\
    \    var year = parseInt(dateArr[2]);\n    if (month < 1 || month > 12) {\n  \
    \      return false;\n    }\n    if (day < 1 || day > 31) {\n        return false;\n\
    \    }\n    if (month == 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(day <\
    \ 1 || day > 31){\n        return false;\n    }\n    if(year.length != 4){\n \
    \       return false;\n    }\n    if(month == 2 && day > 29){\n        return\
    \ false;\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day > 30){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    // write your code here\n    var dateArr\
    \ = date.split('-');\n    if(dateArr.length != 3){\n        return false;\n  \
    \  }\n    var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    if(month > 12 || month < 1){\n        return false;\n    }\n    if(day >\
    \ 31 || day < 1){\n        return false;\n    }\n    if(month == 2){\n       \
    \ if(day > 29){\n            return false;\n        }\n    }\n    if(month ==\
    \ 4 || month == 6 || month == 9 || month == 11){\n        if(day > 30){\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if (month < 1 || month > 12)\
    \ return false;\n    if (day < 1 || day > 31) return false;\n    if (month ===\
    \ '02' && day > 29) return false;\n    if ((month === '04' || month === '06' ||\
    \ month === '09' || month === '11') && day > 30) return false;\n    if (year.length\
    \ !== 4) return false;\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3) return false;\n    let month = dateArr[0];\n    let\
    \ day = dateArr[1];\n    let year = dateArr[2];\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    if(year\
    \ < 0) return false;\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var date_array = date.split('-');\n    var month = date_array[0];\n\
    \    var day = date_array[1];\n    var year = date_array[2];\n    if(month < 1\
    \ || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n\
    \        return false;\n    }\n    if(month == 2 && day > 29){\n        return\
    \ false;\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day > 30){\n            return false;\n        }\n    }\n    if(year.length\
    \ != 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var date_arr = date.split('-');\n\
    \    var month = date_arr[0];\n    var day = date_arr[1];\n    var year = date_arr[2];\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (year < 1) {\n    \
    \    return false;\n    }\n    if (month == 2) {\n        if (day > 29) {\n  \
    \          return false;\n        }\n    }\n    if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n        if (day > 30) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length === 0) {\n       \
    \ return false;\n    }\n\n    let dateArr = date.split('-');\n    let day = parseInt(dateArr[0]);\n\
    \    let month = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \n    if (day < 1 || day > 31 || month < 1 || month > 12 || year < 1) {\n    \
    \    return false;\n    }\n\n    if (month === 2) {\n        if (day > 29) {\n\
    \            return false;\n        }\n    } else if (month === 4 || month ===\
    \ 6 || month === 9 || month === 11) {\n        if (day > 30) {\n            return\
    \ false;\n        }\n    }\n\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvnuoinoo.js:47:10)\n    at Object.<anonymous> (/tmp/tmpvnuoinoo.js:64:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length == 0) {\n        return\
    \ false;\n    }\n    if (date.length != 10) {\n        return false;\n    }\n\
    \    if (date[2] != '-' || date[5] != '-') {\n        return false;\n    }\n \
    \   let day = parseInt(date.slice(0, 2));\n    let month = parseInt(date.slice(3,\
    \ 5));\n    let year = parseInt(date.slice(6, 10));\n    if (month < 1 || month\
    \ > 12) {\n        return false;\n    }\n    if (month == 2) {\n        if (day\
    \ < 1 || day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day < 1 || day\
    \ > 30) {\n            return false;\n        }\n    }\n    if (month == 1 ||\
    \ month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n        if (day < 1 || day > 31) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzvjokt6t.js:54:10)\n    at Object.<anonymous> (/tmp/tmpzvjokt6t.js:71:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3) return false;\n    var month = Number(dateArr[0]);\n\
    \    var day = Number(dateArr[1]);\n    var year = Number(dateArr[2]);\n    if(month\
    \ < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return false;\n\
    \    if(month === 2 && day > 29) return false;\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day > 30) return false;\n   \
    \ }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 1000 || year > 9999){\n\
    \        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    var month = parseInt(dateArr[0]);\n\
    \    var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month == 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    var month = dateArr[0];\n\
    \    var day = dateArr[1];\n    var year = dateArr[2];\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    if(month == 2){\n \
    \       if(day < 1 || day > 29){\n            return false;\n        }\n    }\n\
    \    if(year < 1){\n        return false;\n    }\n    return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month == 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length !== 3) return false;\n\
    \    if(dateArr[0].length !== 2 || dateArr[1].length !== 2 || dateArr[2].length\
    \ !== 4) return false;\n    if(dateArr[0] < 1 || dateArr[0] > 12) return false;\n\
    \    if(dateArr[0] === '01' || dateArr[0] === '03' || dateArr[0] === '05' || dateArr[0]\
    \ === '07' || dateArr[0] === '08' || dateArr[0] === '10' || dateArr[0] === '12'){\n\
    \        if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n    }\n    if(dateArr[0]\
    \ === '04' || dateArr[0] === '06' || dateArr[0] === '09' || dateArr[0] === '11'){\n\
    \        if(dateArr[1] < 1 || dateArr[1] > 30) return false;\n    }\n    if(dateArr[0]\
    \ === '02'){\n        if(dateArr[1] < 1 || dateArr[1] > 29) return false;\n  \
    \  }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    if(month < 1\
    \ || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n\
    \        return false;\n    }\n    if(month === '02' && day > 29){\n        return\
    \ false;\n    }\n    if(month === '04' && day > 30){\n        return false;\n\
    \    }\n    if(month === '06' && day > 30){\n        return false;\n    }\n  \
    \  if(month === '09' && day > 30){\n        return false;\n    }\n    if(month\
    \ === '11' && day > 30){\n        return false;\n    }\n    if(year.length !==\
    \ 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length === 0) {\n       \
    \ return false;\n    }\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1 ||\
    \ day > 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day < 1 || day > 30) {\n            return false;\n        }\n    }\n    if\
    \ (year < 1) {\n        return false;\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let date_arr = date.split('-');\n    if(date_arr.length != 3) return false;\n\
    \    let month = parseInt(date_arr[0]);\n    let day = parseInt(date_arr[1]);\n\
    \    let year = parseInt(date_arr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2 && day\
    \ > 29) return false;\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date == ''){\n        return false;\n\
    \    }\n    let dateArray = date.split('-');\n    if(dateArray.length != 3){\n\
    \        return false;\n    }\n    let month = parseInt(dateArray[0]);\n    let\
    \ day = parseInt(dateArray[1]);\n    let year = parseInt(dateArray[2]);\n    if(month\
    \ < 1 || month > 12){\n        return false;\n    }\n    if(month == 2){\n   \
    \     if(day < 1 || day > 29){\n            return false;\n        }\n    }\n\
    \    else if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n      \
    \      return false;\n        }\n    }\n    else{\n        if(day < 1 || day >\
    \ 30){\n            return false;\n        }\n    }\n    return true;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3) return false;\n    if(dateArr[0] < 1 || dateArr[0]\
    \ > 12) return false;\n    if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n\
    \    if(dateArr[0] === 2 && dateArr[1] > 29) return false;\n    if(dateArr[0]\
    \ === 4 && dateArr[1] > 30) return false;\n    if(dateArr[0] === 6 && dateArr[1]\
    \ > 30) return false;\n    if(dateArr[0] === 9 && dateArr[1] > 30) return false;\n\
    \    if(dateArr[0] === 11 && dateArr[1] > 30) return false;\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpafpdd4h0.js:39:10)\n    at Object.<anonymous> (/tmp/tmpafpdd4h0.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    if(month < 1\
    \ || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n\
    \        return false;\n    }\n    if(month === '04' || month === '06' || month\
    \ === '09' || month === '11'){\n        if(day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === '02'){\n        if(day > 29){\n          \
    \  return false;\n        }\n    }\n    if(year.length !== 4){\n        return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length !== 3) return false;\n\
    \    let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n\
    \    let year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month === 2 && day\
    \ > 29) return false;\n    if(month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if(day > 30) return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12){\n        if(day < 1 || day > 31){\n            return false;\n\
    \        }\n    }\n    if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(month == 2){\n        if(day < 1 || day > 29){\n            return false;\n\
    \        }\n    }\n    if(year < 0){\n        return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month == 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let arr = date.split('-');\n    if(arr.length !== 3) return false;\n    let\
    \ month = parseInt(arr[0]);\n    let day = parseInt(arr[1]);\n    let year = parseInt(arr[2]);\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month === 2 && day > 29) return false;\n    if(month === 4 ||\
    \ month === 6 || month === 9 || month === 11){\n        if(day > 30) return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3) return false;\n    if(dateArr[0] < 1 || dateArr[0]\
    \ > 12) return false;\n    if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n\
    \    if(dateArr[0] === 2 && dateArr[1] > 29) return false;\n    if(dateArr[0]\
    \ === 4 && dateArr[1] > 30) return false;\n    if(dateArr[0] === 6 && dateArr[1]\
    \ > 30) return false;\n    if(dateArr[0] === 9 && dateArr[1] > 30) return false;\n\
    \    if(dateArr[0] === 11 && dateArr[1] > 30) return false;\n    if(dateArr[2].length\
    \ !== 4) return false;\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpw0c3xtwt.js:40:10)\n    at Object.<anonymous> (/tmp/tmpw0c3xtwt.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    if (dateArr.length !== 3) {\n      \
    \  return false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (month === 2) {\n        if (day < 1 || day > 29) {\n         \
    \   return false;\n        }\n    } else if (month === 4 || month === 6 || month\
    \ === 9 || month === 11) {\n        if (day < 1 || day > 30) {\n            return\
    \ false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    if(dateArr[0].length != 2 || dateArr[1].length != 2 || dateArr[2].length\
    \ != 4) return false;\n    if(dateArr[0] < 1 || dateArr[0] > 12) return false;\n\
    \    if(dateArr[0] == 2){\n        if(dateArr[1] < 1 || dateArr[1] > 29) return\
    \ false;\n    }else if(dateArr[0] == 1 || dateArr[0] == 3 || dateArr[0] == 5 ||\
    \ dateArr[0] == 7 || dateArr[0] == 8 || dateArr[0] == 10 || dateArr[0] == 12){\n\
    \        if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n    }else{\n   \
    \     if(dateArr[1] < 1 || dateArr[1] > 30) return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let arr = date.split('-');\n    let\
    \ month = parseInt(arr[0]);\n    let day = parseInt(arr[1]);\n    let year = parseInt(arr[2]);\n\
    \    if(arr.length !== 3){\n        return false;\n    }\n    if(month < 1 ||\
    \ month > 12){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month\
    \ === 4 || month === 6 || month === 9 || month === 11){\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    if(month === 1\
    \ || month === 3 || month === 5 || month === 7 || month === 8 || month === 10\
    \ || month === 12){\n        if(day < 1 || day > 31){\n            return false;\n\
    \        }\n    }\n    if(year < 0){\n        return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n\tvar dateArr = date.split('-');\n\tif\
    \ (dateArr.length !== 3) {\n\t\treturn false;\n\t}\n\tvar month = dateArr[0];\n\
    \tvar day = dateArr[1];\n\tvar year = dateArr[2];\n\tif (month < 1 || month >\
    \ 12) {\n\t\treturn false;\n\t}\n\tif (day < 1 || day > 31) {\n\t\treturn false;\n\
    \t}\n\tif (month === '02' && day > 29) {\n\t\treturn false;\n\t}\n\tif (month\
    \ === '04' || month === '06' || month === '09' || month === '11') {\n\t\tif (day\
    \ > 30) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3 || dateArr[0].length\
    \ !== 2 || dateArr[1].length !== 2 || dateArr[2].length !== 4){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 ||\
    \ month === 11){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3) return false;\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(month === 2 && day > 29)\
    \ return false;\n    if(month === 2 && day < 1) return false;\n    if(month ===\
    \ 2 && day === 29 && !isLeapYear(year)) return false;\n    if(month === 2 && day\
    \ === 29 && isLeapYear(year)) return true;\n    if(month === 2 && day < 29) return\
    \ true;\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31) return\
    \ false;\n        return true;\n    }\n    if(month === 4 || month === 6 || month\
    \ === 9 || month === 11){\n        if(day < 1 || day > 30) return false;\n   \
    \     return true;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n  var dateArray = date.split('-');\n \
    \ var month = dateArray[0];\n  var day = dateArray[1];\n  var year = dateArray[2];\n\
    \  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (day < 1 || day\
    \ > 31) {\n    return false;\n  }\n  if (year < 1) {\n    return false;\n  }\n\
    \  if (month == 2 && day > 29) {\n    return false;\n  }\n  if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n    if (day > 30) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n\
    \    var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length !== 3) return false;\n\
    \    let [month, day, year] = dateArr;\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02' &&\
    \ day > 29) return false;\n    if(month === '04' || month === '06' || month ===\
    \ '09' || month === '11'){\n        if(day > 30) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    if(date.length !== 10){\n        return false;\n    }\n \
    \   if(date.charAt(2) !== '-' || date.charAt(5) !== '-'){\n        return false;\n\
    \    }\n    if(date.charAt(0) === '0'){\n        if(date.charAt(1) === '0' ||\
    \ date.charAt(1) === '1' || date.charAt(1) === '2'){\n            if(date.charAt(1)\
    \ === '0'){\n                if(date.charAt(3) === '0' || date.charAt(3) === '1'\
    \ || date.charAt(3) === '2' || date.charAt(3) === '3' || date.charAt(3) === '4'\
    \ || date.charAt(3) === '5' || date.charAt(3) === '6' || date.charAt(3) === '7'\
    \ || date.charAt(3) === '8' || date.charAt(3) === '9'){\n                    return\
    \ true;\n                }\n                else{\n                    return\
    \ false;\n                }\n            }\n            else if(date.charAt(1)\
    \ === '1'){\n                if(date.charAt(3) === '0' || date.charAt(3) === '1'\
    \ || date.charAt(3) === '2' || date.charAt(3) === '3' || date.charAt(3) === '4'\
    \ || date.charAt(3) === '5' || date.charAt(3) === '6' || date.charAt(3) === '7'\
    \ || date.charAt(3) === '8' || date.charAt(3) === '9'){\n                    return\
    \ true;\n                }\n                else{\n                    return\
    \ false;\n                }\n            }\n            else if(date.charAt(1)\
    \ === '2'){\n                if(date.charAt(3) === '0' || date.charAt(3) === '1'\
    \ || date.charAt(3) === '2\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/tmp/tmpe4nqzrpq.js:43\n                if(date.charAt(3) === '0' || date.charAt(3)\
    \ === '1' || date.charAt(3) === '2\n                                         \
    \                                                 ^^\n\nSyntaxError: Invalid or\
    \ unexpected token\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    if (dateArr.length !== 3) {\n      \
    \  return false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day > 29) {\n            return false;\n        }\n  \
    \  }\n    if (month === 4 || month === 6 || month === 9 || month === 11) {\n \
    \       if (day > 30) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArray = date.split('-');\n    if(dateArray.length\
    \ != 3){\n        return false;\n    }\n    var month = parseInt(dateArray[0]);\n\
    \    var day = parseInt(dateArray[1]);\n    var year = parseInt(dateArray[2]);\n\
    \    if(month < 1 || month > 12){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day < 1 || day > 29){\n            return false;\n      \
    \  }\n    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7\
    \ || month == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    else{\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n  if(date.length === 0) return false;\n\
    \  let [month, day, year] = date.split('-');\n  if(month < 1 || month > 12) return\
    \ false;\n  if(day < 1 || day > 31) return false;\n  if(month === '02' && day\
    \ > 29) return false;\n  if(month === '04' && day > 30) return false;\n  if(month\
    \ === '06' && day > 30) return false;\n  if(month === '09' && day > 30) return\
    \ false;\n  if(month === '11' && day > 30) return false;\n  if(year.length !==\
    \ 4) return false;\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    var monthArr = ['01','02','03','04','05','06','07','08','09','10','11','12'];\n\
    \    var dayArr = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31'];\n\
    \    var yearArr = ['2020','2021','2022','2023','2024','2025','2026','2027','2028','2029','2030','2031','2032','2033','2034','2035','2036','2037','2038','2039','2040','2041','2042','2043','2044','2045','2046','2047','2048','2049','2050'];\n\
    \    var monthIndex = monthArr.indexOf(month);\n    var dayIndex = dayArr.indexOf(day);\n\
    \    var yearIndex = yearArr.indexOf(year);\n    if(dateArr.length === 3 && monthIndex\
    \ !== -1 && dayIndex !== -1 && yearIndex !== -1){\n        if(month === '01' ||\
    \ month === '03' || month === '05' || month === '07' || month === '08' || month\
    \ === '10' || month === '12'){\n            if(dayIndex < 31){\n             \
    \   return true;\n            }\n        }else if(month === '04' || month ===\
    \ '06' || month === '09' || month === '11'){\n            if(dayIndex < 30){\n\
    \                return true;\n            }\n        }else if(month === '02'){\n\
    \            if(dayIndex < 29){\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp1_9xyf72.js:47:10)\n    at Object.<anonymous> (/tmp/tmp1_9xyf72.js:65:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    var dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n\
    \    var year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(month == 2){\n        if(day < 1 || day > 29) return false;\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31) return\
    \ false;\n    }\n    else{\n        if(day < 1 || day > 30) return false;\n  \
    \  }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let dateArr = date.split('-');\n    let month = dateArr[0];\n    let day\
    \ = dateArr[1];\n    let year = dateArr[2];\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month === 2 && day\
    \ > 29) return false;\n    if(month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if(day > 30) return false;\n    }\n    if(year.length !==\
    \ 4) return false;\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp88o5jogz.js:42:10)\n    at Object.<anonymous> (/tmp/tmp88o5jogz.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = Number(dateArr[0]);\n   \
    \ let day = Number(dateArr[1]);\n    let year = Number(dateArr[2]);\n    if(month\
    \ < 1 || month > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n\
    \        return false;\n    }\n    if(month === 2){\n        if(day > 29){\n \
    \           return false;\n        }\n    }\n    if(month === 4 || month === 6\
    \ || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    var month = dateArr[0];\n\
    \    var day = dateArr[1];\n    var year = dateArr[2];\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12){\n        if(day\
    \ < 1 || day > 31){\n            return false;\n        }\n    }\n    if(month\
    \ == 4 || month == 6 || month == 9 || month == 11){\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    if(month == 2){\n \
    \       if(day < 1 || day > 29){\n            return false;\n        }\n    }\n\
    \    if(year.length != 4){\n        return false;\n    }\n    return true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    var month = parseInt(dateArr[0]);\n\
    \    var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n      \
    \      return false;\n        }\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 1){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    else{\n        var dateArr = date.split('-');\n        var\
    \ month = dateArr[0];\n        var day = dateArr[1];\n        var year = dateArr[2];\n\
    \        if(month > 12 || month < 1){\n            return false;\n        }\n\
    \        else if(day > 31 || day < 1){\n            return false;\n        }\n\
    \        else if(month == 2 && day > 29){\n            return false;\n       \
    \ }\n        else if(month == 4 || month == 6 || month == 9 || month == 11){\n\
    \            if(day > 30){\n                return false;\n            }\n   \
    \     }\n        else if(year.length != 4){\n            return false;\n     \
    \   }\n        else{\n            return true;\n        }\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\ntrue\n    at\
    \ test (/tmp/tmp_f9tg1mn.js:54:10)\n    at Object.<anonymous> (/tmp/tmp_f9tg1mn.js:69:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: true,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(month === '02'){\n        if(day < 1 || day > 29) return\
    \ false;\n    }\n    else if(month === '04' || month === '06' || month === '09'\
    \ || month === '11'){\n        if(day < 1 || day > 30) return false;\n    }\n\
    \    else{\n        if(day < 1 || day > 31) return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month === 2 && day > 29) return false;\n    if(month === 4 ||\
    \ month === 6 || month === 9 || month === 11) {\n        if(day > 30) return false;\n\
    \    }\n    if(year < 0) return false;\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length === 0) {\n       \
    \ return false;\n    }\n    let dateArr = date.split('-');\n    if (dateArr.length\
    \ !== 3) {\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month ===\
    \ 10 || month === 12) {\n        if (day < 1 || day > 31) {\n            return\
    \ false;\n        }\n    } else if (month === 4 || month === 6 || month === 9\
    \ || month === 11) {\n        if (day < 1 || day > 30) {\n            return false;\n\
    \        }\n    } else if (month === 2) {\n        if (day < 1 || day > 29) {\n\
    \            return false;\n        }\n    }\n    if (year < 0) {\n        return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    let month =\
    \ parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 4 || month === 6 || month === 9 || month ===\
    \ 11) {\n        if (day < 1 || day > 30) {\n            return false;\n     \
    \   }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3) return false;\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month === 2 && day > 29) return false;\n    if(month === 4 ||\
    \ month === 6 || month === 9 || month === 11) {\n        if(day > 30) return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let arr = date.split('-');\n    if(arr.length\
    \ !== 3){\n        return false;\n    }\n    let month = parseInt(arr[0]);\n \
    \   let day = parseInt(arr[1]);\n    let year = parseInt(arr[2]);\n    if(month\
    \ < 1 || month > 12){\n        return false;\n    }\n    if(month === 2){\n  \
    \      if(year % 4 === 0){\n            if(day < 1 || day > 29){\n           \
    \     return false;\n            }\n        }\n        else{\n            if(day\
    \ < 1 || day > 28){\n                return false;\n            }\n        }\n\
    \    }\n    else if(month === 1 || month === 3 || month === 5 || month === 7 ||\
    \ month === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    else{\n        if(day < 1 ||\
    \ day > 30){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   let day = Number(dateArr[0]);\n    let month = Number(dateArr[1]);\n    let\
    \ year = Number(dateArr[2]);\n    if(dateArr.length !== 3){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ < 1 || month > 12){\n        return false;\n    }\n    if(year < 1){\n     \
    \   return false;\n    }\n    if(month === 2){\n        if(day > 29){\n      \
    \      return false;\n        }\n    }\n    if(month === 4 || month === 6 || month\
    \ === 9 || month === 11){\n        if(day > 30){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8z06qiqy.js:50:10)\n    at Object.<anonymous> (/tmp/tmp8z06qiqy.js:67:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArray = date.split('-');\n\
    \    let month = dateArray[0];\n    let day = dateArray[1];\n    let year = dateArray[2];\n\
    \    if(date.length === 0){\n        return false;\n    }\n    if(month < 1 ||\
    \ month > 12){\n        return false;\n    }\n    if(month === '01' || month ===\
    \ '03' || month === '05' || month === '07' || month === '08' || month === '10'\
    \ || month === '12'){\n        if(day < 1 || day > 31){\n            return false;\n\
    \        }\n    }\n    if(month === '04' || month === '06' || month === '09' ||\
    \ month === '11'){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === '02'){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(year.length !== 4){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n  if (date.length == 0) {\n    return\
    \ false;\n  }\n  var dateArr = date.split('-');\n  if (dateArr.length != 3) {\n\
    \    return false;\n  }\n  var month = dateArr[0];\n  var day = dateArr[1];\n\
    \  var year = dateArr[2];\n  if (month < 1 || month > 12) {\n    return false;\n\
    \  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month == 2)\
    \ {\n    if (day > 29) {\n      return false;\n    }\n  }\n  if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) {\n    if (day > 30) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if (date.length === 0) {\n       \
    \ return false;\n    }\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if (month < 1 || month > 12) {\n        return false;\n    }\n    if (month\
    \ === 2) {\n        if (day < 1 || day > 29) {\n            return false;\n  \
    \      }\n    } else if (month === 4 || month === 6 || month === 9 || month ===\
    \ 11) {\n        if (day < 1 || day > 30) {\n            return false;\n     \
    \   }\n    } else {\n        if (day < 1 || day > 31) {\n            return false;\n\
    \        }\n    }\n    if (year < 1) {\n        return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n  if(date.length === 0){\n    return false;\n\
    \  }\n  let dateArr = date.split('-');\n  let month = parseInt(dateArr[0]);\n\
    \  let day = parseInt(dateArr[1]);\n  let year = parseInt(dateArr[2]);\n  if(month\
    \ < 1 || month > 12){\n    return false;\n  }\n  if(month === 2){\n    if(day\
    \ < 1 || day > 29){\n      return false;\n    }\n  }\n  if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n    if(day < 1 || day > 30){\n     \
    \ return false;\n    }\n  }\n  if(month === 1 || month === 3 || month === 5 ||\
    \ month === 7 || month === 8 || month === 10 || month === 12){\n    if(day < 1\
    \ || day > 31){\n      return false;\n    }\n  }\n  if(year < 1){\n    return\
    \ false;\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n      \
    \      return false;\n        }\n    }\n    if(month == 4 || month == 6 || month\
    \ == 9 || month == 11){\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    if(year < 0){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n  if(date.length === 0) return false;\n\
    \  var dateArr = date.split('-');\n  if(dateArr.length !== 3) return false;\n\
    \  var month = parseInt(dateArr[0]);\n  var day = parseInt(dateArr[1]);\n  var\
    \ year = parseInt(dateArr[2]);\n  if(month < 1 || month > 12) return false;\n\
    \  if(month === 2){\n    if(year % 4 === 0){\n      if(day < 1 || day > 29) return\
    \ false;\n    } else {\n      if(day < 1 || day > 28) return false;\n    }\n \
    \ } else if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n    if(day < 1 || day > 31) return\
    \ false;\n  } else {\n    if(day < 1 || day > 30) return false;\n  }\n  return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var date = date.split('-');\n    var\
    \ month = date[0];\n    var day = date[1];\n    var year = date[2];\n    var month_days\
    \ = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (date.length !=\
    \ 3) {\n        return false;\n    }\n    if (month < 1 || month > 12) {\n   \
    \     return false;\n    }\n    if (day < 1 || day > month_days[month - 1]) {\n\
    \        return false;\n    }\n    if (year < 1) {\n        return false;\n  \
    \  }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    return /^(0[1-9]|1[0-2])-(0[1-9]|[12]\\\
    d|3[01])-\\d{4}$/.test(date);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcckqz7z6.js:29:10)\n    at Object.<anonymous> (/tmp/tmpcckqz7z6.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(month < 1 || month > 12) return false;\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n \
    \   }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 0){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n \
    \   var year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 ||\
    \ month === 11){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    if(year < 1){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 4 || month === 6 || month === 9 || month === 11){\n \
    \       if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(month === 1 || month === 3 || month === 5 || month === 7 || month ===\
    \ 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n\
    \    var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12){\n        return false;\n    }\n    if(day < 1\
    \ || day > 31){\n        return false;\n    }\n    if(month === 2){\n        if(day\
    \ > 29){\n            return false;\n        }\n    }\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = dateArr[0];\n\
    \    let day = dateArr[1];\n    let year = dateArr[2];\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(day < 1 || day > 31){\n       \
    \ return false;\n    }\n    if(month === '02' && day > 29){\n        return false;\n\
    \    }\n    if(month === '04' && day > 30){\n        return false;\n    }\n  \
    \  if(month === '06' && day > 30){\n        return false;\n    }\n    if(month\
    \ === '09' && day > 30){\n        return false;\n    }\n    if(month === '11'\
    \ && day > 30){\n        return false;\n    }\n    if(year.length !== 4){\n  \
    \      return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n\tvar date = date.split('-');\n\tif(date.length\
    \ != 3){\n\t\treturn false;\n\t}\n\tvar month = parseInt(date[0]);\n\tvar day\
    \ = parseInt(date[1]);\n\tvar year = parseInt(date[2]);\n\tif(month < 1 || month\
    \ > 12){\n\t\treturn false;\n\t}\n\tif(day < 1 || day > 31){\n\t\treturn false;\n\
    \t}\n\tif(month == 2){\n\t\tif(day > 29){\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    if(month == 4 || month == 6 || month == 9 || month == 11){\n\t\tif(day > 30){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    var dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    if(dateArr[0].length != 2 || dateArr[1].length != 2 || dateArr[2].length\
    \ != 4) return false;\n    if(dateArr[0] < 1 || dateArr[0] > 12) return false;\n\
    \    if(dateArr[0] == 2){\n        if(dateArr[1] < 1 || dateArr[1] > 29) return\
    \ false;\n    }\n    else if(dateArr[0] == 1 || dateArr[0] == 3 || dateArr[0]\
    \ == 5 || dateArr[0] == 7 || dateArr[0] == 8 || dateArr[0] == 10 || dateArr[0]\
    \ == 12){\n        if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n    }\n\
    \    else{\n        if(dateArr[1] < 1 || dateArr[1] > 30) return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var arr = date.split('-');\n    if(arr.length != 3){\n  \
    \      return false;\n    }\n    var month = parseInt(arr[0]);\n    var day =\
    \ parseInt(arr[1]);\n    var year = parseInt(arr[2]);\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(month == 2){\n        if(day <\
    \ 1 || day > 29){\n            return false;\n        }\n    }\n    else if(month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12){\n        if(day < 1 || day > 31){\n            return false;\n\
    \        }\n    }\n    else{\n        if(day < 1 || day > 30){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n \
    \   let year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3 || dateArr[0].length\
    \ !== 2 || dateArr[1].length !== 2 || dateArr[2].length !== 4){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 ||\
    \ month === 11){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3) return false;\n    let month = parseInt(dateArr[0]);\n\
    \    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n \
    \   if(month < 1 || month > 12) return false;\n    if(month === 2 && day > 29)\
    \ return false;\n    if(month === 2 && day < 1) return false;\n    if(month ===\
    \ 2 && day === 29 && !isLeapYear(year)) return false;\n    if(month === 4 || month\
    \ === 6 || month === 9 || month === 11){\n        if(day > 30 || day < 1) return\
    \ false;\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day > 31 || day\
    \ < 1) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    if(dateArr[0].length != 2 || dateArr[1].length != 2 || dateArr[2].length\
    \ != 4) return false;\n    if(dateArr[0] < 1 || dateArr[0] > 12) return false;\n\
    \    if(dateArr[0] == 2){\n        if(dateArr[1] < 1 || dateArr[1] > 29) return\
    \ false;\n    }\n    else if(dateArr[0] == 1 || dateArr[0] == 3 || dateArr[0]\
    \ == 5 || dateArr[0] == 7 || dateArr[0] == 8 || dateArr[0] == 10 || dateArr[0]\
    \ == 12){\n        if(dateArr[1] < 1 || dateArr[1] > 31) return false;\n    }\n\
    \    else{\n        if(dateArr[1] < 1 || dateArr[1] > 30) return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(month === 4 || month ===\
    \ 6 || month === 9 || month === 11){\n        if(day < 1 || day > 30){\n     \
    \       return false;\n        }\n    }\n    if(year < 1){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2\
    \ && day > 29) return false;\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let arr = date.split('-');\n    if(arr.length !== 3){\n \
    \       return false;\n    }\n    let month = parseInt(arr[0]);\n    let day =\
    \ parseInt(arr[1]);\n    let year = parseInt(arr[2]);\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(month === 2){\n        if(day <\
    \ 1 || day > 29){\n            return false;\n        }\n    }\n    if(month ===\
    \ 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10\
    \ || month === 12){\n        if(day < 1 || day > 31){\n            return false;\n\
    \        }\n    }\n    if(month === 4 || month === 6 || month === 9 || month ===\
    \ 11){\n        if(day < 1 || day > 30){\n            return false;\n        }\n\
    \    }\n    if(year < 0){\n        return false;\n    }\n    return true;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   if(dateArr.length !== 3) return false;\n    if(dateArr[0] < 1 || dateArr[0]\
    \ > 12) return false;\n    if(dateArr[0] === '02'){\n        if(dateArr[1] < 1\
    \ || dateArr[1] > 29) return false;\n    } else if(dateArr[0] === '01' || dateArr[0]\
    \ === '03' || dateArr[0] === '05' || dateArr[0] === '07' || dateArr[0] === '08'\
    \ || dateArr[0] === '10' || dateArr[0] === '12'){\n        if(dateArr[1] < 1 ||\
    \ dateArr[1] > 31) return false;\n    } else {\n        if(dateArr[1] < 1 || dateArr[1]\
    \ > 30) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    // your code here\n    if (date.length\
    \ === 0) {\n        return false;\n    }\n    let dateArr = date.split('-');\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    let month\
    \ = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year =\
    \ parseInt(dateArr[2]);\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (month === 2) {\n        if (day < 1 || day > 29) {\n         \
    \   return false;\n        }\n    } else if (month === 4 || month === 6 || month\
    \ === 9 || month === 11) {\n        if (day < 1 || day > 30) {\n            return\
    \ false;\n        }\n    } else {\n        if (day < 1 || day > 31) {\n      \
    \      return false;\n        }\n    }\n    if (year < 0) {\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2\
    \ && day > 29) return false;\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    if (dateArr.length !== 3) {\n        return false;\n    }\n    if (month\
    \ < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day >\
    \ 31) {\n        return false;\n    }\n    if (month === '02' && day > 29) {\n\
    \        return false;\n    }\n    if ((month === '04' || month === '06' || month\
    \ === '09' || month === '11') && day > 30) {\n        return false;\n    }\n \
    \   if (year.length !== 4) {\n        return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var month = dateArr[0];\n    var day = dateArr[1];\n    var year = dateArr[2];\n\
    \    var monthArr = [1,3,5,7,8,10,12];\n    var monthArr2 = [4,6,9,11];\n    var\
    \ monthArr3 = [2];\n    if(dateArr.length !== 3){\n        return false;\n   \
    \ }\n    if(monthArr.includes(parseInt(month))){\n        if(day < 1 || day >\
    \ 31){\n            return false;\n        }\n    }\n    if(monthArr2.includes(parseInt(month))){\n\
    \        if(day < 1 || day > 30){\n            return false;\n        }\n    }\n\
    \    if(monthArr3.includes(parseInt(month))){\n        if(day < 1 || day > 29){\n\
    \            return false;\n        }\n    }\n    if(month < 1 || month > 12){\n\
    \        return false;\n    }\n    if(year.length !== 4){\n        return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month < 1 || month > 12)\
    \ return false;\n    if(day < 1 || day > 31) return false;\n    if(month === '02'\
    \ && day > 29) return false;\n    if(month === '04' && day > 30) return false;\n\
    \    if(month === '06' && day > 30) return false;\n    if(month === '09' && day\
    \ > 30) return false;\n    if(month === '11' && day > 30) return false;\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   let month = parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n \
    \   let year = parseInt(dateArr[2]);\n    if(dateArr.length !== 3 || dateArr[0].length\
    \ !== 2 || dateArr[1].length !== 2 || dateArr[2].length !== 4){\n        return\
    \ false;\n    }\n    if(month < 1 || month > 12){\n        return false;\n   \
    \ }\n    if(month === 2){\n        if(day < 1 || day > 29){\n            return\
    \ false;\n        }\n    }\n    if(month === 4 || month === 6 || month === 9 ||\
    \ month === 11){\n        if(day < 1 || day > 30){\n            return false;\n\
    \        }\n    }\n    if(month === 1 || month === 3 || month === 5 || month ===\
    \ 7 || month === 8 || month === 10 || month === 12){\n        if(day < 1 || day\
    \ > 31){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    if(dateArr.length !==\
    \ 3){\n        return false;\n    }\n    let month = parseInt(dateArr[0]);\n \
    \   let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ===\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }else if(month === 1 || month === 3 || month === 5 || month === 7 || month\
    \ === 8 || month === 10 || month === 12){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }else{\n        if(day < 1 || day >\
    \ 30){\n            return false;\n        }\n    }\n    if(year < 1){\n     \
    \   return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(month > 12 || month < 1)\
    \ return false;\n    if(day > 31 || day < 1) return false;\n    if(month == 2\
    \ && day > 29) return false;\n    if(month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0){\n        return\
    \ false;\n    }\n    var dateArr = date.split('-');\n    if(dateArr.length !=\
    \ 3){\n        return false;\n    }\n    var month = parseInt(dateArr[0]);\n \
    \   var day = parseInt(dateArr[1]);\n    var year = parseInt(dateArr[2]);\n  \
    \  if(month < 1 || month > 12){\n        return false;\n    }\n    if(month ==\
    \ 2){\n        if(day < 1 || day > 29){\n            return false;\n        }\n\
    \    }\n    else if(month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day < 1 || day > 31){\n   \
    \         return false;\n        }\n    }\n    else{\n        if(day < 1 || day\
    \ > 30){\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    var dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    if(dateArr[0].length != 2 || dateArr[1].length != 2 || dateArr[2].length\
    \ != 4) return false;\n    if(dateArr[0] < 1 || dateArr[0] > 12) return false;\n\
    \    if(dateArr[0] == 1 || dateArr[0] == 3 || dateArr[0] == 5 || dateArr[0] ==\
    \ 7 || dateArr[0] == 8 || dateArr[0] == 10 || dateArr[0] == 12){\n        if(dateArr[1]\
    \ < 1 || dateArr[1] > 31) return false;\n    }\n    else if(dateArr[0] == 4 ||\
    \ dateArr[0] == 6 || dateArr[0] == 9 || dateArr[0] == 11){\n        if(dateArr[1]\
    \ < 1 || dateArr[1] > 30) return false;\n    }\n    else if(dateArr[0] == 2){\n\
    \        if(dateArr[1] < 1 || dateArr[1] > 29) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   let month = dateArr[0];\n    let day = dateArr[1];\n    let year = dateArr[2];\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    if(month < 1\
    \ || month > 12){\n        return false;\n    }\n    if(month === '02'){\n   \
    \     if(day < 1 || day > 29){\n            return false;\n        }\n    }\n\
    \    if(month === '01' || month === '03' || month === '05' || month === '07' ||\
    \ month === '08' || month === '10' || month === '12'){\n        if(day < 1 ||\
    \ day > 31){\n            return false;\n        }\n    }\n    if(month === '04'\
    \ || month === '06' || month === '09' || month === '11'){\n        if(day < 1\
    \ || day > 30){\n            return false;\n        }\n    }\n    if(year.length\
    \ !== 4){\n        return false;\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    var dateArr = date.split('-');\n \
    \   var day = dateArr[0];\n    var month = dateArr[1];\n    var year = dateArr[2];\n\
    \    if(dateArr.length !== 3){\n        return false;\n    }\n    if(day < 1 ||\
    \ day > 31){\n        return false;\n    }\n    if(month < 1 || month > 12){\n\
    \        return false;\n    }\n    if(year < 1){\n        return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3kftkl9g.js:40:10)\n    at Object.<anonymous> (/tmp/tmp3kftkl9g.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    let dateArr = date.split('-');\n \
    \   if (dateArr.length !== 3) {\n        return false;\n    }\n    let month =\
    \ parseInt(dateArr[0]);\n    let day = parseInt(dateArr[1]);\n    let year = parseInt(dateArr[2]);\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        return false;\n    }\n    if (month === 2) {\n \
    \       if (day > 29) {\n            return false;\n        }\n    }\n    if (month\
    \ === 4 || month === 6 || month === 9 || month === 11) {\n        if (day > 30)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = valid_date;\n\
    \  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length === 0){\n        return\
    \ false;\n    }\n    let dateArr = date.split('-');\n    let month = dateArr[0];\n\
    \    let day = dateArr[1];\n    let year = dateArr[2];\n    if(month < 1 || month\
    \ > 12){\n        return false;\n    }\n    if(month === '02'){\n        if(day\
    \ < 1 || day > 29){\n            return false;\n        }\n    }\n    if(month\
    \ === '04' || month === '06' || month === '09' || month === '11'){\n        if(day\
    \ < 1 || day > 30){\n            return false;\n        }\n    }\n    if(month\
    \ === '01' || month === '03' || month === '05' || month === '07' || month ===\
    \ '08' || month === '10' || month === '12'){\n        if(day < 1 || day > 31){\n\
    \            return false;\n        }\n    }\n    if(year.length !== 4){\n   \
    \     return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n  var dateArray = date.split('-');\n \
    \ var month = parseInt(dateArray[0]);\n  var day = parseInt(dateArray[1]);\n \
    \ var year = parseInt(dateArray[2]);\n  if (month < 1 || month > 12) {\n    return\
    \ false;\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return\
    \ false;\n    }\n  } else if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  } else\
    \ {\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n\
    \  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp9doekrgk.js:49:10)\n    at Object.<anonymous> (/tmp/tmp9doekrgk.js:61:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    let [month, day, year] = date.split('-');\n    if(day < 1 || day > 31) return\
    \ false;\n    if(month < 1 || month > 12) return false;\n    if(year < 1) return\
    \ false;\n    if(month == 2 && day > 29) return false;\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11) {\n        if(day > 30) return false;\n \
    \   }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
    ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
    04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(!date) return false;\n    var dateArr\
    \ = date.split('-');\n    if(dateArr.length !== 3) return false;\n    var month\
    \ = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n    var year =\
    \ parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return false;\n    if(day\
    \ < 1 || day > 31) return false;\n    if(month === 2 && day > 29) return false;\n\
    \    if(month === 4 || month === 6 || month === 9 || month === 11) {\n       \
    \ if(day > 30) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"\
    03-11-2000\"),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n \
    \ assert.deepEqual(candidate(\"04-0-2040\"),false);\n  assert.deepEqual(candidate(\"\
    06-04-2020\"),true);\n  assert.deepEqual(candidate(\"01-01-2007\"),true);\n  assert.deepEqual(candidate(\"\
    03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    04-31-3000\"),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n \
    \ assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
    04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You have to write a function which validates a given date string and\n\
    // returns True if the date is valid otherwise False.\n// The date is valid if\
    \ all of the following rules are satisfied:\n// 1. The date string is not empty.\n\
    // 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n// 3. The months should not be less than 1 or higher\
    \ than 12.\n// 4. The date should be in the format: mm-dd-yyyy\n// for example:\
    \ \n// valid_date('03-11-2000') => True\n// valid_date('15-01-2012') => False\n\
    // valid_date('04-0-2040') => False\n// valid_date('06-04-2020') => True\n// valid_date('06/04/2020')\
    \ => False\nfunction valid_date(date){\n    if(date.length == 0) return false;\n\
    \    var dateArr = date.split('-');\n    if(dateArr.length != 3) return false;\n\
    \    var month = parseInt(dateArr[0]);\n    var day = parseInt(dateArr[1]);\n\
    \    var year = parseInt(dateArr[2]);\n    if(month < 1 || month > 12) return\
    \ false;\n    if(day < 1 || day > 31) return false;\n    if(month == 2 && day\
    \ > 29) return false;\n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11) {\n        if(day > 30) return false;\n    }\n    return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"),true);\n  assert.deepEqual(candidate(\"\
    15-01-2012\"),false);\n  assert.deepEqual(candidate(\"04-0-2040\"),false);\n \
    \ assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
    01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n \
    \ assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"\
    ),false);\n  assert.deepEqual(candidate(\"06-06-2005\"),true);\n  assert.deepEqual(candidate(\"\
    21-31-2000\"),false);\n  assert.deepEqual(candidate(\"04-12-2003\"),true);\n \
    \ assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
    20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
    2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
