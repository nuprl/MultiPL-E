name: HumanEval_80_is_happy
language: javascript
results:
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   let result = false;\n    if(s.length >= 3){\n        for(let i = 0; i < s.length;\
    \ i++){\n            if(s[i] !== s[i+1] && s[i+1] !== s[i+2] && s[i] !== s[i+2]){\n\
    \                result = true;\n            }else{\n                result =\
    \ false;\n                break;\n            }\n        }\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp7b3xx01d.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7b3xx01d.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpde7q6y7w.js:27:10)\n    at Object.<anonymous> (/tmp/tmpde7q6y7w.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpatp5qi_m.js:27:10)\n    at Object.<anonymous> (/tmp/tmpatp5qi_m.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdy8ls8hy.js:27:10)\n    at Object.<anonymous> (/tmp/tmpdy8ls8hy.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppokijx4_.js:27:10)\n    at Object.<anonymous> (/tmp/tmppokijx4_.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy4vsz179.js:27:10)\n    at Object.<anonymous> (/tmp/tmpy4vsz179.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp26ke6q3v.js:27:10)\n    at Object.<anonymous> (/tmp/tmp26ke6q3v.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   return s.length >= 3 && s.split('').every((e, i, a) => i < a.length - 2 ?\
    \ e !== a[i + 1] && e !== a[i + 2] : true);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpz8f8k2eu.js:25:10)\n    at Object.<anonymous> (/tmp/tmpz8f8k2eu.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphgl7q_6f.js:27:10)\n    at Object.<anonymous> (/tmp/tmphgl7q_6f.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp9tzc3wh5.js:27:10)\n    at Object.<anonymous> (/tmp/tmp9tzc3wh5.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) {\n        return false;\n    }\n    for(let i = 0; i < s.length;\
    \ i++) {\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdt8q4jy2.js:31:10)\n    at Object.<anonymous> (/tmp/tmpdt8q4jy2.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpslia162x.js:27:10)\n    at Object.<anonymous> (/tmp/tmpslia162x.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpukdp42lk.js:29:10)\n    at Object.<anonymous> (/tmp/tmpukdp42lk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpiba_muql.js:29:10)\n    at Object.<anonymous> (/tmp/tmpiba_muql.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgyfp509w.js:26:10)\n    at Object.<anonymous> (/tmp/tmpgyfp509w.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) {\n        return false;\n    }\n    for(let i = 0; i < s.length\
    \ - 2; i++) {\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] ===\
    \ s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   let result = false;\n    if(s.length < 3){\n        return result;\n    }\n\
    \    for(let i = 0; i < s.length - 2; i++){\n        if(s[i] !== s[i + 1] && s[i]\
    \ !== s[i + 2] && s[i + 1] !== s[i + 2]){\n            result = true;\n      \
    \  }\n        else{\n            return false;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp73pw87ra.js:27:10)\n    at Object.<anonymous> (/tmp/tmp73pw87ra.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length<3){\n        return false;\n    }\n    for(let i=0;i<s.length-2;i++){\n\
    \        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8r_qb8vc.js:27:10)\n    at Object.<anonymous> (/tmp/tmp8r_qb8vc.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp971spbik.js:27:10)\n    at Object.<anonymous> (/tmp/tmp971spbik.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(var i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7897b4pq.js:27:10)\n    at Object.<anonymous> (/tmp/tmp7897b4pq.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpa8wmjh57.js:27:10)\n    at Object.<anonymous> (/tmp/tmpa8wmjh57.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpd93fp2qn.js:27:10)\n    at Object.<anonymous> (/tmp/tmpd93fp2qn.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0dsf2jni.js:27:10)\n    at Object.<anonymous> (/tmp/tmp0dsf2jni.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length<3){\n        return false;\n    }\n    for(let i=0;i<s.length-2;i++){\n\
    \        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   let result = true;\n    if(s.length < 3){\n        result = false;\n    }\n\
    \    else{\n        for(let i = 0; i < s.length - 2; i++){\n            if(s[i]\
    \ === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n             \
    \   result = false;\n            }\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i += 3){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpt4qnbkws.js:26:10)\n    at Object.<anonymous> (/tmp/tmpt4qnbkws.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpltfvkh12.js:27:10)\n    at Object.<anonymous> (/tmp/tmpltfvkh12.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzdpwhgus.js:26:10)\n    at Object.<anonymous> (/tmp/tmpzdpwhgus.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0hh40j56.js:29:10)\n    at Object.<anonymous> (/tmp/tmp0hh40j56.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmokv7k3s.js:27:10)\n    at Object.<anonymous> (/tmp/tmpmokv7k3s.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0u8jt726.js:26:10)\n    at Object.<anonymous> (/tmp/tmp0u8jt726.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpp_ic7xx0.js:27:10)\n    at Object.<anonymous> (/tmp/tmpp_ic7xx0.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1xjm0aj1.js:27:10)\n    at Object.<anonymous> (/tmp/tmp1xjm0aj1.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpctsdth9y.js:27:10)\n    at Object.<anonymous> (/tmp/tmpctsdth9y.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length<3){\n        return false;\n    }\n    for(let i=0;i<s.length-2;i++){\n\
    \        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) {\n        return false;\n    }\n    for(let i = 0; i < s.length\
    \ - 2; i++) {\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] ===\
    \ s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpouvdp14r.js:26:10)\n    at Object.<anonymous> (/tmp/tmpouvdp14r.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp618i5arm.js:27:10)\n    at Object.<anonymous> (/tmp/tmp618i5arm.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp218lmt1k.js:27:10)\n    at Object.<anonymous> (/tmp/tmp218lmt1k.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpku6nldsq.js:27:10)\n    at Object.<anonymous> (/tmp/tmpku6nldsq.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length<3){\n        return false;\n    }\n    for(let i=0;i<s.length-2;i++){\n\
    \        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgkj9w9hy.js:27:10)\n    at Object.<anonymous> (/tmp/tmpgkj9w9hy.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxppen3d0.js:27:10)\n    at Object.<anonymous> (/tmp/tmpxppen3d0.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) {\n        return false;\n    }\n    for(let i = 0; i < s.length\
    \ - 2; i++) {\n        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] ===\
    \ s[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdadaa62z.js:26:10)\n    at Object.<anonymous> (/tmp/tmpdadaa62z.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmparcng36h.js:29:10)\n    at Object.<anonymous> (/tmp/tmparcng36h.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   return s.length >= 3 && !/([a-z])\\1{2}/.test(s);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgoiffztb.js:23:10)\n    at Object.<anonymous> (/tmp/tmpgoiffztb.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   let result = true;\n    if(s.length < 3){\n        result = false;\n    }\n\
    \    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1]\
    \ === s[i+2]){\n            result = false;\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpb8lfvzcj.js:32:10)\n    at Object.<anonymous> (/tmp/tmpb8lfvzcj.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2ds1jv_q.js:27:10)\n    at Object.<anonymous> (/tmp/tmp2ds1jv_q.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmvvcuwgg.js:26:10)\n    at Object.<anonymous> (/tmp/tmpmvvcuwgg.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbd36rp_7.js:27:10)\n    at Object.<anonymous> (/tmp/tmpbd36rp_7.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_f_a__58.js:27:10)\n    at Object.<anonymous> (/tmp/tmp_f_a__58.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgw_td4x8.js:27:10)\n    at Object.<anonymous> (/tmp/tmpgw_td4x8.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   return s.length >= 3 && !/([a-z])\\1{2}/.test(s);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpa8m6d3ig.js:23:10)\n    at Object.<anonymous> (/tmp/tmpa8m6d3ig.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpevvqocpb.js:27:10)\n    at Object.<anonymous> (/tmp/tmpevvqocpb.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqad5gh2n.js:26:10)\n    at Object.<anonymous> (/tmp/tmpqad5gh2n.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length<3){\n        return false;\n    }\n    for(let i=0;i<s.length-2;i++){\n\
    \        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpm20h0uq8.js:27:10)\n    at Object.<anonymous> (/tmp/tmpm20h0uq8.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   let result = true;\n    if(s.length < 3){\n        result = false;\n    }\n\
    \    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1]\
    \ === s[i+2]){\n            result = false;\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgriealpc.js:31:10)\n    at Object.<anonymous> (/tmp/tmpgriealpc.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7unw86n9.js:26:10)\n    at Object.<anonymous> (/tmp/tmp7unw86n9.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7y56ivh3.js:27:10)\n    at Object.<anonymous> (/tmp/tmp7y56ivh3.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpis1cd3zw.js:27:10)\n    at Object.<anonymous> (/tmp/tmpis1cd3zw.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpat89x3m_.js:27:10)\n    at Object.<anonymous> (/tmp/tmpat89x3m_.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8mifbvzb.js:27:10)\n    at Object.<anonymous> (/tmp/tmp8mifbvzb.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpiqiga0r8.js:27:10)\n    at Object.<anonymous> (/tmp/tmpiqiga0r8.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpsj7d6s0q.js:27:10)\n    at Object.<anonymous> (/tmp/tmpsj7d6s0q.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length<3){\n        return false;\n    }\n    for(let i=0;i<s.length-2;i++){\n\
    \        if(s[i]===s[i+1]||s[i]===s[i+2]||s[i+1]===s[i+2]){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp66l508i9.js:27:10)\n    at Object.<anonymous> (/tmp/tmp66l508i9.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo3qfl6oq.js:27:10)\n    at Object.<anonymous> (/tmp/tmpo3qfl6oq.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length<3){\n        return false;\n    }\n    for(let i=0;i<s.length-2;i++){\n\
    \        if(s[i]===s[i+1]||s[i]===s[i+2]||s[i+1]===s[i+2]){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqwaiko18.js:29:10)\n    at Object.<anonymous> (/tmp/tmpqwaiko18.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgxczlc_u.js:27:10)\n    at Object.<anonymous> (/tmp/tmpgxczlc_u.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length - 2; i++){\n\
    \        if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return\
    \ false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]){\n            return false;\n \
    \       }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpb5tnwngj.js:29:10)\n    at Object.<anonymous> (/tmp/tmpb5tnwngj.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s){\n \
    \   if(s.length < 3) return false;\n    for(let i = 0; i < s.length; i++){\n \
    \       if(s[i] === s[i+1] && s[i] === s[i+2]) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpapqmk6g2.js:27:10)\n    at Object.<anonymous> (/tmp/tmpapqmk6g2.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
