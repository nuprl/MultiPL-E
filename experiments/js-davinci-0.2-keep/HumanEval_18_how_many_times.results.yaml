name: HumanEval_18_how_many_times
language: javascript
results:
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    let count = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string.substring(i, i + substring.length) === substring) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n\tvar count = 0;\n\tvar index = 0;\n\twhile (index < string.length){\n\
    \t\tif (string.substring(index, index + substring.length) == substring){\n\t\t\
    \tcount++;\n\t\t\tindex += substring.length;\n\t\t}\n\t\telse{\n\t\t\tindex++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmp0zwg4xnm.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0zwg4xnm.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var i = 0;\n    while (i < string.length)\
    \ {\n        if (string.substring(i, i + substring.length) == substring) {\n \
    \           count++;\n            i += substring.length;\n        } else {\n \
    \           i++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmpg3w9k_tn.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg3w9k_tn.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var index = string.indexOf(substring);\n\
    \    while (index != -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    if(string.length == 0){\n        return 0;\n    }\n    if(string.length\
    \ == 1){\n        if(string == substring){\n            return 1;\n        }\n\
    \        else{\n            return 0;\n        }\n    }\n    if(string.length\
    \ == 2){\n        if(string == substring){\n            return 1;\n        }\n\
    \        else{\n            return 0;\n        }\n    }\n    if(string.length\
    \ > 2){\n        if(string.slice(0, substring.length) == substring){\n       \
    \     return 1 + how_many_times(string.slice(1), substring);\n        }\n    \
    \    else{\n            return how_many_times(string.slice(1), substring);\n \
    \       }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n4\n    at test (/tmp/tmpmrmjzr7q.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmrmjzr7q.js:49:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var pos = string.indexOf(substring);\n\
    \    while (pos !== -1) {\n        count++;\n        pos = string.indexOf(substring,\
    \ pos + 1);\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var index = 0;\n    while(index < string.length){\n\
    \        if(string.indexOf(substring, index) != -1){\n            count++;\n \
    \           index = string.indexOf(substring, index) + 1;\n        }\n       \
    \ else{\n            index++;\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var i = 0;\n    while (i < string.length){\n\
    \        if (string.substring(i, i + substring.length) == substring){\n      \
    \      count++;\n            i += substring.length;\n        }\n        else{\n\
    \            i++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmp4yqb24t9.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4yqb24t9.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n\tvar count = 0;\n\tfor (var i = 0; i < string.length; i++) {\n\
    \t\tif (string.substring(i, i + substring.length) == substring) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    let count = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string.substring(i, i + substring.length) === substring) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n\tvar count = 0;\n\tvar index = 0;\n\twhile(index < string.length){\n\
    \t\tindex = string.indexOf(substring, index);\n\t\tif(index == -1){\n\t\t\tbreak;\n\
    \t\t}\n\t\tcount++;\n\t\tindex++;\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.slice(i, i + substring.length) == substring) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var pos = string.indexOf(substring);\n\
    \    while (pos !== -1) {\n        count++;\n        pos = string.indexOf(substring,\
    \ pos + 1);\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  for (var i = 0; i < string.length; i++) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    if (string.length == 0) {\n        return 0;\n    }\n    if\
    \ (string.length < substring.length) {\n        return 0;\n    }\n    var count\
    \ = 0;\n    for (var i = 0; i < string.length; i++) {\n        if (string.substring(i,\
    \ i + substring.length) == substring) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    let count = 0;\n    for (let i = 0; i < string.length; i++){\n\
    \        if (string.substring(i, i + substring.length) == substring){\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    let count = 0;\n    for (let i = 0; i < string.length; i++){\n\
    \        if (string.substring(i, i + substring.length) == substring){\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    let count = 0;\n    for (let i = 0; i < string.length; i++){\n\
    \        if (string.slice(i, i + substring.length) === substring){\n         \
    \   count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var i = 0;\n    while (i < string.length)\
    \ {\n        if (string.substring(i, i + substring.length) == substring) {\n \
    \           count++;\n            i += substring.length;\n        } else {\n \
    \           i++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmppxg7ufm9.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmppxg7ufm9.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var i = 0;\n    while (i < string.length){\n\
    \        if (string.substring(i, i + substring.length) == substring){\n      \
    \      count += 1;\n            i += substring.length;\n        }\n        else{\n\
    \            i += 1;\n        }\n    }\n    return count;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmp6yrukmko.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6yrukmko.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.slice(i, i + substring.length) == substring) {\n     \
    \       count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var i = 0;\n    while (i < string.length){\n\
    \        if (string.substring(i, i + substring.length) == substring){\n      \
    \      count++;\n            i += substring.length;\n        }\n        else{\n\
    \            i++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmpomj7ikna.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpomj7ikna.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  var i = 0;\n  while (i < string.length) {\n\
    \    if (string.substring(i, i + substring.length) == substring) {\n      count++;\n\
    \      i += substring.length;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n\
    \  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmpofyqmvnr.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpofyqmvnr.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n\tvar count = 0;\n\tfor (var i = 0; i < string.length; i++) {\n\
    \t\tif (string.substring(i, i + substring.length) == substring) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n\tvar count = 0;\n\tfor (var i = 0; i < string.length; i++) {\n\
    \t\tif (string.substring(i, i + substring.length) == substring) {\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn count;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var pos = string.indexOf(substring);\n\
    \    while (pos >= 0) {\n        count += 1;\n        pos = string.indexOf(substring,\
    \ pos + 1);\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var index = 0;\n    while(index < string.length){\n\
    \        if(string.substring(index, index + substring.length) == substring){\n\
    \            count++;\n            index += substring.length;\n        }\n   \
    \     else{\n            index++;\n        }\n    }\n    return count;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmp3iwk2csu.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3iwk2csu.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var i = 0;\n    while (i < string.length){\n\
    \        if (string.substring(i, i + substring.length) == substring){\n      \
    \      count++;\n            i += substring.length;\n        }\n        else{\n\
    \            i++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmp6_dmay1e.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6_dmay1e.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n  var count = 0;\n  var index = 0;\n  while(index < string.length){\n\
    \    if(string.slice(index, index + substring.length) === substring){\n      count++;\n\
    \      index += substring.length;\n    } else {\n      index++;\n    }\n  }\n\
    \  return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\", \"\
    x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmpmx_sqv2q.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmx_sqv2q.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    var i = 0;\n    while (i < string.length){\n\
    \        if (string.substring(i, i + substring.length) == substring){\n      \
    \      count++;\n            i += substring.length;\n        }\n        else{\n\
    \            i++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n4\n    at test (/tmp/tmpvn3swsnz.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvn3swsnz.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 4,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    var count = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        if (string.substr(i, substring.length) == substring) {\n        \
    \    count++;\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\
    \", \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
    cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"\
    ),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Find how many times a given substring can be found in the original string.\
    \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
    \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string,\
    \ substring){\n    let count = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string.substring(i, i + substring.length) === substring) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = how_many_times;\n\
    \  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
    xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
    \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
