name: HumanEval_126_is_sorted
language: javascript
results:
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjkx86yrn.js:37:10)\n    at Object.<anonymous> (/tmp/tmpjkx86yrn.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpf960m5be.js:36:10)\n    at Object.<anonymous> (/tmp/tmpf960m5be.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    if(lst.length === 1){\n        return\
    \ true;\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] >\
    \ lst[i+1]){\n            return false;\n        }\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n\
    \  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppbw836xe.js:38:10)\n    at Object.<anonymous> (/tmp/tmppbw836xe.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyy0s435m.js:37:10)\n    at Object.<anonymous> (/tmp/tmpyy0s435m.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2zxv1bbj.js:36:10)\n    at Object.<anonymous> (/tmp/tmp2zxv1bbj.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpi96ohy2x.js:38:10)\n    at Object.<anonymous> (/tmp/tmpi96ohy2x.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpt4fr97db.js:35:10)\n    at Object.<anonymous> (/tmp/tmpt4fr97db.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7s4d2m5t.js:36:10)\n    at Object.<anonymous> (/tmp/tmp7s4d2m5t.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppw84sq9h.js:36:10)\n    at Object.<anonymous> (/tmp/tmppw84sq9h.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx0as39wa.js:36:10)\n    at Object.<anonymous> (/tmp/tmpx0as39wa.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx8wy3fda.js:35:10)\n    at Object.<anonymous> (/tmp/tmpx8wy3fda.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpnno8l9b7.js:37:10)\n    at Object.<anonymous> (/tmp/tmpnno8l9b7.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpnyc7s5dj.js:36:10)\n    at Object.<anonymous> (/tmp/tmpnyc7s5dj.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvz6jjz1i.js:36:10)\n    at Object.<anonymous> (/tmp/tmpvz6jjz1i.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2xmffehd.js:35:10)\n    at Object.<anonymous> (/tmp/tmp2xmffehd.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp70f2nohm.js:36:10)\n    at Object.<anonymous> (/tmp/tmp70f2nohm.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpq8v4f2gk.js:36:10)\n    at Object.<anonymous> (/tmp/tmpq8v4f2gk.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpos6uzxd1.js:36:10)\n    at Object.<anonymous> (/tmp/tmpos6uzxd1.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbptiyis6.js:37:10)\n    at Object.<anonymous> (/tmp/tmpbptiyis6.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let result = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            result\
    \ = false;\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp822i2qdd.js:37:10)\n    at Object.<anonymous> (/tmp/tmp822i2qdd.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0nvbx3_d.js:35:10)\n    at Object.<anonymous> (/tmp/tmp0nvbx3_d.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpyi4wbpeo.js:38:10)\n    at Object.<anonymous> (/tmp/tmpyi4wbpeo.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpef4wkbo7.js:37:10)\n    at Object.<anonymous> (/tmp/tmpef4wkbo7.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpz9_s5w89.js:36:10)\n    at Object.<anonymous> (/tmp/tmpz9_s5w89.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpz61j8vh_.js:36:10)\n    at Object.<anonymous> (/tmp/tmpz61j8vh_.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbdobgxob.js:36:10)\n    at Object.<anonymous> (/tmp/tmpbdobgxob.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv7xcb9kv.js:36:10)\n    at Object.<anonymous> (/tmp/tmpv7xcb9kv.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi1ldlmps.js:36:10)\n    at Object.<anonymous> (/tmp/tmpi1ldlmps.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp624rxhuj.js:36:10)\n    at Object.<anonymous> (/tmp/tmp624rxhuj.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp95t3mjvp.js:36:10)\n    at Object.<anonymous> (/tmp/tmp95t3mjvp.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxgppfhqf.js:36:10)\n    at Object.<anonymous> (/tmp/tmpxgppfhqf.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyakdc7r2.js:36:10)\n    at Object.<anonymous> (/tmp/tmpyakdc7r2.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7n1yskbf.js:36:10)\n    at Object.<anonymous> (/tmp/tmp7n1yskbf.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyhpkis_9.js:36:10)\n    at Object.<anonymous> (/tmp/tmpyhpkis_9.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmps3da97v7.js:35:10)\n    at Object.<anonymous> (/tmp/tmps3da97v7.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmptajnk0f9.js:36:10)\n    at Object.<anonymous> (/tmp/tmptajnk0f9.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp3ks7e8pn.js:38:10)\n    at Object.<anonymous> (/tmp/tmp3ks7e8pn.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0br4jkda.js:35:10)\n    at Object.<anonymous> (/tmp/tmp0br4jkda.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpog6pyjuk.js:35:10)\n    at Object.<anonymous> (/tmp/tmpog6pyjuk.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcqxixoqa.js:36:10)\n    at Object.<anonymous> (/tmp/tmpcqxixoqa.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    var sorted = true;\n    for(var\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp06u1g6o8.js:38:10)\n    at Object.<anonymous> (/tmp/tmp06u1g6o8.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppxwmev6l.js:37:10)\n    at Object.<anonymous> (/tmp/tmppxwmev6l.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvsgjkrej.js:35:10)\n    at Object.<anonymous> (/tmp/tmpvsgjkrej.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdzt_15vr.js:35:10)\n    at Object.<anonymous> (/tmp/tmpdzt_15vr.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp9y7xuwcz.js:36:10)\n    at Object.<anonymous> (/tmp/tmp9y7xuwcz.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpl5sp074m.js:35:10)\n    at Object.<anonymous> (/tmp/tmpl5sp074m.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdltycc9x.js:36:10)\n    at Object.<anonymous> (/tmp/tmpdltycc9x.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpweqlztm5.js:36:10)\n    at Object.<anonymous> (/tmp/tmpweqlztm5.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    let prev\
    \ = lst[0];\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < prev){\n\
    \            sorted = false;\n            break;\n        }\n        prev = lst[i];\n\
    \    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfy1ea27m.js:39:10)\n    at Object.<anonymous> (/tmp/tmpfy1ea27m.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplva89b3_.js:36:10)\n    at Object.<anonymous> (/tmp/tmplva89b3_.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqdncb4bg.js:35:10)\n    at Object.<anonymous> (/tmp/tmpqdncb4bg.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpicbcmy8e.js:37:10)\n    at Object.<anonymous> (/tmp/tmpicbcmy8e.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmperja25ao.js:36:10)\n    at Object.<anonymous> (/tmp/tmperja25ao.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6nwzzix9.js:36:10)\n    at Object.<anonymous> (/tmp/tmp6nwzzix9.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp4umk0jc6.js:38:10)\n    at Object.<anonymous> (/tmp/tmp4umk0jc6.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpf8zz9yar.js:38:10)\n    at Object.<anonymous> (/tmp/tmpf8zz9yar.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkipqx92f.js:36:10)\n    at Object.<anonymous> (/tmp/tmpkipqx92f.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4iv6om7y.js:36:10)\n    at Object.<anonymous> (/tmp/tmp4iv6om7y.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpymt4yv09.js:36:10)\n    at Object.<anonymous> (/tmp/tmpymt4yv09.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqfy8b9i2.js:37:10)\n    at Object.<anonymous> (/tmp/tmpqfy8b9i2.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwgvjqua6.js:36:10)\n    at Object.<anonymous> (/tmp/tmpwgvjqua6.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmptu6j_jlz.js:36:10)\n    at Object.<anonymous> (/tmp/tmptu6j_jlz.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp8uzn8c_u.js:38:10)\n    at Object.<anonymous> (/tmp/tmp8uzn8c_u.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp18btvmio.js:36:10)\n    at Object.<anonymous> (/tmp/tmp18btvmio.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7mzlte86.js:35:10)\n    at Object.<anonymous> (/tmp/tmp7mzlte86.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    let prev\
    \ = lst[0];\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < prev){\n\
    \            sorted = false;\n            break;\n        }\n        prev = lst[i];\n\
    \    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp680l9n19.js:39:10)\n    at Object.<anonymous> (/tmp/tmp680l9n19.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpp3u87gtu.js:36:10)\n    at Object.<anonymous> (/tmp/tmpp3u87gtu.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp5r8kcbyu.js:38:10)\n    at Object.<anonymous> (/tmp/tmp5r8kcbyu.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpigy9c5py.js:36:10)\n    at Object.<anonymous> (/tmp/tmpigy9c5py.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpf6vz0b5z.js:36:10)\n    at Object.<anonymous> (/tmp/tmpf6vz0b5z.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp85bzi84e.js:35:10)\n    at Object.<anonymous> (/tmp/tmp85bzi84e.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7mkd2cns.js:35:10)\n    at Object.<anonymous> (/tmp/tmp7mkd2cns.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzv5d4ly3.js:36:10)\n    at Object.<anonymous> (/tmp/tmpzv5d4ly3.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    let prev\
    \ = lst[0];\n    for(let i = 1; i < lst.length; i++){\n        if(prev > lst[i]){\n\
    \            sorted = false;\n            break;\n        }\n        prev = lst[i];\n\
    \    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpb5nyjs81.js:39:10)\n    at Object.<anonymous> (/tmp/tmpb5nyjs81.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpz0nls8nn.js:35:10)\n    at Object.<anonymous> (/tmp/tmpz0nls8nn.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmcfddyav.js:37:10)\n    at Object.<anonymous> (/tmp/tmpmcfddyav.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6n5igqs7.js:37:10)\n    at Object.<anonymous> (/tmp/tmp6n5igqs7.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < lst[i-1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7ulm4d9c.js:36:10)\n    at Object.<anonymous> (/tmp/tmp7ulm4d9c.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 1; i < lst.length; i++){\n        if(lst[i] <= lst[i-1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmps23h4kij.js:39:10)\n    at Object.<anonymous> (/tmp/tmps23h4kij.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpli4ssr7q.js:36:10)\n    at Object.<anonymous> (/tmp/tmpli4ssr7q.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < lst[i+1]){\n            sorted\
    \ = true;\n        }else{\n            sorted = false;\n            break;\n \
    \       }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmphkdmjgbn.js:30:10)\n    at Object.<anonymous> (/tmp/tmphkdmjgbn.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpisd7249q.js:36:10)\n    at Object.<anonymous> (/tmp/tmpisd7249q.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpysd83nrl.js:36:10)\n    at Object.<anonymous> (/tmp/tmpysd83nrl.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpsmmpeuz2.js:36:10)\n    at Object.<anonymous> (/tmp/tmpsmmpeuz2.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx541ge1a.js:36:10)\n    at Object.<anonymous> (/tmp/tmpx541ge1a.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcsi6n94s.js:36:10)\n    at Object.<anonymous> (/tmp/tmpcsi6n94s.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp39tv7g87.js:38:10)\n    at Object.<anonymous> (/tmp/tmp39tv7g87.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpswrz_2xh.js:35:10)\n    at Object.<anonymous> (/tmp/tmpswrz_2xh.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp50lqdqlz.js:36:10)\n    at Object.<anonymous> (/tmp/tmp50lqdqlz.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxmrk28i8.js:36:10)\n    at Object.<anonymous> (/tmp/tmpxmrk28i8.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpum96ya5p.js:36:10)\n    at Object.<anonymous> (/tmp/tmpum96ya5p.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxx_fqsok.js:36:10)\n    at Object.<anonymous> (/tmp/tmpxx_fqsok.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjd5hwc9p.js:36:10)\n    at Object.<anonymous> (/tmp/tmpjd5hwc9p.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp04cl4pqt.js:35:10)\n    at Object.<anonymous> (/tmp/tmp04cl4pqt.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpujcrbv96.js:37:10)\n    at Object.<anonymous> (/tmp/tmpujcrbv96.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphpbrfif1.js:36:10)\n    at Object.<anonymous> (/tmp/tmphpbrfif1.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfqkl8b2l.js:36:10)\n    at Object.<anonymous> (/tmp/tmpfqkl8b2l.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkb0sh3dd.js:36:10)\n    at Object.<anonymous> (/tmp/tmpkb0sh3dd.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdx3blamb.js:36:10)\n    at Object.<anonymous> (/tmp/tmpdx3blamb.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3_gvf3uw.js:35:10)\n    at Object.<anonymous> (/tmp/tmp3_gvf3uw.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxgjx67rx.js:36:10)\n    at Object.<anonymous> (/tmp/tmpxgjx67rx.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3xn9sd8k.js:35:10)\n    at Object.<anonymous> (/tmp/tmp3xn9sd8k.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppqsav44p.js:35:10)\n    at Object.<anonymous> (/tmp/tmppqsav44p.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length -\
    \ 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdejpmg4e.js:36:10)\n    at Object.<anonymous> (/tmp/tmpdejpmg4e.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpz2zefmbw.js:36:10)\n    at Object.<anonymous> (/tmp/tmpz2zefmbw.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzzej_7vp.js:36:10)\n    at Object.<anonymous> (/tmp/tmpzzej_7vp.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6hgsglyw.js:35:10)\n    at Object.<anonymous> (/tmp/tmp6hgsglyw.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpk8lysipb.js:35:10)\n    at Object.<anonymous> (/tmp/tmpk8lysipb.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzgcvdt_r.js:37:10)\n    at Object.<anonymous> (/tmp/tmpzgcvdt_r.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpl_m_i8r3.js:35:10)\n    at Object.<anonymous> (/tmp/tmpl_m_i8r3.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy6j4nz_h.js:36:10)\n    at Object.<anonymous> (/tmp/tmpy6j4nz_h.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxbxx_7l5.js:36:10)\n    at Object.<anonymous> (/tmp/tmpxbxx_7l5.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpak5801bi.js:35:10)\n    at Object.<anonymous> (/tmp/tmpak5801bi.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgylim_bd.js:36:10)\n    at Object.<anonymous> (/tmp/tmpgylim_bd.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2ryfc0ku.js:36:10)\n    at Object.<anonymous> (/tmp/tmp2ryfc0ku.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpivs5kl6y.js:36:10)\n    at Object.<anonymous> (/tmp/tmpivs5kl6y.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpsl6tppmn.js:35:10)\n    at Object.<anonymous> (/tmp/tmpsl6tppmn.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplyq_pm5g.js:36:10)\n    at Object.<anonymous> (/tmp/tmplyq_pm5g.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1y6sx678.js:36:10)\n    at Object.<anonymous> (/tmp/tmp1y6sx678.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpq5con2tk.js:36:10)\n    at Object.<anonymous> (/tmp/tmpq5con2tk.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplwr29bwn.js:37:10)\n    at Object.<anonymous> (/tmp/tmplwr29bwn.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwtakh3ju.js:36:10)\n    at Object.<anonymous> (/tmp/tmpwtakh3ju.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8v7fsgdf.js:36:10)\n    at Object.<anonymous> (/tmp/tmp8v7fsgdf.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0oqb7121.js:36:10)\n    at Object.<anonymous> (/tmp/tmp0oqb7121.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpu4i3v28x.js:38:10)\n    at Object.<anonymous> (/tmp/tmpu4i3v28x.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpudl5douz.js:36:10)\n    at Object.<anonymous> (/tmp/tmpudl5douz.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpx2947hea.js:38:10)\n    at Object.<anonymous> (/tmp/tmpx2947hea.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvbl__01b.js:36:10)\n    at Object.<anonymous> (/tmp/tmpvbl__01b.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy9__u6kp.js:36:10)\n    at Object.<anonymous> (/tmp/tmpy9__u6kp.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcc2w5grk.js:36:10)\n    at Object.<anonymous> (/tmp/tmpcc2w5grk.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpnx1i4yba.js:36:10)\n    at Object.<anonymous> (/tmp/tmpnx1i4yba.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8jhq60wa.js:35:10)\n    at Object.<anonymous> (/tmp/tmp8jhq60wa.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5i8rtqqw.js:35:10)\n    at Object.<anonymous> (/tmp/tmp5i8rtqqw.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8jygas9s.js:36:10)\n    at Object.<anonymous> (/tmp/tmp8jygas9s.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpofqkj93h.js:36:10)\n    at Object.<anonymous> (/tmp/tmpofqkj93h.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplkn0xf56.js:37:10)\n    at Object.<anonymous> (/tmp/tmplkn0xf56.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpm49edfrp.js:37:10)\n    at Object.<anonymous> (/tmp/tmpm49edfrp.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp58wdyexi.js:36:10)\n    at Object.<anonymous> (/tmp/tmp58wdyexi.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0mu9m2bs.js:36:10)\n    at Object.<anonymous> (/tmp/tmp0mu9m2bs.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8x6r4smm.js:36:10)\n    at Object.<anonymous> (/tmp/tmp8x6r4smm.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0t4tekjx.js:36:10)\n    at Object.<anonymous> (/tmp/tmp0t4tekjx.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfdja1e4p.js:36:10)\n    at Object.<anonymous> (/tmp/tmpfdja1e4p.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length -\
    \ 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpovtpd21r.js:37:10)\n    at Object.<anonymous> (/tmp/tmpovtpd21r.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmpw_3opm.js:36:10)\n    at Object.<anonymous> (/tmp/tmpmpw_3opm.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length -\
    \ 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvtetqmmj.js:35:10)\n    at Object.<anonymous> (/tmp/tmpvtetqmmj.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwb1zhym_.js:36:10)\n    at Object.<anonymous> (/tmp/tmpwb1zhym_.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo9edphhb.js:36:10)\n    at Object.<anonymous> (/tmp/tmpo9edphhb.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpu0vmrbg8.js:36:10)\n    at Object.<anonymous> (/tmp/tmpu0vmrbg8.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp464a4dit.js:35:10)\n    at Object.<anonymous> (/tmp/tmp464a4dit.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmph4hfogad.js:36:10)\n    at Object.<anonymous> (/tmp/tmph4hfogad.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpl8qikxap.js:36:10)\n    at Object.<anonymous> (/tmp/tmpl8qikxap.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length -\
    \ 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmphy7chhan.js:37:10)\n    at Object.<anonymous> (/tmp/tmphy7chhan.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8zgkyyq2.js:36:10)\n    at Object.<anonymous> (/tmp/tmp8zgkyyq2.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp64v0pdfm.js:37:10)\n    at Object.<anonymous> (/tmp/tmp64v0pdfm.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpm5ahn4li.js:38:10)\n    at Object.<anonymous> (/tmp/tmpm5ahn4li.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpccg2b1o9.js:36:10)\n    at Object.<anonymous> (/tmp/tmpccg2b1o9.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv56_4nko.js:36:10)\n    at Object.<anonymous> (/tmp/tmpv56_4nko.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6celez8a.js:36:10)\n    at Object.<anonymous> (/tmp/tmp6celez8a.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmph45j3myu.js:36:10)\n    at Object.<anonymous> (/tmp/tmph45j3myu.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpiv21vx6h.js:36:10)\n    at Object.<anonymous> (/tmp/tmpiv21vx6h.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_0wkjl5p.js:35:10)\n    at Object.<anonymous> (/tmp/tmp_0wkjl5p.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpfdvqmzc1.js:38:10)\n    at Object.<anonymous> (/tmp/tmpfdvqmzc1.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpop_vlhlb.js:35:10)\n    at Object.<anonymous> (/tmp/tmpop_vlhlb.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5azjieq1.js:35:10)\n    at Object.<anonymous> (/tmp/tmp5azjieq1.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_pd60d7v.js:36:10)\n    at Object.<anonymous> (/tmp/tmp_pd60d7v.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpyfohou5c.js:38:10)\n    at Object.<anonymous> (/tmp/tmpyfohou5c.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length -\
    \ 1; i++){\n        if(lst[i] >= lst[i + 1]){\n            return false;\n   \
    \     }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp045ub9ae.js:37:10)\n    at Object.<anonymous> (/tmp/tmp045ub9ae.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpn8maf6qq.js:35:10)\n    at Object.<anonymous> (/tmp/tmpn8maf6qq.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphrfv2lxj.js:37:10)\n    at Object.<anonymous> (/tmp/tmphrfv2lxj.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpc27hj0k6.js:36:10)\n    at Object.<anonymous> (/tmp/tmpc27hj0k6.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpuplrbxhc.js:36:10)\n    at Object.<anonymous> (/tmp/tmpuplrbxhc.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6xaxfr7s.js:36:10)\n    at Object.<anonymous> (/tmp/tmp6xaxfr7s.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8g37p8l4.js:37:10)\n    at Object.<anonymous> (/tmp/tmp8g37p8l4.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    let prev\
    \ = lst[0];\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < prev){\n\
    \            sorted = false;\n            break;\n        }\n        prev = lst[i];\n\
    \    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzyntqbtd.js:39:10)\n    at Object.<anonymous> (/tmp/tmpzyntqbtd.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4tqw_fox.js:35:10)\n    at Object.<anonymous> (/tmp/tmp4tqw_fox.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqtivzoxv.js:36:10)\n    at Object.<anonymous> (/tmp/tmpqtivzoxv.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let result = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      result = false;\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp4uoi5mw6.js:38:10)\n    at Object.<anonymous> (/tmp/tmp4uoi5mw6.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmprmq3vsah.js:38:10)\n    at Object.<anonymous> (/tmp/tmprmq3vsah.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpr7grywbu.js:35:10)\n    at Object.<anonymous> (/tmp/tmpr7grywbu.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjly7l0sv.js:36:10)\n    at Object.<anonymous> (/tmp/tmpjly7l0sv.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwibql0zb.js:37:10)\n    at Object.<anonymous> (/tmp/tmpwibql0zb.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0kre_6xp.js:36:10)\n    at Object.<anonymous> (/tmp/tmp0kre_6xp.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpe0xhylq3.js:36:10)\n    at Object.<anonymous> (/tmp/tmpe0xhylq3.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpg44v1kvs.js:36:10)\n    at Object.<anonymous> (/tmp/tmpg44v1kvs.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfslzuw8v.js:37:10)\n    at Object.<anonymous> (/tmp/tmpfslzuw8v.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpytd2yosg.js:36:10)\n    at Object.<anonymous> (/tmp/tmpytd2yosg.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyeu61gfm.js:35:10)\n    at Object.<anonymous> (/tmp/tmpyeu61gfm.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpf8178c9h.js:36:10)\n    at Object.<anonymous> (/tmp/tmpf8178c9h.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6vo29yd0.js:36:10)\n    at Object.<anonymous> (/tmp/tmp6vo29yd0.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxbxkri28.js:35:10)\n    at Object.<anonymous> (/tmp/tmpxbxkri28.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvb7gogdv.js:36:10)\n    at Object.<anonymous> (/tmp/tmpvb7gogdv.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi8c7rd1k.js:37:10)\n    at Object.<anonymous> (/tmp/tmpi8c7rd1k.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmph5ned0oz.js:37:10)\n    at Object.<anonymous> (/tmp/tmph5ned0oz.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_lto7wb0.js:36:10)\n    at Object.<anonymous> (/tmp/tmp_lto7wb0.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > lst[i+1]){\n            sorted\
    \ = false;\n        }\n    }\n    return sorted;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpm94bgnao.js:36:10)\n    at Object.<anonymous> (/tmp/tmpm94bgnao.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgx6ffrwv.js:35:10)\n    at Object.<anonymous> (/tmp/tmpgx6ffrwv.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkku2elyt.js:37:10)\n    at Object.<anonymous> (/tmp/tmpkku2elyt.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] > lst[i+1]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_sorted;\n  assert.deepEqual(candidate([5]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n  assert.deepEqual(candidate([1,\
    \ 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n  assert.deepEqual(candidate([1]),true);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 3, 3, 3, 4]),false);\n\
    \  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpr0_zzdtx.js:35:10)\n    at Object.<anonymous> (/tmp/tmpr0_zzdtx.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let result = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] >= lst[i + 1]){\n      \
    \      result = false;\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpna4r3r7m.js:38:10)\n    at Object.<anonymous> (/tmp/tmpna4r3r7m.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a list of numbers, return whether or not they are sorted\n// in\
    \ ascending order. If list has more than 1 duplicate of the same\n// number, return\
    \ False. Assume no negative numbers and only integers.\n// Examples\n// is_sorted([5])\
    \ \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1, 3,\
    \ 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n// is_sorted([1,\
    \ 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
    // is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1, 2, 2, 2, 3, 4])\
    \ \u279E False\nfunction is_sorted(lst){\n    let sorted = true;\n    for(let\
    \ i = 0; i < lst.length - 1; i++){\n        if(lst[i] > lst[i + 1]){\n       \
    \     sorted = false;\n        }\n    }\n    return sorted;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_sorted;\n\
    \  assert.deepEqual(candidate([5]),true);\n  assert.deepEqual(candidate([1, 2,\
    \ 3, 4, 5]),true);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4, 5, 6]),true);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 6, 7]),true);\n\
    \  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, 7]),false);\n  assert.deepEqual(candidate([]),true);\n\
    \  assert.deepEqual(candidate([1]),true);\n  assert.deepEqual(candidate([3, 2,\
    \ 1]),false);\n  assert.deepEqual(candidate([1, 2, 2, 2, 3, 4]),false);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 3, 3, 4]),false);\n  assert.deepEqual(candidate([1, 2, 2, 3, 3, 4]),true);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),true);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkonwtkuq.js:36:10)\n    at Object.<anonymous> (/tmp/tmpkonwtkuq.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
