name: HumanEval_48_is_palindrome
language: javascript
results:
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    if (text[0] ==\
    \ text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else if(text.length\
    \ == 1){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else {\n      \
    \  if (text[0] == text[text.length - 1]) {\n            return is_palindrome(text.slice(1,\
    \ text.length - 1));\n        }\n        else {\n            return false;\n \
    \       }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n\
    \  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text == text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length < 2) {\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    if (text[0] ==\
    \ text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else{\n        if\
    \ (text[0] == text[text.length-1]){\n            return is_palindrome(text.slice(1,text.length-1));\n\
    \        }\n        else{\n            return false;\n        }\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"\
    aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ != text[text.length-1]){\n        return false;\n    }\n    else{\n        return\
    \ is_palindrome(text.slice(1, text.length-1));\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else if(text.length\
    \ == 1){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text == ''){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length < 2) {\n        return true;\n    } else if (text[0] ===\
    \ text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    } else {\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0 || text.length == 1){\n        return true;\n    }\n\
    \    else if(text[0] == text[text.length-1]){\n        return is_palindrome(text.slice(1,\
    \ text.length-1));\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length === 0){\n        return true;\n    }\n    else if (text.length\
    \ === 1){\n        return true;\n    }\n    else if (text[0] === text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length < 2) {\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length <= 1){\n        return true;\n    }\n    else if(text[0] ==\
    \ text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length < 2) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else if(text.length\
    \ == 1){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else if(text.length\
    \ == 1){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    var len = text.length;\n    if (len === 0) {\n        return true;\n    }\n\
    \    if (text[0] === text[len-1]) {\n        return is_palindrome(text.slice(1,\
    \ len-1));\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0 || text.length == 1){\n        return true;\n    }\n\
    \    if(text[0] == text[text.length-1]){\n        return is_palindrome(text.slice(1,\
    \ text.length-1));\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else if(text.length\
    \ == 1){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else if(text.length\
    \ == 1){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    } else {\n        if (text[0]\
    \ == text[text.length - 1]) {\n            return is_palindrome(text.slice(1,\
    \ text.length - 1));\n        } else {\n            return false;\n        }\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n\
    \  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length < 2) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \tif (text.length == 0){\n\t\treturn true;\n\t}\n\telse if (text.length == 1){\n\
    \t\treturn true;\n\t}\n\telse if (text[0] == text[text.length-1]){\n\t\treturn\
    \ is_palindrome(text.slice(1,text.length-1));\n\t}\n\telse{\n\t\treturn false;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"\
    aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length < 2) {\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  if (text.length == 0) {\n    return true;\n  }\n  if (text[0] == text[text.length\
    \ - 1]) {\n    return is_palindrome(text.slice(1, text.length - 1));\n  }\n  return\
    \ false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n\
    \  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    var text_length = text.length;\n    var i = 0;\n    while (i < text_length){\n\
    \        if (text[i] != text[text_length - 1 - i]){\n            return false;\n\
    \        }\n        i += 1;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else\
    \ {\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else{\n        if\
    \ (text[0] == text[text.length-1]){\n            return is_palindrome(text.slice(1,text.length-1));\n\
    \        }\n        else{\n            return false;\n        }\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"\
    aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    } else if (text.length\
    \ == 1){\n        return true;\n    } else if (text[0] == text[text.length - 1]){\n\
    \        return is_palindrome(text.slice(1, text.length - 1));\n    } else {\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text == text.split('').reverse().join('')){\n        return true;\n \
    \   }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    if (text.length\
    \ == 1){\n        return true;\n    }\n    if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text == text.split('').reverse().join('')){\n        return true;\n \
    \   }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else if(text.length\
    \ == 1){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  if (text.length === 0) {\n    return true;\n  }\n  else if (text[0] === text[text.length\
    \ - 1]) {\n    return is_palindrome(text.slice(1, text.length - 1));\n  }\n  else\
    \ {\n    return false;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    var str = text.toLowerCase().replace(/[^a-z]/g, '');\n    return str ===\
    \ str.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text == text.split('').reverse().join('')){\n        return true;\n \
    \   }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] != text[text.length\
    \ - 1]){\n        return false;\n    }\n    return is_palindrome(text.slice(1,\
    \ text.length - 1));\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ != text[text.length-1]){\n        return false;\n    }\n    else{\n        return\
    \ is_palindrome(text.slice(1, text.length-1));\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    var len = text.length;\n    var mid = Math.floor(len/2);\n    for ( var i\
    \ = 0; i < mid; i++ ) {\n        if (text[i] !== text[len - 1 - i]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  if (text.length <= 1){\n    return true;\n  }\n  else if (text[0] == text[text.length-1]){\n\
    \    return is_palindrome(text.slice(1, text.length-1));\n  }\n  else{\n    return\
    \ false;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n\
    \  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text == text.split('').reverse().join('')){\n        return true;\n \
    \   }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \tif(text.length == 0){\n\t\treturn true;\n\t}\n\telse if(text.length == 1){\n\
    \t\treturn true;\n\t}\n\telse if(text[0] == text[text.length-1]){\n\t\treturn\
    \ is_palindrome(text.slice(1,text.length-1));\n\t}\n\telse{\n\t\treturn false;\n\
    \t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"\
    aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0 || text.length == 1){\n        return true;\n    }\n\
    \    if(text[0] == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length === 0) {\n        return true;\n    }\n    else if (text[0]\
    \ === text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else {\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text == ''){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text == ''){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text == text.split('').reverse().join('')){\n        return true;\n \
    \   }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ != text[text.length-1]){\n        return false;\n    }\n    else{\n        return\
    \ is_palindrome(text.slice(1,text.length-1));\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length === 0){\n        return true;\n    }\n    if (text[0] ===\
    \ text[text.length - 1]){\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text == ''){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length < 2) {\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else {\n      \
    \  if (text[0] == text[text.length - 1]) {\n            return is_palindrome(text.slice(1,\
    \ text.length - 1));\n        }\n        else {\n            return false;\n \
    \       }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n\
    \  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length === 0){\n        return true;\n    }\n    if (text[0] ===\
    \ text[text.length - 1]){\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else{\n        if(text[0]\
    \ == text[text.length-1]){\n            return is_palindrome(text.slice(1,text.length-1));\n\
    \        }\n        else{\n            return false;\n        }\n    }\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"\
    aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0 || text.length == 1){\n        return true;\n    }\n\
    \    if(text[0] != text[text.length-1]){\n        return false;\n    }\n    return\
    \ is_palindrome(text.slice(1, text.length-1));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text == text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length <= 1){\n        return true;\n    }\n    else if(text[0] ==\
    \ text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else {\n      \
    \  if (text[0] == text[text.length - 1]) {\n            return is_palindrome(text.slice(1,\
    \ text.length - 1));\n        }\n        else {\n            return false;\n \
    \       }\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n\
    \  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length === 0){\n        return true;\n    }\n    else if (text.length\
    \ === 1){\n        return true;\n    }\n    else if (text[0] === text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text == text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else if(text.length\
    \ == 1){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    var text_length = text.length;\n    var half_length = Math.floor(text_length/2);\n\
    \    var is_palindrome = true;\n    for(var i = 0; i < half_length; i++){\n  \
    \      if(text[i] != text[text_length - i - 1]){\n            is_palindrome =\
    \ false;\n            break;\n        }\n    }\n    return is_palindrome;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"\
    aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    //TODO: Implement this function\n    return false;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmp308m6k_s.js:20:10)\n    at Object.<anonymous> (/tmp/tmp308m6k_s.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else if(text.length\
    \ == 1){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text == text.split('').reverse().join('')){\n        return true;\n \
    \   }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    if (text[0] == text[text.length\
    \ - 1]){\n        return is_palindrome(text.slice(1, text.length - 1));\n    }\n\
    \    return false;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0) {\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length - 1]) {\n        return is_palindrome(text.slice(1, text.length\
    \ - 1));\n    }\n    else {\n        return false;\n    }\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length == 0){\n        return true;\n    }\n    else if (text.length\
    \ == 1){\n        return true;\n    }\n    else if (text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1, text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1,text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if (text.length <= 1){\n        return true;\n    }\n    else if (text[0]\
    \ == text[text.length-1]){\n        return is_palindrome(text.slice(1, text.length-1));\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    if(text.length == 0){\n        return true;\n    }\n    else if(text.length\
    \ == 1){\n        return true;\n    }\n    else if(text[0] == text[text.length-1]){\n\
    \        return is_palindrome(text.slice(1,text.length-1));\n    }\n    else{\n\
    \        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text == text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
