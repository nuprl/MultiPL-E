name: HumanEval_59_largest_prime_factor
language: javascript
results:
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i < n) {\n   \
    \ if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    var max = 1;\n  \
    \  while(i <= n){\n        if(n % i == 0){\n            max = i;\n           \
    \ n /= i;\n        }\n        else{\n            i++;\n        }\n    }\n    return\
    \ max;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i += 1;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i < n){\n\
    \        if (n % i == 0){\n            n = n / i;\n        }\n        else{\n\
    \            i += 1;\n        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n > 1){\n        if (n % i == 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i < n){\n\
    \        if (n % i == 0){\n            n = n / i;\n        }\n        else{\n\
    \            i++;\n        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i < n) {\n   \
    \ if (n % i === 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\t\
    if(n % i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i += 1;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i < n){\n\t\tif(n\
    \ % i == 0){\n\t\t\tn = n / i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n) {\n  \
    \  if (n % i === 0) {\n      n /= i;\n    } else {\n      i++;\n    }\n  }\n \
    \ return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\t\
    if(n % i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else {\n  \
    \          i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    // TODO: Implement this function\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\nundefined\\\
    n\\nshould loosely deep-equal\\n\\n5\\n    at test (/tmp/tmp28kuxiyj.js:15:10)\\\
    n    at Object.<anonymous> (/tmp/tmp28kuxiyj.js:22:1)\\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\\
    n    at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: undefined,\\\
    n  expected: 5,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var factors = prime_factors(n);\n \
    \ return factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: "b'/tmp/tmp0gpqmcyo.js:7\\n  var factors = prime_factors(n);\\n        \
    \        ^\\n\\nReferenceError: prime_factors is not defined\\n    at largest_prime_factor\
    \ (/tmp/tmp0gpqmcyo.js:7:17)\\n    at test (/tmp/tmp0gpqmcyo.js:16:20)\\n    at\
    \ Object.<anonymous> (/tmp/tmp0gpqmcyo.js:23:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\\\
    n\\nNode.js v18.7.0\\n'"
  exit_code: 1
  status: ReferenceError
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime_factors = [];\n    var\
    \ i = 2;\n    while (n > 1){\n        if (n % i == 0){\n            prime_factors.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return prime_factors[prime_factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            n /= i;\n        } else {\n         \
    \   i += 1;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i <= n){\n\t\t\
    if(n % i == 0){\n\t\t\tn /= i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var largest = 1;\n    for(var i =\
    \ 2; i <= n; i++){\n        if(n % i == 0){\n            largest = i;\n      \
    \      n /= i;\n            i = 1;\n        }\n    }\n    return largest;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factor = 2;\n    while (n > factor){\n\
    \        if (n % factor == 0){\n            n = n / factor;\n        }\n     \
    \   else{\n            factor++;\n        }\n    }\n    return factor;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i += 1;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var largest = 1;\n  var i = 2;\n  while\
    \ (i <= n){\n    if (n % i == 0){\n      largest = i;\n      n = n / i;\n    }\n\
    \    else{\n      i++;\n    }\n  }\n  return largest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i === 0) {\n            n /= i;\n        } else {\n         \
    \   i += 1;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n) {\n  \
    \  if (n % i == 0) {\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        } else {\n           \
    \ i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i < n){\n    if\
    \ (n % i === 0){\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\
    \  return n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factor = 2;\n    while (n > factor){\n\
    \        if (n % factor == 0){\n            n = n / factor;\n        }\n     \
    \   else{\n            factor = factor + 1;\n        }\n    }\n    return factor;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    let largest = 0;\n    for(let i =\
    \ 2; i <= n; i++){\n        if(n % i === 0){\n            largest = i;\n     \
    \       n = n / i;\n        }\n    }\n    return largest;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n9\\n\\nshould\
    \ loosely deep-equal\\n\\n3\\n    at test (/tmp/tmpur9zmgi7.js:23:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpur9zmgi7.js:29:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 9,\\n \
    \ expected: 3,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        } else {\n           \
    \ i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i < n){\n    if\
    \ (n % i === 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factor = 2;\n    while (n > factor){\n\
    \        if (n % factor == 0){\n            n = n / factor;\n        }\n     \
    \   else{\n            factor++;\n        }\n    }\n    return factor;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime_factors = [];\n    var\
    \ i = 2;\n    while (n > 1){\n        if (n % i == 0){\n            prime_factors.push(i);\n\
    \            n = n / i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return prime_factors[prime_factors.length - 1];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var prime_factors = [];\n    var\
    \ i = 2;\n    while (n > 1){\n        if (n % i == 0){\n            prime_factors.push(i);\n\
    \            n = n / i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return prime_factors[prime_factors.length - 1];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n > 1){\n        while (n % i == 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        i = i + 1;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n > 1){\n        while (n % i == 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        i++;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n > 1){\n        if (n % i == 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i < n){\n\
    \        if (n % i == 0){\n            n = n / i;\n        }\n        else{\n\
    \            i += 1;\n        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n > 1){\n        while (n % i == 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        i = i + 1;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n > 1){\n        if (n % i === 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        } else {\n           \
    \ i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n > 1){\n        if (n % i == 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i < n){\n    if\
    \ (n % i === 0){\n      n = n / i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n > 1){\n        while (n % i == 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        i++;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n > 1){\n        while (n % i == 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        i++;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i < n){\n\
    \        if (n % i == 0){\n            n = n / i;\n        }\n        else{\n\
    \            i++;\n        }\n    }\n    return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var largest_prime = 2;\n    while\
    \ (n > largest_prime){\n        if (n % largest_prime == 0){\n            n =\
    \ n / largest_prime;\n        }\n        else{\n            largest_prime++;\n\
    \        }\n    }\n    return largest_prime;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var factors = [];\n    var i = 2;\n\
    \    while (n > 1){\n        while (n % i == 0){\n            factors.push(i);\n\
    \            n = n / i;\n        }\n        i++;\n    }\n    return factors[factors.length\
    \ - 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar factors = [];\n\tfor (var i = 2;\
    \ i <= n; i++){\n\t\tif (n % i === 0){\n\t\t\tfactors.push(i);\n\t\t\tn = n /\
    \ i;\n\t\t\ti = 1;\n\t\t}\n\t}\n\treturn factors[factors.length - 1];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = largest_prime_factor;\n\
    \  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i <= n){\n   \
    \ if (n % i == 0){\n      n /= i;\n    }\n    else{\n      i++;\n    }\n  }\n\
    \  return i;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n  var i = 2;\n  while (i < n){\n    if\
    \ (n % i === 0){\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n  return\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n\tvar i = 2;\n\twhile(i < n){\n\t\tif(n\
    \ % i == 0){\n\t\t\tn = n / i;\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\treturn\
    \ n;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n  assert.deepEqual(candidate(27),3);\n\
    \  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
    \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor(n){\n    var i = 2;\n    while (i <= n){\n\
    \        if (n % i == 0){\n            n /= i;\n        }\n        else{\n   \
    \         i++;\n        }\n    }\n    return i;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
    \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n\
    \  assert.deepEqual(candidate(330),11);\n  assert.deepEqual(candidate(13195),29);\n\
    }\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
