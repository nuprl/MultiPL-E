name: HumanEval_132_is_nested
language: javascript
results:
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwgljcljo.js:32:10)\n    at Object.<anonymous> (/tmp/tmpwgljcljo.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8k52rjur.js:32:10)\n    at Object.<anonymous> (/tmp/tmp8k52rjur.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvdxs4ijr.js:31:10)\n    at Object.<anonymous> (/tmp/tmpvdxs4ijr.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplqsb0573.js:32:10)\n    at Object.<anonymous> (/tmp/tmplqsb0573.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpn1x72838.js:31:10)\n    at Object.<anonymous> (/tmp/tmpn1x72838.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    let map = {\n        ']':'[',\n\
    \    }\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ===\
    \ '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length\
    \ === 0){\n                return false;\n            }\n            if(stack[stack.length\
    \ - 1] === map[string[i]]){\n                stack.pop();\n            }else{\n\
    \                return false;\n            }\n        }\n    }\n    return stack.length\
    \ === 0;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n\
    \  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_qiih9c2.js:38:10)\n    at Object.<anonymous> (/tmp/tmp_qiih9c2.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmptdnyauaa.js:31:10)\n    at Object.<anonymous> (/tmp/tmptdnyauaa.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp48fnof6v.js:32:10)\n    at Object.<anonymous> (/tmp/tmp48fnof6v.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjrl8z61u.js:32:10)\n    at Object.<anonymous> (/tmp/tmpjrl8z61u.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpazcuhq8u.js:32:10)\n    at Object.<anonymous> (/tmp/tmpazcuhq8u.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwzjzjpsg.js:31:10)\n    at Object.<anonymous> (/tmp/tmpwzjzjpsg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp28hkay5p.js:31:10)\n    at Object.<anonymous> (/tmp/tmp28hkay5p.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_94eybgr.js:32:10)\n    at Object.<anonymous> (/tmp/tmp_94eybgr.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbc025m7d.js:32:10)\n    at Object.<anonymous> (/tmp/tmpbc025m7d.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp37h5t8yw.js:32:10)\n    at Object.<anonymous> (/tmp/tmp37h5t8yw.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === \"[\"){\n            count++;\n        }\n \
    \       if(string[i] === \"]\"){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpuvfd1h5q.js:32:10)\n    at Object.<anonymous> (/tmp/tmpuvfd1h5q.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1xch3z5a.js:32:10)\n    at Object.<anonymous> (/tmp/tmp1xch3z5a.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6358jsfi.js:32:10)\n    at Object.<anonymous> (/tmp/tmp6358jsfi.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwe7a42qy.js:32:10)\n    at Object.<anonymous> (/tmp/tmpwe7a42qy.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === \"[\"){\n            count++;\n        }\n \
    \       if(string[i] === \"]\"){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppmtfyjvw.js:32:10)\n    at Object.<anonymous> (/tmp/tmppmtfyjvw.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbp4p7500.js:32:10)\n    at Object.<anonymous> (/tmp/tmpbp4p7500.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0dth24n_.js:32:10)\n    at Object.<anonymous> (/tmp/tmp0dth24n_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpg41ejnh7.js:32:10)\n    at Object.<anonymous> (/tmp/tmpg41ejnh7.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpehn61yaq.js:31:10)\n    at Object.<anonymous> (/tmp/tmpehn61yaq.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpon68aepk.js:31:10)\n    at Object.<anonymous> (/tmp/tmpon68aepk.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpb4d4up1d.js:32:10)\n    at Object.<anonymous> (/tmp/tmpb4d4up1d.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkvsigzol.js:32:10)\n    at Object.<anonymous> (/tmp/tmpkvsigzol.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcgmomk69.js:31:10)\n    at Object.<anonymous> (/tmp/tmpcgmomk69.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp19epvhat.js:31:10)\n    at Object.<anonymous> (/tmp/tmp19epvhat.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpc5gp60i_.js:32:10)\n    at Object.<anonymous> (/tmp/tmpc5gp60i_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfe1r0fk6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpfe1r0fk6.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy4x27a4c.js:32:10)\n    at Object.<anonymous> (/tmp/tmpy4x27a4c.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpaig9mx6s.js:32:10)\n    at Object.<anonymous> (/tmp/tmpaig9mx6s.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6m2wr3b_.js:32:10)\n    at Object.<anonymous> (/tmp/tmp6m2wr3b_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgb3wwjrj.js:31:10)\n    at Object.<anonymous> (/tmp/tmpgb3wwjrj.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpchps047o.js:32:10)\n    at Object.<anonymous> (/tmp/tmpchps047o.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === \"[\"){\n            count++;\n        }\n \
    \       if(string[i] === \"]\"){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_gjc2rcl.js:32:10)\n    at Object.<anonymous> (/tmp/tmp_gjc2rcl.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3vt_c3wr.js:32:10)\n    at Object.<anonymous> (/tmp/tmp3vt_c3wr.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbf080fga.js:31:10)\n    at Object.<anonymous> (/tmp/tmpbf080fga.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmps4nnpff6.js:32:10)\n    at Object.<anonymous> (/tmp/tmps4nnpff6.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }else if(string[i] === ']'){\n            if(stack.length === 0){\n \
    \               return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmph5i92_gm.js:32:10)\n    at Object.<anonymous> (/tmp/tmph5i92_gm.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgc__98fc.js:32:10)\n    at Object.<anonymous> (/tmp/tmpgc__98fc.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpp1wrpfnp.js:32:10)\n    at Object.<anonymous> (/tmp/tmpp1wrpfnp.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpue1vqf78.js:32:10)\n    at Object.<anonymous> (/tmp/tmpue1vqf78.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy372uaew.js:32:10)\n    at Object.<anonymous> (/tmp/tmpy372uaew.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpq1j15ylo.js:39:10)\n    at Object.<anonymous> (/tmp/tmpq1j15ylo.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpm9lux1rw.js:31:10)\n    at Object.<anonymous> (/tmp/tmpm9lux1rw.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4rkxlip8.js:31:10)\n    at Object.<anonymous> (/tmp/tmp4rkxlip8.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }else if(string[i] === ']'){\n            if(stack.length === 0){\n \
    \               return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4e893nsn.js:32:10)\n    at Object.<anonymous> (/tmp/tmp4e893nsn.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjlk52vsc.js:32:10)\n    at Object.<anonymous> (/tmp/tmpjlk52vsc.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7cdo43__.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7cdo43__.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpok1qlhor.js:31:10)\n    at Object.<anonymous> (/tmp/tmpok1qlhor.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1bg8i23p.js:32:10)\n    at Object.<anonymous> (/tmp/tmp1bg8i23p.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmplj5hpkln.js:40:10)\n    at Object.<anonymous> (/tmp/tmplj5hpkln.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx1s5e8wa.js:32:10)\n    at Object.<anonymous> (/tmp/tmpx1s5e8wa.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpq3pm8vh6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpq3pm8vh6.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else if(stack[stack.length\
    \ - 1] === '['){\n                stack.pop();\n            }\n        }\n   \
    \ }\n    if(stack.length === 0){\n        return true;\n    }\n    else{\n   \
    \     return false;\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy9ozqxg6.js:39:10)\n    at Object.<anonymous> (/tmp/tmpy9ozqxg6.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let left = 0;\n    let right = 0;\n    for(let i = 0;\
    \ i < string.length; i++){\n        if(string[i] === '['){\n            left++;\n\
    \        }\n        if(string[i] === ']'){\n            right++;\n        }\n\
    \    }\n    if(left === right){\n        return false;\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmpoipveftk.js:31:10)\n    at Object.<anonymous> (/tmp/tmpoipveftk.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpnek0a2ks.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnek0a2ks.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    var count = 0;\n    for(var i = 0; i < string.length;\
    \ i++){\n        if(string[i] == \"[\"){\n            count++;\n        }\n  \
    \      if(string[i] == \"]\"){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count == 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7iai3een.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7iai3een.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }else if(string[i] === ']'){\n            if(stack.length === 0){\n \
    \               return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyx7euy4a.js:32:10)\n    at Object.<anonymous> (/tmp/tmpyx7euy4a.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmph4w_dzkj.js:32:10)\n    at Object.<anonymous> (/tmp/tmph4w_dzkj.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy3exwh36.js:32:10)\n    at Object.<anonymous> (/tmp/tmpy3exwh36.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === \"[\"){\n            count++;\n        }\n \
    \       if(string[i] === \"]\"){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp16a43bji.js:32:10)\n    at Object.<anonymous> (/tmp/tmp16a43bji.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjhcus_ne.js:32:10)\n    at Object.<anonymous> (/tmp/tmpjhcus_ne.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpb5h9w1tk.js:31:10)\n    at Object.<anonymous> (/tmp/tmpb5h9w1tk.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpt8912_n2.js:32:10)\n    at Object.<anonymous> (/tmp/tmpt8912_n2.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === \"[\"){\n            count++;\n        }\n \
    \       if(string[i] === \"]\"){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp43tpyxsh.js:32:10)\n    at Object.<anonymous> (/tmp/tmp43tpyxsh.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp9zvm6opq.js:32:10)\n    at Object.<anonymous> (/tmp/tmp9zvm6opq.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvunvn8bw.js:32:10)\n    at Object.<anonymous> (/tmp/tmpvunvn8bw.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1h7z_ctp.js:32:10)\n    at Object.<anonymous> (/tmp/tmp1h7z_ctp.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyoi4__vg.js:32:10)\n    at Object.<anonymous> (/tmp/tmpyoi4__vg.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpc2u08cvj.js:32:10)\n    at Object.<anonymous> (/tmp/tmpc2u08cvj.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpehqzosiz.js:32:10)\n    at Object.<anonymous> (/tmp/tmpehqzosiz.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_i5w_ipq.js:31:10)\n    at Object.<anonymous> (/tmp/tmp_i5w_ipq.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpt5exi0ho.js:32:10)\n    at Object.<anonymous> (/tmp/tmpt5exi0ho.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp01f3vcds.js:32:10)\n    at Object.<anonymous> (/tmp/tmp01f3vcds.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp23ith6vn.js:31:10)\n    at Object.<anonymous> (/tmp/tmp23ith6vn.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7ap23wyd.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7ap23wyd.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpcfcky0qt.js:32:10)\n    at Object.<anonymous> (/tmp/tmpcfcky0qt.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }else if(string[i] === ']'){\n            if(stack.length === 0){\n \
    \               return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprdzbdh5i.js:33:10)\n    at Object.<anonymous> (/tmp/tmprdzbdh5i.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4kyad4sb.js:33:10)\n    at Object.<anonymous> (/tmp/tmp4kyad4sb.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3cgn6fpe.js:32:10)\n    at Object.<anonymous> (/tmp/tmp3cgn6fpe.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpao3kccn0.js:31:10)\n    at Object.<anonymous> (/tmp/tmpao3kccn0.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp37c0lq5j.js:31:10)\n    at Object.<anonymous> (/tmp/tmp37c0lq5j.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpg733pc4r.js:32:10)\n    at Object.<anonymous> (/tmp/tmpg733pc4r.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3_ocx_ur.js:32:10)\n    at Object.<anonymous> (/tmp/tmp3_ocx_ur.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpdmyo6ltl.js:32:10)\n    at Object.<anonymous> (/tmp/tmpdmyo6ltl.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxisdb3u9.js:39:10)\n    at Object.<anonymous> (/tmp/tmpxisdb3u9.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxdoav8h5.js:31:10)\n    at Object.<anonymous> (/tmp/tmpxdoav8h5.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpiwgwqphs.js:32:10)\n    at Object.<anonymous> (/tmp/tmpiwgwqphs.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpx5mf75w1.js:32:10)\n    at Object.<anonymous> (/tmp/tmpx5mf75w1.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmptcjax3tj.js:32:10)\n    at Object.<anonymous> (/tmp/tmptcjax3tj.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpfe6esoxu.js:32:10)\n    at Object.<anonymous> (/tmp/tmpfe6esoxu.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpote398wf.js:32:10)\n    at Object.<anonymous> (/tmp/tmpote398wf.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp54drp8t3.js:31:10)\n    at Object.<anonymous> (/tmp/tmp54drp8t3.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqnr2pm2f.js:31:10)\n    at Object.<anonymous> (/tmp/tmpqnr2pm2f.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp04809pzu.js:32:10)\n    at Object.<anonymous> (/tmp/tmp04809pzu.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmph_p52g91.js:39:10)\n    at Object.<anonymous> (/tmp/tmph_p52g91.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_n_txb1_.js:33:10)\n    at Object.<anonymous> (/tmp/tmp_n_txb1_.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv35e4_7g.js:32:10)\n    at Object.<anonymous> (/tmp/tmpv35e4_7g.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv17w6emc.js:31:10)\n    at Object.<anonymous> (/tmp/tmpv17w6emc.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpsaqealm_.js:32:10)\n    at Object.<anonymous> (/tmp/tmpsaqealm_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpurs6tjoo.js:31:10)\n    at Object.<anonymous> (/tmp/tmpurs6tjoo.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyhvo297v.js:39:10)\n    at Object.<anonymous> (/tmp/tmpyhvo297v.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmprvfshpry.js:31:10)\n    at Object.<anonymous> (/tmp/tmprvfshpry.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4o3f3ulz.js:39:10)\n    at Object.<anonymous> (/tmp/tmp4o3f3ulz.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi0e915ys.js:31:10)\n    at Object.<anonymous> (/tmp/tmpi0e915ys.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpclpvqh3f.js:32:10)\n    at Object.<anonymous> (/tmp/tmpclpvqh3f.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpot9cnvjo.js:31:10)\n    at Object.<anonymous> (/tmp/tmpot9cnvjo.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let counter = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            counter++;\n        }else\
    \ if(string[i] === ']'){\n            counter--;\n        }\n        if(counter\
    \ < 0){\n            return false;\n        }\n    }\n    return counter === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8nk0crso.js:31:10)\n    at Object.<anonymous> (/tmp/tmp8nk0crso.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzpyz0fkw.js:32:10)\n    at Object.<anonymous> (/tmp/tmpzpyz0fkw.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === \"[\"){\n            count++;\n        }\n \
    \       if(string[i] === \"]\"){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmqvsuh3b.js:32:10)\n    at Object.<anonymous> (/tmp/tmpmqvsuh3b.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2t_ogj7z.js:32:10)\n    at Object.<anonymous> (/tmp/tmp2t_ogj7z.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi0476ffy.js:32:10)\n    at Object.<anonymous> (/tmp/tmpi0476ffy.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpj0vw8_jo.js:32:10)\n    at Object.<anonymous> (/tmp/tmpj0vw8_jo.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp83qyo3d9.js:32:10)\n    at Object.<anonymous> (/tmp/tmp83qyo3d9.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmph_hbyuvg.js:32:10)\n    at Object.<anonymous> (/tmp/tmph_hbyuvg.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }else if(string[i] === ']'){\n            if(stack.length === 0){\n \
    \               return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpn6yh5gkk.js:32:10)\n    at Object.<anonymous> (/tmp/tmpn6yh5gkk.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo_e5fhfk.js:31:10)\n    at Object.<anonymous> (/tmp/tmpo_e5fhfk.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else{\n            if(stack.length === 0){\n             \
    \   return false;\n            }\n            else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpy_2vyhg1.js:34:10)\n    at Object.<anonymous> (/tmp/tmpy_2vyhg1.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let arr = string.split('')\n    let count = 0\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] === '['){\n            count++\n\
    \        }\n        if(arr[i] === ']'){\n            count--\n        }\n    \
    \    if(count < 0){\n            return false\n        }\n    }\n    return count\
    \ === 0\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpq8zvs2x1.js:33:10)\n    at Object.<anonymous> (/tmp/tmpq8zvs2x1.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpnbfkzj5b.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnbfkzj5b.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp798v84k8.js:32:10)\n    at Object.<anonymous> (/tmp/tmp798v84k8.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpk_yoclrn.js:39:10)\n    at Object.<anonymous> (/tmp/tmpk_yoclrn.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7pm33izj.js:39:10)\n    at Object.<anonymous> (/tmp/tmp7pm33izj.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxj0atqno.js:31:10)\n    at Object.<anonymous> (/tmp/tmpxj0atqno.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgzfjorj6.js:31:10)\n    at Object.<anonymous> (/tmp/tmpgzfjorj6.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpjdd_x61x.js:32:10)\n    at Object.<anonymous> (/tmp/tmpjdd_x61x.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let arr = string.split('');\n    let count = 0;\n  \
    \  for(let i = 0; i < arr.length; i++){\n        if(arr[i] === '['){\n       \
    \     count++;\n        }else if(arr[i] === ']'){\n            count--;\n    \
    \    }\n        if(count < 0){\n            return false;\n        }\n    }\n\
    \    return count === 0;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
    ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmptyrhxvwi.js:32:10)\n    at Object.<anonymous> (/tmp/tmptyrhxvwi.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6wfi3i3i.js:32:10)\n    at Object.<anonymous> (/tmp/tmp6wfi3i3i.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpf1et6fxk.js:32:10)\n    at Object.<anonymous> (/tmp/tmpf1et6fxk.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let left = 0;\n    let right = 0;\n    for(let i = 0;\
    \ i < string.length; i++){\n        if(string[i] === '['){\n            left++;\n\
    \        }\n        if(string[i] === ']'){\n            right++;\n        }\n\
    \    }\n    if(left === right){\n        return false;\n    }\n    return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nfalse\n\nshould equal\n\ntrue\n    at test\
    \ (/tmp/tmphvso_ka7.js:31:10)\n    at Object.<anonymous> (/tmp/tmphvso_ka7.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: false,\n  expected: true,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpd8ye3ytc.js:31:10)\n    at Object.<anonymous> (/tmp/tmpd8ye3ytc.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }else if(string[i] === ']'){\n            if(stack.length === 0){\n \
    \               return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp53stn72z.js:32:10)\n    at Object.<anonymous> (/tmp/tmp53stn72z.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let counter = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            counter++;\n        }\n \
    \       if(string[i] === ']'){\n            counter--;\n        }\n        if(counter\
    \ < 0){\n            return false;\n        }\n    }\n    return counter === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp7fh_jvs_.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7fh_jvs_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp78qsth1a.js:32:10)\n    at Object.<anonymous> (/tmp/tmp78qsth1a.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpt7cif4m5.js:39:10)\n    at Object.<anonymous> (/tmp/tmpt7cif4m5.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp17ostmdy.js:31:10)\n    at Object.<anonymous> (/tmp/tmp17ostmdy.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxy_k97fs.js:31:10)\n    at Object.<anonymous> (/tmp/tmpxy_k97fs.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }else if(string[i] === ']'){\n            if(stack.length === 0){\n \
    \               return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpg314cb8c.js:32:10)\n    at Object.<anonymous> (/tmp/tmpg314cb8c.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqlgbslgg.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqlgbslgg.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpi0kf7zdq.js:31:10)\n    at Object.<anonymous> (/tmp/tmpi0kf7zdq.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp5663yphz.js:39:10)\n    at Object.<anonymous> (/tmp/tmp5663yphz.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp1ayfw54c.js:32:10)\n    at Object.<anonymous> (/tmp/tmp1ayfw54c.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzyvq02g5.js:32:10)\n    at Object.<anonymous> (/tmp/tmpzyvq02g5.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpg3sg84kt.js:31:10)\n    at Object.<anonymous> (/tmp/tmpg3sg84kt.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8nv8jzg9.js:31:10)\n    at Object.<anonymous> (/tmp/tmp8nv8jzg9.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpa9s7414y.js:32:10)\n    at Object.<anonymous> (/tmp/tmpa9s7414y.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }else if(string[i] === ']'){\n            if(stack.length === 0){\n \
    \               return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppirgdp4n.js:32:10)\n    at Object.<anonymous> (/tmp/tmppirgdp4n.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4heslo2g.js:32:10)\n    at Object.<anonymous> (/tmp/tmp4heslo2g.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp48wml2kj.js:32:10)\n    at Object.<anonymous> (/tmp/tmp48wml2kj.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_b7nxh9p.js:32:10)\n    at Object.<anonymous> (/tmp/tmp_b7nxh9p.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpocn8k9lq.js:39:10)\n    at Object.<anonymous> (/tmp/tmpocn8k9lq.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let arr = string.split('');\n    let count = 0;\n  \
    \  for(let i = 0; i < arr.length; i++){\n        if(arr[i] === '['){\n       \
    \     count++;\n        }\n        if(arr[i] === ']'){\n            count--;\n\
    \        }\n        if(count < 0){\n            return false;\n        }\n   \
    \ }\n    return count === 0;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp_bjmaab0.js:33:10)\n    at Object.<anonymous> (/tmp/tmp_bjmaab0.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3k5ob4z6.js:32:10)\n    at Object.<anonymous> (/tmp/tmp3k5ob4z6.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4if4fifm.js:32:10)\n    at Object.<anonymous> (/tmp/tmp4if4fifm.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpnlvyp2y3.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnlvyp2y3.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpaxnll__x.js:31:10)\n    at Object.<anonymous> (/tmp/tmpaxnll__x.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp9wd7t5cr.js:32:10)\n    at Object.<anonymous> (/tmp/tmp9wd7t5cr.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp52kf69vg.js:31:10)\n    at Object.<anonymous> (/tmp/tmp52kf69vg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpt_iuesn1.js:31:10)\n    at Object.<anonymous> (/tmp/tmpt_iuesn1.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpnnc8hilj.js:32:10)\n    at Object.<anonymous> (/tmp/tmpnnc8hilj.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmptlii07cc.js:32:10)\n    at Object.<anonymous> (/tmp/tmptlii07cc.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmph41nzkgh.js:32:10)\n    at Object.<anonymous> (/tmp/tmph41nzkgh.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkdorihws.js:32:10)\n    at Object.<anonymous> (/tmp/tmpkdorihws.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp37mpbsud.js:32:10)\n    at Object.<anonymous> (/tmp/tmp37mpbsud.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpahu0tuwe.js:32:10)\n    at Object.<anonymous> (/tmp/tmpahu0tuwe.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let arr = string.split('');\n    let count = 0;\n  \
    \  for(let i = 0; i < arr.length; i++){\n        if(arr[i] === '['){\n       \
    \     count++;\n        }\n        if(arr[i] === ']'){\n            count--;\n\
    \        }\n        if(count < 0){\n            return false;\n        }\n   \
    \ }\n    return count === 0;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"\
    [[]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
    [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
    [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
    []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
    [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
    [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp20m_y32v.js:33:10)\n    at Object.<anonymous> (/tmp/tmp20m_y32v.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqe5cx6st.js:31:10)\n    at Object.<anonymous> (/tmp/tmpqe5cx6st.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkmosvsgm.js:32:10)\n    at Object.<anonymous> (/tmp/tmpkmosvsgm.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpk8957am0.js:32:10)\n    at Object.<anonymous> (/tmp/tmpk8957am0.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp79uwnq44.js:32:10)\n    at Object.<anonymous> (/tmp/tmp79uwnq44.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8psc2amn.js:32:10)\n    at Object.<anonymous> (/tmp/tmp8psc2amn.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwk6t1diu.js:32:10)\n    at Object.<anonymous> (/tmp/tmpwk6t1diu.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmd42n3ax.js:32:10)\n    at Object.<anonymous> (/tmp/tmpmd42n3ax.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp4g9hejyo.js:32:10)\n    at Object.<anonymous> (/tmp/tmp4g9hejyo.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count += 1;\n        }else\
    \ if(string[i] === ']'){\n            count -= 1;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxc2r3w9p.js:31:10)\n    at Object.<anonymous> (/tmp/tmpxc2r3w9p.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpei336izu.js:32:10)\n    at Object.<anonymous> (/tmp/tmpei336izu.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2kggpij8.js:32:10)\n    at Object.<anonymous> (/tmp/tmp2kggpij8.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }else if(string[i] === ']'){\n            if(stack.length === 0){\n \
    \               return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqij_s_r_.js:32:10)\n    at Object.<anonymous> (/tmp/tmpqij_s_r_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpko_k1ya_.js:32:10)\n    at Object.<anonymous> (/tmp/tmpko_k1ya_.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzcr0h01i.js:31:10)\n    at Object.<anonymous> (/tmp/tmpzcr0h01i.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphlcd5a9u.js:31:10)\n    at Object.<anonymous> (/tmp/tmphlcd5a9u.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpf_s50xph.js:32:10)\n    at Object.<anonymous> (/tmp/tmpf_s50xph.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp8flw479a.js:32:10)\n    at Object.<anonymous> (/tmp/tmp8flw479a.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpteqwuhnc.js:32:10)\n    at Object.<anonymous> (/tmp/tmpteqwuhnc.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp0brziwk6.js:32:10)\n    at Object.<anonymous> (/tmp/tmp0brziwk6.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpffe3h_4j.js:39:10)\n    at Object.<anonymous> (/tmp/tmpffe3h_4j.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpiu_8j7z5.js:31:10)\n    at Object.<anonymous> (/tmp/tmpiu_8j7z5.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmphbkghaji.js:32:10)\n    at Object.<anonymous> (/tmp/tmphbkghaji.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpporbhm_g.js:32:10)\n    at Object.<anonymous> (/tmp/tmpporbhm_g.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpf4k9n_ta.js:32:10)\n    at Object.<anonymous> (/tmp/tmpf4k9n_ta.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']'){\n            if(stack.length ===\
    \ 0){\n                return false;\n            }\n            else{\n     \
    \           stack.pop();\n            }\n        }\n    }\n    if(stack.length\
    \ === 0){\n        return true;\n    }\n    else{\n        return false;\n   \
    \ }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgm2uujj9.js:39:10)\n    at Object.<anonymous> (/tmp/tmpgm2uujj9.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbcez72d5.js:32:10)\n    at Object.<anonymous> (/tmp/tmpbcez72d5.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6axk1b43.js:32:10)\n    at Object.<anonymous> (/tmp/tmp6axk1b43.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzbr4ajfl.js:32:10)\n    at Object.<anonymous> (/tmp/tmpzbr4ajfl.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }else if(string[i]\
    \ === ']'){\n            count--;\n        }\n        if(count < 0){\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvb8sjuul.js:31:10)\n    at Object.<anonymous> (/tmp/tmpvb8sjuul.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let count = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            count++;\n        }\n   \
    \     if(string[i] === ']'){\n            count--;\n        }\n        if(count\
    \ < 0){\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpr71boht7.js:32:10)\n    at Object.<anonymous> (/tmp/tmpr71boht7.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a string as input which contains only square\
    \ brackets.\n// The function should return True if and only if there is a valid\
    \ subsequence of brackets \n// where at least one bracket in the subsequence is\
    \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
    \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n\
    // is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
    \ is_nested(string){\n    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            stack.push(string[i]);\n\
    \        }\n        else{\n            if(stack.length === 0){\n             \
    \   return false;\n            }\n            else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_nested;\n\
    \  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
    []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
    []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
    [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
    [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
    \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
    ]]]]]]]]\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpipkv2heu.js:34:10)\n    at Object.<anonymous> (/tmp/tmpipkv2heu.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
