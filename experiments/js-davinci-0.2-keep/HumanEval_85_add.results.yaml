name: HumanEval_85_add
language: javascript
results:
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    return lst.filter((e,i)=>i%2!=0).reduce((a,b)=>a+b)\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n134\n\nshould equal\n\n122\n    at test\
    \ (/tmp/tmp8c4jpazd.js:14:10)\n    at Object.<anonymous> (/tmp/tmp8c4jpazd.js:19:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected: 122,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 == 1 &&\
    \ lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 != 0 &&\
    \ lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 != 0 &&\
    \ lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    return lst.filter((e,i)=>i%2!=0).reduce((a,b)=>a+b)\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n134\n\nshould equal\n\n122\n    at test\
    \ (/tmp/tmpjq00nag1.js:14:10)\n    at Object.<anonymous> (/tmp/tmpjq00nag1.js:19:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected: 122,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 != 0 &&\
    \ lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ == 1 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    return lst.filter((e, i) => i % 2 != 0 && e % 2 == 0).reduce((a, b) => a\
    \ + b, 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2\
    \ != 0 && lst[i] % 2 == 0){\n            sum += lst[i];\n        }\n    }\n  \
    \  return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 === 1 &&\
    \ lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2\
    \ !== 0 && lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst){\n\
    \  var sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 != 0 &&\
    \ lst[i] % 2 == 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
