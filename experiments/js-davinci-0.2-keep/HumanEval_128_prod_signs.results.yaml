name: HumanEval_128_prod_signs
language: javascript
results:
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let prod = 1;\n    let sum = 0;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod *= -1;\n\
    \        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return prod * sum;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n\
    \            prod *= -1;\n        }\n    }\n    return sum * prod;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpm8d1ba62.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpm8d1ba62.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpqva9udk4.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpqva9udk4.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n          \
    \  prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *= 1;\n\
    \        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var product = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            product *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            product *= -1;\n       \
    \ }\n        else{\n            product *= 0;\n        }\n    }\n    return sum\
    \ * product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }else if(arr[i] < 0){\n  \
    \          sum += -arr[i];\n            prod *= -1;\n        }else{\n        \
    \    prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] != 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmppgqep87r.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmppgqep87r.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var product = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            product *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            product *= -1;\n       \
    \ }\n        else{\n            product *= 0;\n        }\n    }\n    return sum\
    \ * product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        }\n        else if (arr[i] < 0) {\n         \
    \   sum += arr[i] * -1;\n            prod *= -1;\n        }\n        else {\n\
    \            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n          \
    \  prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *= 1;\n\
    \        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        }\n        else if (arr[i] < 0) {\n         \
    \   sum += arr[i] * -1;\n            prod *= -1;\n        }\n        else {\n\
    \            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpcmlgtz4_.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpcmlgtz4_.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ Math.abs(arr[i]);\n            prod *= -1;\n        } else {\n            prod\
    \ *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmptb_ikpko.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmptb_ikpko.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += -arr[i];\n            prod *= -1;\n        } else {\n\
    \            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] == 0) continue;\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp5nnlmpx9.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp5nnlmpx9.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n          \
    \  prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *= 1;\n\
    \        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var prod = 1;\n    var sum = 0;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  prod *= 1;\n        }\n        else if(arr[i] < 0){\n            prod *= -1;\n\
    \        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return prod * sum;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] != 0) prod *= arr[i] / Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp5z2ia_w8.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp5z2ia_w8.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] == 0) continue;\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpoq44w_af.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpoq44w_af.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *=\
    \ 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n         \
    \   prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *=\
    \ 1;\n        }\n        else{\n            prod *= 0;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n          \
    \  prod *= -1;\n        }\n        if(arr[i] != 0){\n            sum += Math.abs(arr[i]);\n\
    \        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmphjcshppo.js:32:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmphjcshppo.js:41:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] !== 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpanr5ygpj.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpanr5ygpj.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp7g3dfiwa.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp7g3dfiwa.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpvqe1blg9.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpvqe1blg9.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n       \
    \     continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *=\
    \ Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp4ynpmjmf.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp4ynpmjmf.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpk_sa3ltl.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpk_sa3ltl.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *=\
    \ 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *=\
    \ 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] < 0) prod *= -1;\n        else if\
    \ (arr[i] > 0) prod *= 1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    var sum\
    \ = 0;\n    var prod = 1;\n    if (arr.length == 0){\n        return null;\n \
    \   }\n    for (var i = 0; i < arr.length; i++){\n        if (arr[i] > 0){\n \
    \           sum += arr[i];\n            prod *= 1;\n        }\n        else if\
    \ (arr[i] < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n  \
    \      }\n        else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n       \
    \ }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0){\n            sum += arr[i];\n\
    \            prod *= 1;\n        }\n        else if (arr[i] < 0){\n          \
    \  sum += Math.abs(arr[i]);\n            prod *= -1;\n        }\n        else\
    \ if (arr[i] === 0){\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return null;\n    }\n    return arr.reduce((acc, cur) => acc\
    \ * Math.abs(cur), 1) * arr.reduce((acc, cur) => acc * Math.sign(cur), 1);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n-16\\n\\nshould\
    \ loosely deep-equal\\n\\n-9\\n    at test (/tmp/tmpjmysj8ne.js:21:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpjmysj8ne.js:31:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: -16,\\\
    n  expected: -9,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var prod = 1;\n    var sum = 0;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == 0) {\n    \
    \        continue;\n        }\n        prod *= Math.sign(arr[i]);\n        sum\
    \ += Math.abs(arr[i]);\n    }\n    return prod * sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpohx741xu.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpohx741xu.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpbabq75k8.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpbabq75k8.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] != 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp4h3fp2_n.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp4h3fp2_n.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] > 0) prod *= 1;\n       \
    \ else if (arr[i] < 0) prod *= -1;\n        else prod *= 0;\n    }\n    return\
    \ sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] === 0) continue;\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpiyywfnbi.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpiyywfnbi.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] < 0) prod *= -1;\n        else if\
    \ (arr[i] === 0) prod *= 0;\n        sum += Math.abs(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] < 0) prod *= -1;\n        if (arr[i]\
    \ !== 0) sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpyue4ucu3.js:26:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpyue4ucu3.js:35:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] != 0) prod *= arr[i] / Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp8x_o5uwv.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp8x_o5uwv.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n       \
    \ }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] < 0) prod *= -1;\n        if (arr[i]\
    \ !== 0) sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp89dyk_dn.js:26:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp89dyk_dn.js:35:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n         \
    \   prod *= -1;\n        }\n        else if(arr[i] === 0){\n            prod *=\
    \ 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n          \
    \  prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *= 1;\n\
    \        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] < 0) prod *= -1;\n        else if\
    \ (arr[i] > 0) prod *= 1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            sum += 0;\n            prod *= 0;\n        }\n   \
    \ }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *=\
    \ 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n       \
    \ }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n       \
    \ }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] != 0){\n         \
    \   sum += Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n       \
    \ }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpfr78y3eh.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpfr78y3eh.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *=\
    \ 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpfmoxqbc_.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpfmoxqbc_.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        }\n        else if (arr[i] < 0) {\n         \
    \   sum += -arr[i];\n            prod *= -1;\n        }\n        else {\n    \
    \        prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *=\
    \ 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] != 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpouio2s4k.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpouio2s4k.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        }\n        else if (arr[i] < 0) {\n         \
    \   sum += arr[i] * -1;\n            prod *= -1;\n        }\n        else {\n\
    \            sum += 0;\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] == 0) continue;\n        sum += Math.abs(arr[i]);\n\
    \        prod *= arr[i] > 0 ? 1 : -1;\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpb29cu79r.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpb29cu79r.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] === 0) {\n   \
    \         continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= arr[i] / Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpen8g7ku8.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpen8g7ku8.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n         \
    \   prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *=\
    \ 1;\n        }\n        else{\n            prod *= 0;\n        }\n        sum\
    \ += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] != 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp1wotv5c8.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp1wotv5c8.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == 0) {\n    \
    \        continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= arr[i] / Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp2dxbuhvx.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp2dxbuhvx.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n     \
    \   }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum\
    \ * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }else if(arr[i] < 0){\n   \
    \         sum += arr[i] * -1;\n            prod *= -1;\n        }else{\n     \
    \       prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n       \
    \ }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n          \
    \  prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *= 1;\n\
    \        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] != 0){\n         \
    \   sum += Math.abs(arr[i]);\n            prod *= arr[i]/Math.abs(arr[i]);\n \
    \       }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpphymqlt2.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpphymqlt2.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        if (arr[i]\
    \ != 0) prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpqgofk6lc.js:26:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpqgofk6lc.js:35:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] === 0){\n       \
    \     continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *=\
    \ Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpvrkvuk9p.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpvrkvuk9p.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n          \
    \  prod *= -1;\n        }\n        if(arr[i] == 0){\n            prod *= 0;\n\
    \        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp0vuktyts.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp0vuktyts.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] != 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpn4ar0zhb.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpn4ar0zhb.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n          \
    \  prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *= 1;\n\
    \        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n          \
    \  prod *= -1;\n        }\n        else if(arr[i] == 0){\n            prod *=\
    \ 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n       \
    \ }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var product = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            product *= 1;\n        } else if (arr[i] <\
    \ 0) {\n            sum += arr[i] * -1;\n            product *= -1;\n        }\
    \ else {\n            product *= 0;\n        }\n    }\n    return sum * product;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n        } else if (arr[i] < 0) {\n            sum += Math.abs(arr[i]);\n\
    \            prod *= -1;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpo3gq8ptn.js:32:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpo3gq8ptn.js:41:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] != 0) prod *= arr[i]/Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp9v70dzju.js:26:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp9v70dzju.js:35:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] < 0) {\n     \
    \       prod *= -1;\n        } else if (arr[i] > 0) {\n            prod *= 1;\n\
    \        } else {\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += Math.abs(arr[i]);\n            prod *= -1;\n       \
    \ }\n        else{\n            prod *= 0;\n        }\n    }\n    return sum *\
    \ prod;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] != 0){\n         \
    \   sum += Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n       \
    \ }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp7d6ct7bv.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp7d6ct7bv.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var product = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n         \
    \   product *= -1;\n        }\n        if(arr[i] == 0){\n            product *=\
    \ 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *=\
    \ 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] != 0){\n         \
    \   sum += Math.abs(arr[i]);\n            prod *= Math.sign(arr[i]);\n       \
    \ }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmp61gs_v69.js:30:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmp61gs_v69.js:39:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ === 0) {\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n        else prod *= 0;\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    let sum = 0;\n    let product = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            product *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            product *= -1;\n       \
    \ }\n        else{\n            product *= 0;\n        }\n    }\n    return sum\
    \ * product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n \
    \       prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n         \
    \   prod *= -1;\n        }\n        else if(arr[i] === 0){\n            prod *=\
    \ 0;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n         \
    \   prod *= -1;\n        }else if(arr[i] === 0){\n            prod *= 0;\n   \
    \     }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpbmfjhpnt.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpbmfjhpnt.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpjmb11f8u.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpjmb11f8u.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var product = 1;\n    var sum = 0;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n         \
    \   product *= -1;\n        }\n        else if(arr[i] > 0){\n            product\
    \ *= 1;\n        }\n        else{\n            product *= 0;\n        }\n    \
    \    sum += Math.abs(arr[i]);\n    }\n    return sum * product;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ === 0){\n        return null;\n    }\n    let sum = 0;\n    let prod = 1;\n\
    \    for(let i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n         \
    \   sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n\
    \        else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        }\n        else if (arr[i] < 0) {\n         \
    \   sum += arr[i] * -1;\n            prod *= -1;\n        }\n        else {\n\
    \            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] == 0) {\n    \
    \        continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod\
    \ *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpb4nkxwi4.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpb4nkxwi4.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) {\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n\
    \    for (var i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n     \
    \       sum += arr[i];\n            prod *= 1;\n        } else if (arr[i] < 0)\
    \ {\n            sum += arr[i] * -1;\n            prod *= -1;\n        } else\
    \ {\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    var sum = 0;\n    var prod = 1;\n    for (var i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) {\n            sum += arr[i];\n\
    \            prod *= 1;\n        } else if (arr[i] < 0) {\n            sum +=\
    \ arr[i] * -1;\n            prod *= -1;\n        } else {\n            prod *=\
    \ 0;\n        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 0){\n         \
    \   continue;\n        }\n        sum += Math.abs(arr[i]);\n        prod *= arr[i]\
    \ / Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpbsrqox4i.js:31:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpbsrqox4i.js:40:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] < 0){\n          \
    \  prod *= -1;\n        }\n        else if(arr[i] > 0){\n            prod *= 1;\n\
    \        }\n        else{\n            prod *= 0;\n        }\n        sum += Math.abs(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] < 0) prod *= -1;\n        if (arr[i]\
    \ != 0) sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpxv951t_8.js:26:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpxv951t_8.js:35:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            prod *= 0;\n        }\n    }\n    return sum * prod;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if (arr.length\
    \ == 0) return null;\n    let sum = 0;\n    let prod = 1;\n    for (let i = 0;\
    \ i < arr.length; i++){\n        if (arr[i] > 0) sum += arr[i];\n        else\
    \ if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] != 0) prod *= Math.sign(arr[i]);\n\
    \    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: "b\"node:assert:124\\n  throw new AssertionError(obj);\\n  ^\\n\\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\\n\\n1\\n\\nshould\
    \ loosely deep-equal\\n\\n0\\n    at test (/tmp/tmpja3euajn.js:27:10)\\n    at\
    \ Object.<anonymous> (/tmp/tmpja3euajn.js:36:1)\\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\\\
    n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\\n \
    \   at Module.load (node:internal/modules/cjs/loader:998:32)\\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\\n    at node:internal/main/run_main_module:17:47\
    \ {\\n  generatedMessage: true,\\n  code: 'ERR_ASSERTION',\\n  actual: 1,\\n \
    \ expected: 0,\\n  operator: 'deepEqual'\\n}\\n\\nNode.js v18.7.0\\n\""
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return None for empty arr.\n\
    // Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0, 1])\
    \ == 0\n// >>> prod_signs([]) == None\nfunction prod_signs(arr){\n    if(arr.length\
    \ == 0){\n        return null;\n    }\n    var sum = 0;\n    var prod = 1;\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] > 0){\n          \
    \  sum += arr[i];\n            prod *= 1;\n        }\n        else if(arr[i] <\
    \ 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }\n \
    \       else{\n            sum += 0;\n            prod *= 0;\n        }\n    }\n\
    \    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
